#!/usr/bin/env node
"use strict";var w=Object.create;var l=Object.defineProperty;var y=Object.getOwnPropertyDescriptor;var h=Object.getOwnPropertyNames;var b=Object.getPrototypeOf,_=Object.prototype.hasOwnProperty;var D=(e,r,o,n)=>{if(r&&typeof r=="object"||typeof r=="function")for(let t of h(r))!_.call(e,t)&&t!==o&&l(e,t,{get:()=>r[t],enumerable:!(n=y(r,t))||n.enumerable});return e};var s=(e,r,o)=>(o=e!=null?w(b(e)):{},D(r||!e||!e.__esModule?l(o,"default",{value:e,enumerable:!0}):o,e));var c=s(require("node:child_process"),1),m=s(require("node:fs"),1),p=s(require("node:path"),1),a=s(require("node:process"),1),i=s(require("chalk"),1),f=s(require("toml"),1),d=require("yargs/helpers"),g=s(require("yargs/yargs"),1),$=async(e,r,o,n)=>{console.info(i.default.blue(`Preparing to setup D1 Database: ${e}`)),console.log(r);let t=`drizzle-kit generate:sqlite --schema=${r} --out=${o}`;c.default.execSync(t,{stdio:"inherit",encoding:"utf8"});let u=`NO_D1_WARNING=true wrangler d1 migrations apply ${e} --local --persist-to=${n}`;c.default.execSync(u,{stdio:"inherit",encoding:"utf8"}),console.info(i.default.blue(`Completed setup of D1 Database: ${e}`))},k=async e=>{console.info(i.default.blue(`Preparing to setup KV: ${e}`))},v=async e=>{console.info(i.default.blue(`Preparing to setup R2: ${e}`))},O=(0,g.default)((0,d.hideBin)(a.default.argv)).scriptName("cf-setup").options({"wrangler-file":{description:"Path to custom wrangler TOML file.",alias:["w"],default:p.default.join(a.default.cwd(),"wrangler.toml"),demandOption:!0,type:"string"}}).command("prepare","Prepare local Cloudflare assets.",e=>e.options({schemaDir:{alias:"s",description:"Directory to source schemas from.",demandOption:!0,requiresArg:!0,type:"string",normalize:!0},persistTo:{description:"Directory for wrangler state.",default:p.default.join(a.default.cwd(),".wrangler/"),requiresArg:!0,type:"string",normalize:!0}}),async e=>{let r=f.default.parse(m.default.readFileSync(e.wranglerFile,"utf-8"));if("d1_databases"in r)for(let o of r.d1_databases){let n=typeof o.migrations_dir>"u"?"migrations/":o.migrations_dir;await $(o.binding,e.schemaDir,n,e.persistTo)}if("kv_namespaces"in r)for(let o of r.kv_namespaces)await k(o.binding);if("r2_namespaces"in r)for(let o of r.r2_namespaces)await v(o.binding)}).wrap(120).version("1.0.0").showHelpOnFail(!1).help();(async()=>(console.info(i.default.yellow(`Running from: ${a.default.cwd()}`)),await O.parse()))();
