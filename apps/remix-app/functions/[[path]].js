var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
var __esm = (fn, res) => function() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __commonJS = (cb, mod2) => function() {
  return mod2 || (0, cb[__getOwnPropNames(cb)[0]])((mod2 = { exports: {} }).exports, mod2), mod2.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toESM = (mod2, isNodeMode, target) => (target = mod2 != null ? __create(__getProtoOf(mod2)) : {}, __copyProps(
  isNodeMode || !mod2 || !mod2.__esModule ? __defProp(target, "default", { value: mod2, enumerable: !0 }) : target,
  mod2
)), __toCommonJS = (mod2) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod2);

// ../../node_modules/.pnpm/cookie@0.4.2/node_modules/cookie/index.js
var require_cookie = __commonJS({
  "../../node_modules/.pnpm/cookie@0.4.2/node_modules/cookie/index.js"(exports) {
    "use strict";
    exports.parse = parse3;
    exports.serialize = serialize3;
    var decode = decodeURIComponent, encode = encodeURIComponent, fieldContentRegExp = /^[\u0009\u0020-\u007e\u0080-\u00ff]+$/;
    function parse3(str, options) {
      if (typeof str != "string")
        throw new TypeError("argument str must be a string");
      for (var obj = {}, opt = options || {}, pairs = str.split(";"), dec = opt.decode || decode, i = 0; i < pairs.length; i++) {
        var pair = pairs[i], index = pair.indexOf("=");
        if (!(index < 0)) {
          var key = pair.substring(0, index).trim();
          if (obj[key] == null) {
            var val = pair.substring(index + 1, pair.length).trim();
            val[0] === '"' && (val = val.slice(1, -1)), obj[key] = tryDecode(val, dec);
          }
        }
      }
      return obj;
    }
    function serialize3(name, val, options) {
      var opt = options || {}, enc = opt.encode || encode;
      if (typeof enc != "function")
        throw new TypeError("option encode is invalid");
      if (!fieldContentRegExp.test(name))
        throw new TypeError("argument name is invalid");
      var value = enc(val);
      if (value && !fieldContentRegExp.test(value))
        throw new TypeError("argument val is invalid");
      var str = name + "=" + value;
      if (opt.maxAge != null) {
        var maxAge = opt.maxAge - 0;
        if (isNaN(maxAge) || !isFinite(maxAge))
          throw new TypeError("option maxAge is invalid");
        str += "; Max-Age=" + Math.floor(maxAge);
      }
      if (opt.domain) {
        if (!fieldContentRegExp.test(opt.domain))
          throw new TypeError("option domain is invalid");
        str += "; Domain=" + opt.domain;
      }
      if (opt.path) {
        if (!fieldContentRegExp.test(opt.path))
          throw new TypeError("option path is invalid");
        str += "; Path=" + opt.path;
      }
      if (opt.expires) {
        if (typeof opt.expires.toUTCString != "function")
          throw new TypeError("option expires is invalid");
        str += "; Expires=" + opt.expires.toUTCString();
      }
      if (opt.httpOnly && (str += "; HttpOnly"), opt.secure && (str += "; Secure"), opt.sameSite) {
        var sameSite = typeof opt.sameSite == "string" ? opt.sameSite.toLowerCase() : opt.sameSite;
        switch (sameSite) {
          case !0:
            str += "; SameSite=Strict";
            break;
          case "lax":
            str += "; SameSite=Lax";
            break;
          case "strict":
            str += "; SameSite=Strict";
            break;
          case "none":
            str += "; SameSite=None";
            break;
          default:
            throw new TypeError("option sameSite is invalid");
        }
      }
      return str;
    }
    function tryDecode(str, decode2) {
      try {
        return decode2(str);
      } catch {
        return str;
      }
    }
  }
});

// ../../node_modules/.pnpm/@remix-run+server-runtime@1.7.4_biqbaboplfbrettd7655fr4n2y/node_modules/@remix-run/server-runtime/dist/esm/warnings.js
function warnOnce(condition, message) {
  !condition && !alreadyWarned[message] && (alreadyWarned[message] = !0, console.warn(message));
}
var alreadyWarned, init_warnings = __esm({
  "../../node_modules/.pnpm/@remix-run+server-runtime@1.7.4_biqbaboplfbrettd7655fr4n2y/node_modules/@remix-run/server-runtime/dist/esm/warnings.js"() {
    alreadyWarned = {};
  }
});

// ../../node_modules/.pnpm/@remix-run+server-runtime@1.7.4_biqbaboplfbrettd7655fr4n2y/node_modules/@remix-run/server-runtime/dist/esm/cookies.js
async function encodeCookieValue(sign, value, secrets) {
  let encoded = encodeData(value);
  return secrets.length > 0 && (encoded = await sign(encoded, secrets[0])), encoded;
}
async function decodeCookieValue(unsign, value, secrets) {
  if (secrets.length > 0) {
    for (let secret of secrets) {
      let unsignedValue = await unsign(value, secret);
      if (unsignedValue !== !1)
        return decodeData(unsignedValue);
    }
    return null;
  }
  return decodeData(value);
}
function encodeData(value) {
  return btoa(myUnescape(encodeURIComponent(JSON.stringify(value))));
}
function decodeData(value) {
  try {
    return JSON.parse(decodeURIComponent(myEscape(atob(value))));
  } catch {
    return {};
  }
}
function myEscape(value) {
  let str = value.toString(), result = "", index = 0, chr, code;
  for (; index < str.length; )
    chr = str.charAt(index++), /[\w*+\-./@]/.exec(chr) ? result += chr : (code = chr.charCodeAt(0), code < 256 ? result += "%" + hex(code, 2) : result += "%u" + hex(code, 4).toUpperCase());
  return result;
}
function hex(code, length) {
  let result = code.toString(16);
  for (; result.length < length; )
    result = "0" + result;
  return result;
}
function myUnescape(value) {
  let str = value.toString(), result = "", index = 0, chr, part;
  for (; index < str.length; ) {
    if (chr = str.charAt(index++), chr === "%") {
      if (str.charAt(index) === "u") {
        if (part = str.slice(index + 1, index + 5), /^[\da-f]{4}$/i.exec(part)) {
          result += String.fromCharCode(parseInt(part, 16)), index += 5;
          continue;
        }
      } else if (part = str.slice(index, index + 2), /^[\da-f]{2}$/i.exec(part)) {
        result += String.fromCharCode(parseInt(part, 16)), index += 2;
        continue;
      }
    }
    result += chr;
  }
  return result;
}
function warnOnceAboutExpiresCookie(name, expires) {
  warnOnce(!expires, `The "${name}" cookie has an "expires" property set. This will cause the expires value to not be updated when the session is committed. Instead, you should set the expires value when serializing the cookie. You can use \`commitSession(session, { expires })\` if using a session storage object, or \`cookie.serialize("value", { expires })\` if you're using the cookie directly.`);
}
var import_cookie, createCookieFactory, isCookie, init_cookies = __esm({
  "../../node_modules/.pnpm/@remix-run+server-runtime@1.7.4_biqbaboplfbrettd7655fr4n2y/node_modules/@remix-run/server-runtime/dist/esm/cookies.js"() {
    import_cookie = __toESM(require_cookie());
    init_warnings();
    createCookieFactory = ({
      sign,
      unsign
    }) => (name, cookieOptions = {}) => {
      let {
        secrets,
        ...options
      } = {
        secrets: [],
        path: "/",
        sameSite: "lax",
        ...cookieOptions
      };
      return warnOnceAboutExpiresCookie(name, options.expires), {
        get name() {
          return name;
        },
        get isSigned() {
          return secrets.length > 0;
        },
        get expires() {
          return typeof options.maxAge < "u" ? new Date(Date.now() + options.maxAge * 1e3) : options.expires;
        },
        async parse(cookieHeader, parseOptions) {
          if (!cookieHeader)
            return null;
          let cookies = (0, import_cookie.parse)(cookieHeader, {
            ...options,
            ...parseOptions
          });
          return name in cookies ? cookies[name] === "" ? "" : await decodeCookieValue(unsign, cookies[name], secrets) : null;
        },
        async serialize(value, serializeOptions) {
          return (0, import_cookie.serialize)(name, value === "" ? "" : await encodeCookieValue(sign, value, secrets), {
            ...options,
            ...serializeOptions
          });
        }
      };
    }, isCookie = (object) => object != null && typeof object.name == "string" && typeof object.isSigned == "boolean" && typeof object.parse == "function" && typeof object.serialize == "function";
  }
});

// ../../node_modules/.pnpm/@web3-storage+multipart-parser@1.0.0/node_modules/@web3-storage/multipart-parser/esm/src/utils.js
function stringToArray(s) {
  let utf8 = unescape(encodeURIComponent(s));
  return Uint8Array.from(utf8, (_, i) => utf8.charCodeAt(i));
}
function arrayToString(a) {
  let utf8 = String.fromCharCode.apply(null, a);
  return decodeURIComponent(escape(utf8));
}
function mergeArrays(...arrays) {
  let out = new Uint8Array(arrays.reduce((total, arr) => total + arr.length, 0)), offset = 0;
  for (let arr of arrays)
    out.set(arr, offset), offset += arr.length;
  return out;
}
function arraysEqual(a, b) {
  if (a.length !== b.length)
    return !1;
  for (let i = 0; i < a.length; i++)
    if (a[i] !== b[i])
      return !1;
  return !0;
}
var init_utils = __esm({
  "../../node_modules/.pnpm/@web3-storage+multipart-parser@1.0.0/node_modules/@web3-storage/multipart-parser/esm/src/utils.js"() {
  }
});

// ../../node_modules/.pnpm/@web3-storage+multipart-parser@1.0.0/node_modules/@web3-storage/multipart-parser/esm/src/search.js
function coerce(a) {
  return a instanceof Uint8Array ? (index) => a[index] : a;
}
function jsmemcmp(buf1, pos1, buf2, pos2, len) {
  let fn1 = coerce(buf1), fn2 = coerce(buf2);
  for (let i = 0; i < len; ++i)
    if (fn1(pos1 + i) !== fn2(pos2 + i))
      return !1;
  return !0;
}
function createOccurenceTable(s) {
  let table = new Array(256).fill(s.length);
  if (s.length > 1)
    for (let i = 0; i < s.length - 1; i++)
      table[s[i]] = s.length - 1 - i;
  return table;
}
var MATCH, StreamSearch, ReadableStreamSearch, EOQ, QueueableStreamSearch, init_search = __esm({
  "../../node_modules/.pnpm/@web3-storage+multipart-parser@1.0.0/node_modules/@web3-storage/multipart-parser/esm/src/search.js"() {
    init_utils();
    MATCH = Symbol("Match"), StreamSearch = class {
      constructor(needle) {
        this._lookbehind = new Uint8Array(), typeof needle == "string" ? this._needle = needle = stringToArray(needle) : this._needle = needle, this._lastChar = needle[needle.length - 1], this._occ = createOccurenceTable(needle);
      }
      feed(chunk) {
        let pos = 0, tokens, allTokens = [];
        for (; pos !== chunk.length; )
          [pos, ...tokens] = this._feed(chunk, pos), allTokens.push(...tokens);
        return allTokens;
      }
      end() {
        let tail = this._lookbehind;
        return this._lookbehind = new Uint8Array(), tail;
      }
      _feed(data, bufPos) {
        let tokens = [], pos = -this._lookbehind.length;
        if (pos < 0) {
          for (; pos < 0 && pos <= data.length - this._needle.length; ) {
            let ch = this._charAt(data, pos + this._needle.length - 1);
            if (ch === this._lastChar && this._memcmp(data, pos, this._needle.length - 1))
              return pos > -this._lookbehind.length && tokens.push(this._lookbehind.slice(0, this._lookbehind.length + pos)), tokens.push(MATCH), this._lookbehind = new Uint8Array(), [
                pos + this._needle.length,
                ...tokens
              ];
            pos += this._occ[ch];
          }
          if (pos < 0)
            for (; pos < 0 && !this._memcmp(data, pos, data.length - pos); )
              pos++;
          if (pos >= 0)
            tokens.push(this._lookbehind), this._lookbehind = new Uint8Array();
          else {
            let bytesToCutOff = this._lookbehind.length + pos;
            return bytesToCutOff > 0 && (tokens.push(this._lookbehind.slice(0, bytesToCutOff)), this._lookbehind = this._lookbehind.slice(bytesToCutOff)), this._lookbehind = Uint8Array.from(new Array(this._lookbehind.length + data.length), (_, i) => this._charAt(data, i - this._lookbehind.length)), [
              data.length,
              ...tokens
            ];
          }
        }
        for (pos += bufPos; pos <= data.length - this._needle.length; ) {
          let ch = data[pos + this._needle.length - 1];
          if (ch === this._lastChar && data[pos] === this._needle[0] && jsmemcmp(this._needle, 0, data, pos, this._needle.length - 1))
            return pos > bufPos && tokens.push(data.slice(bufPos, pos)), tokens.push(MATCH), [
              pos + this._needle.length,
              ...tokens
            ];
          pos += this._occ[ch];
        }
        if (pos < data.length) {
          for (; pos < data.length && (data[pos] !== this._needle[0] || !jsmemcmp(data, pos, this._needle, 0, data.length - pos)); )
            ++pos;
          pos < data.length && (this._lookbehind = data.slice(pos));
        }
        return pos > 0 && tokens.push(data.slice(bufPos, pos < data.length ? pos : data.length)), [
          data.length,
          ...tokens
        ];
      }
      _charAt(data, pos) {
        return pos < 0 ? this._lookbehind[this._lookbehind.length + pos] : data[pos];
      }
      _memcmp(data, pos, len) {
        return jsmemcmp(this._charAt.bind(this, data), pos, this._needle, 0, len);
      }
    }, ReadableStreamSearch = class {
      constructor(needle, _readableStream) {
        this._readableStream = _readableStream, this._search = new StreamSearch(needle);
      }
      async *[Symbol.asyncIterator]() {
        let reader = this._readableStream.getReader();
        try {
          for (; ; ) {
            let result = await reader.read();
            if (result.done)
              break;
            yield* this._search.feed(result.value);
          }
          let tail = this._search.end();
          tail.length && (yield tail);
        } finally {
          reader.releaseLock();
        }
      }
    }, EOQ = Symbol("End of Queue"), QueueableStreamSearch = class {
      constructor(needle) {
        this._chunksQueue = [], this._closed = !1, this._search = new StreamSearch(needle);
      }
      push(...chunks) {
        if (this._closed)
          throw new Error("cannot call push after close");
        this._chunksQueue.push(...chunks), this._notify && this._notify();
      }
      close() {
        if (this._closed)
          throw new Error("close was already called");
        this._closed = !0, this._chunksQueue.push(EOQ), this._notify && this._notify();
      }
      async *[Symbol.asyncIterator]() {
        for (; ; ) {
          let chunk;
          for (; !(chunk = this._chunksQueue.shift()); )
            await new Promise((resolve) => this._notify = resolve), this._notify = void 0;
          if (chunk === EOQ)
            break;
          yield* this._search.feed(chunk);
        }
        let tail = this._search.end();
        tail.length && (yield tail);
      }
    };
  }
});

// ../../node_modules/.pnpm/@web3-storage+multipart-parser@1.0.0/node_modules/@web3-storage/multipart-parser/esm/src/index.js
function parseContentDisposition(header) {
  let parts = header.split(";").map((part) => part.trim());
  if (parts.shift() !== "form-data")
    throw new Error('malformed content-disposition header: missing "form-data" in `' + JSON.stringify(parts) + "`");
  let out = {};
  for (let part of parts) {
    let kv = part.split("=", 2);
    if (kv.length !== 2)
      throw new Error("malformed content-disposition header: key-value pair not found - " + part + " in `" + header + "`");
    let [name, value] = kv;
    if (value[0] === '"' && value[value.length - 1] === '"')
      out[name] = value.slice(1, -1).replace(/\\"/g, '"');
    else if (value[0] !== '"' && value[value.length - 1] !== '"')
      out[name] = value;
    else if (value[0] === '"' && value[value.length - 1] !== '"' || value[0] !== '"' && value[value.length - 1] === '"')
      throw new Error("malformed content-disposition header: mismatched quotations in `" + header + "`");
  }
  if (!out.name)
    throw new Error("malformed content-disposition header: missing field name in `" + header + "`");
  return out;
}
function parsePartHeaders(lines) {
  let entries = [], disposition = !1, line;
  for (; typeof (line = lines.shift()) < "u"; ) {
    let colon = line.indexOf(":");
    if (colon === -1)
      throw new Error("malformed multipart-form header: missing colon");
    let header = line.slice(0, colon).trim().toLowerCase(), value = line.slice(colon + 1).trim();
    switch (header) {
      case "content-disposition":
        disposition = !0, entries.push(...Object.entries(parseContentDisposition(value)));
        break;
      case "content-type":
        entries.push([
          "contentType",
          value
        ]);
    }
  }
  if (!disposition)
    throw new Error("malformed multipart-form header: missing content-disposition");
  return Object.fromEntries(entries);
}
async function readHeaderLines(it, needle) {
  let firstChunk = !0, lastTokenWasMatch = !1, headerLines = [[]], crlfSearch = new StreamSearch(CRLF);
  for (; ; ) {
    let result = await it.next();
    if (result.done)
      throw new Error("malformed multipart-form data: unexpected end of stream");
    if (firstChunk && result.value !== MATCH && arraysEqual(result.value.slice(0, 2), dash))
      return [
        void 0,
        new Uint8Array()
      ];
    let chunk;
    if (result.value !== MATCH)
      chunk = result.value;
    else if (!lastTokenWasMatch)
      chunk = needle;
    else
      throw new Error("malformed multipart-form data: unexpected boundary");
    if (!chunk.length)
      continue;
    firstChunk && (firstChunk = !1);
    let tokens = crlfSearch.feed(chunk);
    for (let [i, token] of tokens.entries()) {
      let isMatch = token === MATCH;
      if (!(!isMatch && !token.length)) {
        if (lastTokenWasMatch && isMatch)
          return tokens.push(crlfSearch.end()), [
            headerLines.filter((chunks) => chunks.length).map(mergeArrays2).map(arrayToString),
            mergeArrays(...tokens.slice(i + 1).map((token2) => token2 === MATCH ? CRLF : token2))
          ];
        (lastTokenWasMatch = isMatch) ? headerLines.push([]) : headerLines[headerLines.length - 1].push(token);
      }
    }
  }
}
async function* streamMultipart(body, boundary) {
  let needle = mergeArrays(dash, stringToArray(boundary)), it = new ReadableStreamSearch(needle, body)[Symbol.asyncIterator]();
  for (; ; ) {
    let result = await it.next();
    if (result.done)
      return;
    if (result.value === MATCH)
      break;
  }
  let crlfSearch = new StreamSearch(CRLF);
  for (; ; ) {
    let feedChunk = function(chunk) {
      let chunks = [];
      for (let token of crlfSearch.feed(chunk))
        trailingCRLF && chunks.push(CRLF), (trailingCRLF = token === MATCH) || chunks.push(token);
      return mergeArrays(...chunks);
    }, [headerLines, tail] = await readHeaderLines(it, needle);
    if (!headerLines)
      return;
    async function nextToken() {
      let result = await it.next();
      if (result.done)
        throw new Error("malformed multipart-form data: unexpected end of stream");
      return result;
    }
    let trailingCRLF = !1, done = !1;
    async function nextChunk() {
      let result = await nextToken(), chunk;
      if (result.value !== MATCH)
        chunk = result.value;
      else if (!trailingCRLF)
        chunk = CRLF;
      else
        return done = !0, { value: crlfSearch.end() };
      return { value: feedChunk(chunk) };
    }
    let bufferedChunks = [{ value: feedChunk(tail) }];
    for (yield {
      ...parsePartHeaders(headerLines),
      data: {
        [Symbol.asyncIterator]() {
          return this;
        },
        async next() {
          for (; ; ) {
            let result = bufferedChunks.shift();
            if (!result)
              break;
            if (result.value.length > 0)
              return result;
          }
          for (; ; ) {
            if (done)
              return {
                done,
                value: void 0
              };
            let result = await nextChunk();
            if (result.value.length > 0)
              return result;
          }
        }
      }
    }; !done; )
      bufferedChunks.push(await nextChunk());
  }
}
var mergeArrays2, dash, CRLF, init_src = __esm({
  "../../node_modules/.pnpm/@web3-storage+multipart-parser@1.0.0/node_modules/@web3-storage/multipart-parser/esm/src/index.js"() {
    init_search();
    init_utils();
    mergeArrays2 = Function.prototype.apply.bind(mergeArrays, void 0), dash = stringToArray("--"), CRLF = stringToArray(`\r
`);
  }
});

// ../../node_modules/.pnpm/@remix-run+server-runtime@1.7.4_biqbaboplfbrettd7655fr4n2y/node_modules/@remix-run/server-runtime/dist/esm/formData.js
function composeUploadHandlers(...handlers) {
  return async (part) => {
    for (let handler of handlers) {
      let value = await handler(part);
      if (typeof value < "u" && value !== null)
        return value;
    }
  };
}
async function parseMultipartFormData(request, uploadHandler) {
  let contentType = request.headers.get("Content-Type") || "", [type, boundary] = contentType.split(/\s*;\s*boundary=/);
  if (!request.body || !boundary || type !== "multipart/form-data")
    throw new TypeError("Could not parse content as FormData.");
  let formData = new FormData(), parts = streamMultipart(request.body, boundary);
  for await (let part of parts) {
    if (part.done)
      break;
    typeof part.filename == "string" && (part.filename = part.filename.split(/[/\\]/).pop());
    let value = await uploadHandler(part);
    typeof value < "u" && value !== null && formData.append(part.name, value);
  }
  return formData;
}
var init_formData = __esm({
  "../../node_modules/.pnpm/@remix-run+server-runtime@1.7.4_biqbaboplfbrettd7655fr4n2y/node_modules/@remix-run/server-runtime/dist/esm/formData.js"() {
    init_src();
  }
});

// ../../node_modules/.pnpm/@remix-run+server-runtime@1.7.4_biqbaboplfbrettd7655fr4n2y/node_modules/@remix-run/server-runtime/dist/esm/responses.js
function isResponse(value) {
  return value != null && typeof value.status == "number" && typeof value.statusText == "string" && typeof value.headers == "object" && typeof value.body < "u";
}
function isRedirectResponse(response) {
  return redirectStatusCodes.has(response.status);
}
function isCatchResponse(response) {
  return response.headers.get("X-Remix-Catch") != null;
}
var json, redirect, redirectStatusCodes, init_responses = __esm({
  "../../node_modules/.pnpm/@remix-run+server-runtime@1.7.4_biqbaboplfbrettd7655fr4n2y/node_modules/@remix-run/server-runtime/dist/esm/responses.js"() {
    json = (data, init = {}) => {
      let responseInit = typeof init == "number" ? {
        status: init
      } : init, headers = new Headers(responseInit.headers);
      return headers.has("Content-Type") || headers.set("Content-Type", "application/json; charset=utf-8"), new Response(JSON.stringify(data), {
        ...responseInit,
        headers
      });
    }, redirect = (url, init = 302) => {
      let responseInit = init;
      typeof responseInit == "number" ? responseInit = {
        status: responseInit
      } : typeof responseInit.status > "u" && (responseInit.status = 302);
      let headers = new Headers(responseInit.headers);
      return headers.set("Location", url), new Response(null, {
        ...responseInit,
        headers
      });
    };
    redirectStatusCodes = /* @__PURE__ */ new Set([301, 302, 303, 307, 308]);
  }
});

// ../../node_modules/.pnpm/@remix-run+server-runtime@1.7.4_biqbaboplfbrettd7655fr4n2y/node_modules/@remix-run/server-runtime/dist/esm/data.js
async function callRouteAction({
  loadContext,
  routeId,
  action: action3,
  params,
  request
}) {
  if (!action3) {
    let response = new Response(null, {
      status: 405
    });
    return response.headers.set("X-Remix-Catch", "yes"), response;
  }
  let result;
  try {
    result = await action3({
      request: stripDataParam(stripIndexParam(request)),
      context: loadContext,
      params
    });
  } catch (error) {
    if (!isResponse(error))
      throw error;
    isRedirectResponse(error) || error.headers.set("X-Remix-Catch", "yes"), result = error;
  }
  if (result === void 0)
    throw new Error(`You defined an action for route "${routeId}" but didn't return anything from your \`action\` function. Please return a value or \`null\`.`);
  return isResponse(result) ? result : json(result);
}
async function callRouteLoader({
  loadContext,
  routeId,
  loader: loader14,
  params,
  request
}) {
  if (!loader14)
    throw new Error(`You made a ${request.method} request to ${request.url} but did not provide a default component or \`loader\` for route "${routeId}", so there is no way to handle the request.`);
  let result;
  try {
    result = await loader14({
      request: stripDataParam(stripIndexParam(request)),
      context: loadContext,
      params
    });
  } catch (error) {
    if (!isResponse(error))
      throw error;
    isRedirectResponse(error) || error.headers.set("X-Remix-Catch", "yes"), result = error;
  }
  if (result === void 0)
    throw new Error(`You defined a loader for route "${routeId}" but didn't return anything from your \`loader\` function. Please return a value or \`null\`.`);
  return isResponse(result) ? result : json(result);
}
function stripIndexParam(request) {
  let url = new URL(request.url), indexValues = url.searchParams.getAll("index");
  url.searchParams.delete("index");
  let indexValuesToKeep = [];
  for (let indexValue of indexValues)
    indexValue && indexValuesToKeep.push(indexValue);
  for (let toKeep of indexValuesToKeep)
    url.searchParams.append("index", toKeep);
  return new Request(url.href, request);
}
function stripDataParam(request) {
  let url = new URL(request.url);
  return url.searchParams.delete("_data"), new Request(url.href, request);
}
function extractData(response) {
  let contentType = response.headers.get("Content-Type");
  return contentType && /\bapplication\/json\b/.test(contentType) ? response.json() : response.text();
}
var init_data = __esm({
  "../../node_modules/.pnpm/@remix-run+server-runtime@1.7.4_biqbaboplfbrettd7655fr4n2y/node_modules/@remix-run/server-runtime/dist/esm/data.js"() {
    init_responses();
  }
});

// ../../node_modules/.pnpm/@remix-run+server-runtime@1.7.4_biqbaboplfbrettd7655fr4n2y/node_modules/@remix-run/server-runtime/dist/esm/entry.js
function createEntryMatches(matches, routes2) {
  return matches.map((match) => ({
    params: match.params,
    pathname: match.pathname,
    route: routes2[match.route.id]
  }));
}
function createEntryRouteModules(manifest) {
  return Object.keys(manifest).reduce((memo, routeId) => (memo[routeId] = manifest[routeId].module, memo), {});
}
var init_entry = __esm({
  "../../node_modules/.pnpm/@remix-run+server-runtime@1.7.4_biqbaboplfbrettd7655fr4n2y/node_modules/@remix-run/server-runtime/dist/esm/entry.js"() {
  }
});

// ../../node_modules/.pnpm/@remix-run+server-runtime@1.7.4_biqbaboplfbrettd7655fr4n2y/node_modules/@remix-run/server-runtime/dist/esm/errors.js
async function serializeError(error) {
  return {
    message: error.message,
    stack: error.stack
  };
}
var init_errors = __esm({
  "../../node_modules/.pnpm/@remix-run+server-runtime@1.7.4_biqbaboplfbrettd7655fr4n2y/node_modules/@remix-run/server-runtime/dist/esm/errors.js"() {
  }
});

// ../../node_modules/.pnpm/set-cookie-parser@2.5.1/node_modules/set-cookie-parser/lib/set-cookie.js
var require_set_cookie = __commonJS({
  "../../node_modules/.pnpm/set-cookie-parser@2.5.1/node_modules/set-cookie-parser/lib/set-cookie.js"(exports, module) {
    "use strict";
    var defaultParseOptions = {
      decodeValues: !0,
      map: !1,
      silent: !1
    };
    function isNonEmptyString(str) {
      return typeof str == "string" && !!str.trim();
    }
    function parseString(setCookieValue, options) {
      var parts = setCookieValue.split(";").filter(isNonEmptyString), nameValuePairStr = parts.shift(), parsed = parseNameValuePair(nameValuePairStr), name = parsed.name, value = parsed.value;
      options = options ? Object.assign({}, defaultParseOptions, options) : defaultParseOptions;
      try {
        value = options.decodeValues ? decodeURIComponent(value) : value;
      } catch (e) {
        console.error(
          "set-cookie-parser encountered an error while decoding a cookie with value '" + value + "'. Set options.decodeValues to false to disable this feature.",
          e
        );
      }
      var cookie = {
        name,
        value
      };
      return parts.forEach(function(part) {
        var sides = part.split("="), key = sides.shift().trimLeft().toLowerCase(), value2 = sides.join("=");
        key === "expires" ? cookie.expires = new Date(value2) : key === "max-age" ? cookie.maxAge = parseInt(value2, 10) : key === "secure" ? cookie.secure = !0 : key === "httponly" ? cookie.httpOnly = !0 : key === "samesite" ? cookie.sameSite = value2 : cookie[key] = value2;
      }), cookie;
    }
    function parseNameValuePair(nameValuePairStr) {
      var name = "", value = "", nameValueArr = nameValuePairStr.split("=");
      return nameValueArr.length > 1 ? (name = nameValueArr.shift(), value = nameValueArr.join("=")) : value = nameValuePairStr, { name, value };
    }
    function parse3(input, options) {
      if (options = options ? Object.assign({}, defaultParseOptions, options) : defaultParseOptions, !input)
        return options.map ? {} : [];
      if (input.headers && input.headers["set-cookie"])
        input = input.headers["set-cookie"];
      else if (input.headers) {
        var sch = input.headers[Object.keys(input.headers).find(function(key) {
          return key.toLowerCase() === "set-cookie";
        })];
        !sch && input.headers.cookie && !options.silent && console.warn(
          "Warning: set-cookie-parser appears to have been called on a request object. It is designed to parse Set-Cookie headers from responses, not Cookie headers from requests. Set the option {silent: true} to suppress this warning."
        ), input = sch;
      }
      if (Array.isArray(input) || (input = [input]), options = options ? Object.assign({}, defaultParseOptions, options) : defaultParseOptions, options.map) {
        var cookies = {};
        return input.filter(isNonEmptyString).reduce(function(cookies2, str) {
          var cookie = parseString(str, options);
          return cookies2[cookie.name] = cookie, cookies2;
        }, cookies);
      } else
        return input.filter(isNonEmptyString).map(function(str) {
          return parseString(str, options);
        });
    }
    function splitCookiesString2(cookiesString) {
      if (Array.isArray(cookiesString))
        return cookiesString;
      if (typeof cookiesString != "string")
        return [];
      var cookiesStrings = [], pos = 0, start, ch, lastComma, nextStart, cookiesSeparatorFound;
      function skipWhitespace() {
        for (; pos < cookiesString.length && /\s/.test(cookiesString.charAt(pos)); )
          pos += 1;
        return pos < cookiesString.length;
      }
      function notSpecialChar() {
        return ch = cookiesString.charAt(pos), ch !== "=" && ch !== ";" && ch !== ",";
      }
      for (; pos < cookiesString.length; ) {
        for (start = pos, cookiesSeparatorFound = !1; skipWhitespace(); )
          if (ch = cookiesString.charAt(pos), ch === ",") {
            for (lastComma = pos, pos += 1, skipWhitespace(), nextStart = pos; pos < cookiesString.length && notSpecialChar(); )
              pos += 1;
            pos < cookiesString.length && cookiesString.charAt(pos) === "=" ? (cookiesSeparatorFound = !0, pos = nextStart, cookiesStrings.push(cookiesString.substring(start, lastComma)), start = pos) : pos = lastComma + 1;
          } else
            pos += 1;
        (!cookiesSeparatorFound || pos >= cookiesString.length) && cookiesStrings.push(cookiesString.substring(start, cookiesString.length));
      }
      return cookiesStrings;
    }
    module.exports = parse3;
    module.exports.parse = parse3;
    module.exports.parseString = parseString;
    module.exports.splitCookiesString = splitCookiesString2;
  }
});

// ../../node_modules/.pnpm/@remix-run+server-runtime@1.7.4_biqbaboplfbrettd7655fr4n2y/node_modules/@remix-run/server-runtime/dist/esm/headers.js
function getDocumentHeaders(build, matches, routeLoaderResponses, actionResponse) {
  return matches.reduce((parentHeaders, match, index) => {
    let routeModule = build.routes[match.route.id].module, routeLoaderResponse = routeLoaderResponses[match.route.id], loaderHeaders = routeLoaderResponse ? routeLoaderResponse.headers : new Headers(), actionHeaders = actionResponse ? actionResponse.headers : new Headers(), headers = new Headers(routeModule.headers ? typeof routeModule.headers == "function" ? routeModule.headers({
      loaderHeaders,
      parentHeaders,
      actionHeaders
    }) : routeModule.headers : void 0);
    return prependCookies(actionHeaders, headers), prependCookies(loaderHeaders, headers), prependCookies(parentHeaders, headers), headers;
  }, new Headers());
}
function prependCookies(parentHeaders, childHeaders) {
  let parentSetCookieString = parentHeaders.get("Set-Cookie");
  parentSetCookieString && (0, import_set_cookie_parser.splitCookiesString)(parentSetCookieString).forEach((cookie) => {
    childHeaders.append("Set-Cookie", cookie);
  });
}
var import_set_cookie_parser, init_headers = __esm({
  "../../node_modules/.pnpm/@remix-run+server-runtime@1.7.4_biqbaboplfbrettd7655fr4n2y/node_modules/@remix-run/server-runtime/dist/esm/headers.js"() {
    import_set_cookie_parser = __toESM(require_set_cookie());
  }
});

// ../../node_modules/.pnpm/@remix-run+server-runtime@1.7.4_biqbaboplfbrettd7655fr4n2y/node_modules/@remix-run/server-runtime/dist/esm/mode.js
function isServerMode(value) {
  return value === ServerMode.Development || value === ServerMode.Production || value === ServerMode.Test;
}
var ServerMode, init_mode = __esm({
  "../../node_modules/.pnpm/@remix-run+server-runtime@1.7.4_biqbaboplfbrettd7655fr4n2y/node_modules/@remix-run/server-runtime/dist/esm/mode.js"() {
    (function(ServerMode2) {
      ServerMode2.Development = "development", ServerMode2.Production = "production", ServerMode2.Test = "test";
    })(ServerMode || (ServerMode = {}));
  }
});

// ../../node_modules/.pnpm/react@18.2.0/node_modules/react/cjs/react.development.js
var require_react_development = __commonJS({
  "../../node_modules/.pnpm/react@18.2.0/node_modules/react/cjs/react.development.js"(exports, module) {
    "use strict";
    (function() {
      "use strict";
      typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
      var ReactVersion = "18.2.0", REACT_ELEMENT_TYPE = Symbol.for("react.element"), REACT_PORTAL_TYPE = Symbol.for("react.portal"), REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"), REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"), REACT_PROFILER_TYPE = Symbol.for("react.profiler"), REACT_PROVIDER_TYPE = Symbol.for("react.provider"), REACT_CONTEXT_TYPE = Symbol.for("react.context"), REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"), REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"), REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"), REACT_MEMO_TYPE = Symbol.for("react.memo"), REACT_LAZY_TYPE = Symbol.for("react.lazy"), REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen"), MAYBE_ITERATOR_SYMBOL = Symbol.iterator, FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable != "object")
          return null;
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        return typeof maybeIterator == "function" ? maybeIterator : null;
      }
      var ReactCurrentDispatcher = {
        current: null
      }, ReactCurrentBatchConfig = {
        transition: null
      }, ReactCurrentActQueue = {
        current: null,
        isBatchingLegacy: !1,
        didScheduleLegacyUpdate: !1
      }, ReactCurrentOwner = {
        current: null
      }, ReactDebugCurrentFrame = {}, currentExtraStackFrame = null;
      function setExtraStackFrame(stack) {
        currentExtraStackFrame = stack;
      }
      ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
        currentExtraStackFrame = stack;
      }, ReactDebugCurrentFrame.getCurrentStack = null, ReactDebugCurrentFrame.getStackAddendum = function() {
        var stack = "";
        currentExtraStackFrame && (stack += currentExtraStackFrame);
        var impl = ReactDebugCurrentFrame.getCurrentStack;
        return impl && (stack += impl() || ""), stack;
      };
      var enableScopeAPI = !1, enableCacheElement = !1, enableTransitionTracing = !1, enableLegacyHidden = !1, enableDebugTracing = !1, ReactSharedInternals = {
        ReactCurrentDispatcher,
        ReactCurrentBatchConfig,
        ReactCurrentOwner
      };
      ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame, ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
      function warn(format) {
        {
          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)
            args[_key - 1] = arguments[_key];
          printWarning("warn", format, args);
        }
      }
      function error(format) {
        {
          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)
            args[_key2 - 1] = arguments[_key2];
          printWarning("error", format, args);
        }
      }
      function printWarning(level, format, args) {
        {
          var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame, stack = ReactDebugCurrentFrame2.getStackAddendum();
          stack !== "" && (format += "%s", args = args.concat([stack]));
          var argsWithFormat = args.map(function(item) {
            return String(item);
          });
          argsWithFormat.unshift("Warning: " + format), Function.prototype.apply.call(console[level], console, argsWithFormat);
        }
      }
      var didWarnStateUpdateForUnmountedComponent = {};
      function warnNoop(publicInstance, callerName) {
        {
          var _constructor = publicInstance.constructor, componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass", warningKey = componentName + "." + callerName;
          if (didWarnStateUpdateForUnmountedComponent[warningKey])
            return;
          error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName), didWarnStateUpdateForUnmountedComponent[warningKey] = !0;
        }
      }
      var ReactNoopUpdateQueue = {
        isMounted: function(publicInstance) {
          return !1;
        },
        enqueueForceUpdate: function(publicInstance, callback, callerName) {
          warnNoop(publicInstance, "forceUpdate");
        },
        enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
          warnNoop(publicInstance, "replaceState");
        },
        enqueueSetState: function(publicInstance, partialState, callback, callerName) {
          warnNoop(publicInstance, "setState");
        }
      }, assign = Object.assign, emptyObject = {};
      Object.freeze(emptyObject);
      function Component(props, context, updater) {
        this.props = props, this.context = context, this.refs = emptyObject, this.updater = updater || ReactNoopUpdateQueue;
      }
      Component.prototype.isReactComponent = {}, Component.prototype.setState = function(partialState, callback) {
        if (typeof partialState != "object" && typeof partialState != "function" && partialState != null)
          throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
        this.updater.enqueueSetState(this, partialState, callback, "setState");
      }, Component.prototype.forceUpdate = function(callback) {
        this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
      };
      {
        var deprecatedAPIs = {
          isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
          replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
        }, defineDeprecationWarning = function(methodName, info) {
          Object.defineProperty(Component.prototype, methodName, {
            get: function() {
              warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
            }
          });
        };
        for (var fnName in deprecatedAPIs)
          deprecatedAPIs.hasOwnProperty(fnName) && defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
      }
      function ComponentDummy() {
      }
      ComponentDummy.prototype = Component.prototype;
      function PureComponent(props, context, updater) {
        this.props = props, this.context = context, this.refs = emptyObject, this.updater = updater || ReactNoopUpdateQueue;
      }
      var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
      pureComponentPrototype.constructor = PureComponent, assign(pureComponentPrototype, Component.prototype), pureComponentPrototype.isPureReactComponent = !0;
      function createRef2() {
        var refObject = {
          current: null
        };
        return Object.seal(refObject), refObject;
      }
      var isArrayImpl = Array.isArray;
      function isArray(a) {
        return isArrayImpl(a);
      }
      function typeName(value) {
        {
          var hasToStringTag = typeof Symbol == "function" && Symbol.toStringTag, type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
          return type;
        }
      }
      function willCoercionThrow(value) {
        try {
          return testStringCoercion(value), !1;
        } catch {
          return !0;
        }
      }
      function testStringCoercion(value) {
        return "" + value;
      }
      function checkKeyStringCoercion(value) {
        if (willCoercionThrow(value))
          return error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value)), testStringCoercion(value);
      }
      function getWrappedName(outerType, innerType, wrapperName) {
        var displayName = outerType.displayName;
        if (displayName)
          return displayName;
        var functionName = innerType.displayName || innerType.name || "";
        return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
      }
      function getContextName(type) {
        return type.displayName || "Context";
      }
      function getComponentNameFromType(type) {
        if (type == null)
          return null;
        if (typeof type.tag == "number" && error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."), typeof type == "function")
          return type.displayName || type.name || null;
        if (typeof type == "string")
          return type;
        switch (type) {
          case REACT_FRAGMENT_TYPE:
            return "Fragment";
          case REACT_PORTAL_TYPE:
            return "Portal";
          case REACT_PROFILER_TYPE:
            return "Profiler";
          case REACT_STRICT_MODE_TYPE:
            return "StrictMode";
          case REACT_SUSPENSE_TYPE:
            return "Suspense";
          case REACT_SUSPENSE_LIST_TYPE:
            return "SuspenseList";
        }
        if (typeof type == "object")
          switch (type.$$typeof) {
            case REACT_CONTEXT_TYPE:
              var context = type;
              return getContextName(context) + ".Consumer";
            case REACT_PROVIDER_TYPE:
              var provider = type;
              return getContextName(provider._context) + ".Provider";
            case REACT_FORWARD_REF_TYPE:
              return getWrappedName(type, type.render, "ForwardRef");
            case REACT_MEMO_TYPE:
              var outerName = type.displayName || null;
              return outerName !== null ? outerName : getComponentNameFromType(type.type) || "Memo";
            case REACT_LAZY_TYPE: {
              var lazyComponent = type, payload = lazyComponent._payload, init = lazyComponent._init;
              try {
                return getComponentNameFromType(init(payload));
              } catch {
                return null;
              }
            }
          }
        return null;
      }
      var hasOwnProperty = Object.prototype.hasOwnProperty, RESERVED_PROPS = {
        key: !0,
        ref: !0,
        __self: !0,
        __source: !0
      }, specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
      didWarnAboutStringRefs = {};
      function hasValidRef(config2) {
        if (hasOwnProperty.call(config2, "ref")) {
          var getter = Object.getOwnPropertyDescriptor(config2, "ref").get;
          if (getter && getter.isReactWarning)
            return !1;
        }
        return config2.ref !== void 0;
      }
      function hasValidKey(config2) {
        if (hasOwnProperty.call(config2, "key")) {
          var getter = Object.getOwnPropertyDescriptor(config2, "key").get;
          if (getter && getter.isReactWarning)
            return !1;
        }
        return config2.key !== void 0;
      }
      function defineKeyPropWarningGetter(props, displayName) {
        var warnAboutAccessingKey = function() {
          specialPropKeyWarningShown || (specialPropKeyWarningShown = !0, error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName));
        };
        warnAboutAccessingKey.isReactWarning = !0, Object.defineProperty(props, "key", {
          get: warnAboutAccessingKey,
          configurable: !0
        });
      }
      function defineRefPropWarningGetter(props, displayName) {
        var warnAboutAccessingRef = function() {
          specialPropRefWarningShown || (specialPropRefWarningShown = !0, error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName));
        };
        warnAboutAccessingRef.isReactWarning = !0, Object.defineProperty(props, "ref", {
          get: warnAboutAccessingRef,
          configurable: !0
        });
      }
      function warnIfStringRefCannotBeAutoConverted(config2) {
        if (typeof config2.ref == "string" && ReactCurrentOwner.current && config2.__self && ReactCurrentOwner.current.stateNode !== config2.__self) {
          var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
          didWarnAboutStringRefs[componentName] || (error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config2.ref), didWarnAboutStringRefs[componentName] = !0);
        }
      }
      var ReactElement = function(type, key, ref, self2, source, owner, props) {
        var element = {
          $$typeof: REACT_ELEMENT_TYPE,
          type,
          key,
          ref,
          props,
          _owner: owner
        };
        return element._store = {}, Object.defineProperty(element._store, "validated", {
          configurable: !1,
          enumerable: !1,
          writable: !0,
          value: !1
        }), Object.defineProperty(element, "_self", {
          configurable: !1,
          enumerable: !1,
          writable: !1,
          value: self2
        }), Object.defineProperty(element, "_source", {
          configurable: !1,
          enumerable: !1,
          writable: !1,
          value: source
        }), Object.freeze && (Object.freeze(element.props), Object.freeze(element)), element;
      };
      function createElement8(type, config2, children) {
        var propName, props = {}, key = null, ref = null, self2 = null, source = null;
        if (config2 != null) {
          hasValidRef(config2) && (ref = config2.ref, warnIfStringRefCannotBeAutoConverted(config2)), hasValidKey(config2) && (checkKeyStringCoercion(config2.key), key = "" + config2.key), self2 = config2.__self === void 0 ? null : config2.__self, source = config2.__source === void 0 ? null : config2.__source;
          for (propName in config2)
            hasOwnProperty.call(config2, propName) && !RESERVED_PROPS.hasOwnProperty(propName) && (props[propName] = config2[propName]);
        }
        var childrenLength = arguments.length - 2;
        if (childrenLength === 1)
          props.children = children;
        else if (childrenLength > 1) {
          for (var childArray = Array(childrenLength), i = 0; i < childrenLength; i++)
            childArray[i] = arguments[i + 2];
          Object.freeze && Object.freeze(childArray), props.children = childArray;
        }
        if (type && type.defaultProps) {
          var defaultProps = type.defaultProps;
          for (propName in defaultProps)
            props[propName] === void 0 && (props[propName] = defaultProps[propName]);
        }
        if (key || ref) {
          var displayName = typeof type == "function" ? type.displayName || type.name || "Unknown" : type;
          key && defineKeyPropWarningGetter(props, displayName), ref && defineRefPropWarningGetter(props, displayName);
        }
        return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
      }
      function cloneAndReplaceKey(oldElement, newKey) {
        var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
        return newElement;
      }
      function cloneElement2(element, config2, children) {
        if (element == null)
          throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
        var propName, props = assign({}, element.props), key = element.key, ref = element.ref, self2 = element._self, source = element._source, owner = element._owner;
        if (config2 != null) {
          hasValidRef(config2) && (ref = config2.ref, owner = ReactCurrentOwner.current), hasValidKey(config2) && (checkKeyStringCoercion(config2.key), key = "" + config2.key);
          var defaultProps;
          element.type && element.type.defaultProps && (defaultProps = element.type.defaultProps);
          for (propName in config2)
            hasOwnProperty.call(config2, propName) && !RESERVED_PROPS.hasOwnProperty(propName) && (config2[propName] === void 0 && defaultProps !== void 0 ? props[propName] = defaultProps[propName] : props[propName] = config2[propName]);
        }
        var childrenLength = arguments.length - 2;
        if (childrenLength === 1)
          props.children = children;
        else if (childrenLength > 1) {
          for (var childArray = Array(childrenLength), i = 0; i < childrenLength; i++)
            childArray[i] = arguments[i + 2];
          props.children = childArray;
        }
        return ReactElement(element.type, key, ref, self2, source, owner, props);
      }
      function isValidElement2(object) {
        return typeof object == "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
      }
      var SEPARATOR = ".", SUBSEPARATOR = ":";
      function escape2(key) {
        var escapeRegex = /[=:]/g, escaperLookup = {
          "=": "=0",
          ":": "=2"
        }, escapedString = key.replace(escapeRegex, function(match) {
          return escaperLookup[match];
        });
        return "$" + escapedString;
      }
      var didWarnAboutMaps = !1, userProvidedKeyEscapeRegex = /\/+/g;
      function escapeUserProvidedKey(text) {
        return text.replace(userProvidedKeyEscapeRegex, "$&/");
      }
      function getElementKey(element, index) {
        return typeof element == "object" && element !== null && element.key != null ? (checkKeyStringCoercion(element.key), escape2("" + element.key)) : index.toString(36);
      }
      function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
        var type = typeof children;
        (type === "undefined" || type === "boolean") && (children = null);
        var invokeCallback = !1;
        if (children === null)
          invokeCallback = !0;
        else
          switch (type) {
            case "string":
            case "number":
              invokeCallback = !0;
              break;
            case "object":
              switch (children.$$typeof) {
                case REACT_ELEMENT_TYPE:
                case REACT_PORTAL_TYPE:
                  invokeCallback = !0;
              }
          }
        if (invokeCallback) {
          var _child = children, mappedChild = callback(_child), childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
          if (isArray(mappedChild)) {
            var escapedChildKey = "";
            childKey != null && (escapedChildKey = escapeUserProvidedKey(childKey) + "/"), mapIntoArray(mappedChild, array, escapedChildKey, "", function(c) {
              return c;
            });
          } else
            mappedChild != null && (isValidElement2(mappedChild) && (mappedChild.key && (!_child || _child.key !== mappedChild.key) && checkKeyStringCoercion(mappedChild.key), mappedChild = cloneAndReplaceKey(
              mappedChild,
              escapedPrefix + (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? escapeUserProvidedKey("" + mappedChild.key) + "/" : "") + childKey
            )), array.push(mappedChild));
          return 1;
        }
        var child, nextName, subtreeCount = 0, nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
        if (isArray(children))
          for (var i = 0; i < children.length; i++)
            child = children[i], nextName = nextNamePrefix + getElementKey(child, i), subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
        else {
          var iteratorFn = getIteratorFn(children);
          if (typeof iteratorFn == "function") {
            var iterableChildren = children;
            iteratorFn === iterableChildren.entries && (didWarnAboutMaps || warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead."), didWarnAboutMaps = !0);
            for (var iterator = iteratorFn.call(iterableChildren), step, ii = 0; !(step = iterator.next()).done; )
              child = step.value, nextName = nextNamePrefix + getElementKey(child, ii++), subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
          } else if (type === "object") {
            var childrenString = String(children);
            throw new Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
          }
        }
        return subtreeCount;
      }
      function mapChildren(children, func, context) {
        if (children == null)
          return children;
        var result = [], count2 = 0;
        return mapIntoArray(children, result, "", "", function(child) {
          return func.call(context, child, count2++);
        }), result;
      }
      function countChildren(children) {
        var n = 0;
        return mapChildren(children, function() {
          n++;
        }), n;
      }
      function forEachChildren(children, forEachFunc, forEachContext) {
        mapChildren(children, function() {
          forEachFunc.apply(this, arguments);
        }, forEachContext);
      }
      function toArray(children) {
        return mapChildren(children, function(child) {
          return child;
        }) || [];
      }
      function onlyChild(children) {
        if (!isValidElement2(children))
          throw new Error("React.Children.only expected to receive a single React element child.");
        return children;
      }
      function createContext4(defaultValue) {
        var context = {
          $$typeof: REACT_CONTEXT_TYPE,
          _currentValue: defaultValue,
          _currentValue2: defaultValue,
          _threadCount: 0,
          Provider: null,
          Consumer: null,
          _defaultValue: null,
          _globalName: null
        };
        context.Provider = {
          $$typeof: REACT_PROVIDER_TYPE,
          _context: context
        };
        var hasWarnedAboutUsingNestedContextConsumers = !1, hasWarnedAboutUsingConsumerProvider = !1, hasWarnedAboutDisplayNameOnConsumer = !1;
        {
          var Consumer = {
            $$typeof: REACT_CONTEXT_TYPE,
            _context: context
          };
          Object.defineProperties(Consumer, {
            Provider: {
              get: function() {
                return hasWarnedAboutUsingConsumerProvider || (hasWarnedAboutUsingConsumerProvider = !0, error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?")), context.Provider;
              },
              set: function(_Provider) {
                context.Provider = _Provider;
              }
            },
            _currentValue: {
              get: function() {
                return context._currentValue;
              },
              set: function(_currentValue) {
                context._currentValue = _currentValue;
              }
            },
            _currentValue2: {
              get: function() {
                return context._currentValue2;
              },
              set: function(_currentValue2) {
                context._currentValue2 = _currentValue2;
              }
            },
            _threadCount: {
              get: function() {
                return context._threadCount;
              },
              set: function(_threadCount) {
                context._threadCount = _threadCount;
              }
            },
            Consumer: {
              get: function() {
                return hasWarnedAboutUsingNestedContextConsumers || (hasWarnedAboutUsingNestedContextConsumers = !0, error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?")), context.Consumer;
              }
            },
            displayName: {
              get: function() {
                return context.displayName;
              },
              set: function(displayName) {
                hasWarnedAboutDisplayNameOnConsumer || (warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName), hasWarnedAboutDisplayNameOnConsumer = !0);
              }
            }
          }), context.Consumer = Consumer;
        }
        return context._currentRenderer = null, context._currentRenderer2 = null, context;
      }
      var Uninitialized = -1, Pending = 0, Resolved = 1, Rejected = 2;
      function lazyInitializer(payload) {
        if (payload._status === Uninitialized) {
          var ctor = payload._result, thenable = ctor();
          if (thenable.then(function(moduleObject2) {
            if (payload._status === Pending || payload._status === Uninitialized) {
              var resolved = payload;
              resolved._status = Resolved, resolved._result = moduleObject2;
            }
          }, function(error2) {
            if (payload._status === Pending || payload._status === Uninitialized) {
              var rejected = payload;
              rejected._status = Rejected, rejected._result = error2;
            }
          }), payload._status === Uninitialized) {
            var pending = payload;
            pending._status = Pending, pending._result = thenable;
          }
        }
        if (payload._status === Resolved) {
          var moduleObject = payload._result;
          return moduleObject === void 0 && error(`lazy: Expected the result of a dynamic import() call. Instead received: %s

Your code should look like: 
  const MyComponent = lazy(() => import('./MyComponent'))

Did you accidentally put curly braces around the import?`, moduleObject), "default" in moduleObject || error(`lazy: Expected the result of a dynamic import() call. Instead received: %s

Your code should look like: 
  const MyComponent = lazy(() => import('./MyComponent'))`, moduleObject), moduleObject.default;
        } else
          throw payload._result;
      }
      function lazy(ctor) {
        var payload = {
          _status: Uninitialized,
          _result: ctor
        }, lazyType2 = {
          $$typeof: REACT_LAZY_TYPE,
          _payload: payload,
          _init: lazyInitializer
        };
        {
          var defaultProps, propTypes;
          Object.defineProperties(lazyType2, {
            defaultProps: {
              configurable: !0,
              get: function() {
                return defaultProps;
              },
              set: function(newDefaultProps) {
                error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it."), defaultProps = newDefaultProps, Object.defineProperty(lazyType2, "defaultProps", {
                  enumerable: !0
                });
              }
            },
            propTypes: {
              configurable: !0,
              get: function() {
                return propTypes;
              },
              set: function(newPropTypes) {
                error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it."), propTypes = newPropTypes, Object.defineProperty(lazyType2, "propTypes", {
                  enumerable: !0
                });
              }
            }
          });
        }
        return lazyType2;
      }
      function forwardRef4(render2) {
        render2 != null && render2.$$typeof === REACT_MEMO_TYPE ? error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).") : typeof render2 != "function" ? error("forwardRef requires a render function but was given %s.", render2 === null ? "null" : typeof render2) : render2.length !== 0 && render2.length !== 2 && error("forwardRef render functions accept exactly two parameters: props and ref. %s", render2.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined."), render2 != null && (render2.defaultProps != null || render2.propTypes != null) && error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
        var elementType = {
          $$typeof: REACT_FORWARD_REF_TYPE,
          render: render2
        };
        {
          var ownName;
          Object.defineProperty(elementType, "displayName", {
            enumerable: !1,
            configurable: !0,
            get: function() {
              return ownName;
            },
            set: function(name) {
              ownName = name, !render2.name && !render2.displayName && (render2.displayName = name);
            }
          });
        }
        return elementType;
      }
      var REACT_MODULE_REFERENCE;
      REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
      function isValidElementType(type) {
        return !!(typeof type == "string" || typeof type == "function" || type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing || typeof type == "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0));
      }
      function memo(type, compare) {
        isValidElementType(type) || error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
        var elementType = {
          $$typeof: REACT_MEMO_TYPE,
          type,
          compare: compare === void 0 ? null : compare
        };
        {
          var ownName;
          Object.defineProperty(elementType, "displayName", {
            enumerable: !1,
            configurable: !0,
            get: function() {
              return ownName;
            },
            set: function(name) {
              ownName = name, !type.name && !type.displayName && (type.displayName = name);
            }
          });
        }
        return elementType;
      }
      function resolveDispatcher() {
        var dispatcher = ReactCurrentDispatcher.current;
        return dispatcher === null && error(`Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:
1. You might have mismatching versions of React and the renderer (such as React DOM)
2. You might be breaking the Rules of Hooks
3. You might have more than one copy of React in the same app
See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.`), dispatcher;
      }
      function useContext6(Context) {
        var dispatcher = resolveDispatcher();
        if (Context._context !== void 0) {
          var realContext = Context._context;
          realContext.Consumer === Context ? error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?") : realContext.Provider === Context && error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
        }
        return dispatcher.useContext(Context);
      }
      function useState6(initialState) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useState(initialState);
      }
      function useReducer3(reducer, initialArg, init) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useReducer(reducer, initialArg, init);
      }
      function useRef6(initialValue) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useRef(initialValue);
      }
      function useEffect7(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useEffect(create, deps);
      }
      function useInsertionEffect(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useInsertionEffect(create, deps);
      }
      function useLayoutEffect5(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useLayoutEffect(create, deps);
      }
      function useCallback5(callback, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useCallback(callback, deps);
      }
      function useMemo6(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useMemo(create, deps);
      }
      function useImperativeHandle2(ref, create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useImperativeHandle(ref, create, deps);
      }
      function useDebugValue(value, formatterFn) {
        {
          var dispatcher = resolveDispatcher();
          return dispatcher.useDebugValue(value, formatterFn);
        }
      }
      function useTransition2() {
        var dispatcher = resolveDispatcher();
        return dispatcher.useTransition();
      }
      function useDeferredValue(value) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useDeferredValue(value);
      }
      function useId() {
        var dispatcher = resolveDispatcher();
        return dispatcher.useId();
      }
      function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
      }
      var disabledDepth = 0, prevLog, prevInfo, prevWarn, prevError, prevGroup, prevGroupCollapsed, prevGroupEnd;
      function disabledLog() {
      }
      disabledLog.__reactDisabledLog = !0;
      function disableLogs() {
        {
          if (disabledDepth === 0) {
            prevLog = console.log, prevInfo = console.info, prevWarn = console.warn, prevError = console.error, prevGroup = console.group, prevGroupCollapsed = console.groupCollapsed, prevGroupEnd = console.groupEnd;
            var props = {
              configurable: !0,
              enumerable: !0,
              value: disabledLog,
              writable: !0
            };
            Object.defineProperties(console, {
              info: props,
              log: props,
              warn: props,
              error: props,
              group: props,
              groupCollapsed: props,
              groupEnd: props
            });
          }
          disabledDepth++;
        }
      }
      function reenableLogs() {
        {
          if (disabledDepth--, disabledDepth === 0) {
            var props = {
              configurable: !0,
              enumerable: !0,
              writable: !0
            };
            Object.defineProperties(console, {
              log: assign({}, props, {
                value: prevLog
              }),
              info: assign({}, props, {
                value: prevInfo
              }),
              warn: assign({}, props, {
                value: prevWarn
              }),
              error: assign({}, props, {
                value: prevError
              }),
              group: assign({}, props, {
                value: prevGroup
              }),
              groupCollapsed: assign({}, props, {
                value: prevGroupCollapsed
              }),
              groupEnd: assign({}, props, {
                value: prevGroupEnd
              })
            });
          }
          disabledDepth < 0 && error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
        }
      }
      var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, prefix2;
      function describeBuiltInComponentFrame(name, source, ownerFn) {
        {
          if (prefix2 === void 0)
            try {
              throw Error();
            } catch (x) {
              var match = x.stack.trim().match(/\n( *(at )?)/);
              prefix2 = match && match[1] || "";
            }
          return `
` + prefix2 + name;
        }
      }
      var reentry = !1, componentFrameCache;
      {
        var PossiblyWeakMap = typeof WeakMap == "function" ? WeakMap : Map;
        componentFrameCache = new PossiblyWeakMap();
      }
      function describeNativeComponentFrame(fn, construct) {
        if (!fn || reentry)
          return "";
        {
          var frame = componentFrameCache.get(fn);
          if (frame !== void 0)
            return frame;
        }
        var control;
        reentry = !0;
        var previousPrepareStackTrace = Error.prepareStackTrace;
        Error.prepareStackTrace = void 0;
        var previousDispatcher;
        previousDispatcher = ReactCurrentDispatcher$1.current, ReactCurrentDispatcher$1.current = null, disableLogs();
        try {
          if (construct) {
            var Fake = function() {
              throw Error();
            };
            if (Object.defineProperty(Fake.prototype, "props", {
              set: function() {
                throw Error();
              }
            }), typeof Reflect == "object" && Reflect.construct) {
              try {
                Reflect.construct(Fake, []);
              } catch (x) {
                control = x;
              }
              Reflect.construct(fn, [], Fake);
            } else {
              try {
                Fake.call();
              } catch (x) {
                control = x;
              }
              fn.call(Fake.prototype);
            }
          } else {
            try {
              throw Error();
            } catch (x) {
              control = x;
            }
            fn();
          }
        } catch (sample) {
          if (sample && control && typeof sample.stack == "string") {
            for (var sampleLines = sample.stack.split(`
`), controlLines = control.stack.split(`
`), s = sampleLines.length - 1, c = controlLines.length - 1; s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]; )
              c--;
            for (; s >= 1 && c >= 0; s--, c--)
              if (sampleLines[s] !== controlLines[c]) {
                if (s !== 1 || c !== 1)
                  do
                    if (s--, c--, c < 0 || sampleLines[s] !== controlLines[c]) {
                      var _frame = `
` + sampleLines[s].replace(" at new ", " at ");
                      return fn.displayName && _frame.includes("<anonymous>") && (_frame = _frame.replace("<anonymous>", fn.displayName)), typeof fn == "function" && componentFrameCache.set(fn, _frame), _frame;
                    }
                  while (s >= 1 && c >= 0);
                break;
              }
          }
        } finally {
          reentry = !1, ReactCurrentDispatcher$1.current = previousDispatcher, reenableLogs(), Error.prepareStackTrace = previousPrepareStackTrace;
        }
        var name = fn ? fn.displayName || fn.name : "", syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
        return typeof fn == "function" && componentFrameCache.set(fn, syntheticFrame), syntheticFrame;
      }
      function describeFunctionComponentFrame(fn, source, ownerFn) {
        return describeNativeComponentFrame(fn, !1);
      }
      function shouldConstruct(Component2) {
        var prototype = Component2.prototype;
        return !!(prototype && prototype.isReactComponent);
      }
      function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null)
          return "";
        if (typeof type == "function")
          return describeNativeComponentFrame(type, shouldConstruct(type));
        if (typeof type == "string")
          return describeBuiltInComponentFrame(type);
        switch (type) {
          case REACT_SUSPENSE_TYPE:
            return describeBuiltInComponentFrame("Suspense");
          case REACT_SUSPENSE_LIST_TYPE:
            return describeBuiltInComponentFrame("SuspenseList");
        }
        if (typeof type == "object")
          switch (type.$$typeof) {
            case REACT_FORWARD_REF_TYPE:
              return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
              return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_LAZY_TYPE: {
              var lazyComponent = type, payload = lazyComponent._payload, init = lazyComponent._init;
              try {
                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
              } catch {
              }
            }
          }
        return "";
      }
      var loggedTypeFailures = {}, ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
      function setCurrentlyValidatingElement(element) {
        if (element) {
          var owner = element._owner, stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
          ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
        } else
          ReactDebugCurrentFrame$1.setExtraStackFrame(null);
      }
      function checkPropTypes(typeSpecs, values, location, componentName, element) {
        {
          var has = Function.call.bind(hasOwnProperty);
          for (var typeSpecName in typeSpecs)
            if (has(typeSpecs, typeSpecName)) {
              var error$1 = void 0;
              try {
                if (typeof typeSpecs[typeSpecName] != "function") {
                  var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                  throw err.name = "Invariant Violation", err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
              } catch (ex) {
                error$1 = ex;
              }
              error$1 && !(error$1 instanceof Error) && (setCurrentlyValidatingElement(element), error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1), setCurrentlyValidatingElement(null)), error$1 instanceof Error && !(error$1.message in loggedTypeFailures) && (loggedTypeFailures[error$1.message] = !0, setCurrentlyValidatingElement(element), error("Failed %s type: %s", location, error$1.message), setCurrentlyValidatingElement(null));
            }
        }
      }
      function setCurrentlyValidatingElement$1(element) {
        if (element) {
          var owner = element._owner, stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
          setExtraStackFrame(stack);
        } else
          setExtraStackFrame(null);
      }
      var propTypesMisspellWarningShown;
      propTypesMisspellWarningShown = !1;
      function getDeclarationErrorAddendum() {
        if (ReactCurrentOwner.current) {
          var name = getComponentNameFromType(ReactCurrentOwner.current.type);
          if (name)
            return `

Check the render method of \`` + name + "`.";
        }
        return "";
      }
      function getSourceInfoErrorAddendum(source) {
        if (source !== void 0) {
          var fileName = source.fileName.replace(/^.*[\\\/]/, ""), lineNumber = source.lineNumber;
          return `

Check your code at ` + fileName + ":" + lineNumber + ".";
        }
        return "";
      }
      function getSourceInfoErrorAddendumForProps(elementProps) {
        return elementProps != null ? getSourceInfoErrorAddendum(elementProps.__source) : "";
      }
      var ownerHasKeyUseWarning = {};
      function getCurrentComponentErrorInfo(parentType) {
        var info = getDeclarationErrorAddendum();
        if (!info) {
          var parentName = typeof parentType == "string" ? parentType : parentType.displayName || parentType.name;
          parentName && (info = `

Check the top-level render call using <` + parentName + ">.");
        }
        return info;
      }
      function validateExplicitKey(element, parentType) {
        if (!(!element._store || element._store.validated || element.key != null)) {
          element._store.validated = !0;
          var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
          if (!ownerHasKeyUseWarning[currentComponentErrorInfo]) {
            ownerHasKeyUseWarning[currentComponentErrorInfo] = !0;
            var childOwner = "";
            element && element._owner && element._owner !== ReactCurrentOwner.current && (childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + "."), setCurrentlyValidatingElement$1(element), error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner), setCurrentlyValidatingElement$1(null);
          }
        }
      }
      function validateChildKeys(node, parentType) {
        if (typeof node == "object") {
          if (isArray(node))
            for (var i = 0; i < node.length; i++) {
              var child = node[i];
              isValidElement2(child) && validateExplicitKey(child, parentType);
            }
          else if (isValidElement2(node))
            node._store && (node._store.validated = !0);
          else if (node) {
            var iteratorFn = getIteratorFn(node);
            if (typeof iteratorFn == "function" && iteratorFn !== node.entries)
              for (var iterator = iteratorFn.call(node), step; !(step = iterator.next()).done; )
                isValidElement2(step.value) && validateExplicitKey(step.value, parentType);
          }
        }
      }
      function validatePropTypes(element) {
        {
          var type = element.type;
          if (type == null || typeof type == "string")
            return;
          var propTypes;
          if (typeof type == "function")
            propTypes = type.propTypes;
          else if (typeof type == "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE))
            propTypes = type.propTypes;
          else
            return;
          if (propTypes) {
            var name = getComponentNameFromType(type);
            checkPropTypes(propTypes, element.props, "prop", name, element);
          } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
            propTypesMisspellWarningShown = !0;
            var _name = getComponentNameFromType(type);
            error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
          }
          typeof type.getDefaultProps == "function" && !type.getDefaultProps.isReactClassApproved && error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
        }
      }
      function validateFragmentProps(fragment) {
        {
          for (var keys = Object.keys(fragment.props), i = 0; i < keys.length; i++) {
            var key = keys[i];
            if (key !== "children" && key !== "key") {
              setCurrentlyValidatingElement$1(fragment), error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key), setCurrentlyValidatingElement$1(null);
              break;
            }
          }
          fragment.ref !== null && (setCurrentlyValidatingElement$1(fragment), error("Invalid attribute `ref` supplied to `React.Fragment`."), setCurrentlyValidatingElement$1(null));
        }
      }
      function createElementWithValidation(type, props, children) {
        var validType = isValidElementType(type);
        if (!validType) {
          var info = "";
          (type === void 0 || typeof type == "object" && type !== null && Object.keys(type).length === 0) && (info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.");
          var sourceInfo = getSourceInfoErrorAddendumForProps(props);
          sourceInfo ? info += sourceInfo : info += getDeclarationErrorAddendum();
          var typeString;
          type === null ? typeString = "null" : isArray(type) ? typeString = "array" : type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE ? (typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />", info = " Did you accidentally export a JSX literal instead of a component?") : typeString = typeof type, error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
        }
        var element = createElement8.apply(this, arguments);
        if (element == null)
          return element;
        if (validType)
          for (var i = 2; i < arguments.length; i++)
            validateChildKeys(arguments[i], type);
        return type === REACT_FRAGMENT_TYPE ? validateFragmentProps(element) : validatePropTypes(element), element;
      }
      var didWarnAboutDeprecatedCreateFactory = !1;
      function createFactoryWithValidation(type) {
        var validatedFactory = createElementWithValidation.bind(null, type);
        return validatedFactory.type = type, didWarnAboutDeprecatedCreateFactory || (didWarnAboutDeprecatedCreateFactory = !0, warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.")), Object.defineProperty(validatedFactory, "type", {
          enumerable: !1,
          get: function() {
            return warn("Factory.type is deprecated. Access the class directly before passing it to createFactory."), Object.defineProperty(this, "type", {
              value: type
            }), type;
          }
        }), validatedFactory;
      }
      function cloneElementWithValidation(element, props, children) {
        for (var newElement = cloneElement2.apply(this, arguments), i = 2; i < arguments.length; i++)
          validateChildKeys(arguments[i], newElement.type);
        return validatePropTypes(newElement), newElement;
      }
      function startTransition(scope, options) {
        var prevTransition = ReactCurrentBatchConfig.transition;
        ReactCurrentBatchConfig.transition = {};
        var currentTransition = ReactCurrentBatchConfig.transition;
        ReactCurrentBatchConfig.transition._updatedFibers = /* @__PURE__ */ new Set();
        try {
          scope();
        } finally {
          if (ReactCurrentBatchConfig.transition = prevTransition, prevTransition === null && currentTransition._updatedFibers) {
            var updatedFibersCount = currentTransition._updatedFibers.size;
            updatedFibersCount > 10 && warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table."), currentTransition._updatedFibers.clear();
          }
        }
      }
      var didWarnAboutMessageChannel = !1, enqueueTaskImpl = null;
      function enqueueTask(task) {
        if (enqueueTaskImpl === null)
          try {
            var requireString = ("require" + Math.random()).slice(0, 7), nodeRequire = module && module[requireString];
            enqueueTaskImpl = nodeRequire.call(module, "timers").setImmediate;
          } catch {
            enqueueTaskImpl = function(callback) {
              didWarnAboutMessageChannel === !1 && (didWarnAboutMessageChannel = !0, typeof MessageChannel > "u" && error("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning."));
              var channel = new MessageChannel();
              channel.port1.onmessage = callback, channel.port2.postMessage(void 0);
            };
          }
        return enqueueTaskImpl(task);
      }
      var actScopeDepth = 0, didWarnNoAwaitAct = !1;
      function act(callback) {
        {
          var prevActScopeDepth = actScopeDepth;
          actScopeDepth++, ReactCurrentActQueue.current === null && (ReactCurrentActQueue.current = []);
          var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy, result;
          try {
            if (ReactCurrentActQueue.isBatchingLegacy = !0, result = callback(), !prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
              var queue = ReactCurrentActQueue.current;
              queue !== null && (ReactCurrentActQueue.didScheduleLegacyUpdate = !1, flushActQueue(queue));
            }
          } catch (error2) {
            throw popActScope(prevActScopeDepth), error2;
          } finally {
            ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
          }
          if (result !== null && typeof result == "object" && typeof result.then == "function") {
            var thenableResult = result, wasAwaited = !1, thenable = {
              then: function(resolve, reject) {
                wasAwaited = !0, thenableResult.then(function(returnValue2) {
                  popActScope(prevActScopeDepth), actScopeDepth === 0 ? recursivelyFlushAsyncActWork(returnValue2, resolve, reject) : resolve(returnValue2);
                }, function(error2) {
                  popActScope(prevActScopeDepth), reject(error2);
                });
              }
            };
            return !didWarnNoAwaitAct && typeof Promise < "u" && Promise.resolve().then(function() {
            }).then(function() {
              wasAwaited || (didWarnNoAwaitAct = !0, error("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);"));
            }), thenable;
          } else {
            var returnValue = result;
            if (popActScope(prevActScopeDepth), actScopeDepth === 0) {
              var _queue = ReactCurrentActQueue.current;
              _queue !== null && (flushActQueue(_queue), ReactCurrentActQueue.current = null);
              var _thenable = {
                then: function(resolve, reject) {
                  ReactCurrentActQueue.current === null ? (ReactCurrentActQueue.current = [], recursivelyFlushAsyncActWork(returnValue, resolve, reject)) : resolve(returnValue);
                }
              };
              return _thenable;
            } else {
              var _thenable2 = {
                then: function(resolve, reject) {
                  resolve(returnValue);
                }
              };
              return _thenable2;
            }
          }
        }
      }
      function popActScope(prevActScopeDepth) {
        prevActScopeDepth !== actScopeDepth - 1 && error("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. "), actScopeDepth = prevActScopeDepth;
      }
      function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
        {
          var queue = ReactCurrentActQueue.current;
          if (queue !== null)
            try {
              flushActQueue(queue), enqueueTask(function() {
                queue.length === 0 ? (ReactCurrentActQueue.current = null, resolve(returnValue)) : recursivelyFlushAsyncActWork(returnValue, resolve, reject);
              });
            } catch (error2) {
              reject(error2);
            }
          else
            resolve(returnValue);
        }
      }
      var isFlushing = !1;
      function flushActQueue(queue) {
        if (!isFlushing) {
          isFlushing = !0;
          var i = 0;
          try {
            for (; i < queue.length; i++) {
              var callback = queue[i];
              do
                callback = callback(!0);
              while (callback !== null);
            }
            queue.length = 0;
          } catch (error2) {
            throw queue = queue.slice(i + 1), error2;
          } finally {
            isFlushing = !1;
          }
        }
      }
      var createElement$1 = createElementWithValidation, cloneElement$1 = cloneElementWithValidation, createFactory = createFactoryWithValidation, Children2 = {
        map: mapChildren,
        forEach: forEachChildren,
        count: countChildren,
        toArray,
        only: onlyChild
      };
      exports.Children = Children2, exports.Component = Component, exports.Fragment = REACT_FRAGMENT_TYPE, exports.Profiler = REACT_PROFILER_TYPE, exports.PureComponent = PureComponent, exports.StrictMode = REACT_STRICT_MODE_TYPE, exports.Suspense = REACT_SUSPENSE_TYPE, exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals, exports.cloneElement = cloneElement$1, exports.createContext = createContext4, exports.createElement = createElement$1, exports.createFactory = createFactory, exports.createRef = createRef2, exports.forwardRef = forwardRef4, exports.isValidElement = isValidElement2, exports.lazy = lazy, exports.memo = memo, exports.startTransition = startTransition, exports.unstable_act = act, exports.useCallback = useCallback5, exports.useContext = useContext6, exports.useDebugValue = useDebugValue, exports.useDeferredValue = useDeferredValue, exports.useEffect = useEffect7, exports.useId = useId, exports.useImperativeHandle = useImperativeHandle2, exports.useInsertionEffect = useInsertionEffect, exports.useLayoutEffect = useLayoutEffect5, exports.useMemo = useMemo6, exports.useReducer = useReducer3, exports.useRef = useRef6, exports.useState = useState6, exports.useSyncExternalStore = useSyncExternalStore, exports.useTransition = useTransition2, exports.version = ReactVersion, typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
    })();
  }
});

// ../../node_modules/.pnpm/react@18.2.0/node_modules/react/index.js
var require_react = __commonJS({
  "../../node_modules/.pnpm/react@18.2.0/node_modules/react/index.js"(exports, module) {
    "use strict";
    module.exports = require_react_development();
  }
});

// ../../node_modules/.pnpm/@babel+runtime@7.20.0/node_modules/@babel/runtime/helpers/esm/extends.js
function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source)
        Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);
    }
    return target;
  }, _extends.apply(this, arguments);
}
var init_extends = __esm({
  "../../node_modules/.pnpm/@babel+runtime@7.20.0/node_modules/@babel/runtime/helpers/esm/extends.js"() {
  }
});

// ../../node_modules/.pnpm/history@5.3.0/node_modules/history/index.js
function warning(cond, message) {
  if (!cond) {
    typeof console < "u" && console.warn(message);
    try {
      throw new Error(message);
    } catch {
    }
  }
}
function createBrowserHistory(options) {
  options === void 0 && (options = {});
  var _options = options, _options$window = _options.window, window2 = _options$window === void 0 ? document.defaultView : _options$window, globalHistory = window2.history;
  function getIndexAndLocation() {
    var _window$location = window2.location, pathname = _window$location.pathname, search = _window$location.search, hash = _window$location.hash, state = globalHistory.state || {};
    return [state.idx, readOnly({
      pathname,
      search,
      hash,
      state: state.usr || null,
      key: state.key || "default"
    })];
  }
  var blockedPopTx = null;
  function handlePop() {
    if (blockedPopTx)
      blockers.call(blockedPopTx), blockedPopTx = null;
    else {
      var nextAction = Action.Pop, _getIndexAndLocation = getIndexAndLocation(), nextIndex = _getIndexAndLocation[0], nextLocation = _getIndexAndLocation[1];
      if (blockers.length)
        if (nextIndex != null) {
          var delta = index - nextIndex;
          delta && (blockedPopTx = {
            action: nextAction,
            location: nextLocation,
            retry: function() {
              go(delta * -1);
            }
          }, go(delta));
        } else
          warning(
            !1,
            "You are trying to block a POP navigation to a location that was not created by the history library. The block will fail silently in production, but in general you should do all navigation with the history library (instead of using window.history.pushState directly) to avoid this situation."
          );
      else
        applyTx(nextAction);
    }
  }
  window2.addEventListener(PopStateEventType, handlePop);
  var action3 = Action.Pop, _getIndexAndLocation2 = getIndexAndLocation(), index = _getIndexAndLocation2[0], location = _getIndexAndLocation2[1], listeners = createEvents(), blockers = createEvents();
  index == null && (index = 0, globalHistory.replaceState(_extends({}, globalHistory.state, {
    idx: index
  }), ""));
  function createHref2(to) {
    return typeof to == "string" ? to : createPath(to);
  }
  function getNextLocation(to, state) {
    return state === void 0 && (state = null), readOnly(_extends({
      pathname: location.pathname,
      hash: "",
      search: ""
    }, typeof to == "string" ? parsePath(to) : to, {
      state,
      key: createKey()
    }));
  }
  function getHistoryStateAndUrl(nextLocation, index2) {
    return [{
      usr: nextLocation.state,
      key: nextLocation.key,
      idx: index2
    }, createHref2(nextLocation)];
  }
  function allowTx(action4, location2, retry) {
    return !blockers.length || (blockers.call({
      action: action4,
      location: location2,
      retry
    }), !1);
  }
  function applyTx(nextAction) {
    action3 = nextAction;
    var _getIndexAndLocation3 = getIndexAndLocation();
    index = _getIndexAndLocation3[0], location = _getIndexAndLocation3[1], listeners.call({
      action: action3,
      location
    });
  }
  function push(to, state) {
    var nextAction = Action.Push, nextLocation = getNextLocation(to, state);
    function retry() {
      push(to, state);
    }
    if (allowTx(nextAction, nextLocation, retry)) {
      var _getHistoryStateAndUr = getHistoryStateAndUrl(nextLocation, index + 1), historyState = _getHistoryStateAndUr[0], url = _getHistoryStateAndUr[1];
      try {
        globalHistory.pushState(historyState, "", url);
      } catch {
        window2.location.assign(url);
      }
      applyTx(nextAction);
    }
  }
  function replace(to, state) {
    var nextAction = Action.Replace, nextLocation = getNextLocation(to, state);
    function retry() {
      replace(to, state);
    }
    if (allowTx(nextAction, nextLocation, retry)) {
      var _getHistoryStateAndUr2 = getHistoryStateAndUrl(nextLocation, index), historyState = _getHistoryStateAndUr2[0], url = _getHistoryStateAndUr2[1];
      globalHistory.replaceState(historyState, "", url), applyTx(nextAction);
    }
  }
  function go(delta) {
    globalHistory.go(delta);
  }
  var history = {
    get action() {
      return action3;
    },
    get location() {
      return location;
    },
    createHref: createHref2,
    push,
    replace,
    go,
    back: function() {
      go(-1);
    },
    forward: function() {
      go(1);
    },
    listen: function(listener) {
      return listeners.push(listener);
    },
    block: function(blocker) {
      var unblock = blockers.push(blocker);
      return blockers.length === 1 && window2.addEventListener(BeforeUnloadEventType, promptBeforeUnload), function() {
        unblock(), blockers.length || window2.removeEventListener(BeforeUnloadEventType, promptBeforeUnload);
      };
    }
  };
  return history;
}
function promptBeforeUnload(event) {
  event.preventDefault(), event.returnValue = "";
}
function createEvents() {
  var handlers = [];
  return {
    get length() {
      return handlers.length;
    },
    push: function(fn) {
      return handlers.push(fn), function() {
        handlers = handlers.filter(function(handler) {
          return handler !== fn;
        });
      };
    },
    call: function(arg) {
      handlers.forEach(function(fn) {
        return fn && fn(arg);
      });
    }
  };
}
function createKey() {
  return Math.random().toString(36).substr(2, 8);
}
function createPath(_ref) {
  var _ref$pathname = _ref.pathname, pathname = _ref$pathname === void 0 ? "/" : _ref$pathname, _ref$search = _ref.search, search = _ref$search === void 0 ? "" : _ref$search, _ref$hash = _ref.hash, hash = _ref$hash === void 0 ? "" : _ref$hash;
  return search && search !== "?" && (pathname += search.charAt(0) === "?" ? search : "?" + search), hash && hash !== "#" && (pathname += hash.charAt(0) === "#" ? hash : "#" + hash), pathname;
}
function parsePath(path) {
  var parsedPath = {};
  if (path) {
    var hashIndex = path.indexOf("#");
    hashIndex >= 0 && (parsedPath.hash = path.substr(hashIndex), path = path.substr(0, hashIndex));
    var searchIndex = path.indexOf("?");
    searchIndex >= 0 && (parsedPath.search = path.substr(searchIndex), path = path.substr(0, searchIndex)), path && (parsedPath.pathname = path);
  }
  return parsedPath;
}
var Action, readOnly, BeforeUnloadEventType, PopStateEventType, init_history = __esm({
  "../../node_modules/.pnpm/history@5.3.0/node_modules/history/index.js"() {
    init_extends();
    (function(Action2) {
      Action2.Pop = "POP", Action2.Push = "PUSH", Action2.Replace = "REPLACE";
    })(Action || (Action = {}));
    readOnly = function(obj) {
      return Object.freeze(obj);
    };
    BeforeUnloadEventType = "beforeunload", PopStateEventType = "popstate";
  }
});

// ../../node_modules/.pnpm/react-router@6.3.0_react@18.2.0/node_modules/react-router/index.js
function invariant(cond, message) {
  if (!cond)
    throw new Error(message);
}
function warning2(cond, message) {
  if (!cond) {
    typeof console < "u" && console.warn(message);
    try {
      throw new Error(message);
    } catch {
    }
  }
}
function warningOnce(key, cond, message) {
  !cond && !alreadyWarned2[key] && (alreadyWarned2[key] = !0, warning2(!1, message));
}
function matchRoutes(routes2, locationArg, basename) {
  basename === void 0 && (basename = "/");
  let location = typeof locationArg == "string" ? parsePath(locationArg) : locationArg, pathname = stripBasename(location.pathname || "/", basename);
  if (pathname == null)
    return null;
  let branches = flattenRoutes(routes2);
  rankRouteBranches(branches);
  let matches = null;
  for (let i = 0; matches == null && i < branches.length; ++i)
    matches = matchRouteBranch(branches[i], pathname);
  return matches;
}
function flattenRoutes(routes2, branches, parentsMeta, parentPath) {
  return branches === void 0 && (branches = []), parentsMeta === void 0 && (parentsMeta = []), parentPath === void 0 && (parentPath = ""), routes2.forEach((route, index) => {
    let meta2 = {
      relativePath: route.path || "",
      caseSensitive: route.caseSensitive === !0,
      childrenIndex: index,
      route
    };
    meta2.relativePath.startsWith("/") && (meta2.relativePath.startsWith(parentPath) || invariant(!1, 'Absolute route path "' + meta2.relativePath + '" nested under path ' + ('"' + parentPath + '" is not valid. An absolute child route path ') + "must start with the combined path of all its parent routes."), meta2.relativePath = meta2.relativePath.slice(parentPath.length));
    let path = joinPaths([parentPath, meta2.relativePath]), routesMeta = parentsMeta.concat(meta2);
    route.children && route.children.length > 0 && (route.index === !0 && invariant(!1, "Index routes must not have child routes. Please remove " + ('all child routes from route path "' + path + '".')), flattenRoutes(route.children, branches, routesMeta, path)), !(route.path == null && !route.index) && branches.push({
      path,
      score: computeScore(path, route.index),
      routesMeta
    });
  }), branches;
}
function rankRouteBranches(branches) {
  branches.sort((a, b) => a.score !== b.score ? b.score - a.score : compareIndexes(a.routesMeta.map((meta2) => meta2.childrenIndex), b.routesMeta.map((meta2) => meta2.childrenIndex)));
}
function computeScore(path, index) {
  let segments = path.split("/"), initialScore = segments.length;
  return segments.some(isSplat) && (initialScore += splatPenalty), index && (initialScore += indexRouteValue), segments.filter((s) => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === "" ? emptySegmentValue : staticSegmentValue), initialScore);
}
function compareIndexes(a, b) {
  return a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]) ? a[a.length - 1] - b[b.length - 1] : 0;
}
function matchRouteBranch(branch, pathname) {
  let {
    routesMeta
  } = branch, matchedParams = {}, matchedPathname = "/", matches = [];
  for (let i = 0; i < routesMeta.length; ++i) {
    let meta2 = routesMeta[i], end = i === routesMeta.length - 1, remainingPathname = matchedPathname === "/" ? pathname : pathname.slice(matchedPathname.length) || "/", match = matchPath({
      path: meta2.relativePath,
      caseSensitive: meta2.caseSensitive,
      end
    }, remainingPathname);
    if (!match)
      return null;
    Object.assign(matchedParams, match.params);
    let route = meta2.route;
    matches.push({
      params: matchedParams,
      pathname: joinPaths([matchedPathname, match.pathname]),
      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),
      route
    }), match.pathnameBase !== "/" && (matchedPathname = joinPaths([matchedPathname, match.pathnameBase]));
  }
  return matches;
}
function matchPath(pattern, pathname) {
  typeof pattern == "string" && (pattern = {
    path: pattern,
    caseSensitive: !1,
    end: !0
  });
  let [matcher, paramNames] = compilePath(pattern.path, pattern.caseSensitive, pattern.end), match = pathname.match(matcher);
  if (!match)
    return null;
  let matchedPathname = match[0], pathnameBase = matchedPathname.replace(/(.)\/+$/, "$1"), captureGroups = match.slice(1);
  return {
    params: paramNames.reduce((memo, paramName, index) => {
      if (paramName === "*") {
        let splatValue = captureGroups[index] || "";
        pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\/+$/, "$1");
      }
      return memo[paramName] = safelyDecodeURIComponent(captureGroups[index] || "", paramName), memo;
    }, {}),
    pathname: matchedPathname,
    pathnameBase,
    pattern
  };
}
function compilePath(path, caseSensitive, end) {
  caseSensitive === void 0 && (caseSensitive = !1), end === void 0 && (end = !0), warning2(path === "*" || !path.endsWith("*") || path.endsWith("/*"), 'Route path "' + path + '" will be treated as if it were ' + ('"' + path.replace(/\*$/, "/*") + '" because the `*` character must ') + "always follow a `/` in the pattern. To get rid of this warning, " + ('please change the route path to "' + path.replace(/\*$/, "/*") + '".'));
  let paramNames = [], regexpSource = "^" + path.replace(/\/*\*?$/, "").replace(/^\/*/, "/").replace(/[\\.*+^$?{}|()[\]]/g, "\\$&").replace(/:(\w+)/g, (_, paramName) => (paramNames.push(paramName), "([^\\/]+)"));
  return path.endsWith("*") ? (paramNames.push("*"), regexpSource += path === "*" || path === "/*" ? "(.*)$" : "(?:\\/(.+)|\\/*)$") : regexpSource += end ? "\\/*$" : "(?:(?=[.~-]|%[0-9A-F]{2})|\\b|\\/|$)", [new RegExp(regexpSource, caseSensitive ? void 0 : "i"), paramNames];
}
function safelyDecodeURIComponent(value, paramName) {
  try {
    return decodeURIComponent(value);
  } catch (error) {
    return warning2(!1, 'The value for the URL param "' + paramName + '" will not be decoded because' + (' the string "' + value + '" is a malformed URL segment. This is probably') + (" due to a bad percent encoding (" + error + ").")), value;
  }
}
function resolvePath(to, fromPathname) {
  fromPathname === void 0 && (fromPathname = "/");
  let {
    pathname: toPathname,
    search = "",
    hash = ""
  } = typeof to == "string" ? parsePath(to) : to;
  return {
    pathname: toPathname ? toPathname.startsWith("/") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname,
    search: normalizeSearch(search),
    hash: normalizeHash(hash)
  };
}
function resolvePathname(relativePath, fromPathname) {
  let segments = fromPathname.replace(/\/+$/, "").split("/");
  return relativePath.split("/").forEach((segment) => {
    segment === ".." ? segments.length > 1 && segments.pop() : segment !== "." && segments.push(segment);
  }), segments.length > 1 ? segments.join("/") : "/";
}
function resolveTo(toArg, routePathnames, locationPathname) {
  let to = typeof toArg == "string" ? parsePath(toArg) : toArg, toPathname = toArg === "" || to.pathname === "" ? "/" : to.pathname, from;
  if (toPathname == null)
    from = locationPathname;
  else {
    let routePathnameIndex = routePathnames.length - 1;
    if (toPathname.startsWith("..")) {
      let toSegments = toPathname.split("/");
      for (; toSegments[0] === ".."; )
        toSegments.shift(), routePathnameIndex -= 1;
      to.pathname = toSegments.join("/");
    }
    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : "/";
  }
  let path = resolvePath(to, from);
  return toPathname && toPathname !== "/" && toPathname.endsWith("/") && !path.pathname.endsWith("/") && (path.pathname += "/"), path;
}
function getToPathname(to) {
  return to === "" || to.pathname === "" ? "/" : typeof to == "string" ? parsePath(to).pathname : to.pathname;
}
function stripBasename(pathname, basename) {
  if (basename === "/")
    return pathname;
  if (!pathname.toLowerCase().startsWith(basename.toLowerCase()))
    return null;
  let nextChar = pathname.charAt(basename.length);
  return nextChar && nextChar !== "/" ? null : pathname.slice(basename.length) || "/";
}
function useHref(to) {
  useInRouterContext() || invariant(
    !1,
    "useHref() may be used only in the context of a <Router> component."
  );
  let {
    basename,
    navigator: navigator2
  } = (0, import_react.useContext)(NavigationContext), {
    hash,
    pathname,
    search
  } = useResolvedPath(to), joinedPathname = pathname;
  if (basename !== "/") {
    let toPathname = getToPathname(to), endsWithSlash = toPathname != null && toPathname.endsWith("/");
    joinedPathname = pathname === "/" ? basename + (endsWithSlash ? "/" : "") : joinPaths([basename, pathname]);
  }
  return navigator2.createHref({
    pathname: joinedPathname,
    search,
    hash
  });
}
function useInRouterContext() {
  return (0, import_react.useContext)(LocationContext) != null;
}
function useLocation() {
  return useInRouterContext() || invariant(
    !1,
    "useLocation() may be used only in the context of a <Router> component."
  ), (0, import_react.useContext)(LocationContext).location;
}
function useNavigationType() {
  return (0, import_react.useContext)(LocationContext).navigationType;
}
function useNavigate() {
  useInRouterContext() || invariant(
    !1,
    "useNavigate() may be used only in the context of a <Router> component."
  );
  let {
    basename,
    navigator: navigator2
  } = (0, import_react.useContext)(NavigationContext), {
    matches
  } = (0, import_react.useContext)(RouteContext), {
    pathname: locationPathname
  } = useLocation(), routePathnamesJson = JSON.stringify(matches.map((match) => match.pathnameBase)), activeRef = (0, import_react.useRef)(!1);
  return (0, import_react.useEffect)(() => {
    activeRef.current = !0;
  }), (0, import_react.useCallback)(function(to, options) {
    if (options === void 0 && (options = {}), warning2(activeRef.current, "You should call navigate() in a React.useEffect(), not when your component is first rendered."), !activeRef.current)
      return;
    if (typeof to == "number") {
      navigator2.go(to);
      return;
    }
    let path = resolveTo(to, JSON.parse(routePathnamesJson), locationPathname);
    basename !== "/" && (path.pathname = joinPaths([basename, path.pathname])), (options.replace ? navigator2.replace : navigator2.push)(path, options.state);
  }, [basename, navigator2, routePathnamesJson, locationPathname]);
}
function useOutletContext() {
  return (0, import_react.useContext)(OutletContext);
}
function useOutlet(context) {
  let outlet = (0, import_react.useContext)(RouteContext).outlet;
  return outlet && /* @__PURE__ */ (0, import_react.createElement)(OutletContext.Provider, {
    value: context
  }, outlet);
}
function useParams() {
  let {
    matches
  } = (0, import_react.useContext)(RouteContext), routeMatch = matches[matches.length - 1];
  return routeMatch ? routeMatch.params : {};
}
function useResolvedPath(to) {
  let {
    matches
  } = (0, import_react.useContext)(RouteContext), {
    pathname: locationPathname
  } = useLocation(), routePathnamesJson = JSON.stringify(matches.map((match) => match.pathnameBase));
  return (0, import_react.useMemo)(() => resolveTo(to, JSON.parse(routePathnamesJson), locationPathname), [to, routePathnamesJson, locationPathname]);
}
function useRoutes(routes2, locationArg) {
  useInRouterContext() || invariant(
    !1,
    "useRoutes() may be used only in the context of a <Router> component."
  );
  let {
    matches: parentMatches
  } = (0, import_react.useContext)(RouteContext), routeMatch = parentMatches[parentMatches.length - 1], parentParams = routeMatch ? routeMatch.params : {}, parentPathname = routeMatch ? routeMatch.pathname : "/", parentPathnameBase = routeMatch ? routeMatch.pathnameBase : "/", parentRoute = routeMatch && routeMatch.route;
  {
    let parentPath = parentRoute && parentRoute.path || "";
    warningOnce(parentPathname, !parentRoute || parentPath.endsWith("*"), "You rendered descendant <Routes> (or called `useRoutes()`) at " + ('"' + parentPathname + '" (under <Route path="' + parentPath + '">) but the ') + `parent route path has no trailing "*". This means if you navigate deeper, the parent won't match anymore and therefore the child routes will never render.

` + ('Please change the parent <Route path="' + parentPath + '"> to <Route ') + ('path="' + (parentPath === "/" ? "*" : parentPath + "/*") + '">.'));
  }
  let locationFromContext = useLocation(), location;
  if (locationArg) {
    var _parsedLocationArg$pa;
    let parsedLocationArg = typeof locationArg == "string" ? parsePath(locationArg) : locationArg;
    parentPathnameBase === "/" || ((_parsedLocationArg$pa = parsedLocationArg.pathname) == null ? void 0 : _parsedLocationArg$pa.startsWith(parentPathnameBase)) || invariant(!1, "When overriding the location using `<Routes location>` or `useRoutes(routes, location)`, the location pathname must begin with the portion of the URL pathname that was " + ('matched by all parent routes. The current pathname base is "' + parentPathnameBase + '" ') + ('but pathname "' + parsedLocationArg.pathname + '" was given in the `location` prop.')), location = parsedLocationArg;
  } else
    location = locationFromContext;
  let pathname = location.pathname || "/", remainingPathname = parentPathnameBase === "/" ? pathname : pathname.slice(parentPathnameBase.length) || "/", matches = matchRoutes(routes2, {
    pathname: remainingPathname
  });
  return warning2(parentRoute || matches != null, 'No routes matched location "' + location.pathname + location.search + location.hash + '" '), warning2(matches == null || matches[matches.length - 1].route.element !== void 0, 'Matched leaf route at location "' + location.pathname + location.search + location.hash + '" does not have an element. This means it will render an <Outlet /> with a null value by default resulting in an "empty" page.'), _renderMatches(matches && matches.map((match) => Object.assign({}, match, {
    params: Object.assign({}, parentParams, match.params),
    pathname: joinPaths([parentPathnameBase, match.pathname]),
    pathnameBase: match.pathnameBase === "/" ? parentPathnameBase : joinPaths([parentPathnameBase, match.pathnameBase])
  })), parentMatches);
}
function _renderMatches(matches, parentMatches) {
  return parentMatches === void 0 && (parentMatches = []), matches == null ? null : matches.reduceRight((outlet, match, index) => /* @__PURE__ */ (0, import_react.createElement)(RouteContext.Provider, {
    children: match.route.element !== void 0 ? match.route.element : outlet,
    value: {
      outlet,
      matches: parentMatches.concat(matches.slice(0, index + 1))
    }
  }), null);
}
function Outlet(props) {
  return useOutlet(props.context);
}
function Router(_ref3) {
  let {
    basename: basenameProp = "/",
    children = null,
    location: locationProp,
    navigationType = Action.Pop,
    navigator: navigator2,
    static: staticProp = !1
  } = _ref3;
  useInRouterContext() && invariant(!1, "You cannot render a <Router> inside another <Router>. You should never have more than one in your app.");
  let basename = normalizePathname(basenameProp), navigationContext = (0, import_react.useMemo)(() => ({
    basename,
    navigator: navigator2,
    static: staticProp
  }), [basename, navigator2, staticProp]);
  typeof locationProp == "string" && (locationProp = parsePath(locationProp));
  let {
    pathname = "/",
    search = "",
    hash = "",
    state = null,
    key = "default"
  } = locationProp, location = (0, import_react.useMemo)(() => {
    let trailingPathname = stripBasename(pathname, basename);
    return trailingPathname == null ? null : {
      pathname: trailingPathname,
      search,
      hash,
      state,
      key
    };
  }, [basename, pathname, search, hash, state, key]);
  return warning2(location != null, '<Router basename="' + basename + '"> is not able to match the URL ' + ('"' + pathname + search + hash + '" because it does not start with the ') + "basename, so the <Router> won't render anything."), location == null ? null : /* @__PURE__ */ (0, import_react.createElement)(NavigationContext.Provider, {
    value: navigationContext
  }, /* @__PURE__ */ (0, import_react.createElement)(LocationContext.Provider, {
    children,
    value: {
      location,
      navigationType
    }
  }));
}
var import_react, NavigationContext, LocationContext, RouteContext, alreadyWarned2, paramRe, dynamicSegmentValue, indexRouteValue, emptySegmentValue, staticSegmentValue, splatPenalty, isSplat, joinPaths, normalizePathname, normalizeSearch, normalizeHash, OutletContext, init_react_router = __esm({
  "../../node_modules/.pnpm/react-router@6.3.0_react@18.2.0/node_modules/react-router/index.js"() {
    init_history();
    init_history();
    import_react = __toESM(require_react());
    NavigationContext = /* @__PURE__ */ (0, import_react.createContext)(null);
    NavigationContext.displayName = "Navigation";
    LocationContext = /* @__PURE__ */ (0, import_react.createContext)(null);
    LocationContext.displayName = "Location";
    RouteContext = /* @__PURE__ */ (0, import_react.createContext)({
      outlet: null,
      matches: []
    });
    RouteContext.displayName = "Route";
    alreadyWarned2 = {};
    paramRe = /^:\w+$/, dynamicSegmentValue = 3, indexRouteValue = 2, emptySegmentValue = 1, staticSegmentValue = 10, splatPenalty = -2, isSplat = (s) => s === "*";
    joinPaths = (paths) => paths.join("/").replace(/\/\/+/g, "/"), normalizePathname = (pathname) => pathname.replace(/\/+$/, "").replace(/^\/*/, "/"), normalizeSearch = (search) => !search || search === "?" ? "" : search.startsWith("?") ? search : "?" + search, normalizeHash = (hash) => !hash || hash === "#" ? "" : hash.startsWith("#") ? hash : "#" + hash;
    OutletContext = /* @__PURE__ */ (0, import_react.createContext)(null);
  }
});

// ../../node_modules/.pnpm/react-router-dom@6.3.0_biqbaboplfbrettd7655fr4n2y/node_modules/react-router-dom/index.js
function _extends2() {
  return _extends2 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source)
        Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);
    }
    return target;
  }, _extends2.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null)
    return {};
  var target = {}, sourceKeys = Object.keys(source), key, i;
  for (i = 0; i < sourceKeys.length; i++)
    key = sourceKeys[i], !(excluded.indexOf(key) >= 0) && (target[key] = source[key]);
  return target;
}
function warning3(cond, message) {
  if (!cond) {
    typeof console < "u" && console.warn(message);
    try {
      throw new Error(message);
    } catch {
    }
  }
}
function HistoryRouter(_ref3) {
  let {
    basename,
    children,
    history
  } = _ref3, [state, setState] = (0, import_react2.useState)({
    action: history.action,
    location: history.location
  });
  return (0, import_react2.useLayoutEffect)(() => history.listen(setState), [history]), /* @__PURE__ */ (0, import_react2.createElement)(Router, {
    basename,
    children,
    location: state.location,
    navigationType: state.action,
    navigator: history
  });
}
function isModifiedEvent(event) {
  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
}
function useLinkClickHandler(to, _temp) {
  let {
    target,
    replace: replaceProp,
    state
  } = _temp === void 0 ? {} : _temp, navigate = useNavigate(), location = useLocation(), path = useResolvedPath(to);
  return (0, import_react2.useCallback)((event) => {
    if (event.button === 0 && (!target || target === "_self") && !isModifiedEvent(event)) {
      event.preventDefault();
      let replace = !!replaceProp || createPath(location) === createPath(path);
      navigate(to, {
        replace,
        state
      });
    }
  }, [location, navigate, path, replaceProp, state, target, to]);
}
function useSearchParams(defaultInit) {
  warning3(typeof URLSearchParams < "u", "You cannot use the `useSearchParams` hook in a browser that does not support the URLSearchParams API. If you need to support Internet Explorer 11, we recommend you load a polyfill such as https://github.com/ungap/url-search-params\n\nIf you're unsure how to load polyfills, we recommend you check out https://polyfill.io/v3/ which provides some recommendations about how to load polyfills only for users that need them, instead of for every user.");
  let defaultSearchParamsRef = (0, import_react2.useRef)(createSearchParams(defaultInit)), location = useLocation(), searchParams = (0, import_react2.useMemo)(() => {
    let searchParams2 = createSearchParams(location.search);
    for (let key of defaultSearchParamsRef.current.keys())
      searchParams2.has(key) || defaultSearchParamsRef.current.getAll(key).forEach((value) => {
        searchParams2.append(key, value);
      });
    return searchParams2;
  }, [location.search]), navigate = useNavigate(), setSearchParams = (0, import_react2.useCallback)((nextInit, navigateOptions) => {
    navigate("?" + createSearchParams(nextInit), navigateOptions);
  }, [navigate]);
  return [searchParams, setSearchParams];
}
function createSearchParams(init) {
  return init === void 0 && (init = ""), new URLSearchParams(typeof init == "string" || Array.isArray(init) || init instanceof URLSearchParams ? init : Object.keys(init).reduce((memo, key) => {
    let value = init[key];
    return memo.concat(Array.isArray(value) ? value.map((v) => [key, v]) : [[key, value]]);
  }, []));
}
var import_react2, _excluded, _excluded2, Link, NavLink, init_react_router_dom = __esm({
  "../../node_modules/.pnpm/react-router-dom@6.3.0_biqbaboplfbrettd7655fr4n2y/node_modules/react-router-dom/index.js"() {
    import_react2 = __toESM(require_react());
    init_react_router();
    init_react_router();
    _excluded = ["onClick", "reloadDocument", "replace", "state", "target", "to"], _excluded2 = ["aria-current", "caseSensitive", "className", "end", "style", "to", "children"];
    HistoryRouter.displayName = "unstable_HistoryRouter";
    Link = /* @__PURE__ */ (0, import_react2.forwardRef)(function(_ref4, ref) {
      let {
        onClick,
        reloadDocument,
        replace = !1,
        state,
        target,
        to
      } = _ref4, rest = _objectWithoutPropertiesLoose(_ref4, _excluded), href = useHref(to), internalOnClick = useLinkClickHandler(to, {
        replace,
        state,
        target
      });
      function handleClick(event) {
        onClick && onClick(event), !event.defaultPrevented && !reloadDocument && internalOnClick(event);
      }
      return /* @__PURE__ */ (0, import_react2.createElement)("a", _extends2({}, rest, {
        href,
        onClick: handleClick,
        ref,
        target
      }));
    });
    Link.displayName = "Link";
    NavLink = /* @__PURE__ */ (0, import_react2.forwardRef)(function(_ref5, ref) {
      let {
        "aria-current": ariaCurrentProp = "page",
        caseSensitive = !1,
        className: classNameProp = "",
        end = !1,
        style: styleProp,
        to,
        children
      } = _ref5, rest = _objectWithoutPropertiesLoose(_ref5, _excluded2), location = useLocation(), path = useResolvedPath(to), locationPathname = location.pathname, toPathname = path.pathname;
      caseSensitive || (locationPathname = locationPathname.toLowerCase(), toPathname = toPathname.toLowerCase());
      let isActive = locationPathname === toPathname || !end && locationPathname.startsWith(toPathname) && locationPathname.charAt(toPathname.length) === "/", ariaCurrent = isActive ? ariaCurrentProp : void 0, className;
      typeof classNameProp == "function" ? className = classNameProp({
        isActive
      }) : className = [classNameProp, isActive ? "active" : null].filter(Boolean).join(" ");
      let style = typeof styleProp == "function" ? styleProp({
        isActive
      }) : styleProp;
      return /* @__PURE__ */ (0, import_react2.createElement)(Link, _extends2({}, rest, {
        "aria-current": ariaCurrent,
        className,
        ref,
        style,
        to
      }), typeof children == "function" ? children({
        isActive
      }) : children);
    });
    NavLink.displayName = "NavLink";
  }
});

// ../../node_modules/.pnpm/@remix-run+server-runtime@1.7.4_biqbaboplfbrettd7655fr4n2y/node_modules/@remix-run/server-runtime/dist/esm/routeMatching.js
function matchServerRoutes(routes2, pathname) {
  let matches = matchRoutes(routes2, pathname);
  return matches ? matches.map((match) => ({
    params: match.params,
    pathname: match.pathname,
    route: match.route
  })) : null;
}
var init_routeMatching = __esm({
  "../../node_modules/.pnpm/@remix-run+server-runtime@1.7.4_biqbaboplfbrettd7655fr4n2y/node_modules/@remix-run/server-runtime/dist/esm/routeMatching.js"() {
    init_react_router_dom();
  }
});

// ../../node_modules/.pnpm/@remix-run+server-runtime@1.7.4_biqbaboplfbrettd7655fr4n2y/node_modules/@remix-run/server-runtime/dist/esm/routes.js
function createRoutes(manifest, parentId) {
  return Object.entries(manifest).filter(([, route]) => route.parentId === parentId).map(([id, route]) => ({
    ...route,
    children: createRoutes(manifest, id)
  }));
}
var init_routes = __esm({
  "../../node_modules/.pnpm/@remix-run+server-runtime@1.7.4_biqbaboplfbrettd7655fr4n2y/node_modules/@remix-run/server-runtime/dist/esm/routes.js"() {
  }
});

// ../../node_modules/.pnpm/@remix-run+server-runtime@1.7.4_biqbaboplfbrettd7655fr4n2y/node_modules/@remix-run/server-runtime/dist/esm/markup.js
function escapeHtml(html) {
  return html.replace(ESCAPE_REGEX, (match) => ESCAPE_LOOKUP[match]);
}
var ESCAPE_LOOKUP, ESCAPE_REGEX, init_markup = __esm({
  "../../node_modules/.pnpm/@remix-run+server-runtime@1.7.4_biqbaboplfbrettd7655fr4n2y/node_modules/@remix-run/server-runtime/dist/esm/markup.js"() {
    ESCAPE_LOOKUP = {
      "&": "\\u0026",
      ">": "\\u003e",
      "<": "\\u003c",
      "\u2028": "\\u2028",
      "\u2029": "\\u2029"
    }, ESCAPE_REGEX = /[&><\u2028\u2029]/g;
  }
});

// ../../node_modules/.pnpm/@remix-run+server-runtime@1.7.4_biqbaboplfbrettd7655fr4n2y/node_modules/@remix-run/server-runtime/dist/esm/serverHandoff.js
function createServerHandoffString(serverHandoff) {
  return escapeHtml(JSON.stringify(serverHandoff));
}
var init_serverHandoff = __esm({
  "../../node_modules/.pnpm/@remix-run+server-runtime@1.7.4_biqbaboplfbrettd7655fr4n2y/node_modules/@remix-run/server-runtime/dist/esm/serverHandoff.js"() {
    init_markup();
  }
});

// ../../node_modules/.pnpm/@remix-run+server-runtime@1.7.4_biqbaboplfbrettd7655fr4n2y/node_modules/@remix-run/server-runtime/dist/esm/server.js
async function handleDataRequest({
  loadContext,
  matches,
  request,
  serverMode
}) {
  if (!isValidRequestMethod(request))
    return errorBoundaryError(new Error(`Invalid request method "${request.method}"`), 405);
  let url = new URL(request.url);
  if (!matches)
    return errorBoundaryError(new Error(`No route matches URL "${url.pathname}"`), 404);
  let response, match;
  try {
    if (isActionRequest(request))
      match = getRequestMatch(url, matches), response = await callRouteAction({
        loadContext,
        action: match.route.module.action,
        routeId: match.route.id,
        params: match.params,
        request
      });
    else {
      let routeId = url.searchParams.get("_data");
      if (!routeId)
        return errorBoundaryError(new Error("Missing route id in ?_data"), 403);
      let tempMatch = matches.find((match2) => match2.route.id === routeId);
      if (!tempMatch)
        return errorBoundaryError(new Error(`Route "${routeId}" does not match URL "${url.pathname}"`), 403);
      match = tempMatch, response = await callRouteLoader({
        loadContext,
        loader: match.route.module.loader,
        routeId: match.route.id,
        params: match.params,
        request
      });
    }
    if (isRedirectResponse(response)) {
      let headers = new Headers(response.headers);
      return headers.set("X-Remix-Redirect", headers.get("Location")), headers.delete("Location"), response.headers.get("Set-Cookie") !== null && headers.set("X-Remix-Revalidate", "yes"), new Response(null, {
        status: 204,
        headers
      });
    }
    return response;
  } catch (error) {
    return serverMode !== ServerMode.Test && console.error(error), serverMode === ServerMode.Development && error instanceof Error ? errorBoundaryError(error, 500) : errorBoundaryError(new Error("Unexpected Server Error"), 500);
  }
}
async function handleDocumentRequest({
  build,
  loadContext,
  matches,
  request,
  routes: routes2,
  serverMode
}) {
  let url = new URL(request.url), appState = {
    trackBoundaries: !0,
    trackCatchBoundaries: !0,
    catchBoundaryRouteId: null,
    renderBoundaryRouteId: null,
    loaderBoundaryRouteId: null,
    error: void 0,
    catch: void 0
  };
  isValidRequestMethod(request) ? matches || (appState.trackCatchBoundaries = !1, appState.catch = {
    data: null,
    status: 404,
    statusText: "Not Found"
  }) : (matches = null, appState.trackCatchBoundaries = !1, appState.catch = {
    data: null,
    status: 405,
    statusText: "Method Not Allowed"
  });
  let actionStatus, actionData, actionMatch, actionResponse;
  if (matches && isActionRequest(request)) {
    actionMatch = getRequestMatch(url, matches);
    try {
      if (actionResponse = await callRouteAction({
        loadContext,
        action: actionMatch.route.module.action,
        routeId: actionMatch.route.id,
        params: actionMatch.params,
        request
      }), isRedirectResponse(actionResponse))
        return actionResponse;
      actionStatus = {
        status: actionResponse.status,
        statusText: actionResponse.statusText
      }, isCatchResponse(actionResponse) ? (appState.catchBoundaryRouteId = getDeepestRouteIdWithBoundary(matches, "CatchBoundary"), appState.trackCatchBoundaries = !1, appState.catch = {
        ...actionStatus,
        data: await extractData(actionResponse)
      }) : actionData = {
        [actionMatch.route.id]: await extractData(actionResponse)
      };
    } catch (error) {
      appState.loaderBoundaryRouteId = getDeepestRouteIdWithBoundary(matches, "ErrorBoundary"), appState.trackBoundaries = !1, appState.error = await serializeError(error), serverMode !== ServerMode.Test && console.error(`There was an error running the action for route ${actionMatch.route.id}`);
    }
  }
  let routeModules = createEntryRouteModules(build.routes), matchesToLoad = matches || [];
  appState.catch ? matchesToLoad = getMatchesUpToDeepestBoundary(matchesToLoad, "CatchBoundary").slice(0, -1) : appState.error && (matchesToLoad = getMatchesUpToDeepestBoundary(matchesToLoad, "ErrorBoundary").slice(0, -1));
  let loaderRequest = new Request(request.url, {
    body: null,
    headers: request.headers,
    method: request.method,
    redirect: request.redirect,
    signal: request.signal
  }), routeLoaderResults = await Promise.allSettled(matchesToLoad.map((match) => match.route.module.loader ? callRouteLoader({
    loadContext,
    loader: match.route.module.loader,
    routeId: match.route.id,
    params: match.params,
    request: loaderRequest
  }) : Promise.resolve(void 0))), actionCatch = appState.catch, actionError = appState.error, actionCatchBoundaryRouteId = appState.catchBoundaryRouteId, actionLoaderBoundaryRouteId = appState.loaderBoundaryRouteId;
  appState.catch = void 0, appState.error = void 0;
  let routeLoaderResponses = {}, loaderStatusCodes = [], routeData = {};
  for (let index = 0; index < matchesToLoad.length; index++) {
    let match = matchesToLoad[index], result = routeLoaderResults[index], error = result.status === "rejected" ? result.reason : void 0, response = result.status === "fulfilled" ? result.value : void 0, isRedirect = response ? isRedirectResponse(response) : !1, isCatch = response ? isCatchResponse(response) : !1;
    if (appState.catch || appState.error)
      break;
    if (!actionCatch && !actionError && response && isRedirect)
      return response;
    if (match.route.module.CatchBoundary && (appState.catchBoundaryRouteId = match.route.id), match.route.module.ErrorBoundary && (appState.loaderBoundaryRouteId = match.route.id), error) {
      loaderStatusCodes.push(500), appState.trackBoundaries = !1, appState.error = await serializeError(error), serverMode !== ServerMode.Test && console.error(`There was an error running the data loader for route ${match.route.id}`);
      break;
    } else if (response)
      if (routeLoaderResponses[match.route.id] = response, loaderStatusCodes.push(response.status), isCatch) {
        appState.trackCatchBoundaries = !1, appState.catch = {
          data: await extractData(response),
          status: response.status,
          statusText: response.statusText
        };
        break;
      } else
        routeData[match.route.id] = await extractData(response);
  }
  appState.catch || (appState.catchBoundaryRouteId = actionCatchBoundaryRouteId), appState.error || (appState.loaderBoundaryRouteId = actionLoaderBoundaryRouteId), appState.catch = actionCatch || appState.catch, appState.error = actionError || appState.error;
  let renderableMatches = getRenderableMatches(matches, appState);
  if (!renderableMatches) {
    renderableMatches = [];
    let root = routes2[0];
    root != null && root.module.CatchBoundary && (appState.catchBoundaryRouteId = "root", renderableMatches.push({
      params: {},
      pathname: "",
      route: routes2[0]
    }));
  }
  let notOkResponse = actionStatus && actionStatus.status !== 200 ? actionStatus.status : loaderStatusCodes.find((status) => status !== 200), responseStatusCode = appState.error ? 500 : typeof notOkResponse == "number" ? notOkResponse : appState.catch ? appState.catch.status : 200, responseHeaders = getDocumentHeaders(build, renderableMatches, routeLoaderResponses, actionResponse), entryMatches = createEntryMatches(renderableMatches, build.assets.routes), serverHandoff = {
    actionData,
    appState,
    matches: entryMatches,
    routeData
  }, entryContext = {
    ...serverHandoff,
    manifest: build.assets,
    routeModules,
    serverHandoffString: createServerHandoffString(serverHandoff)
  }, handleDocumentRequest2 = build.entry.module.default;
  try {
    return await handleDocumentRequest2(request, responseStatusCode, responseHeaders, entryContext);
  } catch (error) {
    responseStatusCode = 500, appState.trackBoundaries = !1, appState.error = await serializeError(error), entryContext.serverHandoffString = createServerHandoffString(serverHandoff);
    try {
      return await handleDocumentRequest2(request, responseStatusCode, responseHeaders, entryContext);
    } catch (error2) {
      return returnLastResortErrorResponse(error2, serverMode);
    }
  }
}
async function handleResourceRequest({
  loadContext,
  matches,
  request,
  serverMode
}) {
  let match = matches.slice(-1)[0];
  try {
    return isActionRequest(request) ? await callRouteAction({
      loadContext,
      action: match.route.module.action,
      routeId: match.route.id,
      params: match.params,
      request
    }) : await callRouteLoader({
      loadContext,
      loader: match.route.module.loader,
      routeId: match.route.id,
      params: match.params,
      request
    });
  } catch (error) {
    return returnLastResortErrorResponse(error, serverMode);
  }
}
function isActionRequest({
  method
}) {
  return validActionMethods.has(method.toUpperCase());
}
function isValidRequestMethod({
  method
}) {
  return validRequestMethods.has(method.toUpperCase());
}
async function errorBoundaryError(error, status) {
  return json(await serializeError(error), {
    status,
    headers: {
      "X-Remix-Error": "yes"
    }
  });
}
function isIndexRequestUrl(url) {
  return url.searchParams.getAll("index").some((param) => param === "");
}
function getRequestMatch(url, matches) {
  let match = matches.slice(-1)[0];
  return isIndexRequestUrl(url) && match.route.id.endsWith("/index") ? match : getPathContributingMatches(matches).slice(-1)[0];
}
function getPathContributingMatches(matches) {
  return matches.filter((match, index) => index === 0 || !match.route.index && match.route.path && match.route.path.length > 0);
}
function getDeepestRouteIdWithBoundary(matches, key) {
  let matched = getMatchesUpToDeepestBoundary(matches, key).slice(-1)[0];
  return matched ? matched.route.id : null;
}
function getMatchesUpToDeepestBoundary(matches, key) {
  let deepestBoundaryIndex = -1;
  return matches.forEach((match, index) => {
    match.route.module[key] && (deepestBoundaryIndex = index);
  }), deepestBoundaryIndex === -1 ? [] : matches.slice(0, deepestBoundaryIndex + 1);
}
function getRenderableMatches(matches, appState) {
  if (!matches)
    return null;
  if (!appState.catch && !appState.error)
    return matches;
  let lastRenderableIndex = -1;
  return matches.forEach((match, index) => {
    let id = match.route.id;
    (appState.renderBoundaryRouteId === id || appState.loaderBoundaryRouteId === id || appState.catchBoundaryRouteId === id) && (lastRenderableIndex = index);
  }), matches.slice(0, lastRenderableIndex + 1);
}
function returnLastResortErrorResponse(error, serverMode) {
  serverMode !== ServerMode.Test && console.error(error);
  let message = "Unexpected Server Error";
  return serverMode !== ServerMode.Production && (message += `

${String(error)}`), new Response(message, {
    status: 500,
    headers: {
      "Content-Type": "text/plain"
    }
  });
}
var createRequestHandler, validActionMethods, validRequestMethods, init_server = __esm({
  "../../node_modules/.pnpm/@remix-run+server-runtime@1.7.4_biqbaboplfbrettd7655fr4n2y/node_modules/@remix-run/server-runtime/dist/esm/server.js"() {
    init_data();
    init_entry();
    init_errors();
    init_headers();
    init_mode();
    init_routeMatching();
    init_routes();
    init_responses();
    init_serverHandoff();
    createRequestHandler = (build, mode) => {
      let routes2 = createRoutes(build.routes), serverMode = isServerMode(mode) ? mode : ServerMode.Production;
      return async function(request, loadContext = {}) {
        let url = new URL(request.url), matches = matchServerRoutes(routes2, url.pathname), response;
        if (url.searchParams.has("_data")) {
          let responsePromise = handleDataRequest({
            request,
            loadContext,
            matches,
            serverMode
          }), routeId = url.searchParams.get("_data");
          if (response = await responsePromise, build.entry.module.handleDataRequest) {
            let match = matches.find((match2) => match2.route.id == routeId);
            response = await build.entry.module.handleDataRequest(response, {
              context: loadContext,
              params: match.params,
              request
            });
          }
        } else
          matches && matches[matches.length - 1].route.module.default == null ? response = await handleResourceRequest({
            request,
            loadContext,
            matches,
            serverMode
          }) : response = await handleDocumentRequest({
            build,
            loadContext,
            matches,
            request,
            routes: routes2,
            serverMode
          });
        return request.method === "HEAD" ? new Response(null, {
          headers: response.headers,
          status: response.status,
          statusText: response.statusText
        }) : response;
      };
    };
    validActionMethods = /* @__PURE__ */ new Set(["POST", "PUT", "PATCH", "DELETE"]);
    validRequestMethods = /* @__PURE__ */ new Set(["GET", "HEAD", ...validActionMethods]);
  }
});

// ../../node_modules/.pnpm/@remix-run+server-runtime@1.7.4_biqbaboplfbrettd7655fr4n2y/node_modules/@remix-run/server-runtime/dist/esm/sessions.js
function flash(name) {
  return `__flash_${name}__`;
}
function warnOnceAboutSigningSessionCookie(cookie) {
  warnOnce(cookie.isSigned, `The "${cookie.name}" cookie is not signed, but session cookies should be signed to prevent tampering on the client before they are sent back to the server. See https://remix.run/api/remix#signing-cookies for more information.`);
}
var createSession, isSession, createSessionStorageFactory, init_sessions = __esm({
  "../../node_modules/.pnpm/@remix-run+server-runtime@1.7.4_biqbaboplfbrettd7655fr4n2y/node_modules/@remix-run/server-runtime/dist/esm/sessions.js"() {
    init_cookies();
    init_warnings();
    createSession = (initialData = {}, id = "") => {
      let map = new Map(Object.entries(initialData));
      return {
        get id() {
          return id;
        },
        get data() {
          return Object.fromEntries(map);
        },
        has(name) {
          return map.has(name) || map.has(flash(name));
        },
        get(name) {
          if (map.has(name))
            return map.get(name);
          let flashName = flash(name);
          if (map.has(flashName)) {
            let value = map.get(flashName);
            return map.delete(flashName), value;
          }
        },
        set(name, value) {
          map.set(name, value);
        },
        flash(name, value) {
          map.set(flash(name), value);
        },
        unset(name) {
          map.delete(name);
        }
      };
    }, isSession = (object) => object != null && typeof object.id == "string" && typeof object.data < "u" && typeof object.has == "function" && typeof object.get == "function" && typeof object.set == "function" && typeof object.flash == "function" && typeof object.unset == "function", createSessionStorageFactory = (createCookie2) => ({
      cookie: cookieArg,
      createData,
      readData,
      updateData,
      deleteData
    }) => {
      let cookie = isCookie(cookieArg) ? cookieArg : createCookie2((cookieArg == null ? void 0 : cookieArg.name) || "__session", cookieArg);
      return warnOnceAboutSigningSessionCookie(cookie), {
        async getSession(cookieHeader, options) {
          let id = cookieHeader && await cookie.parse(cookieHeader, options), data = id && await readData(id);
          return createSession(data || {}, id || "");
        },
        async commitSession(session, options) {
          let {
            id,
            data
          } = session;
          return id ? await updateData(id, data, cookie.expires) : id = await createData(data, cookie.expires), cookie.serialize(id, options);
        },
        async destroySession(session, options) {
          return await deleteData(session.id), cookie.serialize("", {
            ...options,
            expires: new Date(0)
          });
        }
      };
    };
  }
});

// ../../node_modules/.pnpm/@remix-run+server-runtime@1.7.4_biqbaboplfbrettd7655fr4n2y/node_modules/@remix-run/server-runtime/dist/esm/sessions/cookieStorage.js
var createCookieSessionStorageFactory, init_cookieStorage = __esm({
  "../../node_modules/.pnpm/@remix-run+server-runtime@1.7.4_biqbaboplfbrettd7655fr4n2y/node_modules/@remix-run/server-runtime/dist/esm/sessions/cookieStorage.js"() {
    init_cookies();
    init_sessions();
    createCookieSessionStorageFactory = (createCookie2) => ({
      cookie: cookieArg
    } = {}) => {
      let cookie = isCookie(cookieArg) ? cookieArg : createCookie2((cookieArg == null ? void 0 : cookieArg.name) || "__session", cookieArg);
      return warnOnceAboutSigningSessionCookie(cookie), {
        async getSession(cookieHeader, options) {
          return createSession(cookieHeader && await cookie.parse(cookieHeader, options) || {});
        },
        async commitSession(session, options) {
          let serializedCookie = await cookie.serialize(session.data, options);
          if (serializedCookie.length > 4096)
            throw new Error("Cookie length will exceed browser maximum. Length: " + serializedCookie.length);
          return serializedCookie;
        },
        async destroySession(_session, options) {
          return cookie.serialize("", {
            ...options,
            expires: new Date(0)
          });
        }
      };
    };
  }
});

// ../../node_modules/.pnpm/@remix-run+server-runtime@1.7.4_biqbaboplfbrettd7655fr4n2y/node_modules/@remix-run/server-runtime/dist/esm/sessions/memoryStorage.js
var createMemorySessionStorageFactory, init_memoryStorage = __esm({
  "../../node_modules/.pnpm/@remix-run+server-runtime@1.7.4_biqbaboplfbrettd7655fr4n2y/node_modules/@remix-run/server-runtime/dist/esm/sessions/memoryStorage.js"() {
    createMemorySessionStorageFactory = (createSessionStorage2) => ({
      cookie
    } = {}) => {
      let uniqueId = 0, map = /* @__PURE__ */ new Map();
      return createSessionStorage2({
        cookie,
        async createData(data, expires) {
          let id = (++uniqueId).toString();
          return map.set(id, {
            data,
            expires
          }), id;
        },
        async readData(id) {
          if (map.has(id)) {
            let {
              data,
              expires
            } = map.get(id);
            if (!expires || expires > new Date())
              return data;
            expires && map.delete(id);
          }
          return null;
        },
        async updateData(id, data, expires) {
          map.set(id, {
            data,
            expires
          });
        },
        async deleteData(id) {
          map.delete(id);
        }
      });
    };
  }
});

// ../../node_modules/.pnpm/@remix-run+server-runtime@1.7.4_biqbaboplfbrettd7655fr4n2y/node_modules/@remix-run/server-runtime/dist/esm/upload/errors.js
var MaxPartSizeExceededError, init_errors2 = __esm({
  "../../node_modules/.pnpm/@remix-run+server-runtime@1.7.4_biqbaboplfbrettd7655fr4n2y/node_modules/@remix-run/server-runtime/dist/esm/upload/errors.js"() {
    MaxPartSizeExceededError = class extends Error {
      constructor(field, maxBytes) {
        super(`Field "${field}" exceeded upload size of ${maxBytes} bytes.`), this.field = field, this.maxBytes = maxBytes;
      }
    };
  }
});

// ../../node_modules/.pnpm/@remix-run+server-runtime@1.7.4_biqbaboplfbrettd7655fr4n2y/node_modules/@remix-run/server-runtime/dist/esm/upload/memoryUploadHandler.js
function createMemoryUploadHandler({
  filter,
  maxPartSize = 3e6
} = {}) {
  return async ({
    filename,
    contentType,
    name,
    data
  }) => {
    if (filter && !await filter({
      filename,
      contentType,
      name
    }))
      return;
    let size = 0, chunks = [];
    for await (let chunk of data) {
      if (size += chunk.byteLength, size > maxPartSize)
        throw new MaxPartSizeExceededError(name, maxPartSize);
      chunks.push(chunk);
    }
    return typeof filename == "string" ? new File(chunks, filename, {
      type: contentType
    }) : await new Blob(chunks, {
      type: contentType
    }).text();
  };
}
var init_memoryUploadHandler = __esm({
  "../../node_modules/.pnpm/@remix-run+server-runtime@1.7.4_biqbaboplfbrettd7655fr4n2y/node_modules/@remix-run/server-runtime/dist/esm/upload/memoryUploadHandler.js"() {
    init_errors2();
  }
});

// ../../node_modules/.pnpm/@remix-run+server-runtime@1.7.4_biqbaboplfbrettd7655fr4n2y/node_modules/@remix-run/server-runtime/dist/esm/index.js
var esm_exports = {};
__export(esm_exports, {
  MaxPartSizeExceededError: () => MaxPartSizeExceededError,
  createCookieFactory: () => createCookieFactory,
  createCookieSessionStorageFactory: () => createCookieSessionStorageFactory,
  createMemorySessionStorageFactory: () => createMemorySessionStorageFactory,
  createRequestHandler: () => createRequestHandler,
  createSession: () => createSession,
  createSessionStorageFactory: () => createSessionStorageFactory,
  isCookie: () => isCookie,
  isSession: () => isSession,
  json: () => json,
  redirect: () => redirect,
  unstable_composeUploadHandlers: () => composeUploadHandlers,
  unstable_createMemoryUploadHandler: () => createMemoryUploadHandler,
  unstable_parseMultipartFormData: () => parseMultipartFormData
});
var init_esm = __esm({
  "../../node_modules/.pnpm/@remix-run+server-runtime@1.7.4_biqbaboplfbrettd7655fr4n2y/node_modules/@remix-run/server-runtime/dist/esm/index.js"() {
    init_cookies();
    init_formData();
    init_responses();
    init_server();
    init_sessions();
    init_cookieStorage();
    init_memoryStorage();
    init_memoryUploadHandler();
    init_errors2();
  }
});

// ../../node_modules/.pnpm/@remix-run+cloudflare@1.7.4_dp7lsxfcjoxmh2gy56a7syibgu/node_modules/@remix-run/cloudflare/dist/crypto.js
var require_crypto = __commonJS({
  "../../node_modules/.pnpm/@remix-run+cloudflare@1.7.4_dp7lsxfcjoxmh2gy56a7syibgu/node_modules/@remix-run/cloudflare/dist/crypto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var encoder = new TextEncoder(), sign = async (value, secret) => {
      let key = await createKey2(secret, ["sign"]), data = encoder.encode(value), signature = await crypto.subtle.sign("HMAC", key, data), hash = btoa(String.fromCharCode(...new Uint8Array(signature))).replace(/=+$/, "");
      return value + "." + hash;
    }, unsign = async (signed, secret) => {
      let index = signed.lastIndexOf("."), value = signed.slice(0, index), hash = signed.slice(index + 1), key = await createKey2(secret, ["verify"]), data = encoder.encode(value), signature = byteStringToUint8Array(atob(hash));
      return await crypto.subtle.verify("HMAC", key, signature, data) ? value : !1;
    };
    async function createKey2(secret, usages) {
      return await crypto.subtle.importKey("raw", encoder.encode(secret), {
        name: "HMAC",
        hash: "SHA-256"
      }, !1, usages);
    }
    function byteStringToUint8Array(byteString) {
      let array = new Uint8Array(byteString.length);
      for (let i = 0; i < byteString.length; i++)
        array[i] = byteString.charCodeAt(i);
      return array;
    }
    exports.sign = sign;
    exports.unsign = unsign;
  }
});

// ../../node_modules/.pnpm/@remix-run+cloudflare@1.7.4_dp7lsxfcjoxmh2gy56a7syibgu/node_modules/@remix-run/cloudflare/dist/implementations.js
var require_implementations = __commonJS({
  "../../node_modules/.pnpm/@remix-run+cloudflare@1.7.4_dp7lsxfcjoxmh2gy56a7syibgu/node_modules/@remix-run/cloudflare/dist/implementations.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var serverRuntime = (init_esm(), __toCommonJS(esm_exports)), crypto2 = require_crypto(), createCookie2 = serverRuntime.createCookieFactory({
      sign: crypto2.sign,
      unsign: crypto2.unsign
    }), createCookieSessionStorage2 = serverRuntime.createCookieSessionStorageFactory(createCookie2), createSessionStorage2 = serverRuntime.createSessionStorageFactory(createCookie2), createMemorySessionStorage2 = serverRuntime.createMemorySessionStorageFactory(createSessionStorage2);
    exports.createCookie = createCookie2;
    exports.createCookieSessionStorage = createCookieSessionStorage2;
    exports.createMemorySessionStorage = createMemorySessionStorage2;
    exports.createSessionStorage = createSessionStorage2;
  }
});

// ../../node_modules/.pnpm/@remix-run+cloudflare@1.7.4_dp7lsxfcjoxmh2gy56a7syibgu/node_modules/@remix-run/cloudflare/dist/sessions/cloudflareKVSessionStorage.js
var require_cloudflareKVSessionStorage = __commonJS({
  "../../node_modules/.pnpm/@remix-run+cloudflare@1.7.4_dp7lsxfcjoxmh2gy56a7syibgu/node_modules/@remix-run/cloudflare/dist/sessions/cloudflareKVSessionStorage.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var implementations = require_implementations();
    function createCloudflareKVSessionStorage2({
      cookie,
      kv
    }) {
      return implementations.createSessionStorage({
        cookie,
        async createData(data, expires) {
          for (; ; ) {
            let randomBytes = new Uint8Array(8);
            crypto.getRandomValues(randomBytes);
            let id = [...randomBytes].map((x) => x.toString(16).padStart(2, "0")).join("");
            if (!await kv.get(id, "json"))
              return await kv.put(id, JSON.stringify(data), {
                expiration: expires ? Math.round(expires.getTime() / 1e3) : void 0
              }), id;
          }
        },
        async readData(id) {
          let session = await kv.get(id);
          return session ? JSON.parse(session) : null;
        },
        async updateData(id, data, expires) {
          await kv.put(id, JSON.stringify(data), {
            expiration: expires ? Math.round(expires.getTime() / 1e3) : void 0
          });
        },
        async deleteData(id) {
          await kv.delete(id);
        }
      });
    }
    exports.createCloudflareKVSessionStorage = createCloudflareKVSessionStorage2;
  }
});

// ../../node_modules/.pnpm/@remix-run+cloudflare@1.7.4_dp7lsxfcjoxmh2gy56a7syibgu/node_modules/@remix-run/cloudflare/dist/index.js
var require_dist = __commonJS({
  "../../node_modules/.pnpm/@remix-run+cloudflare@1.7.4_dp7lsxfcjoxmh2gy56a7syibgu/node_modules/@remix-run/cloudflare/dist/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var cloudflareKVSessionStorage = require_cloudflareKVSessionStorage(), implementations = require_implementations(), serverRuntime = (init_esm(), __toCommonJS(esm_exports));
    exports.createCloudflareKVSessionStorage = cloudflareKVSessionStorage.createCloudflareKVSessionStorage;
    exports.createCookie = implementations.createCookie;
    exports.createCookieSessionStorage = implementations.createCookieSessionStorage;
    exports.createMemorySessionStorage = implementations.createMemorySessionStorage;
    exports.createSessionStorage = implementations.createSessionStorage;
    Object.defineProperty(exports, "MaxPartSizeExceededError", {
      enumerable: !0,
      get: function() {
        return serverRuntime.MaxPartSizeExceededError;
      }
    });
    Object.defineProperty(exports, "createRequestHandler", {
      enumerable: !0,
      get: function() {
        return serverRuntime.createRequestHandler;
      }
    });
    Object.defineProperty(exports, "createSession", {
      enumerable: !0,
      get: function() {
        return serverRuntime.createSession;
      }
    });
    Object.defineProperty(exports, "isCookie", {
      enumerable: !0,
      get: function() {
        return serverRuntime.isCookie;
      }
    });
    Object.defineProperty(exports, "isSession", {
      enumerable: !0,
      get: function() {
        return serverRuntime.isSession;
      }
    });
    Object.defineProperty(exports, "json", {
      enumerable: !0,
      get: function() {
        return serverRuntime.json;
      }
    });
    Object.defineProperty(exports, "redirect", {
      enumerable: !0,
      get: function() {
        return serverRuntime.redirect;
      }
    });
    Object.defineProperty(exports, "unstable_composeUploadHandlers", {
      enumerable: !0,
      get: function() {
        return serverRuntime.unstable_composeUploadHandlers;
      }
    });
    Object.defineProperty(exports, "unstable_createMemoryUploadHandler", {
      enumerable: !0,
      get: function() {
        return serverRuntime.unstable_createMemoryUploadHandler;
      }
    });
    Object.defineProperty(exports, "unstable_parseMultipartFormData", {
      enumerable: !0,
      get: function() {
        return serverRuntime.unstable_parseMultipartFormData;
      }
    });
  }
});

// ../../node_modules/.pnpm/@remix-run+react@1.7.4_biqbaboplfbrettd7655fr4n2y/node_modules/@remix-run/react/dist/esm/_virtual/_rollupPluginBabelHelpers.js
function _extends3() {
  return _extends3 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source)
        Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);
    }
    return target;
  }, _extends3.apply(this, arguments);
}
var init_rollupPluginBabelHelpers = __esm({
  "../../node_modules/.pnpm/@remix-run+react@1.7.4_biqbaboplfbrettd7655fr4n2y/node_modules/@remix-run/react/dist/esm/_virtual/_rollupPluginBabelHelpers.js"() {
  }
});

// ../../node_modules/.pnpm/@remix-run+react@1.7.4_biqbaboplfbrettd7655fr4n2y/node_modules/@remix-run/react/dist/esm/errorBoundaries.js
function RemixRootDefaultErrorBoundary({
  error
}) {
  return console.error(error), /* @__PURE__ */ import_react3.default.createElement("html", {
    lang: "en"
  }, /* @__PURE__ */ import_react3.default.createElement("head", null, /* @__PURE__ */ import_react3.default.createElement("meta", {
    charSet: "utf-8"
  }), /* @__PURE__ */ import_react3.default.createElement("meta", {
    name: "viewport",
    content: "width=device-width,initial-scale=1,viewport-fit=cover"
  }), /* @__PURE__ */ import_react3.default.createElement("title", null, "Application Error!")), /* @__PURE__ */ import_react3.default.createElement("body", null, /* @__PURE__ */ import_react3.default.createElement("main", {
    style: {
      fontFamily: "system-ui, sans-serif",
      padding: "2rem"
    }
  }, /* @__PURE__ */ import_react3.default.createElement("h1", {
    style: {
      fontSize: "24px"
    }
  }, "Application Error"), /* @__PURE__ */ import_react3.default.createElement("pre", {
    style: {
      padding: "2rem",
      background: "hsla(10, 50%, 50%, 0.1)",
      color: "red",
      overflow: "auto"
    }
  }, error.stack)), /* @__PURE__ */ import_react3.default.createElement("script", {
    dangerouslySetInnerHTML: {
      __html: `
              console.log(
                "\u{1F4BF} Hey developer\u{1F44B}. You can provide a way better UX than this when your app throws errors. Check out https://remix.run/guides/errors for more information."
              );
            `
    }
  })));
}
function useCatch() {
  return (0, import_react3.useContext)(RemixCatchContext);
}
function RemixCatchBoundary({
  catch: catchVal,
  component: Component,
  children
}) {
  return catchVal ? /* @__PURE__ */ import_react3.default.createElement(RemixCatchContext.Provider, {
    value: catchVal
  }, /* @__PURE__ */ import_react3.default.createElement(Component, null)) : /* @__PURE__ */ import_react3.default.createElement(import_react3.default.Fragment, null, children);
}
function RemixRootDefaultCatchBoundary() {
  let caught = useCatch();
  return /* @__PURE__ */ import_react3.default.createElement("html", {
    lang: "en"
  }, /* @__PURE__ */ import_react3.default.createElement("head", null, /* @__PURE__ */ import_react3.default.createElement("meta", {
    charSet: "utf-8"
  }), /* @__PURE__ */ import_react3.default.createElement("meta", {
    name: "viewport",
    content: "width=device-width,initial-scale=1,viewport-fit=cover"
  }), /* @__PURE__ */ import_react3.default.createElement("title", null, "Unhandled Thrown Response!")), /* @__PURE__ */ import_react3.default.createElement("body", null, /* @__PURE__ */ import_react3.default.createElement("h1", {
    style: {
      fontFamily: "system-ui, sans-serif",
      padding: "2rem"
    }
  }, caught.status, " ", caught.statusText), /* @__PURE__ */ import_react3.default.createElement("script", {
    dangerouslySetInnerHTML: {
      __html: `
              console.log(
                "\u{1F4BF} Hey developer\u{1F44B}. You can provide a way better UX than this when your app throws 404s (and other responses). Check out https://remix.run/guides/not-found for more information."
              );
            `
    }
  })));
}
var import_react3, RemixErrorBoundary, RemixCatchContext, init_errorBoundaries = __esm({
  "../../node_modules/.pnpm/@remix-run+react@1.7.4_biqbaboplfbrettd7655fr4n2y/node_modules/@remix-run/react/dist/esm/errorBoundaries.js"() {
    import_react3 = __toESM(require_react());
    RemixErrorBoundary = class extends import_react3.default.Component {
      constructor(props) {
        super(props), this.state = {
          error: props.error || null,
          location: props.location
        };
      }
      static getDerivedStateFromError(error) {
        return {
          error
        };
      }
      static getDerivedStateFromProps(props, state) {
        return state.location !== props.location ? {
          error: props.error || null,
          location: props.location
        } : {
          error: props.error || state.error,
          location: state.location
        };
      }
      render() {
        return this.state.error ? /* @__PURE__ */ import_react3.default.createElement(this.props.component, {
          error: this.state.error
        }) : this.props.children;
      }
    };
    RemixCatchContext = /* @__PURE__ */ import_react3.default.createContext(void 0);
  }
});

// ../../node_modules/.pnpm/@remix-run+react@1.7.4_biqbaboplfbrettd7655fr4n2y/node_modules/@remix-run/react/dist/esm/invariant.js
function invariant2(value, message) {
  if (value === !1 || value === null || typeof value > "u")
    throw new Error(message);
}
var init_invariant = __esm({
  "../../node_modules/.pnpm/@remix-run+react@1.7.4_biqbaboplfbrettd7655fr4n2y/node_modules/@remix-run/react/dist/esm/invariant.js"() {
  }
});

// ../../node_modules/.pnpm/@remix-run+react@1.7.4_biqbaboplfbrettd7655fr4n2y/node_modules/@remix-run/react/dist/esm/routeModules.js
async function loadRouteModule(route, routeModulesCache) {
  if (route.id in routeModulesCache)
    return routeModulesCache[route.id];
  try {
    let routeModule = await import(
      /* webpackIgnore: true */
      route.module
    );
    return routeModulesCache[route.id] = routeModule, routeModule;
  } catch {
    return window.location.reload(), new Promise(() => {
    });
  }
}
var init_routeModules = __esm({
  "../../node_modules/.pnpm/@remix-run+react@1.7.4_biqbaboplfbrettd7655fr4n2y/node_modules/@remix-run/react/dist/esm/routeModules.js"() {
  }
});

// ../../node_modules/.pnpm/@remix-run+react@1.7.4_biqbaboplfbrettd7655fr4n2y/node_modules/@remix-run/react/dist/esm/links.js
function getLinksForMatches(matches, routeModules, manifest) {
  let descriptors = matches.map((match) => {
    var _module$links;
    let module = routeModules[match.route.id];
    return ((_module$links = module.links) === null || _module$links === void 0 ? void 0 : _module$links.call(module)) || [];
  }).flat(1), preloads = getCurrentPageModulePreloadHrefs(matches, manifest);
  return dedupe(descriptors, preloads);
}
async function prefetchStyleLinks(routeModule) {
  if (!routeModule.links)
    return;
  let descriptors = routeModule.links();
  if (!descriptors)
    return;
  let styleLinks = [];
  for (let descriptor of descriptors)
    !isPageLinkDescriptor(descriptor) && descriptor.rel === "stylesheet" && styleLinks.push({
      ...descriptor,
      rel: "preload",
      as: "style"
    });
  let matchingLinks = styleLinks.filter((link) => !link.media || window.matchMedia(link.media).matches);
  await Promise.all(matchingLinks.map(prefetchStyleLink));
}
async function prefetchStyleLink(descriptor) {
  return new Promise((resolve) => {
    let link = document.createElement("link");
    Object.assign(link, descriptor);
    function removeLink() {
      document.head.contains(link) && document.head.removeChild(link);
    }
    link.onload = () => {
      removeLink(), resolve();
    }, link.onerror = () => {
      removeLink(), resolve();
    }, document.head.appendChild(link);
  });
}
function isPageLinkDescriptor(object) {
  return object != null && typeof object.page == "string";
}
function isHtmlLinkDescriptor(object) {
  return object == null ? !1 : object.href == null ? object.rel === "preload" && (typeof object.imageSrcSet == "string" || typeof object.imagesrcset == "string") && (typeof object.imageSizes == "string" || typeof object.imagesizes == "string") : typeof object.rel == "string" && typeof object.href == "string";
}
async function getStylesheetPrefetchLinks(matches, routeModules) {
  return (await Promise.all(matches.map(async (match) => {
    let mod2 = await loadRouteModule(match.route, routeModules);
    return mod2.links ? mod2.links() : [];
  }))).flat(1).filter(isHtmlLinkDescriptor).filter((link) => link.rel === "stylesheet" || link.rel === "preload").map((link) => link.rel === "preload" ? {
    ...link,
    rel: "prefetch"
  } : {
    ...link,
    rel: "prefetch",
    as: "style"
  });
}
function getNewMatchesForLinks(page, nextMatches, currentMatches, location, mode) {
  let path = parsePathPatch(page), isNew = (match, index) => currentMatches[index] ? match.route.id !== currentMatches[index].route.id : !0, matchPathChanged = (match, index) => {
    var _currentMatches$index;
    return currentMatches[index].pathname !== match.pathname || ((_currentMatches$index = currentMatches[index].route.path) === null || _currentMatches$index === void 0 ? void 0 : _currentMatches$index.endsWith("*")) && currentMatches[index].params["*"] !== match.params["*"];
  };
  return mode === "data" && location.search !== path.search ? nextMatches.filter((match, index) => match.route.hasLoader ? isNew(match, index) || matchPathChanged(match, index) ? !0 : match.route.shouldReload ? match.route.shouldReload({
    params: match.params,
    prevUrl: new URL(location.pathname + location.search + location.hash, window.origin),
    url: new URL(page, window.origin)
  }) : !0 : !1) : nextMatches.filter((match, index) => (mode === "assets" || match.route.hasLoader) && (isNew(match, index) || matchPathChanged(match, index)));
}
function getDataLinkHrefs(page, matches, manifest) {
  let path = parsePathPatch(page);
  return dedupeHrefs(matches.filter((match) => manifest.routes[match.route.id].hasLoader).map((match) => {
    let {
      pathname,
      search
    } = path, searchParams = new URLSearchParams(search);
    return searchParams.set("_data", match.route.id), `${pathname}?${searchParams}`;
  }));
}
function getModuleLinkHrefs(matches, manifestPatch) {
  return dedupeHrefs(matches.map((match) => {
    let route = manifestPatch.routes[match.route.id], hrefs = [route.module];
    return route.imports && (hrefs = hrefs.concat(route.imports)), hrefs;
  }).flat(1));
}
function getCurrentPageModulePreloadHrefs(matches, manifest) {
  return dedupeHrefs(matches.map((match) => {
    let route = manifest.routes[match.route.id], hrefs = [route.module];
    return route.imports && (hrefs = hrefs.concat(route.imports)), hrefs;
  }).flat(1));
}
function dedupeHrefs(hrefs) {
  return [...new Set(hrefs)];
}
function dedupe(descriptors, preloads) {
  let set = /* @__PURE__ */ new Set(), preloadsSet = new Set(preloads);
  return descriptors.reduce((deduped, descriptor) => {
    if (!isPageLinkDescriptor(descriptor) && descriptor.as === "script" && descriptor.href && preloadsSet.has(descriptor.href))
      return deduped;
    let str = JSON.stringify(descriptor);
    return set.has(str) || (set.add(str), deduped.push(descriptor)), deduped;
  }, []);
}
function parsePathPatch(href) {
  let path = parsePath(href);
  return path.search === void 0 && (path.search = ""), path;
}
var init_links = __esm({
  "../../node_modules/.pnpm/@remix-run+react@1.7.4_biqbaboplfbrettd7655fr4n2y/node_modules/@remix-run/react/dist/esm/links.js"() {
    init_history();
    init_routeModules();
  }
});

// ../../node_modules/.pnpm/@remix-run+react@1.7.4_biqbaboplfbrettd7655fr4n2y/node_modules/@remix-run/react/dist/esm/markup.js
function createHtml(html) {
  return {
    __html: html
  };
}
var init_markup2 = __esm({
  "../../node_modules/.pnpm/@remix-run+react@1.7.4_biqbaboplfbrettd7655fr4n2y/node_modules/@remix-run/react/dist/esm/markup.js"() {
  }
});

// ../../node_modules/.pnpm/@remix-run+react@1.7.4_biqbaboplfbrettd7655fr4n2y/node_modules/@remix-run/react/dist/esm/data.js
function isCatchResponse2(response) {
  return response instanceof Response && response.headers.get("X-Remix-Catch") != null;
}
function isErrorResponse(response) {
  return response instanceof Response && response.headers.get("X-Remix-Error") != null;
}
function isRedirectResponse2(response) {
  return response instanceof Response && response.headers.get("X-Remix-Redirect") != null;
}
async function fetchData(url, routeId, signal, submission) {
  url.searchParams.set("_data", routeId);
  let init = submission ? getActionInit(submission, signal) : {
    credentials: "same-origin",
    signal
  }, response = await fetch(url.href, init);
  if (isErrorResponse(response)) {
    let data = await response.json(), error = new Error(data.message);
    return error.stack = data.stack, error;
  }
  return response;
}
async function extractData2(response) {
  let contentType = response.headers.get("Content-Type");
  return contentType && /\bapplication\/json\b/.test(contentType) ? response.json() : response.text();
}
function getActionInit(submission, signal) {
  let {
    encType,
    method,
    formData
  } = submission, headers, body = formData;
  if (encType === "application/x-www-form-urlencoded") {
    body = new URLSearchParams();
    for (let [key, value] of formData)
      invariant2(typeof value == "string", 'File inputs are not supported with encType "application/x-www-form-urlencoded", please use "multipart/form-data" instead.'), body.append(key, value);
    headers = {
      "Content-Type": encType
    };
  }
  return {
    method,
    body,
    signal,
    credentials: "same-origin",
    headers
  };
}
var init_data2 = __esm({
  "../../node_modules/.pnpm/@remix-run+react@1.7.4_biqbaboplfbrettd7655fr4n2y/node_modules/@remix-run/react/dist/esm/data.js"() {
    init_invariant();
  }
});

// ../../node_modules/.pnpm/@remix-run+react@1.7.4_biqbaboplfbrettd7655fr4n2y/node_modules/@remix-run/react/dist/esm/routeMatching.js
function matchClientRoutes(routes2, location) {
  let matches = matchRoutes(routes2, location);
  return matches ? matches.map((match) => ({
    params: match.params,
    pathname: match.pathname,
    route: match.route
  })) : null;
}
var init_routeMatching2 = __esm({
  "../../node_modules/.pnpm/@remix-run+react@1.7.4_biqbaboplfbrettd7655fr4n2y/node_modules/@remix-run/react/dist/esm/routeMatching.js"() {
    init_react_router_dom();
  }
});

// ../../node_modules/.pnpm/@remix-run+react@1.7.4_biqbaboplfbrettd7655fr4n2y/node_modules/@remix-run/react/dist/esm/transition.js
function isActionSubmission(submission) {
  return ["POST", "PUT", "PATCH", "DELETE"].includes(submission.method);
}
function isLoaderSubmission(submission) {
  return submission.method === "GET";
}
function isRedirectLocation(location) {
  return Boolean(location.state) && location.state.isRedirect;
}
function isLoaderRedirectLocation(location) {
  return isRedirectLocation(location) && location.state.type === "loader";
}
function isActionRedirectLocation(location) {
  return isRedirectLocation(location) && location.state.type === "action";
}
function isFetchActionRedirect(location) {
  return isRedirectLocation(location) && location.state.type === "fetchAction";
}
function isLoaderSubmissionRedirectLocation(location) {
  return isRedirectLocation(location) && location.state.type === "loaderSubmission";
}
function createTransitionManager(init) {
  let {
    routes: routes2
  } = init, pendingNavigationController, fetchControllers = /* @__PURE__ */ new Map(), incrementingLoadId = 0, navigationLoadId = -1, fetchReloadIds = /* @__PURE__ */ new Map(), fetchRedirectIds = /* @__PURE__ */ new Set(), subscribers = /* @__PURE__ */ new Set(), matches = matchClientRoutes(routes2, init.location);
  matches || (matches = [{
    params: {},
    pathname: "",
    route: routes2[0]
  }]);
  let state = {
    location: init.location,
    loaderData: init.loaderData || {},
    actionData: init.actionData,
    catch: init.catch,
    error: init.error,
    catchBoundaryId: init.catchBoundaryId || null,
    errorBoundaryId: init.errorBoundaryId || null,
    matches,
    nextMatches: void 0,
    transition: IDLE_TRANSITION,
    fetchers: /* @__PURE__ */ new Map()
  };
  function update(updates) {
    updates.transition && updates.transition === IDLE_TRANSITION && (pendingNavigationController = void 0), state = Object.assign({}, state, updates);
    for (let subscriber of subscribers.values())
      subscriber(state);
  }
  function getState() {
    return state;
  }
  function getFetcher(key) {
    return state.fetchers.get(key) || IDLE_FETCHER;
  }
  function setFetcher(key, fetcher) {
    state.fetchers.set(key, fetcher);
  }
  function deleteFetcher(key) {
    fetchControllers.has(key) && abortFetcher(key), fetchReloadIds.delete(key), fetchRedirectIds.delete(key), state.fetchers.delete(key);
  }
  async function send2(event) {
    switch (event.type) {
      case "navigation": {
        let {
          action: action3,
          location,
          submission
        } = event, matches2 = matchClientRoutes(routes2, location);
        matches2 ? !submission && isHashChangeOnly(location) ? await handleHashChange(location, matches2) : action3 === Action.Pop ? await handleLoad(location, matches2) : submission && isActionSubmission(submission) ? await handleActionSubmissionNavigation(location, submission, matches2) : submission && isLoaderSubmission(submission) ? await handleLoaderSubmissionNavigation(location, submission, matches2) : isActionRedirectLocation(location) ? await handleActionRedirect(location, matches2) : isLoaderSubmissionRedirectLocation(location) ? await handleLoaderSubmissionRedirect(location, matches2) : isLoaderRedirectLocation(location) ? await handleLoaderRedirect(location, matches2) : isFetchActionRedirect(location) ? await handleFetchActionRedirect(location, matches2) : await handleLoad(location, matches2) : (matches2 = [{
          params: {},
          pathname: "",
          route: routes2[0]
        }], await handleNotFoundNavigation(location, matches2)), navigationLoadId = -1;
        break;
      }
      case "fetcher": {
        if (isServer)
          throw new Error("a fetcher was called during the server render, but it shouldn't be. You are likely calling useFetcher.load() or useFetcher.submit() in the body of your component. Try moving it to a useEffect or a callback.");
        let {
          key,
          submission,
          href
        } = event, matches2 = matchClientRoutes(routes2, href);
        invariant2(matches2, "No matches found"), fetchControllers.has(key) && abortFetcher(key);
        let match = getRequestMatch2(new URL(href, window.location.href), matches2);
        submission && isActionSubmission(submission) ? await handleActionFetchSubmission(key, submission, match) : submission && isLoaderSubmission(submission) ? await handleLoaderFetchSubmission(href, key, submission, match) : await handleLoaderFetch(href, key, match);
        break;
      }
      default:
        throw new Error(`Unknown data event type: ${event.type}`);
    }
  }
  function dispose() {
    abortNormalNavigation();
    for (let [, controller] of fetchControllers)
      controller.abort();
  }
  function isIndexRequestUrl2(url) {
    for (let param of url.searchParams.getAll("index"))
      if (param === "")
        return !0;
    return !1;
  }
  function getRequestMatch2(url, matches2) {
    let match = matches2.slice(-1)[0];
    return isIndexRequestUrl2(url) && match.route.index ? match : getPathContributingMatches2(matches2).slice(-1)[0];
  }
  function getPathContributingMatches2(matches2) {
    return matches2.filter((match, index) => index === 0 || !match.route.index && match.route.path && match.route.path.length > 0);
  }
  async function handleActionFetchSubmission(key, submission, match) {
    let currentFetcher = state.fetchers.get(key), fetcher = {
      state: "submitting",
      type: "actionSubmission",
      submission,
      data: (currentFetcher == null ? void 0 : currentFetcher.data) || void 0
    };
    setFetcher(key, fetcher), update({
      fetchers: new Map(state.fetchers)
    });
    let controller = new AbortController();
    fetchControllers.set(key, controller);
    let result = await callAction(submission, match, controller.signal);
    if (controller.signal.aborted)
      return;
    if (isRedirectResult(result)) {
      let locationState = {
        isRedirect: !0,
        type: "fetchAction",
        setCookie: result.value.setCookie
      };
      fetchRedirectIds.add(key), init.onRedirect(result.value.location, locationState), setFetcher(key, {
        state: "loading",
        type: "actionRedirect",
        submission,
        data: void 0
      }), update({
        fetchers: new Map(state.fetchers)
      });
      return;
    }
    if (maybeBailOnError(match, key, result) || await maybeBailOnCatch(match, key, result))
      return;
    let loadFetcher = {
      state: "loading",
      type: "actionReload",
      data: result.value,
      submission
    };
    setFetcher(key, loadFetcher), update({
      fetchers: new Map(state.fetchers)
    });
    let maybeActionErrorResult = isErrorResult(result) ? result : void 0, maybeActionCatchResult = isCatchResult(result) ? result : void 0, loadId = ++incrementingLoadId;
    fetchReloadIds.set(key, loadId);
    let matchesToLoad = state.nextMatches || state.matches, results = await callLoaders(state, state.transition.location || state.location, matchesToLoad, controller.signal, maybeActionErrorResult, maybeActionCatchResult, submission, match.route.id, loadFetcher);
    if (controller.signal.aborted)
      return;
    fetchReloadIds.delete(key), fetchControllers.delete(key);
    let redirect3 = findRedirect(results);
    if (redirect3) {
      let locationState = {
        isRedirect: !0,
        type: "loader",
        setCookie: redirect3.setCookie
      };
      init.onRedirect(redirect3.location, locationState);
      return;
    }
    let [error, errorBoundaryId] = findErrorAndBoundaryId(results, state.matches, maybeActionErrorResult), [catchVal, catchBoundaryId] = await findCatchAndBoundaryId(results, state.matches, maybeActionCatchResult) || [], doneFetcher = {
      state: "idle",
      type: "done",
      data: result.value,
      submission: void 0
    };
    setFetcher(key, doneFetcher);
    let abortedKeys = abortStaleFetchLoads(loadId);
    if (abortedKeys && markFetchersDone(abortedKeys), yeetStaleNavigationLoad(loadId)) {
      let {
        transition
      } = state;
      invariant2(transition.state === "loading", "Expected loading transition"), update({
        location: transition.location,
        matches: state.nextMatches,
        error,
        errorBoundaryId,
        catch: catchVal,
        catchBoundaryId,
        loaderData: makeLoaderData(state, results, matchesToLoad),
        actionData: transition.type === "actionReload" ? state.actionData : void 0,
        transition: IDLE_TRANSITION,
        fetchers: new Map(state.fetchers)
      });
    } else
      update({
        fetchers: new Map(state.fetchers),
        error,
        errorBoundaryId,
        loaderData: makeLoaderData(state, results, matchesToLoad)
      });
  }
  function yeetStaleNavigationLoad(landedId) {
    return state.transition.state === "loading" && navigationLoadId < landedId ? (abortNormalNavigation(), !0) : !1;
  }
  function markFetchersDone(keys) {
    for (let key of keys) {
      let fetcher = getFetcher(key), doneFetcher = {
        state: "idle",
        type: "done",
        data: fetcher.data,
        submission: void 0
      };
      setFetcher(key, doneFetcher);
    }
  }
  function abortStaleFetchLoads(landedId) {
    let yeetedKeys = [];
    for (let [key, id] of fetchReloadIds)
      if (id < landedId) {
        let fetcher = state.fetchers.get(key);
        invariant2(fetcher, `Expected fetcher: ${key}`), fetcher.state === "loading" && (abortFetcher(key), fetchReloadIds.delete(key), yeetedKeys.push(key));
      }
    return yeetedKeys.length ? yeetedKeys : !1;
  }
  async function handleLoaderFetchSubmission(href, key, submission, match) {
    let currentFetcher = state.fetchers.get(key), fetcher = {
      state: "submitting",
      type: "loaderSubmission",
      submission,
      data: (currentFetcher == null ? void 0 : currentFetcher.data) || void 0
    };
    setFetcher(key, fetcher), update({
      fetchers: new Map(state.fetchers)
    });
    let controller = new AbortController();
    fetchControllers.set(key, controller);
    let result = await callLoader(match, createUrl(href), controller.signal);
    if (fetchControllers.delete(key), controller.signal.aborted)
      return;
    if (isRedirectResult(result)) {
      let locationState = {
        isRedirect: !0,
        type: "loader",
        setCookie: result.value.setCookie
      };
      init.onRedirect(result.value.location, locationState);
      return;
    }
    if (maybeBailOnError(match, key, result) || await maybeBailOnCatch(match, key, result))
      return;
    let doneFetcher = {
      state: "idle",
      type: "done",
      data: result.value,
      submission: void 0
    };
    setFetcher(key, doneFetcher), update({
      fetchers: new Map(state.fetchers)
    });
  }
  async function handleLoaderFetch(href, key, match) {
    let currentFetcher = state.fetchers.get(key), fetcher = {
      state: "loading",
      type: "normalLoad",
      submission: void 0,
      data: (currentFetcher == null ? void 0 : currentFetcher.data) || void 0
    };
    setFetcher(key, fetcher), update({
      fetchers: new Map(state.fetchers)
    });
    let controller = new AbortController();
    fetchControllers.set(key, controller);
    let result = await callLoader(match, createUrl(href), controller.signal);
    if (controller.signal.aborted)
      return;
    if (fetchControllers.delete(key), isRedirectResult(result)) {
      let locationState = {
        isRedirect: !0,
        type: "loader",
        setCookie: result.value.setCookie
      };
      init.onRedirect(result.value.location, locationState);
      return;
    }
    if (maybeBailOnError(match, key, result) || await maybeBailOnCatch(match, key, result))
      return;
    let doneFetcher = {
      state: "idle",
      type: "done",
      data: result.value,
      submission: void 0
    };
    setFetcher(key, doneFetcher), update({
      fetchers: new Map(state.fetchers)
    });
  }
  async function maybeBailOnCatch(match, key, result) {
    if (isCatchResult(result)) {
      let catchBoundaryId = findNearestCatchBoundary(match, state.matches);
      return state.fetchers.delete(key), update({
        transition: IDLE_TRANSITION,
        fetchers: new Map(state.fetchers),
        catch: {
          data: result.value.data,
          status: result.value.status,
          statusText: result.value.statusText
        },
        catchBoundaryId
      }), !0;
    }
    return !1;
  }
  function maybeBailOnError(match, key, result) {
    if (isErrorResult(result)) {
      let errorBoundaryId = findNearestBoundary(match, state.matches);
      return state.fetchers.delete(key), update({
        fetchers: new Map(state.fetchers),
        error: result.value,
        errorBoundaryId
      }), !0;
    }
    return !1;
  }
  async function handleNotFoundNavigation(location, matches2) {
    abortNormalNavigation(), update({
      transition: {
        state: "loading",
        type: "normalLoad",
        submission: void 0,
        location
      },
      nextMatches: matches2
    }), await Promise.resolve();
    let catchBoundaryId = findNearestCatchBoundary(matches2[0], matches2);
    update({
      location,
      matches: matches2,
      catch: {
        data: null,
        status: 404,
        statusText: "Not Found"
      },
      catchBoundaryId,
      transition: IDLE_TRANSITION
    });
  }
  async function handleActionSubmissionNavigation(location, submission, matches2) {
    abortNormalNavigation(), update({
      transition: {
        state: "submitting",
        type: "actionSubmission",
        submission,
        location
      },
      nextMatches: matches2
    });
    let controller = new AbortController();
    pendingNavigationController = controller;
    let actionMatches = matches2, leafMatch = getRequestMatch2(createUrl(submission.action), actionMatches), result = await callAction(submission, leafMatch, controller.signal);
    if (controller.signal.aborted)
      return;
    if (isRedirectResult(result)) {
      let locationState = {
        isRedirect: !0,
        type: "action",
        setCookie: result.value.setCookie
      };
      init.onRedirect(result.value.location, locationState);
      return;
    }
    let catchVal, catchBoundaryId;
    isCatchResult(result) && ([catchVal, catchBoundaryId] = await findCatchAndBoundaryId([result], actionMatches, result) || []), update({
      transition: {
        state: "loading",
        type: "actionReload",
        submission,
        location
      },
      actionData: {
        [leafMatch.route.id]: result.value
      }
    }), await loadPageData(location, matches2, submission, leafMatch.route.id, result, catchVal, catchBoundaryId);
  }
  async function handleLoaderSubmissionNavigation(location, submission, matches2) {
    abortNormalNavigation(), update({
      transition: {
        state: "submitting",
        type: "loaderSubmission",
        submission,
        location
      },
      nextMatches: matches2
    }), await loadPageData(location, matches2, submission);
  }
  async function handleHashChange(location, matches2) {
    abortNormalNavigation(), update({
      transition: {
        state: "loading",
        type: "normalLoad",
        submission: void 0,
        location
      },
      nextMatches: matches2
    }), await Promise.resolve(), update({
      location,
      matches: matches2,
      transition: IDLE_TRANSITION
    });
  }
  async function handleLoad(location, matches2) {
    abortNormalNavigation(), update({
      transition: {
        state: "loading",
        type: "normalLoad",
        submission: void 0,
        location
      },
      nextMatches: matches2
    }), await loadPageData(location, matches2);
  }
  async function handleLoaderRedirect(location, matches2) {
    abortNormalNavigation(), update({
      transition: {
        state: "loading",
        type: "normalRedirect",
        submission: void 0,
        location
      },
      nextMatches: matches2
    }), await loadPageData(location, matches2);
  }
  async function handleLoaderSubmissionRedirect(location, matches2) {
    abortNormalNavigation(), invariant2(state.transition.type === "loaderSubmission", `Unexpected transition: ${JSON.stringify(state.transition)}`);
    let {
      submission
    } = state.transition;
    update({
      transition: {
        state: "loading",
        type: "loaderSubmissionRedirect",
        submission,
        location
      },
      nextMatches: matches2
    }), await loadPageData(location, matches2, submission);
  }
  async function handleFetchActionRedirect(location, matches2) {
    abortNormalNavigation(), update({
      transition: {
        state: "loading",
        type: "fetchActionRedirect",
        submission: void 0,
        location
      },
      nextMatches: matches2
    }), await loadPageData(location, matches2);
  }
  async function handleActionRedirect(location, matches2) {
    abortNormalNavigation(), invariant2(state.transition.type === "actionSubmission" || state.transition.type === "actionReload" || state.transition.type === "actionRedirect", `Unexpected transition: ${JSON.stringify(state.transition)}`);
    let {
      submission
    } = state.transition;
    update({
      transition: {
        state: "loading",
        type: "actionRedirect",
        submission,
        location
      },
      nextMatches: matches2
    }), await loadPageData(location, matches2, submission);
  }
  function isHashChangeOnly(location) {
    return createHref(state.location) === createHref(location) && state.location.hash !== location.hash;
  }
  async function loadPageData(location, matches2, submission, submissionRouteId, actionResult, catchVal, catchBoundaryId) {
    let maybeActionErrorResult = actionResult && isErrorResult(actionResult) ? actionResult : void 0, maybeActionCatchResult = actionResult && isCatchResult(actionResult) ? actionResult : void 0, controller = new AbortController();
    pendingNavigationController = controller, navigationLoadId = ++incrementingLoadId;
    let results = await callLoaders(state, location, matches2, controller.signal, maybeActionErrorResult, maybeActionCatchResult, submission, submissionRouteId, void 0, catchBoundaryId);
    if (controller.signal.aborted)
      return;
    let redirect3 = findRedirect(results);
    if (redirect3) {
      if (state.transition.type === "actionReload" || isActionRedirectLocation(location)) {
        let locationState = {
          isRedirect: !0,
          type: "action",
          setCookie: redirect3.setCookie
        };
        init.onRedirect(redirect3.location, locationState);
      } else if (state.transition.type === "loaderSubmission") {
        let locationState = {
          isRedirect: !0,
          type: "loaderSubmission",
          setCookie: redirect3.setCookie
        };
        init.onRedirect(redirect3.location, locationState);
      } else {
        var _location$state;
        let locationState = {
          isRedirect: !0,
          type: "loader",
          setCookie: redirect3.setCookie || ((_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.setCookie) === !0
        };
        init.onRedirect(redirect3.location, locationState);
      }
      return;
    }
    let [error, errorBoundaryId] = findErrorAndBoundaryId(results, matches2, maybeActionErrorResult);
    [catchVal, catchBoundaryId] = await findCatchAndBoundaryId(results, matches2, maybeActionErrorResult) || [catchVal, catchBoundaryId], markFetchRedirectsDone();
    let abortedIds = abortStaleFetchLoads(navigationLoadId);
    abortedIds && markFetchersDone(abortedIds), update({
      location,
      matches: matches2,
      error,
      errorBoundaryId,
      catch: catchVal,
      catchBoundaryId,
      loaderData: makeLoaderData(state, results, matches2),
      actionData: state.transition.type === "actionReload" ? state.actionData : void 0,
      transition: IDLE_TRANSITION,
      fetchers: abortedIds ? new Map(state.fetchers) : state.fetchers
    });
  }
  function abortNormalNavigation() {
    pendingNavigationController && pendingNavigationController.abort();
  }
  function abortFetcher(key) {
    let controller = fetchControllers.get(key);
    invariant2(controller, `Expected fetch controller: ${key}`), controller.abort(), fetchControllers.delete(key);
  }
  function markFetchRedirectsDone() {
    let doneKeys = [];
    for (let key of fetchRedirectIds) {
      let fetcher = state.fetchers.get(key);
      invariant2(fetcher, `Expected fetcher: ${key}`), fetcher.type === "actionRedirect" && (fetchRedirectIds.delete(key), doneKeys.push(key));
    }
    markFetchersDone(doneKeys);
  }
  function subscribe(subscriber) {
    return subscribers.add(subscriber), () => {
      subscribers.delete(subscriber);
    };
  }
  return {
    subscribe,
    send: send2,
    getState,
    getFetcher,
    deleteFetcher,
    dispose,
    get _internalFetchControllers() {
      return fetchControllers;
    }
  };
}
async function callLoaders(state, location, matches, signal, actionErrorResult, actionCatchResult, submission, submissionRouteId, fetcher, catchBoundaryId) {
  let url = createUrl(createHref(location)), matchesToLoad = filterMatchesToLoad(state, location, matches, actionErrorResult, actionCatchResult, submission, submissionRouteId, fetcher, catchBoundaryId);
  return Promise.all(matchesToLoad.map((match) => callLoader(match, url, signal)));
}
async function callLoader(match, url, signal) {
  invariant2(match.route.loader, `Expected loader for ${match.route.id}`);
  try {
    let {
      params
    } = match, value = await match.route.loader({
      params,
      url,
      signal
    });
    return {
      match,
      value
    };
  } catch (error) {
    return {
      match,
      value: error
    };
  }
}
async function callAction(submission, match, signal) {
  try {
    let value = await match.route.action({
      url: createUrl(submission.action),
      params: match.params,
      submission,
      signal
    });
    return {
      match,
      value
    };
  } catch (error) {
    return {
      match,
      value: error
    };
  }
}
function filterMatchesToLoad(state, location, matches, actionErrorResult, actionCatchResult, submission, submissionRouteId, fetcher, catchBoundaryId) {
  var _location$state2;
  if (catchBoundaryId || submissionRouteId && (actionCatchResult || actionErrorResult)) {
    let foundProblematicRoute = !1;
    matches = matches.filter((match) => foundProblematicRoute ? !1 : match.route.id === submissionRouteId || match.route.id === catchBoundaryId ? (foundProblematicRoute = !0, !1) : !0);
  }
  let isNew = (match, index) => state.matches[index] ? match.route.id !== state.matches[index].route.id : !0, matchPathChanged = (match, index) => {
    var _state$matches$index$;
    return state.matches[index].pathname !== match.pathname || ((_state$matches$index$ = state.matches[index].route.path) === null || _state$matches$index$ === void 0 ? void 0 : _state$matches$index$.endsWith("*")) && state.matches[index].params["*"] !== match.params["*"];
  }, url = createUrl(createHref(location)), filterByRouteProps = (match, index) => {
    if (!match.route.loader)
      return !1;
    if (isNew(match, index) || matchPathChanged(match, index))
      return !0;
    if (match.route.shouldReload) {
      let prevUrl = createUrl(createHref(state.location));
      return match.route.shouldReload({
        prevUrl,
        url,
        submission,
        params: match.params
      });
    }
    return !0;
  };
  return state.matches.length === 1 ? matches.filter((match) => !!match.route.loader) : (fetcher == null ? void 0 : fetcher.type) === "actionReload" || state.transition.type === "actionReload" || state.transition.type === "actionRedirect" || state.transition.type === "fetchActionRedirect" || createHref(url) === createHref(state.location) || url.searchParams.toString() !== state.location.search.substring(1) || (_location$state2 = location.state) !== null && _location$state2 !== void 0 && _location$state2.setCookie ? matches.filter(filterByRouteProps) : matches.filter((match, index, arr) => {
    var _location$state3;
    return (actionErrorResult || actionCatchResult) && arr.length - 1 === index ? !1 : match.route.loader && (isNew(match, index) || matchPathChanged(match, index) || ((_location$state3 = location.state) === null || _location$state3 === void 0 ? void 0 : _location$state3.setCookie));
  });
}
function isRedirectResult(result) {
  return result.value instanceof TransitionRedirect;
}
function createHref(location) {
  return location.pathname + location.search;
}
function findRedirect(results) {
  for (let result of results)
    if (isRedirectResult(result))
      return result.value;
  return null;
}
async function findCatchAndBoundaryId(results, matches, actionCatchResult) {
  let loaderCatchResult;
  for (let result of results)
    if (isCatchResult(result)) {
      loaderCatchResult = result;
      break;
    }
  let extractCatchData = async (res) => ({
    status: res.status,
    statusText: res.statusText,
    data: res.data
  });
  if (actionCatchResult && loaderCatchResult) {
    let boundaryId = findNearestCatchBoundary(loaderCatchResult.match, matches);
    return [await extractCatchData(actionCatchResult.value), boundaryId];
  }
  if (loaderCatchResult) {
    let boundaryId = findNearestCatchBoundary(loaderCatchResult.match, matches);
    return [await extractCatchData(loaderCatchResult.value), boundaryId];
  }
  return null;
}
function findErrorAndBoundaryId(results, matches, actionErrorResult) {
  let loaderErrorResult;
  for (let result of results)
    if (isErrorResult(result)) {
      loaderErrorResult = result;
      break;
    }
  if (actionErrorResult && loaderErrorResult) {
    let boundaryId = findNearestBoundary(loaderErrorResult.match, matches);
    return [actionErrorResult.value, boundaryId];
  }
  if (actionErrorResult) {
    let boundaryId = findNearestBoundary(actionErrorResult.match, matches);
    return [actionErrorResult.value, boundaryId];
  }
  if (loaderErrorResult) {
    let boundaryId = findNearestBoundary(loaderErrorResult.match, matches);
    return [loaderErrorResult.value, boundaryId];
  }
  return [void 0, void 0];
}
function findNearestCatchBoundary(matchWithError, matches) {
  let nearestBoundaryId = null;
  for (let match of matches)
    if (match.route.CatchBoundary && (nearestBoundaryId = match.route.id), match === matchWithError)
      break;
  return nearestBoundaryId;
}
function findNearestBoundary(matchWithError, matches) {
  let nearestBoundaryId = null;
  for (let match of matches)
    if (match.route.ErrorBoundary && (nearestBoundaryId = match.route.id), match === matchWithError)
      break;
  return nearestBoundaryId;
}
function makeLoaderData(state, results, matches) {
  let newData = {};
  for (let {
    match,
    value
  } of results)
    newData[match.route.id] = value;
  let loaderData = {};
  for (let {
    route
  } of matches) {
    let value = newData[route.id] !== void 0 ? newData[route.id] : state.loaderData[route.id];
    value !== void 0 && (loaderData[route.id] = value);
  }
  return loaderData;
}
function isCatchResult(result) {
  return result.value instanceof CatchValue;
}
function isErrorResult(result) {
  return result.value instanceof Error;
}
function createUrl(href) {
  return new URL(href, window.location.origin);
}
var CatchValue, TransitionRedirect, IDLE_TRANSITION, IDLE_FETCHER, isBrowser, isServer, init_transition = __esm({
  "../../node_modules/.pnpm/@remix-run+react@1.7.4_biqbaboplfbrettd7655fr4n2y/node_modules/@remix-run/react/dist/esm/transition.js"() {
    init_history();
    init_routeMatching2();
    init_invariant();
    CatchValue = class {
      constructor(status, statusText, data) {
        this.status = status, this.statusText = statusText, this.data = data;
      }
    };
    TransitionRedirect = class {
      constructor(location, setCookie) {
        this.setCookie = setCookie, this.location = typeof location == "string" ? location : location.pathname + location.search;
      }
    }, IDLE_TRANSITION = {
      state: "idle",
      submission: void 0,
      location: void 0,
      type: "idle"
    }, IDLE_FETCHER = {
      state: "idle",
      type: "init",
      data: void 0,
      submission: void 0
    }, isBrowser = typeof window < "u" && typeof window.document < "u" && typeof window.document.createElement < "u", isServer = !isBrowser;
  }
});

// ../../node_modules/.pnpm/@remix-run+react@1.7.4_biqbaboplfbrettd7655fr4n2y/node_modules/@remix-run/react/dist/esm/routes.js
function createClientRoute(entryRoute, routeModulesCache, Component) {
  return {
    caseSensitive: !!entryRoute.caseSensitive,
    element: /* @__PURE__ */ React.createElement(Component, {
      id: entryRoute.id
    }),
    id: entryRoute.id,
    path: entryRoute.path,
    index: entryRoute.index,
    module: entryRoute.module,
    loader: createLoader(entryRoute, routeModulesCache),
    action: createAction(entryRoute, routeModulesCache),
    shouldReload: createShouldReload(entryRoute, routeModulesCache),
    ErrorBoundary: entryRoute.hasErrorBoundary,
    CatchBoundary: entryRoute.hasCatchBoundary,
    hasLoader: entryRoute.hasLoader
  };
}
function createClientRoutes(routeManifest, routeModulesCache, Component, parentId) {
  return Object.keys(routeManifest).filter((key) => routeManifest[key].parentId === parentId).map((key) => {
    let route = createClientRoute(routeManifest[key], routeModulesCache, Component), children = createClientRoutes(routeManifest, routeModulesCache, Component, route.id);
    return children.length > 0 && (route.children = children), route;
  });
}
function createShouldReload(route, routeModules) {
  return (arg) => {
    let module = routeModules[route.id];
    return invariant2(module, `Expected route module to be loaded for ${route.id}`), module.unstable_shouldReload ? module.unstable_shouldReload(arg) : !0;
  };
}
async function loadRouteModuleWithBlockingLinks(route, routeModules) {
  let routeModule = await loadRouteModule(route, routeModules);
  return await prefetchStyleLinks(routeModule), routeModule;
}
function createLoader(route, routeModules) {
  return async ({
    url,
    signal,
    submission
  }) => {
    if (route.hasLoader) {
      let [result] = await Promise.all([fetchData(url, route.id, signal, submission), loadRouteModuleWithBlockingLinks(route, routeModules)]);
      if (result instanceof Error)
        throw result;
      let redirect3 = await checkRedirect(result);
      if (redirect3)
        return redirect3;
      if (isCatchResponse2(result))
        throw new CatchValue(result.status, result.statusText, await extractData2(result));
      return extractData2(result);
    } else
      await loadRouteModuleWithBlockingLinks(route, routeModules);
  };
}
function createAction(route, routeModules) {
  return async ({
    url,
    signal,
    submission
  }) => {
    route.hasAction || console.error(`Route "${route.id}" does not have an action, but you are trying to submit to it. To fix this, please add an \`action\` function to the route`);
    let result = await fetchData(url, route.id, signal, submission);
    if (result instanceof Error)
      throw result;
    let redirect3 = await checkRedirect(result);
    if (redirect3)
      return redirect3;
    if (await loadRouteModuleWithBlockingLinks(route, routeModules), isCatchResponse2(result))
      throw new CatchValue(result.status, result.statusText, await extractData2(result));
    return extractData2(result);
  };
}
async function checkRedirect(response) {
  if (isRedirectResponse2(response)) {
    let url = new URL(response.headers.get("X-Remix-Redirect"), window.location.origin);
    if (url.origin !== window.location.origin)
      await new Promise(() => {
        window.location.replace(url.href);
      });
    else
      return new TransitionRedirect(url.pathname + url.search + url.hash, response.headers.get("X-Remix-Revalidate") !== null);
  }
  return null;
}
var React, init_routes2 = __esm({
  "../../node_modules/.pnpm/@remix-run+react@1.7.4_biqbaboplfbrettd7655fr4n2y/node_modules/@remix-run/react/dist/esm/routes.js"() {
    React = __toESM(require_react());
    init_routeModules();
    init_data2();
    init_transition();
    init_links();
    init_invariant();
  }
});

// ../../node_modules/.pnpm/@remix-run+react@1.7.4_biqbaboplfbrettd7655fr4n2y/node_modules/@remix-run/react/dist/esm/components.js
function useRemixEntryContext() {
  let context = React2.useContext(RemixEntryContext);
  return invariant2(context, "You must render this element inside a <Remix> element"), context;
}
function RemixEntry({
  context: entryContext,
  action: action3,
  location: historyLocation,
  navigator: _navigator,
  static: staticProp = !1
}) {
  let {
    manifest,
    routeData: documentLoaderData,
    actionData: documentActionData,
    routeModules,
    serverHandoffString,
    appState: entryComponentDidCatchEmulator
  } = entryContext, clientRoutes = React2.useMemo(() => createClientRoutes(manifest.routes, routeModules, RemixRoute), [manifest, routeModules]), [clientState, setClientState] = React2.useState(entryComponentDidCatchEmulator), [transitionManager] = React2.useState(() => createTransitionManager({
    routes: clientRoutes,
    actionData: documentActionData,
    loaderData: documentLoaderData,
    location: historyLocation,
    catch: entryComponentDidCatchEmulator.catch,
    catchBoundaryId: entryComponentDidCatchEmulator.catchBoundaryRouteId,
    onRedirect: _navigator.replace
  }));
  React2.useEffect(() => {
    let subscriber = (state) => {
      setClientState({
        catch: state.catch,
        error: state.error,
        catchBoundaryRouteId: state.catchBoundaryId,
        loaderBoundaryRouteId: state.errorBoundaryId,
        renderBoundaryRouteId: null,
        trackBoundaries: !1,
        trackCatchBoundaries: !1
      });
    };
    return transitionManager.subscribe(subscriber);
  }, [transitionManager]);
  let navigator2 = React2.useMemo(() => ({
    ..._navigator,
    push: (to, state) => transitionManager.getState().transition.state !== "idle" ? _navigator.replace(to, state) : _navigator.push(to, state)
  }), [_navigator, transitionManager]), {
    location,
    matches,
    loaderData,
    actionData
  } = transitionManager.getState();
  React2.useEffect(() => {
    let {
      location: location2
    } = transitionManager.getState();
    historyLocation !== location2 && transitionManager.send({
      type: "navigation",
      location: historyLocation,
      submission: consumeNextNavigationSubmission(),
      action: action3
    });
  }, [transitionManager, historyLocation, action3]);
  let ssrErrorBeforeRoutesRendered = clientState.error && clientState.renderBoundaryRouteId === null && clientState.loaderBoundaryRouteId === null ? deserializeError(clientState.error) : void 0, ssrCatchBeforeRoutesRendered = clientState.catch && clientState.catchBoundaryRouteId === null ? clientState.catch : void 0;
  return /* @__PURE__ */ React2.createElement(RemixEntryContext.Provider, {
    value: {
      matches,
      manifest,
      appState: clientState,
      routeModules,
      serverHandoffString,
      clientRoutes,
      routeData: loaderData,
      actionData,
      transitionManager
    }
  }, /* @__PURE__ */ React2.createElement(RemixErrorBoundary, {
    location,
    component: RemixRootDefaultErrorBoundary,
    error: ssrErrorBeforeRoutesRendered
  }, /* @__PURE__ */ React2.createElement(RemixCatchBoundary, {
    location,
    component: RemixRootDefaultCatchBoundary,
    catch: ssrCatchBeforeRoutesRendered
  }, /* @__PURE__ */ React2.createElement(Router, {
    navigationType: action3,
    location,
    navigator: navigator2,
    static: staticProp
  }, /* @__PURE__ */ React2.createElement(Routes2, null)))));
}
function deserializeError(data) {
  let error = new Error(data.message);
  return error.stack = data.stack, error;
}
function Routes2() {
  let {
    clientRoutes
  } = useRemixEntryContext();
  return useRoutes(clientRoutes) || clientRoutes[0].element;
}
function useRemixRouteContext() {
  let context = React2.useContext(RemixRouteContext);
  return invariant2(context, "You must render this element in a remix route element"), context;
}
function DefaultRouteComponent({
  id
}) {
  throw new Error(`Route "${id}" has no component! Please go add a \`default\` export in the route module file.
If you were trying to navigate or submit to a resource route, use \`<a>\` instead of \`<Link>\` or \`<Form reloadDocument>\`.`);
}
function RemixRoute({
  id
}) {
  let location = useLocation(), {
    routeData,
    routeModules,
    appState
  } = useRemixEntryContext();
  invariant2(routeData, `Cannot initialize 'routeData'. This normally occurs when you have server code in your client modules.
Check this link for more details:
https://remix.run/pages/gotchas#server-code-in-client-bundles`), invariant2(routeModules, `Cannot initialize 'routeModules'. This normally occurs when you have server code in your client modules.
Check this link for more details:
https://remix.run/pages/gotchas#server-code-in-client-bundles`);
  let data = routeData[id], {
    default: Component,
    CatchBoundary: CatchBoundary3,
    ErrorBoundary: ErrorBoundary2
  } = routeModules[id], element = Component ? /* @__PURE__ */ React2.createElement(Component, null) : /* @__PURE__ */ React2.createElement(DefaultRouteComponent, {
    id
  }), context = {
    data,
    id
  };
  if (CatchBoundary3) {
    let maybeServerCaught = appState.catch && appState.catchBoundaryRouteId === id ? appState.catch : void 0;
    appState.trackCatchBoundaries && (appState.catchBoundaryRouteId = id), context = maybeServerCaught ? {
      id,
      get data() {
        console.error("You cannot `useLoaderData` in a catch boundary.");
      }
    } : {
      id,
      data
    }, element = /* @__PURE__ */ React2.createElement(RemixCatchBoundary, {
      location,
      component: CatchBoundary3,
      catch: maybeServerCaught
    }, element);
  }
  if (ErrorBoundary2) {
    let maybeServerRenderError = appState.error && (appState.renderBoundaryRouteId === id || appState.loaderBoundaryRouteId === id) ? deserializeError(appState.error) : void 0;
    appState.trackBoundaries && (appState.renderBoundaryRouteId = id), context = maybeServerRenderError ? {
      id,
      get data() {
        console.error("You cannot `useLoaderData` in an error boundary.");
      }
    } : {
      id,
      data
    }, element = /* @__PURE__ */ React2.createElement(RemixErrorBoundary, {
      location,
      component: ErrorBoundary2,
      error: maybeServerRenderError
    }, element);
  }
  return /* @__PURE__ */ React2.createElement(RemixRouteContext.Provider, {
    value: context
  }, element);
}
function usePrefetchBehavior(prefetch, theirElementProps) {
  let [maybePrefetch, setMaybePrefetch] = React2.useState(!1), [shouldPrefetch, setShouldPrefetch] = React2.useState(!1), {
    onFocus,
    onBlur,
    onMouseEnter,
    onMouseLeave,
    onTouchStart
  } = theirElementProps;
  React2.useEffect(() => {
    prefetch === "render" && setShouldPrefetch(!0);
  }, [prefetch]);
  let setIntent = () => {
    prefetch === "intent" && setMaybePrefetch(!0);
  }, cancelIntent = () => {
    prefetch === "intent" && (setMaybePrefetch(!1), setShouldPrefetch(!1));
  };
  return React2.useEffect(() => {
    if (maybePrefetch) {
      let id = setTimeout(() => {
        setShouldPrefetch(!0);
      }, 100);
      return () => {
        clearTimeout(id);
      };
    }
  }, [maybePrefetch]), [shouldPrefetch, {
    onFocus: composeEventHandlers(onFocus, setIntent),
    onBlur: composeEventHandlers(onBlur, cancelIntent),
    onMouseEnter: composeEventHandlers(onMouseEnter, setIntent),
    onMouseLeave: composeEventHandlers(onMouseLeave, cancelIntent),
    onTouchStart: composeEventHandlers(onTouchStart, setIntent)
  }];
}
function composeEventHandlers(theirHandler, ourHandler) {
  return (event) => {
    theirHandler && theirHandler(event), event.defaultPrevented || ourHandler(event);
  };
}
function Links() {
  let {
    matches,
    routeModules,
    manifest
  } = useRemixEntryContext(), links2 = React2.useMemo(() => getLinksForMatches(matches, routeModules, manifest), [matches, routeModules, manifest]);
  return /* @__PURE__ */ React2.createElement(React2.Fragment, null, links2.map((link) => {
    if (isPageLinkDescriptor(link))
      return /* @__PURE__ */ React2.createElement(PrefetchPageLinks, _extends3({
        key: link.page
      }, link));
    let imageSrcSet = null;
    return "useId" in React2 ? (link.imagesrcset && (link.imageSrcSet = imageSrcSet = link.imagesrcset, delete link.imagesrcset), link.imagesizes && (link.imageSizes = link.imagesizes, delete link.imagesizes)) : (link.imageSrcSet && (link.imagesrcset = imageSrcSet = link.imageSrcSet, delete link.imageSrcSet), link.imageSizes && (link.imagesizes = link.imageSizes, delete link.imageSizes)), /* @__PURE__ */ React2.createElement("link", _extends3({
      key: link.rel + (link.href || "") + (imageSrcSet || "")
    }, link));
  }));
}
function PrefetchPageLinks({
  page,
  ...dataLinkProps
}) {
  let {
    clientRoutes
  } = useRemixEntryContext(), matches = React2.useMemo(() => matchClientRoutes(clientRoutes, page), [clientRoutes, page]);
  return matches ? /* @__PURE__ */ React2.createElement(PrefetchPageLinksImpl, _extends3({
    page,
    matches
  }, dataLinkProps)) : (console.warn(`Tried to prefetch ${page} but no routes matched.`), null);
}
function usePrefetchedStylesheets(matches) {
  let {
    routeModules
  } = useRemixEntryContext(), [styleLinks, setStyleLinks] = React2.useState([]);
  return React2.useEffect(() => {
    let interrupted = !1;
    return getStylesheetPrefetchLinks(matches, routeModules).then((links2) => {
      interrupted || setStyleLinks(links2);
    }), () => {
      interrupted = !0;
    };
  }, [matches, routeModules]), styleLinks;
}
function PrefetchPageLinksImpl({
  page,
  matches: nextMatches,
  ...linkProps
}) {
  let location = useLocation(), {
    matches,
    manifest
  } = useRemixEntryContext(), newMatchesForData = React2.useMemo(() => getNewMatchesForLinks(page, nextMatches, matches, location, "data"), [page, nextMatches, matches, location]), newMatchesForAssets = React2.useMemo(() => getNewMatchesForLinks(page, nextMatches, matches, location, "assets"), [page, nextMatches, matches, location]), dataHrefs = React2.useMemo(() => getDataLinkHrefs(page, newMatchesForData, manifest), [newMatchesForData, page, manifest]), moduleHrefs = React2.useMemo(() => getModuleLinkHrefs(newMatchesForAssets, manifest), [newMatchesForAssets, manifest]), styleLinks = usePrefetchedStylesheets(newMatchesForAssets);
  return /* @__PURE__ */ React2.createElement(React2.Fragment, null, dataHrefs.map((href) => /* @__PURE__ */ React2.createElement("link", _extends3({
    key: href,
    rel: "prefetch",
    as: "fetch",
    href
  }, linkProps))), moduleHrefs.map((href) => /* @__PURE__ */ React2.createElement("link", _extends3({
    key: href,
    rel: "modulepreload",
    href
  }, linkProps))), styleLinks.map((link) => /* @__PURE__ */ React2.createElement("link", _extends3({
    key: link.href
  }, link))));
}
function Meta() {
  let {
    matches,
    routeData,
    routeModules
  } = useRemixEntryContext(), location = useLocation(), meta2 = {}, parentsData = {};
  for (let match of matches) {
    let routeId = match.route.id, data = routeData[routeId], params = match.params, routeModule = routeModules[routeId];
    if (routeModule.meta) {
      let routeMeta = typeof routeModule.meta == "function" ? routeModule.meta({
        data,
        parentsData,
        params,
        location
      }) : routeModule.meta;
      Object.assign(meta2, routeMeta);
    }
    parentsData[routeId] = data;
  }
  return /* @__PURE__ */ React2.createElement(React2.Fragment, null, Object.entries(meta2).map(([name, value]) => {
    if (!value)
      return null;
    if (["charset", "charSet"].includes(name))
      return /* @__PURE__ */ React2.createElement("meta", {
        key: "charset",
        charSet: value
      });
    if (name === "title")
      return /* @__PURE__ */ React2.createElement("title", {
        key: "title"
      }, String(value));
    let isOpenGraphTag = name.startsWith("og:");
    return [value].flat().map((content) => isOpenGraphTag ? /* @__PURE__ */ React2.createElement("meta", {
      property: name,
      content,
      key: name + content
    }) : typeof content == "string" ? /* @__PURE__ */ React2.createElement("meta", {
      name,
      content,
      key: name + content
    }) : /* @__PURE__ */ React2.createElement("meta", _extends3({
      key: name + JSON.stringify(content)
    }, content)));
  }));
}
function Scripts(props) {
  let {
    manifest,
    matches,
    pendingLocation,
    clientRoutes,
    serverHandoffString
  } = useRemixEntryContext();
  React2.useEffect(() => {
    isHydrated = !0;
  }, []);
  let initialScripts = React2.useMemo(() => {
    let contextScript = serverHandoffString ? `window.__remixContext = ${serverHandoffString};` : "", routeModulesScript = `${matches.map((match, index) => `import ${JSON.stringify(manifest.url)};
import * as route${index} from ${JSON.stringify(manifest.routes[match.route.id].module)};`).join(`
`)}
window.__remixRouteModules = {${matches.map((match, index) => `${JSON.stringify(match.route.id)}:route${index}`).join(",")}};

import(${JSON.stringify(manifest.entry.module)});`;
    return /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement("script", _extends3({}, props, {
      suppressHydrationWarning: !0,
      dangerouslySetInnerHTML: createHtml(contextScript),
      type: void 0
    })), /* @__PURE__ */ React2.createElement("script", _extends3({}, props, {
      dangerouslySetInnerHTML: createHtml(routeModulesScript),
      type: "module",
      async: !0
    })));
  }, []), nextMatches = React2.useMemo(() => {
    if (pendingLocation) {
      let matches2 = matchClientRoutes(clientRoutes, pendingLocation);
      return invariant2(matches2, `No routes match path "${pendingLocation.pathname}"`), matches2;
    }
    return [];
  }, [pendingLocation, clientRoutes]), routePreloads = matches.concat(nextMatches).map((match) => {
    let route = manifest.routes[match.route.id];
    return (route.imports || []).concat([route.module]);
  }).flat(1), preloads = manifest.entry.imports.concat(routePreloads);
  return /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement("link", {
    rel: "modulepreload",
    href: manifest.url,
    crossOrigin: props.crossOrigin
  }), /* @__PURE__ */ React2.createElement("link", {
    rel: "modulepreload",
    href: manifest.entry.module,
    crossOrigin: props.crossOrigin
  }), dedupe2(preloads).map((path) => /* @__PURE__ */ React2.createElement("link", {
    key: path,
    rel: "modulepreload",
    href: path,
    crossOrigin: props.crossOrigin
  })), isHydrated ? null : initialScripts);
}
function dedupe2(array) {
  return [...new Set(array)];
}
function useFormAction(action3, method = "get") {
  let {
    id
  } = useRemixRouteContext(), resolvedPath = useResolvedPath(action3 ?? "."), location = useLocation(), {
    search,
    hash
  } = resolvedPath, isIndexRoute = id.endsWith("/index");
  if (action3 == null && (search = location.search, hash = location.hash, isIndexRoute)) {
    let params = new URLSearchParams(search);
    params.delete("index"), search = params.toString() ? `?${params.toString()}` : "";
  }
  return (action3 == null || action3 === ".") && isIndexRoute && (search = search ? search.replace(/^\?/, "?index&") : "?index"), createPath({
    pathname: resolvedPath.pathname,
    search,
    hash
  });
}
function useSubmit() {
  return useSubmitImpl();
}
function useSubmitImpl(key) {
  let navigate = useNavigate(), defaultAction = useFormAction(), {
    transitionManager
  } = useRemixEntryContext();
  return React2.useCallback((target, options = {}) => {
    let method, action3, encType, formData;
    if (isFormElement(target)) {
      let submissionTrigger = options.submissionTrigger;
      method = options.method || target.getAttribute("method") || defaultMethod, action3 = options.action || target.getAttribute("action") || defaultAction, encType = options.encType || target.getAttribute("enctype") || defaultEncType, formData = new FormData(target), submissionTrigger && submissionTrigger.name && formData.append(submissionTrigger.name, submissionTrigger.value);
    } else if (isButtonElement(target) || isInputElement(target) && (target.type === "submit" || target.type === "image")) {
      let form = target.form;
      if (form == null)
        throw new Error("Cannot submit a <button> without a <form>");
      method = options.method || target.getAttribute("formmethod") || form.getAttribute("method") || defaultMethod, action3 = options.action || target.getAttribute("formaction") || form.getAttribute("action") || defaultAction, encType = options.encType || target.getAttribute("formenctype") || form.getAttribute("enctype") || defaultEncType, formData = new FormData(form), target.name && formData.append(target.name, target.value);
    } else {
      if (isHtmlElement(target))
        throw new Error('Cannot submit element that is not <form>, <button>, or <input type="submit|image">');
      if (method = options.method || "get", action3 = options.action || defaultAction, encType = options.encType || "application/x-www-form-urlencoded", target instanceof FormData)
        formData = target;
      else if (formData = new FormData(), target instanceof URLSearchParams)
        for (let [name, value] of target)
          formData.append(name, value);
      else if (target != null)
        for (let name of Object.keys(target))
          formData.append(name, target[name]);
    }
    if (typeof document > "u")
      throw new Error("You are calling submit during the server render. Try calling submit within a `useEffect` or callback instead.");
    let {
      protocol,
      host
    } = window.location, url = new URL(action3, `${protocol}//${host}`);
    if (method.toLowerCase() === "get") {
      let params = new URLSearchParams(), hasParams = !1;
      for (let [name, value] of formData)
        if (typeof value == "string")
          hasParams = !0, params.append(name, value);
        else
          throw new Error("Cannot submit binary form data using GET");
      let isIndexAction = new URLSearchParams(url.search).getAll("index").some((v) => v === "");
      key != null && isIndexAction && (hasParams = !0, params.append("index", "")), url.search = hasParams ? `?${params.toString()}` : "";
    }
    let submission = {
      formData,
      action: url.pathname + url.search,
      method: method.toUpperCase(),
      encType,
      key: Math.random().toString(36).substr(2, 8)
    };
    key ? transitionManager.send({
      type: "fetcher",
      href: submission.action,
      submission,
      key
    }) : (setNextNavigationSubmission(submission), navigate(url.pathname + url.search, {
      replace: options.replace
    }));
  }, [defaultAction, key, navigate, transitionManager]);
}
function setNextNavigationSubmission(submission) {
  nextNavigationSubmission = submission;
}
function consumeNextNavigationSubmission() {
  let submission = nextNavigationSubmission;
  return nextNavigationSubmission = void 0, submission;
}
function isHtmlElement(object) {
  return object != null && typeof object.tagName == "string";
}
function isButtonElement(object) {
  return isHtmlElement(object) && object.tagName.toLowerCase() === "button";
}
function isFormElement(object) {
  return isHtmlElement(object) && object.tagName.toLowerCase() === "form";
}
function isInputElement(object) {
  return isHtmlElement(object) && object.tagName.toLowerCase() === "input";
}
function useBeforeUnload(callback) {
  React2.useEffect(() => (window.addEventListener("beforeunload", callback), () => {
    window.removeEventListener("beforeunload", callback);
  }), [callback]);
}
function useMatches() {
  let {
    matches,
    routeData,
    routeModules
  } = useRemixEntryContext();
  return React2.useMemo(() => matches.map((match) => {
    var _routeModules$match$r;
    let {
      pathname,
      params
    } = match;
    return {
      id: match.route.id,
      pathname,
      params,
      data: routeData[match.route.id],
      handle: (_routeModules$match$r = routeModules[match.route.id]) === null || _routeModules$match$r === void 0 ? void 0 : _routeModules$match$r.handle
    };
  }), [matches, routeData, routeModules]);
}
function useLoaderData() {
  return useRemixRouteContext().data;
}
function useActionData() {
  let {
    id: routeId
  } = useRemixRouteContext(), {
    transitionManager
  } = useRemixEntryContext(), {
    actionData
  } = transitionManager.getState();
  return actionData ? actionData[routeId] : void 0;
}
function useTransition() {
  let {
    transitionManager
  } = useRemixEntryContext();
  return transitionManager.getState().transition;
}
function createFetcherForm(fetchKey) {
  let FetcherForm = /* @__PURE__ */ React2.forwardRef((props, ref) => /* @__PURE__ */ React2.createElement(FormImpl, _extends3({}, props, {
    ref,
    fetchKey
  })));
  return FetcherForm.displayName = "fetcher.Form", FetcherForm;
}
function useFetcher() {
  let {
    transitionManager
  } = useRemixEntryContext(), [key] = React2.useState(() => String(++fetcherId)), [Form3] = React2.useState(() => createFetcherForm(key)), [load] = React2.useState(() => (href) => {
    transitionManager.send({
      type: "fetcher",
      href,
      key
    });
  }), submit = useSubmitImpl(key), fetcher = transitionManager.getFetcher(key), fetcherWithComponents = React2.useMemo(() => ({
    Form: Form3,
    submit,
    load,
    ...fetcher
  }), [fetcher, Form3, submit, load]);
  return React2.useEffect(() => () => transitionManager.deleteFetcher(key), [transitionManager, key]), fetcherWithComponents;
}
function useFetchers() {
  let {
    transitionManager
  } = useRemixEntryContext(), {
    fetchers
  } = transitionManager.getState();
  return [...fetchers.values()];
}
var React2, RemixEntryContext, RemixRouteContext, NavLink2, Link2, isHydrated, Form, FormImpl, defaultMethod, defaultEncType, nextNavigationSubmission, fetcherId, LiveReload, init_components = __esm({
  "../../node_modules/.pnpm/@remix-run+react@1.7.4_biqbaboplfbrettd7655fr4n2y/node_modules/@remix-run/react/dist/esm/components.js"() {
    init_rollupPluginBabelHelpers();
    React2 = __toESM(require_react());
    init_react_router_dom();
    init_history();
    init_errorBoundaries();
    init_invariant();
    init_links();
    init_markup2();
    init_routes2();
    init_routeMatching2();
    init_transition();
    RemixEntryContext = /* @__PURE__ */ React2.createContext(void 0);
    RemixRouteContext = /* @__PURE__ */ React2.createContext(void 0);
    NavLink2 = /* @__PURE__ */ React2.forwardRef(({
      to,
      prefetch = "none",
      ...props
    }, forwardedRef) => {
      let href = useHref(to), [shouldPrefetch, prefetchHandlers] = usePrefetchBehavior(prefetch, props);
      return /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement(NavLink, _extends3({
        ref: forwardedRef,
        to
      }, props, prefetchHandlers)), shouldPrefetch ? /* @__PURE__ */ React2.createElement(PrefetchPageLinks, {
        page: href
      }) : null);
    });
    NavLink2.displayName = "NavLink";
    Link2 = /* @__PURE__ */ React2.forwardRef(({
      to,
      prefetch = "none",
      ...props
    }, forwardedRef) => {
      let href = useHref(to), [shouldPrefetch, prefetchHandlers] = usePrefetchBehavior(prefetch, props);
      return /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement(Link, _extends3({
        ref: forwardedRef,
        to
      }, props, prefetchHandlers)), shouldPrefetch ? /* @__PURE__ */ React2.createElement(PrefetchPageLinks, {
        page: href
      }) : null);
    });
    Link2.displayName = "Link";
    isHydrated = !1;
    Form = /* @__PURE__ */ React2.forwardRef((props, ref) => /* @__PURE__ */ React2.createElement(FormImpl, _extends3({}, props, {
      ref
    })));
    Form.displayName = "Form";
    FormImpl = /* @__PURE__ */ React2.forwardRef(({
      reloadDocument = !1,
      replace = !1,
      method = "get",
      action: action3,
      encType = "application/x-www-form-urlencoded",
      fetchKey,
      onSubmit,
      ...props
    }, forwardedRef) => {
      let submit = useSubmitImpl(fetchKey), formMethod = method.toLowerCase() === "get" ? "get" : "post", formAction = useFormAction(action3);
      return /* @__PURE__ */ React2.createElement("form", _extends3({
        ref: forwardedRef,
        method: formMethod,
        action: formAction,
        encType,
        onSubmit: reloadDocument ? void 0 : (event) => {
          if (onSubmit && onSubmit(event), event.defaultPrevented)
            return;
          event.preventDefault();
          let submitter = event.nativeEvent.submitter, submitMethod = (submitter == null ? void 0 : submitter.formMethod) || method;
          submit(submitter || event.currentTarget, {
            method: submitMethod,
            replace
          });
        }
      }, props));
    });
    FormImpl.displayName = "FormImpl";
    defaultMethod = "get", defaultEncType = "application/x-www-form-urlencoded";
    fetcherId = 0;
    LiveReload = function({
      port = Number(8002),
      nonce = void 0
    }) {
      let js = String.raw;
      return /* @__PURE__ */ React2.createElement("script", {
        nonce,
        suppressHydrationWarning: !0,
        dangerouslySetInnerHTML: {
          __html: js`
                function remixLiveReloadConnect(config) {
                  let protocol = location.protocol === "https:" ? "wss:" : "ws:";
                  let host = location.hostname;
                  let socketPath = protocol + "//" + host + ":" + ${String(port)} + "/socket";

                  let ws = new WebSocket(socketPath);
                  ws.onmessage = (message) => {
                    let event = JSON.parse(message.data);
                    if (event.type === "LOG") {
                      console.log(event.message);
                    }
                    if (event.type === "RELOAD") {
                      console.log("💿 Reloading window ...");
                      window.location.reload();
                    }
                  };
                  ws.onopen = () => {
                    if (config && typeof config.onOpen === "function") {
                      config.onOpen();
                    }
                  };
                  ws.onclose = (error) => {
                    console.log("Remix dev asset server web socket closed. Reconnecting...");
                    setTimeout(
                      () =>
                        remixLiveReloadConnect({
                          onOpen: () => window.location.reload(),
                        }),
                      1000
                    );
                  };
                  ws.onerror = (error) => {
                    console.log("Remix dev asset server web socket error:");
                    console.error(error);
                  };
                }
                remixLiveReloadConnect();
              `
        }
      });
    };
  }
});

// ../../node_modules/.pnpm/@remix-run+react@1.7.4_biqbaboplfbrettd7655fr4n2y/node_modules/@remix-run/react/dist/esm/browser.js
function RemixBrowser(_props) {
  let historyRef = React3.useRef();
  historyRef.current == null && (historyRef.current = createBrowserHistory({
    window
  }));
  let history = historyRef.current, [state, dispatch] = React3.useReducer((_, update) => update, {
    action: history.action,
    location: history.location
  });
  React3.useLayoutEffect(() => history.listen(dispatch), [history]);
  let entryContext = window.__remixContext;
  return entryContext.manifest = window.__remixManifest, entryContext.routeModules = window.__remixRouteModules, entryContext.appState.trackBoundaries = !1, entryContext.appState.trackCatchBoundaries = !1, /* @__PURE__ */ React3.createElement(RemixEntry, {
    context: entryContext,
    action: state.action,
    location: state.location,
    navigator: history
  });
}
var React3, init_browser = __esm({
  "../../node_modules/.pnpm/@remix-run+react@1.7.4_biqbaboplfbrettd7655fr4n2y/node_modules/@remix-run/react/dist/esm/browser.js"() {
    init_history();
    React3 = __toESM(require_react());
    init_components();
  }
});

// ../../node_modules/.pnpm/@remix-run+react@1.7.4_biqbaboplfbrettd7655fr4n2y/node_modules/@remix-run/react/dist/esm/scroll-restoration.js
function ScrollRestoration({
  nonce = void 0
}) {
  useScrollRestoration(), React4.useEffect(() => {
    window.history.scrollRestoration = "manual";
  }, []), useBeforeUnload(React4.useCallback(() => {
    window.history.scrollRestoration = "auto";
  }, []));
  let restoreScroll = ((STORAGE_KEY2) => {
    if (!window.history.state || !window.history.state.key) {
      let key = Math.random().toString(32).slice(2);
      window.history.replaceState({
        key
      }, "");
    }
    try {
      let storedY = JSON.parse(sessionStorage.getItem(STORAGE_KEY2) || "{}")[window.history.state.key];
      typeof storedY == "number" && window.scrollTo(0, storedY);
    } catch (error) {
      console.error(error), sessionStorage.removeItem(STORAGE_KEY2);
    }
  }).toString();
  return /* @__PURE__ */ React4.createElement("script", {
    nonce,
    suppressHydrationWarning: !0,
    dangerouslySetInnerHTML: {
      __html: `(${restoreScroll})(${JSON.stringify(STORAGE_KEY)})`
    }
  });
}
function useScrollRestoration() {
  let location = useLocation(), transition = useTransition(), wasSubmissionRef = React4.useRef(!1);
  React4.useEffect(() => {
    transition.submission && (wasSubmissionRef.current = !0);
  }, [transition]), React4.useEffect(() => {
    transition.location && (positions[location.key] = window.scrollY);
  }, [transition, location]), useBeforeUnload(React4.useCallback(() => {
    sessionStorage.setItem(STORAGE_KEY, JSON.stringify(positions));
  }, [])), typeof document < "u" && React4.useLayoutEffect(() => {
    if (!hydrated) {
      hydrated = !0;
      return;
    }
    let y = positions[location.key];
    if (y != null) {
      window.scrollTo(0, y);
      return;
    }
    if (location.hash) {
      let el = document.getElementById(location.hash.slice(1));
      if (el) {
        el.scrollIntoView();
        return;
      }
    }
    if (wasSubmissionRef.current === !0) {
      wasSubmissionRef.current = !1;
      return;
    }
    window.scrollTo(0, 0);
  }, [location]), React4.useEffect(() => {
    transition.submission && (wasSubmissionRef.current = !0);
  }, [transition]);
}
var React4, STORAGE_KEY, positions, hydrated, init_scroll_restoration = __esm({
  "../../node_modules/.pnpm/@remix-run+react@1.7.4_biqbaboplfbrettd7655fr4n2y/node_modules/@remix-run/react/dist/esm/scroll-restoration.js"() {
    React4 = __toESM(require_react());
    init_react_router_dom();
    init_components();
    STORAGE_KEY = "positions", positions = {};
    if (typeof document < "u") {
      let sessionPositions = sessionStorage.getItem(STORAGE_KEY);
      sessionPositions && (positions = JSON.parse(sessionPositions));
    }
    hydrated = !1;
  }
});

// ../../node_modules/.pnpm/@remix-run+react@1.7.4_biqbaboplfbrettd7655fr4n2y/node_modules/@remix-run/react/dist/esm/server.js
function RemixServer({
  context,
  url
}) {
  typeof url == "string" && (url = new URL(url));
  let location = {
    pathname: url.pathname,
    search: url.search,
    hash: "",
    state: null,
    key: "default"
  }, staticNavigator = {
    createHref(to) {
      return typeof to == "string" ? to : createPath(to);
    },
    push(to) {
      throw new Error(`You cannot use navigator.push() on the server because it is a stateless environment. This error was probably triggered when you did a \`navigate(${JSON.stringify(to)})\` somewhere in your app.`);
    },
    replace(to) {
      throw new Error(`You cannot use navigator.replace() on the server because it is a stateless environment. This error was probably triggered when you did a \`navigate(${JSON.stringify(to)}, { replace: true })\` somewhere in your app.`);
    },
    go(delta) {
      throw new Error(`You cannot use navigator.go() on the server because it is a stateless environment. This error was probably triggered when you did a \`navigate(${delta})\` somewhere in your app.`);
    },
    back() {
      throw new Error("You cannot use navigator.back() on the server because it is a stateless environment.");
    },
    forward() {
      throw new Error("You cannot use navigator.forward() on the server because it is a stateless environment.");
    },
    block() {
      throw new Error("You cannot use navigator.block() on the server because it is a stateless environment.");
    }
  };
  return /* @__PURE__ */ React5.createElement(RemixEntry, {
    context,
    action: Action.Pop,
    location,
    navigator: staticNavigator,
    static: !0
  });
}
var React5, init_server2 = __esm({
  "../../node_modules/.pnpm/@remix-run+react@1.7.4_biqbaboplfbrettd7655fr4n2y/node_modules/@remix-run/react/dist/esm/server.js"() {
    init_history();
    React5 = __toESM(require_react());
    init_components();
  }
});

// ../../node_modules/.pnpm/@remix-run+react@1.7.4_biqbaboplfbrettd7655fr4n2y/node_modules/@remix-run/react/dist/esm/index.js
var esm_exports2 = {};
__export(esm_exports2, {
  Form: () => Form,
  Link: () => Link2,
  Links: () => Links,
  LiveReload: () => LiveReload,
  Meta: () => Meta,
  NavLink: () => NavLink2,
  Outlet: () => Outlet,
  PrefetchPageLinks: () => PrefetchPageLinks,
  RemixBrowser: () => RemixBrowser,
  RemixServer: () => RemixServer,
  Scripts: () => Scripts,
  ScrollRestoration: () => ScrollRestoration,
  useActionData: () => useActionData,
  useBeforeUnload: () => useBeforeUnload,
  useCatch: () => useCatch,
  useFetcher: () => useFetcher,
  useFetchers: () => useFetchers,
  useFormAction: () => useFormAction,
  useHref: () => useHref,
  useLoaderData: () => useLoaderData,
  useLocation: () => useLocation,
  useMatches: () => useMatches,
  useNavigate: () => useNavigate,
  useNavigationType: () => useNavigationType,
  useOutlet: () => useOutlet,
  useOutletContext: () => useOutletContext,
  useParams: () => useParams,
  useResolvedPath: () => useResolvedPath,
  useSearchParams: () => useSearchParams,
  useSubmit: () => useSubmit,
  useTransition: () => useTransition
});
var init_esm2 = __esm({
  "../../node_modules/.pnpm/@remix-run+react@1.7.4_biqbaboplfbrettd7655fr4n2y/node_modules/@remix-run/react/dist/esm/index.js"() {
    init_browser();
    init_react_router_dom();
    init_components();
    init_errorBoundaries();
    init_scroll_restoration();
    init_server2();
  }
});

// ../../node_modules/.pnpm/react-dom@18.2.0_react@18.2.0/node_modules/react-dom/cjs/react-dom-server-legacy.browser.development.js
var require_react_dom_server_legacy_browser_development = __commonJS({
  "../../node_modules/.pnpm/react-dom@18.2.0_react@18.2.0/node_modules/react-dom/cjs/react-dom-server-legacy.browser.development.js"(exports) {
    "use strict";
    (function() {
      "use strict";
      var React8 = require_react(), ReactVersion = "18.2.0", ReactSharedInternals = React8.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
      function warn(format) {
        {
          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)
            args[_key - 1] = arguments[_key];
          printWarning("warn", format, args);
        }
      }
      function error(format) {
        {
          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)
            args[_key2 - 1] = arguments[_key2];
          printWarning("error", format, args);
        }
      }
      function printWarning(level, format, args) {
        {
          var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame, stack = ReactDebugCurrentFrame2.getStackAddendum();
          stack !== "" && (format += "%s", args = args.concat([stack]));
          var argsWithFormat = args.map(function(item) {
            return String(item);
          });
          argsWithFormat.unshift("Warning: " + format), Function.prototype.apply.call(console[level], console, argsWithFormat);
        }
      }
      function scheduleWork(callback) {
        callback();
      }
      function beginWriting(destination) {
      }
      function writeChunk(destination, chunk) {
        writeChunkAndReturn(destination, chunk);
      }
      function writeChunkAndReturn(destination, chunk) {
        return destination.push(chunk);
      }
      function completeWriting(destination) {
      }
      function close(destination) {
        destination.push(null);
      }
      function stringToChunk(content) {
        return content;
      }
      function stringToPrecomputedChunk(content) {
        return content;
      }
      function closeWithError(destination, error2) {
        destination.destroy(error2);
      }
      function typeName(value) {
        {
          var hasToStringTag = typeof Symbol == "function" && Symbol.toStringTag, type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
          return type;
        }
      }
      function willCoercionThrow(value) {
        try {
          return testStringCoercion(value), !1;
        } catch {
          return !0;
        }
      }
      function testStringCoercion(value) {
        return "" + value;
      }
      function checkAttributeStringCoercion(value, attributeName) {
        if (willCoercionThrow(value))
          return error("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value)), testStringCoercion(value);
      }
      function checkCSSPropertyStringCoercion(value, propName) {
        if (willCoercionThrow(value))
          return error("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value)), testStringCoercion(value);
      }
      function checkHtmlStringCoercion(value) {
        if (willCoercionThrow(value))
          return error("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value)), testStringCoercion(value);
      }
      var hasOwnProperty = Object.prototype.hasOwnProperty, RESERVED = 0, STRING = 1, BOOLEANISH_STRING = 2, BOOLEAN = 3, OVERLOADED_BOOLEAN = 4, NUMERIC = 5, POSITIVE_NUMERIC = 6, ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD", ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040", VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$"), illegalAttributeNameCache = {}, validatedAttributeNameCache = {};
      function isAttributeNameSafe(attributeName) {
        return hasOwnProperty.call(validatedAttributeNameCache, attributeName) ? !0 : hasOwnProperty.call(illegalAttributeNameCache, attributeName) ? !1 : VALID_ATTRIBUTE_NAME_REGEX.test(attributeName) ? (validatedAttributeNameCache[attributeName] = !0, !0) : (illegalAttributeNameCache[attributeName] = !0, error("Invalid attribute name: `%s`", attributeName), !1);
      }
      function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
        if (propertyInfo !== null && propertyInfo.type === RESERVED)
          return !1;
        switch (typeof value) {
          case "function":
          case "symbol":
            return !0;
          case "boolean": {
            if (isCustomComponentTag)
              return !1;
            if (propertyInfo !== null)
              return !propertyInfo.acceptsBooleans;
            var prefix3 = name.toLowerCase().slice(0, 5);
            return prefix3 !== "data-" && prefix3 !== "aria-";
          }
          default:
            return !1;
        }
      }
      function getPropertyInfo(name) {
        return properties.hasOwnProperty(name) ? properties[name] : null;
      }
      function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
        this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN, this.attributeName = attributeName, this.attributeNamespace = attributeNamespace, this.mustUseProperty = mustUseProperty, this.propertyName = name, this.type = type, this.sanitizeURL = sanitizeURL2, this.removeEmptyString = removeEmptyString;
      }
      var properties = {}, reservedProps = [
        "children",
        "dangerouslySetInnerHTML",
        "defaultValue",
        "defaultChecked",
        "innerHTML",
        "suppressContentEditableWarning",
        "suppressHydrationWarning",
        "style"
      ];
      reservedProps.forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          RESERVED,
          !1,
          name,
          null,
          !1,
          !1
        );
      }), [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
        var name = _ref[0], attributeName = _ref[1];
        properties[name] = new PropertyInfoRecord(
          name,
          STRING,
          !1,
          attributeName,
          null,
          !1,
          !1
        );
      }), ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          BOOLEANISH_STRING,
          !1,
          name.toLowerCase(),
          null,
          !1,
          !1
        );
      }), ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          BOOLEANISH_STRING,
          !1,
          name,
          null,
          !1,
          !1
        );
      }), [
        "allowFullScreen",
        "async",
        "autoFocus",
        "autoPlay",
        "controls",
        "default",
        "defer",
        "disabled",
        "disablePictureInPicture",
        "disableRemotePlayback",
        "formNoValidate",
        "hidden",
        "loop",
        "noModule",
        "noValidate",
        "open",
        "playsInline",
        "readOnly",
        "required",
        "reversed",
        "scoped",
        "seamless",
        "itemScope"
      ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          BOOLEAN,
          !1,
          name.toLowerCase(),
          null,
          !1,
          !1
        );
      }), [
        "checked",
        "multiple",
        "muted",
        "selected"
      ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          BOOLEAN,
          !0,
          name,
          null,
          !1,
          !1
        );
      }), [
        "capture",
        "download"
      ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          OVERLOADED_BOOLEAN,
          !1,
          name,
          null,
          !1,
          !1
        );
      }), [
        "cols",
        "rows",
        "size",
        "span"
      ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          POSITIVE_NUMERIC,
          !1,
          name,
          null,
          !1,
          !1
        );
      }), ["rowSpan", "start"].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          NUMERIC,
          !1,
          name.toLowerCase(),
          null,
          !1,
          !1
        );
      });
      var CAMELIZE = /[\-\:]([a-z])/g, capitalize = function(token) {
        return token[1].toUpperCase();
      };
      [
        "accent-height",
        "alignment-baseline",
        "arabic-form",
        "baseline-shift",
        "cap-height",
        "clip-path",
        "clip-rule",
        "color-interpolation",
        "color-interpolation-filters",
        "color-profile",
        "color-rendering",
        "dominant-baseline",
        "enable-background",
        "fill-opacity",
        "fill-rule",
        "flood-color",
        "flood-opacity",
        "font-family",
        "font-size",
        "font-size-adjust",
        "font-stretch",
        "font-style",
        "font-variant",
        "font-weight",
        "glyph-name",
        "glyph-orientation-horizontal",
        "glyph-orientation-vertical",
        "horiz-adv-x",
        "horiz-origin-x",
        "image-rendering",
        "letter-spacing",
        "lighting-color",
        "marker-end",
        "marker-mid",
        "marker-start",
        "overline-position",
        "overline-thickness",
        "paint-order",
        "panose-1",
        "pointer-events",
        "rendering-intent",
        "shape-rendering",
        "stop-color",
        "stop-opacity",
        "strikethrough-position",
        "strikethrough-thickness",
        "stroke-dasharray",
        "stroke-dashoffset",
        "stroke-linecap",
        "stroke-linejoin",
        "stroke-miterlimit",
        "stroke-opacity",
        "stroke-width",
        "text-anchor",
        "text-decoration",
        "text-rendering",
        "underline-position",
        "underline-thickness",
        "unicode-bidi",
        "unicode-range",
        "units-per-em",
        "v-alphabetic",
        "v-hanging",
        "v-ideographic",
        "v-mathematical",
        "vector-effect",
        "vert-adv-y",
        "vert-origin-x",
        "vert-origin-y",
        "word-spacing",
        "writing-mode",
        "xmlns:xlink",
        "x-height"
      ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(
          name,
          STRING,
          !1,
          attributeName,
          null,
          !1,
          !1
        );
      }), [
        "xlink:actuate",
        "xlink:arcrole",
        "xlink:role",
        "xlink:show",
        "xlink:title",
        "xlink:type"
      ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(
          name,
          STRING,
          !1,
          attributeName,
          "http://www.w3.org/1999/xlink",
          !1,
          !1
        );
      }), [
        "xml:base",
        "xml:lang",
        "xml:space"
      ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(
          name,
          STRING,
          !1,
          attributeName,
          "http://www.w3.org/XML/1998/namespace",
          !1,
          !1
        );
      }), ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
        properties[attributeName] = new PropertyInfoRecord(
          attributeName,
          STRING,
          !1,
          attributeName.toLowerCase(),
          null,
          !1,
          !1
        );
      });
      var xlinkHref = "xlinkHref";
      properties[xlinkHref] = new PropertyInfoRecord(
        "xlinkHref",
        STRING,
        !1,
        "xlink:href",
        "http://www.w3.org/1999/xlink",
        !0,
        !1
      ), ["src", "href", "action", "formAction"].forEach(function(attributeName) {
        properties[attributeName] = new PropertyInfoRecord(
          attributeName,
          STRING,
          !1,
          attributeName.toLowerCase(),
          null,
          !0,
          !0
        );
      });
      var isUnitlessNumber = {
        animationIterationCount: !0,
        aspectRatio: !0,
        borderImageOutset: !0,
        borderImageSlice: !0,
        borderImageWidth: !0,
        boxFlex: !0,
        boxFlexGroup: !0,
        boxOrdinalGroup: !0,
        columnCount: !0,
        columns: !0,
        flex: !0,
        flexGrow: !0,
        flexPositive: !0,
        flexShrink: !0,
        flexNegative: !0,
        flexOrder: !0,
        gridArea: !0,
        gridRow: !0,
        gridRowEnd: !0,
        gridRowSpan: !0,
        gridRowStart: !0,
        gridColumn: !0,
        gridColumnEnd: !0,
        gridColumnSpan: !0,
        gridColumnStart: !0,
        fontWeight: !0,
        lineClamp: !0,
        lineHeight: !0,
        opacity: !0,
        order: !0,
        orphans: !0,
        tabSize: !0,
        widows: !0,
        zIndex: !0,
        zoom: !0,
        fillOpacity: !0,
        floodOpacity: !0,
        stopOpacity: !0,
        strokeDasharray: !0,
        strokeDashoffset: !0,
        strokeMiterlimit: !0,
        strokeOpacity: !0,
        strokeWidth: !0
      };
      function prefixKey(prefix3, key) {
        return prefix3 + key.charAt(0).toUpperCase() + key.substring(1);
      }
      var prefixes = ["Webkit", "ms", "Moz", "O"];
      Object.keys(isUnitlessNumber).forEach(function(prop) {
        prefixes.forEach(function(prefix3) {
          isUnitlessNumber[prefixKey(prefix3, prop)] = isUnitlessNumber[prop];
        });
      });
      var hasReadOnlyValue = {
        button: !0,
        checkbox: !0,
        image: !0,
        hidden: !0,
        radio: !0,
        reset: !0,
        submit: !0
      };
      function checkControlledValueProps(tagName, props) {
        hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null || error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`."), props.onChange || props.readOnly || props.disabled || props.checked == null || error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
      }
      function isCustomComponent(tagName, props) {
        if (tagName.indexOf("-") === -1)
          return typeof props.is == "string";
        switch (tagName) {
          case "annotation-xml":
          case "color-profile":
          case "font-face":
          case "font-face-src":
          case "font-face-uri":
          case "font-face-format":
          case "font-face-name":
          case "missing-glyph":
            return !1;
          default:
            return !0;
        }
      }
      var ariaProperties = {
        "aria-current": 0,
        "aria-description": 0,
        "aria-details": 0,
        "aria-disabled": 0,
        "aria-hidden": 0,
        "aria-invalid": 0,
        "aria-keyshortcuts": 0,
        "aria-label": 0,
        "aria-roledescription": 0,
        "aria-autocomplete": 0,
        "aria-checked": 0,
        "aria-expanded": 0,
        "aria-haspopup": 0,
        "aria-level": 0,
        "aria-modal": 0,
        "aria-multiline": 0,
        "aria-multiselectable": 0,
        "aria-orientation": 0,
        "aria-placeholder": 0,
        "aria-pressed": 0,
        "aria-readonly": 0,
        "aria-required": 0,
        "aria-selected": 0,
        "aria-sort": 0,
        "aria-valuemax": 0,
        "aria-valuemin": 0,
        "aria-valuenow": 0,
        "aria-valuetext": 0,
        "aria-atomic": 0,
        "aria-busy": 0,
        "aria-live": 0,
        "aria-relevant": 0,
        "aria-dropeffect": 0,
        "aria-grabbed": 0,
        "aria-activedescendant": 0,
        "aria-colcount": 0,
        "aria-colindex": 0,
        "aria-colspan": 0,
        "aria-controls": 0,
        "aria-describedby": 0,
        "aria-errormessage": 0,
        "aria-flowto": 0,
        "aria-labelledby": 0,
        "aria-owns": 0,
        "aria-posinset": 0,
        "aria-rowcount": 0,
        "aria-rowindex": 0,
        "aria-rowspan": 0,
        "aria-setsize": 0
      }, warnedProperties = {}, rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$"), rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
      function validateProperty(tagName, name) {
        {
          if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name])
            return !0;
          if (rARIACamel.test(name)) {
            var ariaName = "aria-" + name.slice(4).toLowerCase(), correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
            if (correctName == null)
              return error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name), warnedProperties[name] = !0, !0;
            if (name !== correctName)
              return error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName), warnedProperties[name] = !0, !0;
          }
          if (rARIA.test(name)) {
            var lowerCasedName = name.toLowerCase(), standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
            if (standardName == null)
              return warnedProperties[name] = !0, !1;
            if (name !== standardName)
              return error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName), warnedProperties[name] = !0, !0;
          }
        }
        return !0;
      }
      function warnInvalidARIAProps(type, props) {
        {
          var invalidProps = [];
          for (var key in props) {
            var isValid2 = validateProperty(type, key);
            isValid2 || invalidProps.push(key);
          }
          var unknownPropString = invalidProps.map(function(prop) {
            return "`" + prop + "`";
          }).join(", ");
          invalidProps.length === 1 ? error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type) : invalidProps.length > 1 && error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
        }
      }
      function validateProperties(type, props) {
        isCustomComponent(type, props) || warnInvalidARIAProps(type, props);
      }
      var didWarnValueNull = !1;
      function validateProperties$1(type, props) {
        {
          if (type !== "input" && type !== "textarea" && type !== "select")
            return;
          props != null && props.value === null && !didWarnValueNull && (didWarnValueNull = !0, type === "select" && props.multiple ? error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type) : error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type));
        }
      }
      var possibleStandardNames = {
        accept: "accept",
        acceptcharset: "acceptCharset",
        "accept-charset": "acceptCharset",
        accesskey: "accessKey",
        action: "action",
        allowfullscreen: "allowFullScreen",
        alt: "alt",
        as: "as",
        async: "async",
        autocapitalize: "autoCapitalize",
        autocomplete: "autoComplete",
        autocorrect: "autoCorrect",
        autofocus: "autoFocus",
        autoplay: "autoPlay",
        autosave: "autoSave",
        capture: "capture",
        cellpadding: "cellPadding",
        cellspacing: "cellSpacing",
        challenge: "challenge",
        charset: "charSet",
        checked: "checked",
        children: "children",
        cite: "cite",
        class: "className",
        classid: "classID",
        classname: "className",
        cols: "cols",
        colspan: "colSpan",
        content: "content",
        contenteditable: "contentEditable",
        contextmenu: "contextMenu",
        controls: "controls",
        controlslist: "controlsList",
        coords: "coords",
        crossorigin: "crossOrigin",
        dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
        data: "data",
        datetime: "dateTime",
        default: "default",
        defaultchecked: "defaultChecked",
        defaultvalue: "defaultValue",
        defer: "defer",
        dir: "dir",
        disabled: "disabled",
        disablepictureinpicture: "disablePictureInPicture",
        disableremoteplayback: "disableRemotePlayback",
        download: "download",
        draggable: "draggable",
        enctype: "encType",
        enterkeyhint: "enterKeyHint",
        for: "htmlFor",
        form: "form",
        formmethod: "formMethod",
        formaction: "formAction",
        formenctype: "formEncType",
        formnovalidate: "formNoValidate",
        formtarget: "formTarget",
        frameborder: "frameBorder",
        headers: "headers",
        height: "height",
        hidden: "hidden",
        high: "high",
        href: "href",
        hreflang: "hrefLang",
        htmlfor: "htmlFor",
        httpequiv: "httpEquiv",
        "http-equiv": "httpEquiv",
        icon: "icon",
        id: "id",
        imagesizes: "imageSizes",
        imagesrcset: "imageSrcSet",
        innerhtml: "innerHTML",
        inputmode: "inputMode",
        integrity: "integrity",
        is: "is",
        itemid: "itemID",
        itemprop: "itemProp",
        itemref: "itemRef",
        itemscope: "itemScope",
        itemtype: "itemType",
        keyparams: "keyParams",
        keytype: "keyType",
        kind: "kind",
        label: "label",
        lang: "lang",
        list: "list",
        loop: "loop",
        low: "low",
        manifest: "manifest",
        marginwidth: "marginWidth",
        marginheight: "marginHeight",
        max: "max",
        maxlength: "maxLength",
        media: "media",
        mediagroup: "mediaGroup",
        method: "method",
        min: "min",
        minlength: "minLength",
        multiple: "multiple",
        muted: "muted",
        name: "name",
        nomodule: "noModule",
        nonce: "nonce",
        novalidate: "noValidate",
        open: "open",
        optimum: "optimum",
        pattern: "pattern",
        placeholder: "placeholder",
        playsinline: "playsInline",
        poster: "poster",
        preload: "preload",
        profile: "profile",
        radiogroup: "radioGroup",
        readonly: "readOnly",
        referrerpolicy: "referrerPolicy",
        rel: "rel",
        required: "required",
        reversed: "reversed",
        role: "role",
        rows: "rows",
        rowspan: "rowSpan",
        sandbox: "sandbox",
        scope: "scope",
        scoped: "scoped",
        scrolling: "scrolling",
        seamless: "seamless",
        selected: "selected",
        shape: "shape",
        size: "size",
        sizes: "sizes",
        span: "span",
        spellcheck: "spellCheck",
        src: "src",
        srcdoc: "srcDoc",
        srclang: "srcLang",
        srcset: "srcSet",
        start: "start",
        step: "step",
        style: "style",
        summary: "summary",
        tabindex: "tabIndex",
        target: "target",
        title: "title",
        type: "type",
        usemap: "useMap",
        value: "value",
        width: "width",
        wmode: "wmode",
        wrap: "wrap",
        about: "about",
        accentheight: "accentHeight",
        "accent-height": "accentHeight",
        accumulate: "accumulate",
        additive: "additive",
        alignmentbaseline: "alignmentBaseline",
        "alignment-baseline": "alignmentBaseline",
        allowreorder: "allowReorder",
        alphabetic: "alphabetic",
        amplitude: "amplitude",
        arabicform: "arabicForm",
        "arabic-form": "arabicForm",
        ascent: "ascent",
        attributename: "attributeName",
        attributetype: "attributeType",
        autoreverse: "autoReverse",
        azimuth: "azimuth",
        basefrequency: "baseFrequency",
        baselineshift: "baselineShift",
        "baseline-shift": "baselineShift",
        baseprofile: "baseProfile",
        bbox: "bbox",
        begin: "begin",
        bias: "bias",
        by: "by",
        calcmode: "calcMode",
        capheight: "capHeight",
        "cap-height": "capHeight",
        clip: "clip",
        clippath: "clipPath",
        "clip-path": "clipPath",
        clippathunits: "clipPathUnits",
        cliprule: "clipRule",
        "clip-rule": "clipRule",
        color: "color",
        colorinterpolation: "colorInterpolation",
        "color-interpolation": "colorInterpolation",
        colorinterpolationfilters: "colorInterpolationFilters",
        "color-interpolation-filters": "colorInterpolationFilters",
        colorprofile: "colorProfile",
        "color-profile": "colorProfile",
        colorrendering: "colorRendering",
        "color-rendering": "colorRendering",
        contentscripttype: "contentScriptType",
        contentstyletype: "contentStyleType",
        cursor: "cursor",
        cx: "cx",
        cy: "cy",
        d: "d",
        datatype: "datatype",
        decelerate: "decelerate",
        descent: "descent",
        diffuseconstant: "diffuseConstant",
        direction: "direction",
        display: "display",
        divisor: "divisor",
        dominantbaseline: "dominantBaseline",
        "dominant-baseline": "dominantBaseline",
        dur: "dur",
        dx: "dx",
        dy: "dy",
        edgemode: "edgeMode",
        elevation: "elevation",
        enablebackground: "enableBackground",
        "enable-background": "enableBackground",
        end: "end",
        exponent: "exponent",
        externalresourcesrequired: "externalResourcesRequired",
        fill: "fill",
        fillopacity: "fillOpacity",
        "fill-opacity": "fillOpacity",
        fillrule: "fillRule",
        "fill-rule": "fillRule",
        filter: "filter",
        filterres: "filterRes",
        filterunits: "filterUnits",
        floodopacity: "floodOpacity",
        "flood-opacity": "floodOpacity",
        floodcolor: "floodColor",
        "flood-color": "floodColor",
        focusable: "focusable",
        fontfamily: "fontFamily",
        "font-family": "fontFamily",
        fontsize: "fontSize",
        "font-size": "fontSize",
        fontsizeadjust: "fontSizeAdjust",
        "font-size-adjust": "fontSizeAdjust",
        fontstretch: "fontStretch",
        "font-stretch": "fontStretch",
        fontstyle: "fontStyle",
        "font-style": "fontStyle",
        fontvariant: "fontVariant",
        "font-variant": "fontVariant",
        fontweight: "fontWeight",
        "font-weight": "fontWeight",
        format: "format",
        from: "from",
        fx: "fx",
        fy: "fy",
        g1: "g1",
        g2: "g2",
        glyphname: "glyphName",
        "glyph-name": "glyphName",
        glyphorientationhorizontal: "glyphOrientationHorizontal",
        "glyph-orientation-horizontal": "glyphOrientationHorizontal",
        glyphorientationvertical: "glyphOrientationVertical",
        "glyph-orientation-vertical": "glyphOrientationVertical",
        glyphref: "glyphRef",
        gradienttransform: "gradientTransform",
        gradientunits: "gradientUnits",
        hanging: "hanging",
        horizadvx: "horizAdvX",
        "horiz-adv-x": "horizAdvX",
        horizoriginx: "horizOriginX",
        "horiz-origin-x": "horizOriginX",
        ideographic: "ideographic",
        imagerendering: "imageRendering",
        "image-rendering": "imageRendering",
        in2: "in2",
        in: "in",
        inlist: "inlist",
        intercept: "intercept",
        k1: "k1",
        k2: "k2",
        k3: "k3",
        k4: "k4",
        k: "k",
        kernelmatrix: "kernelMatrix",
        kernelunitlength: "kernelUnitLength",
        kerning: "kerning",
        keypoints: "keyPoints",
        keysplines: "keySplines",
        keytimes: "keyTimes",
        lengthadjust: "lengthAdjust",
        letterspacing: "letterSpacing",
        "letter-spacing": "letterSpacing",
        lightingcolor: "lightingColor",
        "lighting-color": "lightingColor",
        limitingconeangle: "limitingConeAngle",
        local: "local",
        markerend: "markerEnd",
        "marker-end": "markerEnd",
        markerheight: "markerHeight",
        markermid: "markerMid",
        "marker-mid": "markerMid",
        markerstart: "markerStart",
        "marker-start": "markerStart",
        markerunits: "markerUnits",
        markerwidth: "markerWidth",
        mask: "mask",
        maskcontentunits: "maskContentUnits",
        maskunits: "maskUnits",
        mathematical: "mathematical",
        mode: "mode",
        numoctaves: "numOctaves",
        offset: "offset",
        opacity: "opacity",
        operator: "operator",
        order: "order",
        orient: "orient",
        orientation: "orientation",
        origin: "origin",
        overflow: "overflow",
        overlineposition: "overlinePosition",
        "overline-position": "overlinePosition",
        overlinethickness: "overlineThickness",
        "overline-thickness": "overlineThickness",
        paintorder: "paintOrder",
        "paint-order": "paintOrder",
        panose1: "panose1",
        "panose-1": "panose1",
        pathlength: "pathLength",
        patterncontentunits: "patternContentUnits",
        patterntransform: "patternTransform",
        patternunits: "patternUnits",
        pointerevents: "pointerEvents",
        "pointer-events": "pointerEvents",
        points: "points",
        pointsatx: "pointsAtX",
        pointsaty: "pointsAtY",
        pointsatz: "pointsAtZ",
        prefix: "prefix",
        preservealpha: "preserveAlpha",
        preserveaspectratio: "preserveAspectRatio",
        primitiveunits: "primitiveUnits",
        property: "property",
        r: "r",
        radius: "radius",
        refx: "refX",
        refy: "refY",
        renderingintent: "renderingIntent",
        "rendering-intent": "renderingIntent",
        repeatcount: "repeatCount",
        repeatdur: "repeatDur",
        requiredextensions: "requiredExtensions",
        requiredfeatures: "requiredFeatures",
        resource: "resource",
        restart: "restart",
        result: "result",
        results: "results",
        rotate: "rotate",
        rx: "rx",
        ry: "ry",
        scale: "scale",
        security: "security",
        seed: "seed",
        shaperendering: "shapeRendering",
        "shape-rendering": "shapeRendering",
        slope: "slope",
        spacing: "spacing",
        specularconstant: "specularConstant",
        specularexponent: "specularExponent",
        speed: "speed",
        spreadmethod: "spreadMethod",
        startoffset: "startOffset",
        stddeviation: "stdDeviation",
        stemh: "stemh",
        stemv: "stemv",
        stitchtiles: "stitchTiles",
        stopcolor: "stopColor",
        "stop-color": "stopColor",
        stopopacity: "stopOpacity",
        "stop-opacity": "stopOpacity",
        strikethroughposition: "strikethroughPosition",
        "strikethrough-position": "strikethroughPosition",
        strikethroughthickness: "strikethroughThickness",
        "strikethrough-thickness": "strikethroughThickness",
        string: "string",
        stroke: "stroke",
        strokedasharray: "strokeDasharray",
        "stroke-dasharray": "strokeDasharray",
        strokedashoffset: "strokeDashoffset",
        "stroke-dashoffset": "strokeDashoffset",
        strokelinecap: "strokeLinecap",
        "stroke-linecap": "strokeLinecap",
        strokelinejoin: "strokeLinejoin",
        "stroke-linejoin": "strokeLinejoin",
        strokemiterlimit: "strokeMiterlimit",
        "stroke-miterlimit": "strokeMiterlimit",
        strokewidth: "strokeWidth",
        "stroke-width": "strokeWidth",
        strokeopacity: "strokeOpacity",
        "stroke-opacity": "strokeOpacity",
        suppresscontenteditablewarning: "suppressContentEditableWarning",
        suppresshydrationwarning: "suppressHydrationWarning",
        surfacescale: "surfaceScale",
        systemlanguage: "systemLanguage",
        tablevalues: "tableValues",
        targetx: "targetX",
        targety: "targetY",
        textanchor: "textAnchor",
        "text-anchor": "textAnchor",
        textdecoration: "textDecoration",
        "text-decoration": "textDecoration",
        textlength: "textLength",
        textrendering: "textRendering",
        "text-rendering": "textRendering",
        to: "to",
        transform: "transform",
        typeof: "typeof",
        u1: "u1",
        u2: "u2",
        underlineposition: "underlinePosition",
        "underline-position": "underlinePosition",
        underlinethickness: "underlineThickness",
        "underline-thickness": "underlineThickness",
        unicode: "unicode",
        unicodebidi: "unicodeBidi",
        "unicode-bidi": "unicodeBidi",
        unicoderange: "unicodeRange",
        "unicode-range": "unicodeRange",
        unitsperem: "unitsPerEm",
        "units-per-em": "unitsPerEm",
        unselectable: "unselectable",
        valphabetic: "vAlphabetic",
        "v-alphabetic": "vAlphabetic",
        values: "values",
        vectoreffect: "vectorEffect",
        "vector-effect": "vectorEffect",
        version: "version",
        vertadvy: "vertAdvY",
        "vert-adv-y": "vertAdvY",
        vertoriginx: "vertOriginX",
        "vert-origin-x": "vertOriginX",
        vertoriginy: "vertOriginY",
        "vert-origin-y": "vertOriginY",
        vhanging: "vHanging",
        "v-hanging": "vHanging",
        videographic: "vIdeographic",
        "v-ideographic": "vIdeographic",
        viewbox: "viewBox",
        viewtarget: "viewTarget",
        visibility: "visibility",
        vmathematical: "vMathematical",
        "v-mathematical": "vMathematical",
        vocab: "vocab",
        widths: "widths",
        wordspacing: "wordSpacing",
        "word-spacing": "wordSpacing",
        writingmode: "writingMode",
        "writing-mode": "writingMode",
        x1: "x1",
        x2: "x2",
        x: "x",
        xchannelselector: "xChannelSelector",
        xheight: "xHeight",
        "x-height": "xHeight",
        xlinkactuate: "xlinkActuate",
        "xlink:actuate": "xlinkActuate",
        xlinkarcrole: "xlinkArcrole",
        "xlink:arcrole": "xlinkArcrole",
        xlinkhref: "xlinkHref",
        "xlink:href": "xlinkHref",
        xlinkrole: "xlinkRole",
        "xlink:role": "xlinkRole",
        xlinkshow: "xlinkShow",
        "xlink:show": "xlinkShow",
        xlinktitle: "xlinkTitle",
        "xlink:title": "xlinkTitle",
        xlinktype: "xlinkType",
        "xlink:type": "xlinkType",
        xmlbase: "xmlBase",
        "xml:base": "xmlBase",
        xmllang: "xmlLang",
        "xml:lang": "xmlLang",
        xmlns: "xmlns",
        "xml:space": "xmlSpace",
        xmlnsxlink: "xmlnsXlink",
        "xmlns:xlink": "xmlnsXlink",
        xmlspace: "xmlSpace",
        y1: "y1",
        y2: "y2",
        y: "y",
        ychannelselector: "yChannelSelector",
        z: "z",
        zoomandpan: "zoomAndPan"
      }, validateProperty$1 = function() {
      };
      {
        var warnedProperties$1 = {}, EVENT_NAME_REGEX = /^on./, INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/, rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$"), rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
        validateProperty$1 = function(tagName, name, value, eventRegistry) {
          if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name])
            return !0;
          var lowerCasedName = name.toLowerCase();
          if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout")
            return error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React."), warnedProperties$1[name] = !0, !0;
          if (eventRegistry != null) {
            var registrationNameDependencies = eventRegistry.registrationNameDependencies, possibleRegistrationNames = eventRegistry.possibleRegistrationNames;
            if (registrationNameDependencies.hasOwnProperty(name))
              return !0;
            var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;
            if (registrationName != null)
              return error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName), warnedProperties$1[name] = !0, !0;
            if (EVENT_NAME_REGEX.test(name))
              return error("Unknown event handler property `%s`. It will be ignored.", name), warnedProperties$1[name] = !0, !0;
          } else if (EVENT_NAME_REGEX.test(name))
            return INVALID_EVENT_NAME_REGEX.test(name) && error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name), warnedProperties$1[name] = !0, !0;
          if (rARIA$1.test(name) || rARIACamel$1.test(name))
            return !0;
          if (lowerCasedName === "innerhtml")
            return error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`."), warnedProperties$1[name] = !0, !0;
          if (lowerCasedName === "aria")
            return error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead."), warnedProperties$1[name] = !0, !0;
          if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value != "string")
            return error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value), warnedProperties$1[name] = !0, !0;
          if (typeof value == "number" && isNaN(value))
            return error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name), warnedProperties$1[name] = !0, !0;
          var propertyInfo = getPropertyInfo(name), isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
          if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
            var standardName = possibleStandardNames[lowerCasedName];
            if (standardName !== name)
              return error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName), warnedProperties$1[name] = !0, !0;
          } else if (!isReserved && name !== lowerCasedName)
            return error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName), warnedProperties$1[name] = !0, !0;
          return typeof value == "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, !1) ? (value ? error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name) : error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name), warnedProperties$1[name] = !0, !0) : isReserved ? !0 : shouldRemoveAttributeWithWarning(name, value, propertyInfo, !1) ? (warnedProperties$1[name] = !0, !1) : ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN && (error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value), warnedProperties$1[name] = !0), !0);
        };
      }
      var warnUnknownProperties = function(type, props, eventRegistry) {
        {
          var unknownProps = [];
          for (var key in props) {
            var isValid2 = validateProperty$1(type, key, props[key], eventRegistry);
            isValid2 || unknownProps.push(key);
          }
          var unknownPropString = unknownProps.map(function(prop) {
            return "`" + prop + "`";
          }).join(", ");
          unknownProps.length === 1 ? error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type) : unknownProps.length > 1 && error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
        }
      };
      function validateProperties$2(type, props, eventRegistry) {
        isCustomComponent(type, props) || warnUnknownProperties(type, props, eventRegistry);
      }
      var warnValidStyle = function() {
      };
      {
        var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/, msPattern = /^-ms-/, hyphenPattern = /-(.)/g, badStyleValueWithSemicolonPattern = /;\s*$/, warnedStyleNames = {}, warnedStyleValues = {}, warnedForNaNValue = !1, warnedForInfinityValue = !1, camelize = function(string) {
          return string.replace(hyphenPattern, function(_, character) {
            return character.toUpperCase();
          });
        }, warnHyphenatedStyleName = function(name) {
          warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name] || (warnedStyleNames[name] = !0, error(
            "Unsupported style property %s. Did you mean %s?",
            name,
            camelize(name.replace(msPattern, "ms-"))
          ));
        }, warnBadVendoredStyleName = function(name) {
          warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name] || (warnedStyleNames[name] = !0, error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1)));
        }, warnStyleValueWithSemicolon = function(name, value) {
          warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value] || (warnedStyleValues[value] = !0, error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, "")));
        }, warnStyleValueIsNaN = function(name, value) {
          warnedForNaNValue || (warnedForNaNValue = !0, error("`NaN` is an invalid value for the `%s` css style property.", name));
        }, warnStyleValueIsInfinity = function(name, value) {
          warnedForInfinityValue || (warnedForInfinityValue = !0, error("`Infinity` is an invalid value for the `%s` css style property.", name));
        };
        warnValidStyle = function(name, value) {
          name.indexOf("-") > -1 ? warnHyphenatedStyleName(name) : badVendoredStyleNamePattern.test(name) ? warnBadVendoredStyleName(name) : badStyleValueWithSemicolonPattern.test(value) && warnStyleValueWithSemicolon(name, value), typeof value == "number" && (isNaN(value) ? warnStyleValueIsNaN(name, value) : isFinite(value) || warnStyleValueIsInfinity(name, value));
        };
      }
      var warnValidStyle$1 = warnValidStyle, matchHtmlRegExp = /["'&<>]/;
      function escapeHtml2(string) {
        checkHtmlStringCoercion(string);
        var str = "" + string, match = matchHtmlRegExp.exec(str);
        if (!match)
          return str;
        var escape2, html = "", index, lastIndex = 0;
        for (index = match.index; index < str.length; index++) {
          switch (str.charCodeAt(index)) {
            case 34:
              escape2 = "&quot;";
              break;
            case 38:
              escape2 = "&amp;";
              break;
            case 39:
              escape2 = "&#x27;";
              break;
            case 60:
              escape2 = "&lt;";
              break;
            case 62:
              escape2 = "&gt;";
              break;
            default:
              continue;
          }
          lastIndex !== index && (html += str.substring(lastIndex, index)), lastIndex = index + 1, html += escape2;
        }
        return lastIndex !== index ? html + str.substring(lastIndex, index) : html;
      }
      function escapeTextForBrowser(text) {
        return typeof text == "boolean" || typeof text == "number" ? "" + text : escapeHtml2(text);
      }
      var uppercasePattern = /([A-Z])/g, msPattern$1 = /^ms-/;
      function hyphenateStyleName(name) {
        return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern$1, "-ms-");
      }
      var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i, didWarn = !1;
      function sanitizeURL(url) {
        !didWarn && isJavaScriptProtocol.test(url) && (didWarn = !0, error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url)));
      }
      var isArrayImpl = Array.isArray;
      function isArray(a) {
        return isArrayImpl(a);
      }
      var startInlineScript = "<script>", endInlineScript = "<\/script>", startScriptSrc = '<script src="', startModuleSrc = '<script type="module" src="', endAsyncScript = '" async=""><\/script>';
      function escapeBootstrapScriptContent(scriptText) {
        return checkHtmlStringCoercion(scriptText), ("" + scriptText).replace(scriptRegex, scriptReplacer);
      }
      var scriptRegex = /(<\/|<)(s)(cript)/gi, scriptReplacer = function(match, prefix3, s, suffix) {
        return "" + prefix3 + (s === "s" ? "\\u0073" : "\\u0053") + suffix;
      };
      function createResponseState(identifierPrefix, nonce, bootstrapScriptContent, bootstrapScripts, bootstrapModules) {
        var idPrefix = identifierPrefix === void 0 ? "" : identifierPrefix, inlineScriptWithNonce = nonce === void 0 ? startInlineScript : '<script nonce="' + escapeTextForBrowser(nonce) + '">', bootstrapChunks = [];
        if (bootstrapScriptContent !== void 0 && bootstrapChunks.push(inlineScriptWithNonce, escapeBootstrapScriptContent(bootstrapScriptContent), endInlineScript), bootstrapScripts !== void 0)
          for (var i = 0; i < bootstrapScripts.length; i++)
            bootstrapChunks.push(startScriptSrc, escapeTextForBrowser(bootstrapScripts[i]), endAsyncScript);
        if (bootstrapModules !== void 0)
          for (var _i = 0; _i < bootstrapModules.length; _i++)
            bootstrapChunks.push(startModuleSrc, escapeTextForBrowser(bootstrapModules[_i]), endAsyncScript);
        return {
          bootstrapChunks,
          startInlineScript: inlineScriptWithNonce,
          placeholderPrefix: idPrefix + "P:",
          segmentPrefix: idPrefix + "S:",
          boundaryPrefix: idPrefix + "B:",
          idPrefix,
          nextSuspenseID: 0,
          sentCompleteSegmentFunction: !1,
          sentCompleteBoundaryFunction: !1,
          sentClientRenderFunction: !1
        };
      }
      var ROOT_HTML_MODE = 0, HTML_MODE = 1, SVG_MODE = 2, MATHML_MODE = 3, HTML_TABLE_MODE = 4, HTML_TABLE_BODY_MODE = 5, HTML_TABLE_ROW_MODE = 6, HTML_COLGROUP_MODE = 7;
      function createFormatContext(insertionMode, selectedValue) {
        return {
          insertionMode,
          selectedValue
        };
      }
      function getChildFormatContext(parentContext, type, props) {
        switch (type) {
          case "select":
            return createFormatContext(HTML_MODE, props.value != null ? props.value : props.defaultValue);
          case "svg":
            return createFormatContext(SVG_MODE, null);
          case "math":
            return createFormatContext(MATHML_MODE, null);
          case "foreignObject":
            return createFormatContext(HTML_MODE, null);
          case "table":
            return createFormatContext(HTML_TABLE_MODE, null);
          case "thead":
          case "tbody":
          case "tfoot":
            return createFormatContext(HTML_TABLE_BODY_MODE, null);
          case "colgroup":
            return createFormatContext(HTML_COLGROUP_MODE, null);
          case "tr":
            return createFormatContext(HTML_TABLE_ROW_MODE, null);
        }
        return parentContext.insertionMode >= HTML_TABLE_MODE || parentContext.insertionMode === ROOT_HTML_MODE ? createFormatContext(HTML_MODE, null) : parentContext;
      }
      var UNINITIALIZED_SUSPENSE_BOUNDARY_ID = null;
      function assignSuspenseBoundaryID(responseState) {
        var generatedID = responseState.nextSuspenseID++;
        return responseState.boundaryPrefix + generatedID.toString(16);
      }
      function makeId(responseState, treeId, localId) {
        var idPrefix = responseState.idPrefix, id = ":" + idPrefix + "R" + treeId;
        return localId > 0 && (id += "H" + localId.toString(32)), id + ":";
      }
      function encodeHTMLTextNode(text) {
        return escapeTextForBrowser(text);
      }
      var textSeparator = "<!-- -->";
      function pushTextInstance(target, text, responseState, textEmbedded) {
        return text === "" ? textEmbedded : (textEmbedded && target.push(textSeparator), target.push(encodeHTMLTextNode(text)), !0);
      }
      function pushSegmentFinale(target, responseState, lastPushedText, textEmbedded) {
        lastPushedText && textEmbedded && target.push(textSeparator);
      }
      var styleNameCache = /* @__PURE__ */ new Map();
      function processStyleName(styleName) {
        var chunk = styleNameCache.get(styleName);
        if (chunk !== void 0)
          return chunk;
        var result = escapeTextForBrowser(hyphenateStyleName(styleName));
        return styleNameCache.set(styleName, result), result;
      }
      var styleAttributeStart = ' style="', styleAssign = ":", styleSeparator = ";";
      function pushStyle(target, responseState, style) {
        if (typeof style != "object")
          throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
        var isFirst = !0;
        for (var styleName in style)
          if (!!hasOwnProperty.call(style, styleName)) {
            var styleValue = style[styleName];
            if (!(styleValue == null || typeof styleValue == "boolean" || styleValue === "")) {
              var nameChunk = void 0, valueChunk = void 0, isCustomProperty = styleName.indexOf("--") === 0;
              isCustomProperty ? (nameChunk = escapeTextForBrowser(styleName), checkCSSPropertyStringCoercion(styleValue, styleName), valueChunk = escapeTextForBrowser(("" + styleValue).trim())) : (warnValidStyle$1(styleName, styleValue), nameChunk = processStyleName(styleName), typeof styleValue == "number" ? styleValue !== 0 && !hasOwnProperty.call(isUnitlessNumber, styleName) ? valueChunk = styleValue + "px" : valueChunk = "" + styleValue : (checkCSSPropertyStringCoercion(styleValue, styleName), valueChunk = escapeTextForBrowser(("" + styleValue).trim()))), isFirst ? (isFirst = !1, target.push(styleAttributeStart, nameChunk, styleAssign, valueChunk)) : target.push(styleSeparator, nameChunk, styleAssign, valueChunk);
            }
          }
        isFirst || target.push(attributeEnd);
      }
      var attributeSeparator = " ", attributeAssign = '="', attributeEnd = '"', attributeEmptyString = '=""';
      function pushAttribute(target, responseState, name, value) {
        switch (name) {
          case "style": {
            pushStyle(target, responseState, value);
            return;
          }
          case "defaultValue":
          case "defaultChecked":
          case "innerHTML":
          case "suppressContentEditableWarning":
          case "suppressHydrationWarning":
            return;
        }
        if (!(name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N"))) {
          var propertyInfo = getPropertyInfo(name);
          if (propertyInfo !== null) {
            switch (typeof value) {
              case "function":
              case "symbol":
                return;
              case "boolean":
                if (!propertyInfo.acceptsBooleans)
                  return;
            }
            var attributeName = propertyInfo.attributeName, attributeNameChunk = attributeName;
            switch (propertyInfo.type) {
              case BOOLEAN:
                value && target.push(attributeSeparator, attributeNameChunk, attributeEmptyString);
                return;
              case OVERLOADED_BOOLEAN:
                value === !0 ? target.push(attributeSeparator, attributeNameChunk, attributeEmptyString) : value === !1 || target.push(attributeSeparator, attributeNameChunk, attributeAssign, escapeTextForBrowser(value), attributeEnd);
                return;
              case NUMERIC:
                isNaN(value) || target.push(attributeSeparator, attributeNameChunk, attributeAssign, escapeTextForBrowser(value), attributeEnd);
                break;
              case POSITIVE_NUMERIC:
                !isNaN(value) && value >= 1 && target.push(attributeSeparator, attributeNameChunk, attributeAssign, escapeTextForBrowser(value), attributeEnd);
                break;
              default:
                propertyInfo.sanitizeURL && (checkAttributeStringCoercion(value, attributeName), value = "" + value, sanitizeURL(value)), target.push(attributeSeparator, attributeNameChunk, attributeAssign, escapeTextForBrowser(value), attributeEnd);
            }
          } else if (isAttributeNameSafe(name)) {
            switch (typeof value) {
              case "function":
              case "symbol":
                return;
              case "boolean": {
                var prefix3 = name.toLowerCase().slice(0, 5);
                if (prefix3 !== "data-" && prefix3 !== "aria-")
                  return;
              }
            }
            target.push(attributeSeparator, name, attributeAssign, escapeTextForBrowser(value), attributeEnd);
          }
        }
      }
      var endOfStartTag = ">", endOfStartTagSelfClosing = "/>";
      function pushInnerHTML(target, innerHTML, children) {
        if (innerHTML != null) {
          if (children != null)
            throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
          if (typeof innerHTML != "object" || !("__html" in innerHTML))
            throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
          var html = innerHTML.__html;
          html != null && (checkHtmlStringCoercion(html), target.push("" + html));
        }
      }
      var didWarnDefaultInputValue = !1, didWarnDefaultChecked = !1, didWarnDefaultSelectValue = !1, didWarnDefaultTextareaValue = !1, didWarnInvalidOptionChildren = !1, didWarnInvalidOptionInnerHTML = !1, didWarnSelectedSetOnOption = !1;
      function checkSelectProp(props, propName) {
        {
          var value = props[propName];
          if (value != null) {
            var array = isArray(value);
            props.multiple && !array ? error("The `%s` prop supplied to <select> must be an array if `multiple` is true.", propName) : !props.multiple && array && error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.", propName);
          }
        }
      }
      function pushStartSelect(target, props, responseState) {
        checkControlledValueProps("select", props), checkSelectProp(props, "value"), checkSelectProp(props, "defaultValue"), props.value !== void 0 && props.defaultValue !== void 0 && !didWarnDefaultSelectValue && (error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components"), didWarnDefaultSelectValue = !0), target.push(startChunkForTag("select"));
        var children = null, innerHTML = null;
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
                children = propValue;
                break;
              case "dangerouslySetInnerHTML":
                innerHTML = propValue;
                break;
              case "defaultValue":
              case "value":
                break;
              default:
                pushAttribute(target, responseState, propKey, propValue);
                break;
            }
          }
        return target.push(endOfStartTag), pushInnerHTML(target, innerHTML, children), children;
      }
      function flattenOptionChildren(children) {
        var content = "";
        return React8.Children.forEach(children, function(child) {
          child != null && (content += child, !didWarnInvalidOptionChildren && typeof child != "string" && typeof child != "number" && (didWarnInvalidOptionChildren = !0, error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.")));
        }), content;
      }
      var selectedMarkerAttribute = ' selected=""';
      function pushStartOption(target, props, responseState, formatContext) {
        var selectedValue = formatContext.selectedValue;
        target.push(startChunkForTag("option"));
        var children = null, value = null, selected = null, innerHTML = null;
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
                children = propValue;
                break;
              case "selected":
                selected = propValue, didWarnSelectedSetOnOption || (error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>."), didWarnSelectedSetOnOption = !0);
                break;
              case "dangerouslySetInnerHTML":
                innerHTML = propValue;
                break;
              case "value":
                value = propValue;
              default:
                pushAttribute(target, responseState, propKey, propValue);
                break;
            }
          }
        if (selectedValue != null) {
          var stringValue;
          if (value !== null ? (checkAttributeStringCoercion(value, "value"), stringValue = "" + value) : (innerHTML !== null && (didWarnInvalidOptionInnerHTML || (didWarnInvalidOptionInnerHTML = !0, error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected."))), stringValue = flattenOptionChildren(children)), isArray(selectedValue))
            for (var i = 0; i < selectedValue.length; i++) {
              checkAttributeStringCoercion(selectedValue[i], "value");
              var v = "" + selectedValue[i];
              if (v === stringValue) {
                target.push(selectedMarkerAttribute);
                break;
              }
            }
          else
            checkAttributeStringCoercion(selectedValue, "select.value"), "" + selectedValue === stringValue && target.push(selectedMarkerAttribute);
        } else
          selected && target.push(selectedMarkerAttribute);
        return target.push(endOfStartTag), pushInnerHTML(target, innerHTML, children), children;
      }
      function pushInput(target, props, responseState) {
        checkControlledValueProps("input", props), props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnDefaultChecked && (error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", "A component", props.type), didWarnDefaultChecked = !0), props.value !== void 0 && props.defaultValue !== void 0 && !didWarnDefaultInputValue && (error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", "A component", props.type), didWarnDefaultInputValue = !0), target.push(startChunkForTag("input"));
        var value = null, defaultValue = null, checked = null, defaultChecked = null;
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
              case "dangerouslySetInnerHTML":
                throw new Error("input is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
              case "defaultChecked":
                defaultChecked = propValue;
                break;
              case "defaultValue":
                defaultValue = propValue;
                break;
              case "checked":
                checked = propValue;
                break;
              case "value":
                value = propValue;
                break;
              default:
                pushAttribute(target, responseState, propKey, propValue);
                break;
            }
          }
        return checked !== null ? pushAttribute(target, responseState, "checked", checked) : defaultChecked !== null && pushAttribute(target, responseState, "checked", defaultChecked), value !== null ? pushAttribute(target, responseState, "value", value) : defaultValue !== null && pushAttribute(target, responseState, "value", defaultValue), target.push(endOfStartTagSelfClosing), null;
      }
      function pushStartTextArea(target, props, responseState) {
        checkControlledValueProps("textarea", props), props.value !== void 0 && props.defaultValue !== void 0 && !didWarnDefaultTextareaValue && (error("Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components"), didWarnDefaultTextareaValue = !0), target.push(startChunkForTag("textarea"));
        var value = null, defaultValue = null, children = null;
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
                children = propValue;
                break;
              case "value":
                value = propValue;
                break;
              case "defaultValue":
                defaultValue = propValue;
                break;
              case "dangerouslySetInnerHTML":
                throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
              default:
                pushAttribute(target, responseState, propKey, propValue);
                break;
            }
          }
        if (value === null && defaultValue !== null && (value = defaultValue), target.push(endOfStartTag), children != null) {
          if (error("Use the `defaultValue` or `value` props instead of setting children on <textarea>."), value != null)
            throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
          if (isArray(children)) {
            if (children.length > 1)
              throw new Error("<textarea> can only have at most one child.");
            checkHtmlStringCoercion(children[0]), value = "" + children[0];
          }
          checkHtmlStringCoercion(children), value = "" + children;
        }
        return typeof value == "string" && value[0] === `
` && target.push(leadingNewline), value !== null && (checkAttributeStringCoercion(value, "value"), target.push(encodeHTMLTextNode("" + value))), null;
      }
      function pushSelfClosing(target, props, tag, responseState) {
        target.push(startChunkForTag(tag));
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
              case "dangerouslySetInnerHTML":
                throw new Error(tag + " is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
              default:
                pushAttribute(target, responseState, propKey, propValue);
                break;
            }
          }
        return target.push(endOfStartTagSelfClosing), null;
      }
      function pushStartMenuItem(target, props, responseState) {
        target.push(startChunkForTag("menuitem"));
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
              case "dangerouslySetInnerHTML":
                throw new Error("menuitems cannot have `children` nor `dangerouslySetInnerHTML`.");
              default:
                pushAttribute(target, responseState, propKey, propValue);
                break;
            }
          }
        return target.push(endOfStartTag), null;
      }
      function pushStartTitle(target, props, responseState) {
        target.push(startChunkForTag("title"));
        var children = null;
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
                children = propValue;
                break;
              case "dangerouslySetInnerHTML":
                throw new Error("`dangerouslySetInnerHTML` does not make sense on <title>.");
              default:
                pushAttribute(target, responseState, propKey, propValue);
                break;
            }
          }
        target.push(endOfStartTag);
        {
          var child = Array.isArray(children) && children.length < 2 ? children[0] || null : children;
          Array.isArray(children) && children.length > 1 ? error("A title element received an array with more than 1 element as children. In browsers title Elements can only have Text Nodes as children. If the children being rendered output more than a single text node in aggregate the browser will display markup and comments as text in the title and hydration will likely fail and fall back to client rendering") : child != null && child.$$typeof != null ? error("A title element received a React element for children. In the browser title Elements can only have Text Nodes as children. If the children being rendered output more than a single text node in aggregate the browser will display markup and comments as text in the title and hydration will likely fail and fall back to client rendering") : child != null && typeof child != "string" && typeof child != "number" && error("A title element received a value that was not a string or number for children. In the browser title Elements can only have Text Nodes as children. If the children being rendered output more than a single text node in aggregate the browser will display markup and comments as text in the title and hydration will likely fail and fall back to client rendering");
        }
        return children;
      }
      function pushStartGenericElement(target, props, tag, responseState) {
        target.push(startChunkForTag(tag));
        var children = null, innerHTML = null;
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
                children = propValue;
                break;
              case "dangerouslySetInnerHTML":
                innerHTML = propValue;
                break;
              default:
                pushAttribute(target, responseState, propKey, propValue);
                break;
            }
          }
        return target.push(endOfStartTag), pushInnerHTML(target, innerHTML, children), typeof children == "string" ? (target.push(encodeHTMLTextNode(children)), null) : children;
      }
      function pushStartCustomElement(target, props, tag, responseState) {
        target.push(startChunkForTag(tag));
        var children = null, innerHTML = null;
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
                children = propValue;
                break;
              case "dangerouslySetInnerHTML":
                innerHTML = propValue;
                break;
              case "style":
                pushStyle(target, responseState, propValue);
                break;
              case "suppressContentEditableWarning":
              case "suppressHydrationWarning":
                break;
              default:
                isAttributeNameSafe(propKey) && typeof propValue != "function" && typeof propValue != "symbol" && target.push(attributeSeparator, propKey, attributeAssign, escapeTextForBrowser(propValue), attributeEnd);
                break;
            }
          }
        return target.push(endOfStartTag), pushInnerHTML(target, innerHTML, children), children;
      }
      var leadingNewline = `
`;
      function pushStartPreformattedElement(target, props, tag, responseState) {
        target.push(startChunkForTag(tag));
        var children = null, innerHTML = null;
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
                children = propValue;
                break;
              case "dangerouslySetInnerHTML":
                innerHTML = propValue;
                break;
              default:
                pushAttribute(target, responseState, propKey, propValue);
                break;
            }
          }
        if (target.push(endOfStartTag), innerHTML != null) {
          if (children != null)
            throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
          if (typeof innerHTML != "object" || !("__html" in innerHTML))
            throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
          var html = innerHTML.__html;
          html != null && (typeof html == "string" && html.length > 0 && html[0] === `
` ? target.push(leadingNewline, html) : (checkHtmlStringCoercion(html), target.push("" + html)));
        }
        return typeof children == "string" && children[0] === `
` && target.push(leadingNewline), children;
      }
      var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/, validatedTagCache = /* @__PURE__ */ new Map();
      function startChunkForTag(tag) {
        var tagStartChunk = validatedTagCache.get(tag);
        if (tagStartChunk === void 0) {
          if (!VALID_TAG_REGEX.test(tag))
            throw new Error("Invalid tag: " + tag);
          tagStartChunk = "<" + tag, validatedTagCache.set(tag, tagStartChunk);
        }
        return tagStartChunk;
      }
      var DOCTYPE = "<!DOCTYPE html>";
      function pushStartInstance(target, type, props, responseState, formatContext) {
        switch (validateProperties(type, props), validateProperties$1(type, props), validateProperties$2(type, props, null), !props.suppressContentEditableWarning && props.contentEditable && props.children != null && error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional."), formatContext.insertionMode !== SVG_MODE && formatContext.insertionMode !== MATHML_MODE && type.indexOf("-") === -1 && typeof props.is != "string" && type.toLowerCase() !== type && error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type), type) {
          case "select":
            return pushStartSelect(target, props, responseState);
          case "option":
            return pushStartOption(target, props, responseState, formatContext);
          case "textarea":
            return pushStartTextArea(target, props, responseState);
          case "input":
            return pushInput(target, props, responseState);
          case "menuitem":
            return pushStartMenuItem(target, props, responseState);
          case "title":
            return pushStartTitle(target, props, responseState);
          case "listing":
          case "pre":
            return pushStartPreformattedElement(target, props, type, responseState);
          case "area":
          case "base":
          case "br":
          case "col":
          case "embed":
          case "hr":
          case "img":
          case "keygen":
          case "link":
          case "meta":
          case "param":
          case "source":
          case "track":
          case "wbr":
            return pushSelfClosing(target, props, type, responseState);
          case "annotation-xml":
          case "color-profile":
          case "font-face":
          case "font-face-src":
          case "font-face-uri":
          case "font-face-format":
          case "font-face-name":
          case "missing-glyph":
            return pushStartGenericElement(target, props, type, responseState);
          case "html":
            return formatContext.insertionMode === ROOT_HTML_MODE && target.push(DOCTYPE), pushStartGenericElement(target, props, type, responseState);
          default:
            return type.indexOf("-") === -1 && typeof props.is != "string" ? pushStartGenericElement(target, props, type, responseState) : pushStartCustomElement(target, props, type, responseState);
        }
      }
      var endTag1 = "</", endTag2 = ">";
      function pushEndInstance(target, type, props) {
        switch (type) {
          case "area":
          case "base":
          case "br":
          case "col":
          case "embed":
          case "hr":
          case "img":
          case "input":
          case "keygen":
          case "link":
          case "meta":
          case "param":
          case "source":
          case "track":
          case "wbr":
            break;
          default:
            target.push(endTag1, type, endTag2);
        }
      }
      function writeCompletedRoot(destination, responseState) {
        for (var bootstrapChunks = responseState.bootstrapChunks, i = 0; i < bootstrapChunks.length - 1; i++)
          writeChunk(destination, bootstrapChunks[i]);
        return i < bootstrapChunks.length ? writeChunkAndReturn(destination, bootstrapChunks[i]) : !0;
      }
      var placeholder1 = '<template id="', placeholder2 = '"></template>';
      function writePlaceholder(destination, responseState, id) {
        writeChunk(destination, placeholder1), writeChunk(destination, responseState.placeholderPrefix);
        var formattedID = id.toString(16);
        return writeChunk(destination, formattedID), writeChunkAndReturn(destination, placeholder2);
      }
      var startCompletedSuspenseBoundary = "<!--$-->", startPendingSuspenseBoundary1 = '<!--$?--><template id="', startPendingSuspenseBoundary2 = '"></template>', startClientRenderedSuspenseBoundary = "<!--$!-->", endSuspenseBoundary = "<!--/$-->", clientRenderedSuspenseBoundaryError1 = "<template", clientRenderedSuspenseBoundaryErrorAttrInterstitial = '"', clientRenderedSuspenseBoundaryError1A = ' data-dgst="', clientRenderedSuspenseBoundaryError1B = ' data-msg="', clientRenderedSuspenseBoundaryError1C = ' data-stck="', clientRenderedSuspenseBoundaryError2 = "></template>";
      function writeStartCompletedSuspenseBoundary(destination, responseState) {
        return writeChunkAndReturn(destination, startCompletedSuspenseBoundary);
      }
      function writeStartPendingSuspenseBoundary(destination, responseState, id) {
        if (writeChunk(destination, startPendingSuspenseBoundary1), id === null)
          throw new Error("An ID must have been assigned before we can complete the boundary.");
        return writeChunk(destination, id), writeChunkAndReturn(destination, startPendingSuspenseBoundary2);
      }
      function writeStartClientRenderedSuspenseBoundary(destination, responseState, errorDigest, errorMesssage, errorComponentStack) {
        var result;
        return result = writeChunkAndReturn(destination, startClientRenderedSuspenseBoundary), writeChunk(destination, clientRenderedSuspenseBoundaryError1), errorDigest && (writeChunk(destination, clientRenderedSuspenseBoundaryError1A), writeChunk(destination, escapeTextForBrowser(errorDigest)), writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial)), errorMesssage && (writeChunk(destination, clientRenderedSuspenseBoundaryError1B), writeChunk(destination, escapeTextForBrowser(errorMesssage)), writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial)), errorComponentStack && (writeChunk(destination, clientRenderedSuspenseBoundaryError1C), writeChunk(destination, escapeTextForBrowser(errorComponentStack)), writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial)), result = writeChunkAndReturn(destination, clientRenderedSuspenseBoundaryError2), result;
      }
      function writeEndCompletedSuspenseBoundary(destination, responseState) {
        return writeChunkAndReturn(destination, endSuspenseBoundary);
      }
      function writeEndPendingSuspenseBoundary(destination, responseState) {
        return writeChunkAndReturn(destination, endSuspenseBoundary);
      }
      function writeEndClientRenderedSuspenseBoundary(destination, responseState) {
        return writeChunkAndReturn(destination, endSuspenseBoundary);
      }
      var startSegmentHTML = '<div hidden id="', startSegmentHTML2 = '">', endSegmentHTML = "</div>", startSegmentSVG = '<svg aria-hidden="true" style="display:none" id="', startSegmentSVG2 = '">', endSegmentSVG = "</svg>", startSegmentMathML = '<math aria-hidden="true" style="display:none" id="', startSegmentMathML2 = '">', endSegmentMathML = "</math>", startSegmentTable = '<table hidden id="', startSegmentTable2 = '">', endSegmentTable = "</table>", startSegmentTableBody = '<table hidden><tbody id="', startSegmentTableBody2 = '">', endSegmentTableBody = "</tbody></table>", startSegmentTableRow = '<table hidden><tr id="', startSegmentTableRow2 = '">', endSegmentTableRow = "</tr></table>", startSegmentColGroup = '<table hidden><colgroup id="', startSegmentColGroup2 = '">', endSegmentColGroup = "</colgroup></table>";
      function writeStartSegment(destination, responseState, formatContext, id) {
        switch (formatContext.insertionMode) {
          case ROOT_HTML_MODE:
          case HTML_MODE:
            return writeChunk(destination, startSegmentHTML), writeChunk(destination, responseState.segmentPrefix), writeChunk(destination, id.toString(16)), writeChunkAndReturn(destination, startSegmentHTML2);
          case SVG_MODE:
            return writeChunk(destination, startSegmentSVG), writeChunk(destination, responseState.segmentPrefix), writeChunk(destination, id.toString(16)), writeChunkAndReturn(destination, startSegmentSVG2);
          case MATHML_MODE:
            return writeChunk(destination, startSegmentMathML), writeChunk(destination, responseState.segmentPrefix), writeChunk(destination, id.toString(16)), writeChunkAndReturn(destination, startSegmentMathML2);
          case HTML_TABLE_MODE:
            return writeChunk(destination, startSegmentTable), writeChunk(destination, responseState.segmentPrefix), writeChunk(destination, id.toString(16)), writeChunkAndReturn(destination, startSegmentTable2);
          case HTML_TABLE_BODY_MODE:
            return writeChunk(destination, startSegmentTableBody), writeChunk(destination, responseState.segmentPrefix), writeChunk(destination, id.toString(16)), writeChunkAndReturn(destination, startSegmentTableBody2);
          case HTML_TABLE_ROW_MODE:
            return writeChunk(destination, startSegmentTableRow), writeChunk(destination, responseState.segmentPrefix), writeChunk(destination, id.toString(16)), writeChunkAndReturn(destination, startSegmentTableRow2);
          case HTML_COLGROUP_MODE:
            return writeChunk(destination, startSegmentColGroup), writeChunk(destination, responseState.segmentPrefix), writeChunk(destination, id.toString(16)), writeChunkAndReturn(destination, startSegmentColGroup2);
          default:
            throw new Error("Unknown insertion mode. This is a bug in React.");
        }
      }
      function writeEndSegment(destination, formatContext) {
        switch (formatContext.insertionMode) {
          case ROOT_HTML_MODE:
          case HTML_MODE:
            return writeChunkAndReturn(destination, endSegmentHTML);
          case SVG_MODE:
            return writeChunkAndReturn(destination, endSegmentSVG);
          case MATHML_MODE:
            return writeChunkAndReturn(destination, endSegmentMathML);
          case HTML_TABLE_MODE:
            return writeChunkAndReturn(destination, endSegmentTable);
          case HTML_TABLE_BODY_MODE:
            return writeChunkAndReturn(destination, endSegmentTableBody);
          case HTML_TABLE_ROW_MODE:
            return writeChunkAndReturn(destination, endSegmentTableRow);
          case HTML_COLGROUP_MODE:
            return writeChunkAndReturn(destination, endSegmentColGroup);
          default:
            throw new Error("Unknown insertion mode. This is a bug in React.");
        }
      }
      var completeSegmentFunction = "function $RS(a,b){a=document.getElementById(a);b=document.getElementById(b);for(a.parentNode.removeChild(a);a.firstChild;)b.parentNode.insertBefore(a.firstChild,b);b.parentNode.removeChild(b)}", completeBoundaryFunction = 'function $RC(a,b){a=document.getElementById(a);b=document.getElementById(b);b.parentNode.removeChild(b);if(a){a=a.previousSibling;var f=a.parentNode,c=a.nextSibling,e=0;do{if(c&&8===c.nodeType){var d=c.data;if("/$"===d)if(0===e)break;else e--;else"$"!==d&&"$?"!==d&&"$!"!==d||e++}d=c.nextSibling;f.removeChild(c);c=d}while(c);for(;b.firstChild;)f.insertBefore(b.firstChild,c);a.data="$";a._reactRetry&&a._reactRetry()}}', clientRenderFunction = 'function $RX(b,c,d,e){var a=document.getElementById(b);a&&(b=a.previousSibling,b.data="$!",a=a.dataset,c&&(a.dgst=c),d&&(a.msg=d),e&&(a.stck=e),b._reactRetry&&b._reactRetry())}', completeSegmentScript1Full = completeSegmentFunction + ';$RS("', completeSegmentScript1Partial = '$RS("', completeSegmentScript2 = '","', completeSegmentScript3 = '")<\/script>';
      function writeCompletedSegmentInstruction(destination, responseState, contentSegmentID) {
        writeChunk(destination, responseState.startInlineScript), responseState.sentCompleteSegmentFunction ? writeChunk(destination, completeSegmentScript1Partial) : (responseState.sentCompleteSegmentFunction = !0, writeChunk(destination, completeSegmentScript1Full)), writeChunk(destination, responseState.segmentPrefix);
        var formattedID = contentSegmentID.toString(16);
        return writeChunk(destination, formattedID), writeChunk(destination, completeSegmentScript2), writeChunk(destination, responseState.placeholderPrefix), writeChunk(destination, formattedID), writeChunkAndReturn(destination, completeSegmentScript3);
      }
      var completeBoundaryScript1Full = completeBoundaryFunction + ';$RC("', completeBoundaryScript1Partial = '$RC("', completeBoundaryScript2 = '","', completeBoundaryScript3 = '")<\/script>';
      function writeCompletedBoundaryInstruction(destination, responseState, boundaryID, contentSegmentID) {
        if (writeChunk(destination, responseState.startInlineScript), responseState.sentCompleteBoundaryFunction ? writeChunk(destination, completeBoundaryScript1Partial) : (responseState.sentCompleteBoundaryFunction = !0, writeChunk(destination, completeBoundaryScript1Full)), boundaryID === null)
          throw new Error("An ID must have been assigned before we can complete the boundary.");
        var formattedContentID = contentSegmentID.toString(16);
        return writeChunk(destination, boundaryID), writeChunk(destination, completeBoundaryScript2), writeChunk(destination, responseState.segmentPrefix), writeChunk(destination, formattedContentID), writeChunkAndReturn(destination, completeBoundaryScript3);
      }
      var clientRenderScript1Full = clientRenderFunction + ';$RX("', clientRenderScript1Partial = '$RX("', clientRenderScript1A = '"', clientRenderScript2 = ")<\/script>", clientRenderErrorScriptArgInterstitial = ",";
      function writeClientRenderBoundaryInstruction(destination, responseState, boundaryID, errorDigest, errorMessage, errorComponentStack) {
        if (writeChunk(destination, responseState.startInlineScript), responseState.sentClientRenderFunction ? writeChunk(destination, clientRenderScript1Partial) : (responseState.sentClientRenderFunction = !0, writeChunk(destination, clientRenderScript1Full)), boundaryID === null)
          throw new Error("An ID must have been assigned before we can complete the boundary.");
        return writeChunk(destination, boundaryID), writeChunk(destination, clientRenderScript1A), (errorDigest || errorMessage || errorComponentStack) && (writeChunk(destination, clientRenderErrorScriptArgInterstitial), writeChunk(destination, escapeJSStringsForInstructionScripts(errorDigest || ""))), (errorMessage || errorComponentStack) && (writeChunk(destination, clientRenderErrorScriptArgInterstitial), writeChunk(destination, escapeJSStringsForInstructionScripts(errorMessage || ""))), errorComponentStack && (writeChunk(destination, clientRenderErrorScriptArgInterstitial), writeChunk(destination, escapeJSStringsForInstructionScripts(errorComponentStack))), writeChunkAndReturn(destination, clientRenderScript2);
      }
      var regexForJSStringsInScripts = /[<\u2028\u2029]/g;
      function escapeJSStringsForInstructionScripts(input) {
        var escaped = JSON.stringify(input);
        return escaped.replace(regexForJSStringsInScripts, function(match) {
          switch (match) {
            case "<":
              return "\\u003c";
            case "\u2028":
              return "\\u2028";
            case "\u2029":
              return "\\u2029";
            default:
              throw new Error("escapeJSStringsForInstructionScripts encountered a match it does not know how to replace. this means the match regex and the replacement characters are no longer in sync. This is a bug in React");
          }
        });
      }
      function createResponseState$1(generateStaticMarkup, identifierPrefix) {
        var responseState = createResponseState(identifierPrefix, void 0);
        return {
          bootstrapChunks: responseState.bootstrapChunks,
          startInlineScript: responseState.startInlineScript,
          placeholderPrefix: responseState.placeholderPrefix,
          segmentPrefix: responseState.segmentPrefix,
          boundaryPrefix: responseState.boundaryPrefix,
          idPrefix: responseState.idPrefix,
          nextSuspenseID: responseState.nextSuspenseID,
          sentCompleteSegmentFunction: responseState.sentCompleteSegmentFunction,
          sentCompleteBoundaryFunction: responseState.sentCompleteBoundaryFunction,
          sentClientRenderFunction: responseState.sentClientRenderFunction,
          generateStaticMarkup
        };
      }
      function createRootFormatContext() {
        return {
          insertionMode: HTML_MODE,
          selectedValue: null
        };
      }
      function pushTextInstance$1(target, text, responseState, textEmbedded) {
        return responseState.generateStaticMarkup ? (target.push(escapeTextForBrowser(text)), !1) : pushTextInstance(target, text, responseState, textEmbedded);
      }
      function pushSegmentFinale$1(target, responseState, lastPushedText, textEmbedded) {
        if (!responseState.generateStaticMarkup)
          return pushSegmentFinale(target, responseState, lastPushedText, textEmbedded);
      }
      function writeStartCompletedSuspenseBoundary$1(destination, responseState) {
        return responseState.generateStaticMarkup ? !0 : writeStartCompletedSuspenseBoundary(destination);
      }
      function writeStartClientRenderedSuspenseBoundary$1(destination, responseState, errorDigest, errorMessage, errorComponentStack) {
        return responseState.generateStaticMarkup ? !0 : writeStartClientRenderedSuspenseBoundary(destination, responseState, errorDigest, errorMessage, errorComponentStack);
      }
      function writeEndCompletedSuspenseBoundary$1(destination, responseState) {
        return responseState.generateStaticMarkup ? !0 : writeEndCompletedSuspenseBoundary(destination);
      }
      function writeEndClientRenderedSuspenseBoundary$1(destination, responseState) {
        return responseState.generateStaticMarkup ? !0 : writeEndClientRenderedSuspenseBoundary(destination);
      }
      var assign = Object.assign, REACT_ELEMENT_TYPE = Symbol.for("react.element"), REACT_PORTAL_TYPE = Symbol.for("react.portal"), REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"), REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"), REACT_PROFILER_TYPE = Symbol.for("react.profiler"), REACT_PROVIDER_TYPE = Symbol.for("react.provider"), REACT_CONTEXT_TYPE = Symbol.for("react.context"), REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"), REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"), REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"), REACT_MEMO_TYPE = Symbol.for("react.memo"), REACT_LAZY_TYPE = Symbol.for("react.lazy"), REACT_SCOPE_TYPE = Symbol.for("react.scope"), REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode"), REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden"), REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED = Symbol.for("react.default_value"), MAYBE_ITERATOR_SYMBOL = Symbol.iterator, FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable != "object")
          return null;
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        return typeof maybeIterator == "function" ? maybeIterator : null;
      }
      function getWrappedName(outerType, innerType, wrapperName) {
        var displayName = outerType.displayName;
        if (displayName)
          return displayName;
        var functionName = innerType.displayName || innerType.name || "";
        return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
      }
      function getContextName(type) {
        return type.displayName || "Context";
      }
      function getComponentNameFromType(type) {
        if (type == null)
          return null;
        if (typeof type.tag == "number" && error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."), typeof type == "function")
          return type.displayName || type.name || null;
        if (typeof type == "string")
          return type;
        switch (type) {
          case REACT_FRAGMENT_TYPE:
            return "Fragment";
          case REACT_PORTAL_TYPE:
            return "Portal";
          case REACT_PROFILER_TYPE:
            return "Profiler";
          case REACT_STRICT_MODE_TYPE:
            return "StrictMode";
          case REACT_SUSPENSE_TYPE:
            return "Suspense";
          case REACT_SUSPENSE_LIST_TYPE:
            return "SuspenseList";
        }
        if (typeof type == "object")
          switch (type.$$typeof) {
            case REACT_CONTEXT_TYPE:
              var context = type;
              return getContextName(context) + ".Consumer";
            case REACT_PROVIDER_TYPE:
              var provider = type;
              return getContextName(provider._context) + ".Provider";
            case REACT_FORWARD_REF_TYPE:
              return getWrappedName(type, type.render, "ForwardRef");
            case REACT_MEMO_TYPE:
              var outerName = type.displayName || null;
              return outerName !== null ? outerName : getComponentNameFromType(type.type) || "Memo";
            case REACT_LAZY_TYPE: {
              var lazyComponent = type, payload = lazyComponent._payload, init = lazyComponent._init;
              try {
                return getComponentNameFromType(init(payload));
              } catch {
                return null;
              }
            }
          }
        return null;
      }
      var disabledDepth = 0, prevLog, prevInfo, prevWarn, prevError, prevGroup, prevGroupCollapsed, prevGroupEnd;
      function disabledLog() {
      }
      disabledLog.__reactDisabledLog = !0;
      function disableLogs() {
        {
          if (disabledDepth === 0) {
            prevLog = console.log, prevInfo = console.info, prevWarn = console.warn, prevError = console.error, prevGroup = console.group, prevGroupCollapsed = console.groupCollapsed, prevGroupEnd = console.groupEnd;
            var props = {
              configurable: !0,
              enumerable: !0,
              value: disabledLog,
              writable: !0
            };
            Object.defineProperties(console, {
              info: props,
              log: props,
              warn: props,
              error: props,
              group: props,
              groupCollapsed: props,
              groupEnd: props
            });
          }
          disabledDepth++;
        }
      }
      function reenableLogs() {
        {
          if (disabledDepth--, disabledDepth === 0) {
            var props = {
              configurable: !0,
              enumerable: !0,
              writable: !0
            };
            Object.defineProperties(console, {
              log: assign({}, props, {
                value: prevLog
              }),
              info: assign({}, props, {
                value: prevInfo
              }),
              warn: assign({}, props, {
                value: prevWarn
              }),
              error: assign({}, props, {
                value: prevError
              }),
              group: assign({}, props, {
                value: prevGroup
              }),
              groupCollapsed: assign({}, props, {
                value: prevGroupCollapsed
              }),
              groupEnd: assign({}, props, {
                value: prevGroupEnd
              })
            });
          }
          disabledDepth < 0 && error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
        }
      }
      var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher, prefix2;
      function describeBuiltInComponentFrame(name, source, ownerFn) {
        {
          if (prefix2 === void 0)
            try {
              throw Error();
            } catch (x) {
              var match = x.stack.trim().match(/\n( *(at )?)/);
              prefix2 = match && match[1] || "";
            }
          return `
` + prefix2 + name;
        }
      }
      var reentry = !1, componentFrameCache;
      {
        var PossiblyWeakMap = typeof WeakMap == "function" ? WeakMap : Map;
        componentFrameCache = new PossiblyWeakMap();
      }
      function describeNativeComponentFrame(fn, construct) {
        if (!fn || reentry)
          return "";
        {
          var frame = componentFrameCache.get(fn);
          if (frame !== void 0)
            return frame;
        }
        var control;
        reentry = !0;
        var previousPrepareStackTrace = Error.prepareStackTrace;
        Error.prepareStackTrace = void 0;
        var previousDispatcher;
        previousDispatcher = ReactCurrentDispatcher.current, ReactCurrentDispatcher.current = null, disableLogs();
        try {
          if (construct) {
            var Fake = function() {
              throw Error();
            };
            if (Object.defineProperty(Fake.prototype, "props", {
              set: function() {
                throw Error();
              }
            }), typeof Reflect == "object" && Reflect.construct) {
              try {
                Reflect.construct(Fake, []);
              } catch (x) {
                control = x;
              }
              Reflect.construct(fn, [], Fake);
            } else {
              try {
                Fake.call();
              } catch (x) {
                control = x;
              }
              fn.call(Fake.prototype);
            }
          } else {
            try {
              throw Error();
            } catch (x) {
              control = x;
            }
            fn();
          }
        } catch (sample) {
          if (sample && control && typeof sample.stack == "string") {
            for (var sampleLines = sample.stack.split(`
`), controlLines = control.stack.split(`
`), s = sampleLines.length - 1, c = controlLines.length - 1; s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]; )
              c--;
            for (; s >= 1 && c >= 0; s--, c--)
              if (sampleLines[s] !== controlLines[c]) {
                if (s !== 1 || c !== 1)
                  do
                    if (s--, c--, c < 0 || sampleLines[s] !== controlLines[c]) {
                      var _frame = `
` + sampleLines[s].replace(" at new ", " at ");
                      return fn.displayName && _frame.includes("<anonymous>") && (_frame = _frame.replace("<anonymous>", fn.displayName)), typeof fn == "function" && componentFrameCache.set(fn, _frame), _frame;
                    }
                  while (s >= 1 && c >= 0);
                break;
              }
          }
        } finally {
          reentry = !1, ReactCurrentDispatcher.current = previousDispatcher, reenableLogs(), Error.prepareStackTrace = previousPrepareStackTrace;
        }
        var name = fn ? fn.displayName || fn.name : "", syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
        return typeof fn == "function" && componentFrameCache.set(fn, syntheticFrame), syntheticFrame;
      }
      function describeClassComponentFrame(ctor, source, ownerFn) {
        return describeNativeComponentFrame(ctor, !0);
      }
      function describeFunctionComponentFrame(fn, source, ownerFn) {
        return describeNativeComponentFrame(fn, !1);
      }
      function shouldConstruct(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
      }
      function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null)
          return "";
        if (typeof type == "function")
          return describeNativeComponentFrame(type, shouldConstruct(type));
        if (typeof type == "string")
          return describeBuiltInComponentFrame(type);
        switch (type) {
          case REACT_SUSPENSE_TYPE:
            return describeBuiltInComponentFrame("Suspense");
          case REACT_SUSPENSE_LIST_TYPE:
            return describeBuiltInComponentFrame("SuspenseList");
        }
        if (typeof type == "object")
          switch (type.$$typeof) {
            case REACT_FORWARD_REF_TYPE:
              return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
              return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_LAZY_TYPE: {
              var lazyComponent = type, payload = lazyComponent._payload, init = lazyComponent._init;
              try {
                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
              } catch {
              }
            }
          }
        return "";
      }
      var loggedTypeFailures = {}, ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
      function setCurrentlyValidatingElement(element) {
        if (element) {
          var owner = element._owner, stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
          ReactDebugCurrentFrame.setExtraStackFrame(stack);
        } else
          ReactDebugCurrentFrame.setExtraStackFrame(null);
      }
      function checkPropTypes(typeSpecs, values, location, componentName, element) {
        {
          var has = Function.call.bind(hasOwnProperty);
          for (var typeSpecName in typeSpecs)
            if (has(typeSpecs, typeSpecName)) {
              var error$1 = void 0;
              try {
                if (typeof typeSpecs[typeSpecName] != "function") {
                  var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                  throw err.name = "Invariant Violation", err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
              } catch (ex) {
                error$1 = ex;
              }
              error$1 && !(error$1 instanceof Error) && (setCurrentlyValidatingElement(element), error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1), setCurrentlyValidatingElement(null)), error$1 instanceof Error && !(error$1.message in loggedTypeFailures) && (loggedTypeFailures[error$1.message] = !0, setCurrentlyValidatingElement(element), error("Failed %s type: %s", location, error$1.message), setCurrentlyValidatingElement(null));
            }
        }
      }
      var warnedAboutMissingGetChildContext;
      warnedAboutMissingGetChildContext = {};
      var emptyContextObject = {};
      Object.freeze(emptyContextObject);
      function getMaskedContext(type, unmaskedContext) {
        {
          var contextTypes = type.contextTypes;
          if (!contextTypes)
            return emptyContextObject;
          var context = {};
          for (var key in contextTypes)
            context[key] = unmaskedContext[key];
          {
            var name = getComponentNameFromType(type) || "Unknown";
            checkPropTypes(contextTypes, context, "context", name);
          }
          return context;
        }
      }
      function processChildContext(instance, type, parentContext, childContextTypes) {
        {
          if (typeof instance.getChildContext != "function") {
            {
              var componentName = getComponentNameFromType(type) || "Unknown";
              warnedAboutMissingGetChildContext[componentName] || (warnedAboutMissingGetChildContext[componentName] = !0, error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName));
            }
            return parentContext;
          }
          var childContext = instance.getChildContext();
          for (var contextKey in childContext)
            if (!(contextKey in childContextTypes))
              throw new Error((getComponentNameFromType(type) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
          {
            var name = getComponentNameFromType(type) || "Unknown";
            checkPropTypes(childContextTypes, childContext, "child context", name);
          }
          return assign({}, parentContext, childContext);
        }
      }
      var rendererSigil;
      rendererSigil = {};
      var rootContextSnapshot = null, currentActiveSnapshot = null;
      function popNode(prev) {
        prev.context._currentValue2 = prev.parentValue;
      }
      function pushNode(next) {
        next.context._currentValue2 = next.value;
      }
      function popToNearestCommonAncestor(prev, next) {
        if (prev !== next) {
          popNode(prev);
          var parentPrev = prev.parent, parentNext = next.parent;
          if (parentPrev === null) {
            if (parentNext !== null)
              throw new Error("The stacks must reach the root at the same time. This is a bug in React.");
          } else {
            if (parentNext === null)
              throw new Error("The stacks must reach the root at the same time. This is a bug in React.");
            popToNearestCommonAncestor(parentPrev, parentNext);
          }
          pushNode(next);
        }
      }
      function popAllPrevious(prev) {
        popNode(prev);
        var parentPrev = prev.parent;
        parentPrev !== null && popAllPrevious(parentPrev);
      }
      function pushAllNext(next) {
        var parentNext = next.parent;
        parentNext !== null && pushAllNext(parentNext), pushNode(next);
      }
      function popPreviousToCommonLevel(prev, next) {
        popNode(prev);
        var parentPrev = prev.parent;
        if (parentPrev === null)
          throw new Error("The depth must equal at least at zero before reaching the root. This is a bug in React.");
        parentPrev.depth === next.depth ? popToNearestCommonAncestor(parentPrev, next) : popPreviousToCommonLevel(parentPrev, next);
      }
      function popNextToCommonLevel(prev, next) {
        var parentNext = next.parent;
        if (parentNext === null)
          throw new Error("The depth must equal at least at zero before reaching the root. This is a bug in React.");
        prev.depth === parentNext.depth ? popToNearestCommonAncestor(prev, parentNext) : popNextToCommonLevel(prev, parentNext), pushNode(next);
      }
      function switchContext(newSnapshot) {
        var prev = currentActiveSnapshot, next = newSnapshot;
        prev !== next && (prev === null ? pushAllNext(next) : next === null ? popAllPrevious(prev) : prev.depth === next.depth ? popToNearestCommonAncestor(prev, next) : prev.depth > next.depth ? popPreviousToCommonLevel(prev, next) : popNextToCommonLevel(prev, next), currentActiveSnapshot = next);
      }
      function pushProvider(context, nextValue) {
        var prevValue;
        prevValue = context._currentValue2, context._currentValue2 = nextValue, context._currentRenderer2 !== void 0 && context._currentRenderer2 !== null && context._currentRenderer2 !== rendererSigil && error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported."), context._currentRenderer2 = rendererSigil;
        var prevNode = currentActiveSnapshot, newNode = {
          parent: prevNode,
          depth: prevNode === null ? 0 : prevNode.depth + 1,
          context,
          parentValue: prevValue,
          value: nextValue
        };
        return currentActiveSnapshot = newNode, newNode;
      }
      function popProvider(context) {
        var prevSnapshot = currentActiveSnapshot;
        if (prevSnapshot === null)
          throw new Error("Tried to pop a Context at the root of the app. This is a bug in React.");
        prevSnapshot.context !== context && error("The parent context is not the expected context. This is probably a bug in React.");
        {
          var _value = prevSnapshot.parentValue;
          _value === REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED ? prevSnapshot.context._currentValue2 = prevSnapshot.context._defaultValue : prevSnapshot.context._currentValue2 = _value, context._currentRenderer2 !== void 0 && context._currentRenderer2 !== null && context._currentRenderer2 !== rendererSigil && error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported."), context._currentRenderer2 = rendererSigil;
        }
        return currentActiveSnapshot = prevSnapshot.parent;
      }
      function getActiveContext() {
        return currentActiveSnapshot;
      }
      function readContext(context) {
        var value = context._currentValue2;
        return value;
      }
      function get(key) {
        return key._reactInternals;
      }
      function set(key, value) {
        key._reactInternals = value;
      }
      var didWarnAboutNoopUpdateForComponent = {}, didWarnAboutDeprecatedWillMount = {}, didWarnAboutUninitializedState, didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate, didWarnAboutLegacyLifecyclesAndDerivedState, didWarnAboutUndefinedDerivedState, warnOnUndefinedDerivedState, warnOnInvalidCallback, didWarnAboutDirectlyAssigningPropsToState, didWarnAboutContextTypeAndContextTypes, didWarnAboutInvalidateContextType;
      {
        didWarnAboutUninitializedState = /* @__PURE__ */ new Set(), didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set(), didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set(), didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set(), didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set(), didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set(), didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
        var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
        warnOnInvalidCallback = function(callback, callerName) {
          if (!(callback === null || typeof callback == "function")) {
            var key = callerName + "_" + callback;
            didWarnOnInvalidCallback.has(key) || (didWarnOnInvalidCallback.add(key), error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback));
          }
        }, warnOnUndefinedDerivedState = function(type, partialState) {
          if (partialState === void 0) {
            var componentName = getComponentNameFromType(type) || "Component";
            didWarnAboutUndefinedDerivedState.has(componentName) || (didWarnAboutUndefinedDerivedState.add(componentName), error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName));
          }
        };
      }
      function warnNoop(publicInstance, callerName) {
        {
          var _constructor = publicInstance.constructor, componentName = _constructor && getComponentNameFromType(_constructor) || "ReactClass", warningKey = componentName + "." + callerName;
          if (didWarnAboutNoopUpdateForComponent[warningKey])
            return;
          error(`%s(...): Can only update a mounting component. This usually means you called %s() outside componentWillMount() on the server. This is a no-op.

Please check the code for the %s component.`, callerName, callerName, componentName), didWarnAboutNoopUpdateForComponent[warningKey] = !0;
        }
      }
      var classComponentUpdater = {
        isMounted: function(inst) {
          return !1;
        },
        enqueueSetState: function(inst, payload, callback) {
          var internals = get(inst);
          internals.queue === null ? warnNoop(inst, "setState") : (internals.queue.push(payload), callback != null && warnOnInvalidCallback(callback, "setState"));
        },
        enqueueReplaceState: function(inst, payload, callback) {
          var internals = get(inst);
          internals.replace = !0, internals.queue = [payload], callback != null && warnOnInvalidCallback(callback, "setState");
        },
        enqueueForceUpdate: function(inst, callback) {
          var internals = get(inst);
          internals.queue === null ? warnNoop(inst, "forceUpdate") : callback != null && warnOnInvalidCallback(callback, "setState");
        }
      };
      function applyDerivedStateFromProps(instance, ctor, getDerivedStateFromProps, prevState, nextProps) {
        var partialState = getDerivedStateFromProps(nextProps, prevState);
        warnOnUndefinedDerivedState(ctor, partialState);
        var newState = partialState == null ? prevState : assign({}, prevState, partialState);
        return newState;
      }
      function constructClassInstance(ctor, props, maskedLegacyContext) {
        var context = emptyContextObject, contextType = ctor.contextType;
        if ("contextType" in ctor) {
          var isValid2 = contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0;
          if (!isValid2 && !didWarnAboutInvalidateContextType.has(ctor)) {
            didWarnAboutInvalidateContextType.add(ctor);
            var addendum = "";
            contextType === void 0 ? addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file." : typeof contextType != "object" ? addendum = " However, it is set to a " + typeof contextType + "." : contextType.$$typeof === REACT_PROVIDER_TYPE ? addendum = " Did you accidentally pass the Context.Provider instead?" : contextType._context !== void 0 ? addendum = " Did you accidentally pass the Context.Consumer instead?" : addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.", error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
          }
        }
        typeof contextType == "object" && contextType !== null ? context = readContext(contextType) : context = maskedLegacyContext;
        var instance = new ctor(props, context);
        {
          if (typeof ctor.getDerivedStateFromProps == "function" && (instance.state === null || instance.state === void 0)) {
            var componentName = getComponentNameFromType(ctor) || "Component";
            didWarnAboutUninitializedState.has(componentName) || (didWarnAboutUninitializedState.add(componentName), error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName));
          }
          if (typeof ctor.getDerivedStateFromProps == "function" || typeof instance.getSnapshotBeforeUpdate == "function") {
            var foundWillMountName = null, foundWillReceivePropsName = null, foundWillUpdateName = null;
            if (typeof instance.componentWillMount == "function" && instance.componentWillMount.__suppressDeprecationWarning !== !0 ? foundWillMountName = "componentWillMount" : typeof instance.UNSAFE_componentWillMount == "function" && (foundWillMountName = "UNSAFE_componentWillMount"), typeof instance.componentWillReceiveProps == "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== !0 ? foundWillReceivePropsName = "componentWillReceiveProps" : typeof instance.UNSAFE_componentWillReceiveProps == "function" && (foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps"), typeof instance.componentWillUpdate == "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== !0 ? foundWillUpdateName = "componentWillUpdate" : typeof instance.UNSAFE_componentWillUpdate == "function" && (foundWillUpdateName = "UNSAFE_componentWillUpdate"), foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
              var _componentName = getComponentNameFromType(ctor) || "Component", newApiName = typeof ctor.getDerivedStateFromProps == "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
              didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName) || (didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName), error(`Unsafe legacy lifecycles will not be called for components using new component APIs.

%s uses %s but also contains the following legacy lifecycles:%s%s%s

The above lifecycles should be removed. Learn more about this warning here:
https://reactjs.org/link/unsafe-component-lifecycles`, _componentName, newApiName, foundWillMountName !== null ? `
  ` + foundWillMountName : "", foundWillReceivePropsName !== null ? `
  ` + foundWillReceivePropsName : "", foundWillUpdateName !== null ? `
  ` + foundWillUpdateName : ""));
            }
          }
        }
        return instance;
      }
      function checkClassInstance(instance, ctor, newProps) {
        {
          var name = getComponentNameFromType(ctor) || "Component", renderPresent = instance.render;
          renderPresent || (ctor.prototype && typeof ctor.prototype.render == "function" ? error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name) : error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name)), instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state && error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name), instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved && error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name), instance.propTypes && error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name), instance.contextType && error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name), instance.contextTypes && error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name), ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor) && (didWarnAboutContextTypeAndContextTypes.add(ctor), error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name)), typeof instance.componentShouldUpdate == "function" && error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name), ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate < "u" && error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component"), typeof instance.componentDidUnmount == "function" && error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name), typeof instance.componentDidReceiveProps == "function" && error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name), typeof instance.componentWillRecieveProps == "function" && error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name), typeof instance.UNSAFE_componentWillRecieveProps == "function" && error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
          var hasMutatedProps = instance.props !== newProps;
          instance.props !== void 0 && hasMutatedProps && error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name), instance.defaultProps && error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name), typeof instance.getSnapshotBeforeUpdate == "function" && typeof instance.componentDidUpdate != "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor) && (didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor), error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor))), typeof instance.getDerivedStateFromProps == "function" && error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name), typeof instance.getDerivedStateFromError == "function" && error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name), typeof ctor.getSnapshotBeforeUpdate == "function" && error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
          var _state = instance.state;
          _state && (typeof _state != "object" || isArray(_state)) && error("%s.state: must be set to an object or null", name), typeof instance.getChildContext == "function" && typeof ctor.childContextTypes != "object" && error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
        }
      }
      function callComponentWillMount(type, instance) {
        var oldState = instance.state;
        if (typeof instance.componentWillMount == "function") {
          if (instance.componentWillMount.__suppressDeprecationWarning !== !0) {
            var componentName = getComponentNameFromType(type) || "Unknown";
            didWarnAboutDeprecatedWillMount[componentName] || (warn(
              `componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.

* Move code from componentWillMount to componentDidMount (preferred in most cases) or the constructor.

Please update the following components: %s`,
              componentName
            ), didWarnAboutDeprecatedWillMount[componentName] = !0);
          }
          instance.componentWillMount();
        }
        typeof instance.UNSAFE_componentWillMount == "function" && instance.UNSAFE_componentWillMount(), oldState !== instance.state && (error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromType(type) || "Component"), classComponentUpdater.enqueueReplaceState(instance, instance.state, null));
      }
      function processUpdateQueue(internalInstance, inst, props, maskedLegacyContext) {
        if (internalInstance.queue !== null && internalInstance.queue.length > 0) {
          var oldQueue = internalInstance.queue, oldReplace = internalInstance.replace;
          if (internalInstance.queue = null, internalInstance.replace = !1, oldReplace && oldQueue.length === 1)
            inst.state = oldQueue[0];
          else {
            for (var nextState = oldReplace ? oldQueue[0] : inst.state, dontMutate = !0, i = oldReplace ? 1 : 0; i < oldQueue.length; i++) {
              var partial = oldQueue[i], partialState = typeof partial == "function" ? partial.call(inst, nextState, props, maskedLegacyContext) : partial;
              partialState != null && (dontMutate ? (dontMutate = !1, nextState = assign({}, nextState, partialState)) : assign(nextState, partialState));
            }
            inst.state = nextState;
          }
        } else
          internalInstance.queue = null;
      }
      function mountClassInstance(instance, ctor, newProps, maskedLegacyContext) {
        checkClassInstance(instance, ctor, newProps);
        var initialState = instance.state !== void 0 ? instance.state : null;
        instance.updater = classComponentUpdater, instance.props = newProps, instance.state = initialState;
        var internalInstance = {
          queue: [],
          replace: !1
        };
        set(instance, internalInstance);
        var contextType = ctor.contextType;
        if (typeof contextType == "object" && contextType !== null ? instance.context = readContext(contextType) : instance.context = maskedLegacyContext, instance.state === newProps) {
          var componentName = getComponentNameFromType(ctor) || "Component";
          didWarnAboutDirectlyAssigningPropsToState.has(componentName) || (didWarnAboutDirectlyAssigningPropsToState.add(componentName), error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName));
        }
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        typeof getDerivedStateFromProps == "function" && (instance.state = applyDerivedStateFromProps(instance, ctor, getDerivedStateFromProps, initialState, newProps)), typeof ctor.getDerivedStateFromProps != "function" && typeof instance.getSnapshotBeforeUpdate != "function" && (typeof instance.UNSAFE_componentWillMount == "function" || typeof instance.componentWillMount == "function") && (callComponentWillMount(ctor, instance), processUpdateQueue(internalInstance, instance, newProps, maskedLegacyContext));
      }
      var emptyTreeContext = {
        id: 1,
        overflow: ""
      };
      function getTreeId(context) {
        var overflow = context.overflow, idWithLeadingBit = context.id, id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
        return id.toString(32) + overflow;
      }
      function pushTreeContext(baseContext, totalChildren, index) {
        var baseIdWithLeadingBit = baseContext.id, baseOverflow = baseContext.overflow, baseLength = getBitLength(baseIdWithLeadingBit) - 1, baseId = baseIdWithLeadingBit & ~(1 << baseLength), slot = index + 1, length = getBitLength(totalChildren) + baseLength;
        if (length > 30) {
          var numberOfOverflowBits = baseLength - baseLength % 5, newOverflowBits = (1 << numberOfOverflowBits) - 1, newOverflow = (baseId & newOverflowBits).toString(32), restOfBaseId = baseId >> numberOfOverflowBits, restOfBaseLength = baseLength - numberOfOverflowBits, restOfLength = getBitLength(totalChildren) + restOfBaseLength, restOfNewBits = slot << restOfBaseLength, id = restOfNewBits | restOfBaseId, overflow = newOverflow + baseOverflow;
          return {
            id: 1 << restOfLength | id,
            overflow
          };
        } else {
          var newBits = slot << baseLength, _id = newBits | baseId, _overflow = baseOverflow;
          return {
            id: 1 << length | _id,
            overflow: _overflow
          };
        }
      }
      function getBitLength(number) {
        return 32 - clz32(number);
      }
      function getLeadingBit(id) {
        return 1 << getBitLength(id) - 1;
      }
      var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback, log = Math.log, LN2 = Math.LN2;
      function clz32Fallback(x) {
        var asUint = x >>> 0;
        return asUint === 0 ? 32 : 31 - (log(asUint) / LN2 | 0) | 0;
      }
      function is(x, y) {
        return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
      }
      var objectIs = typeof Object.is == "function" ? Object.is : is, currentlyRenderingComponent = null, currentlyRenderingTask = null, firstWorkInProgressHook = null, workInProgressHook = null, isReRender = !1, didScheduleRenderPhaseUpdate = !1, localIdCounter = 0, renderPhaseUpdates = null, numberOfReRenders = 0, RE_RENDER_LIMIT = 25, isInHookUserCodeInDev = !1, currentHookNameInDev;
      function resolveCurrentlyRenderingComponent() {
        if (currentlyRenderingComponent === null)
          throw new Error(`Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:
1. You might have mismatching versions of React and the renderer (such as React DOM)
2. You might be breaking the Rules of Hooks
3. You might have more than one copy of React in the same app
See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.`);
        return isInHookUserCodeInDev && error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks"), currentlyRenderingComponent;
      }
      function areHookInputsEqual(nextDeps, prevDeps) {
        if (prevDeps === null)
          return error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev), !1;
        nextDeps.length !== prevDeps.length && error(`The final argument passed to %s changed size between renders. The order and size of this array must remain constant.

Previous: %s
Incoming: %s`, currentHookNameInDev, "[" + nextDeps.join(", ") + "]", "[" + prevDeps.join(", ") + "]");
        for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++)
          if (!objectIs(nextDeps[i], prevDeps[i]))
            return !1;
        return !0;
      }
      function createHook() {
        if (numberOfReRenders > 0)
          throw new Error("Rendered more hooks than during the previous render");
        return {
          memoizedState: null,
          queue: null,
          next: null
        };
      }
      function createWorkInProgressHook() {
        return workInProgressHook === null ? firstWorkInProgressHook === null ? (isReRender = !1, firstWorkInProgressHook = workInProgressHook = createHook()) : (isReRender = !0, workInProgressHook = firstWorkInProgressHook) : workInProgressHook.next === null ? (isReRender = !1, workInProgressHook = workInProgressHook.next = createHook()) : (isReRender = !0, workInProgressHook = workInProgressHook.next), workInProgressHook;
      }
      function prepareToUseHooks(task, componentIdentity) {
        currentlyRenderingComponent = componentIdentity, currentlyRenderingTask = task, isInHookUserCodeInDev = !1, localIdCounter = 0;
      }
      function finishHooks(Component, props, children, refOrContext) {
        for (; didScheduleRenderPhaseUpdate; )
          didScheduleRenderPhaseUpdate = !1, localIdCounter = 0, numberOfReRenders += 1, workInProgressHook = null, children = Component(props, refOrContext);
        return resetHooksState(), children;
      }
      function checkDidRenderIdHook() {
        var didRenderIdHook = localIdCounter !== 0;
        return didRenderIdHook;
      }
      function resetHooksState() {
        isInHookUserCodeInDev = !1, currentlyRenderingComponent = null, currentlyRenderingTask = null, didScheduleRenderPhaseUpdate = !1, firstWorkInProgressHook = null, numberOfReRenders = 0, renderPhaseUpdates = null, workInProgressHook = null;
      }
      function readContext$1(context) {
        return isInHookUserCodeInDev && error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo()."), readContext(context);
      }
      function useContext6(context) {
        return currentHookNameInDev = "useContext", resolveCurrentlyRenderingComponent(), readContext(context);
      }
      function basicStateReducer(state, action3) {
        return typeof action3 == "function" ? action3(state) : action3;
      }
      function useState6(initialState) {
        return currentHookNameInDev = "useState", useReducer3(
          basicStateReducer,
          initialState
        );
      }
      function useReducer3(reducer, initialArg, init) {
        if (reducer !== basicStateReducer && (currentHookNameInDev = "useReducer"), currentlyRenderingComponent = resolveCurrentlyRenderingComponent(), workInProgressHook = createWorkInProgressHook(), isReRender) {
          var queue = workInProgressHook.queue, dispatch = queue.dispatch;
          if (renderPhaseUpdates !== null) {
            var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);
            if (firstRenderPhaseUpdate !== void 0) {
              renderPhaseUpdates.delete(queue);
              var newState = workInProgressHook.memoizedState, update = firstRenderPhaseUpdate;
              do {
                var action3 = update.action;
                isInHookUserCodeInDev = !0, newState = reducer(newState, action3), isInHookUserCodeInDev = !1, update = update.next;
              } while (update !== null);
              return workInProgressHook.memoizedState = newState, [newState, dispatch];
            }
          }
          return [workInProgressHook.memoizedState, dispatch];
        } else {
          isInHookUserCodeInDev = !0;
          var initialState;
          reducer === basicStateReducer ? initialState = typeof initialArg == "function" ? initialArg() : initialArg : initialState = init !== void 0 ? init(initialArg) : initialArg, isInHookUserCodeInDev = !1, workInProgressHook.memoizedState = initialState;
          var _queue = workInProgressHook.queue = {
            last: null,
            dispatch: null
          }, _dispatch = _queue.dispatch = dispatchAction.bind(null, currentlyRenderingComponent, _queue);
          return [workInProgressHook.memoizedState, _dispatch];
        }
      }
      function useMemo6(nextCreate, deps) {
        currentlyRenderingComponent = resolveCurrentlyRenderingComponent(), workInProgressHook = createWorkInProgressHook();
        var nextDeps = deps === void 0 ? null : deps;
        if (workInProgressHook !== null) {
          var prevState = workInProgressHook.memoizedState;
          if (prevState !== null && nextDeps !== null) {
            var prevDeps = prevState[1];
            if (areHookInputsEqual(nextDeps, prevDeps))
              return prevState[0];
          }
        }
        isInHookUserCodeInDev = !0;
        var nextValue = nextCreate();
        return isInHookUserCodeInDev = !1, workInProgressHook.memoizedState = [nextValue, nextDeps], nextValue;
      }
      function useRef6(initialValue) {
        currentlyRenderingComponent = resolveCurrentlyRenderingComponent(), workInProgressHook = createWorkInProgressHook();
        var previousRef = workInProgressHook.memoizedState;
        if (previousRef === null) {
          var ref = {
            current: initialValue
          };
          return Object.seal(ref), workInProgressHook.memoizedState = ref, ref;
        } else
          return previousRef;
      }
      function useLayoutEffect5(create, inputs) {
        currentHookNameInDev = "useLayoutEffect", error("useLayoutEffect does nothing on the server, because its effect cannot be encoded into the server renderer's output format. This will lead to a mismatch between the initial, non-hydrated UI and the intended UI. To avoid this, useLayoutEffect should only be used in components that render exclusively on the client. See https://reactjs.org/link/uselayouteffect-ssr for common fixes.");
      }
      function dispatchAction(componentIdentity, queue, action3) {
        if (numberOfReRenders >= RE_RENDER_LIMIT)
          throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
        if (componentIdentity === currentlyRenderingComponent) {
          didScheduleRenderPhaseUpdate = !0;
          var update = {
            action: action3,
            next: null
          };
          renderPhaseUpdates === null && (renderPhaseUpdates = /* @__PURE__ */ new Map());
          var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);
          if (firstRenderPhaseUpdate === void 0)
            renderPhaseUpdates.set(queue, update);
          else {
            for (var lastRenderPhaseUpdate = firstRenderPhaseUpdate; lastRenderPhaseUpdate.next !== null; )
              lastRenderPhaseUpdate = lastRenderPhaseUpdate.next;
            lastRenderPhaseUpdate.next = update;
          }
        }
      }
      function useCallback5(callback, deps) {
        return useMemo6(function() {
          return callback;
        }, deps);
      }
      function useMutableSource(source, getSnapshot, subscribe) {
        return resolveCurrentlyRenderingComponent(), getSnapshot(source._source);
      }
      function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
        if (getServerSnapshot === void 0)
          throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
        return getServerSnapshot();
      }
      function useDeferredValue(value) {
        return resolveCurrentlyRenderingComponent(), value;
      }
      function unsupportedStartTransition() {
        throw new Error("startTransition cannot be called during server rendering.");
      }
      function useTransition2() {
        return resolveCurrentlyRenderingComponent(), [!1, unsupportedStartTransition];
      }
      function useId() {
        var task = currentlyRenderingTask, treeId = getTreeId(task.treeContext), responseState = currentResponseState;
        if (responseState === null)
          throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component.");
        var localId = localIdCounter++;
        return makeId(responseState, treeId, localId);
      }
      function noop() {
      }
      var Dispatcher = {
        readContext: readContext$1,
        useContext: useContext6,
        useMemo: useMemo6,
        useReducer: useReducer3,
        useRef: useRef6,
        useState: useState6,
        useInsertionEffect: noop,
        useLayoutEffect: useLayoutEffect5,
        useCallback: useCallback5,
        useImperativeHandle: noop,
        useEffect: noop,
        useDebugValue: noop,
        useDeferredValue,
        useTransition: useTransition2,
        useId,
        useMutableSource,
        useSyncExternalStore
      }, currentResponseState = null;
      function setCurrentResponseState(responseState) {
        currentResponseState = responseState;
      }
      function getStackByComponentStackNode(componentStack) {
        try {
          var info = "", node = componentStack;
          do {
            switch (node.tag) {
              case 0:
                info += describeBuiltInComponentFrame(node.type, null, null);
                break;
              case 1:
                info += describeFunctionComponentFrame(node.type, null, null);
                break;
              case 2:
                info += describeClassComponentFrame(node.type, null, null);
                break;
            }
            node = node.parent;
          } while (node);
          return info;
        } catch (x) {
          return `
Error generating stack: ` + x.message + `
` + x.stack;
        }
      }
      var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame, PENDING = 0, COMPLETED = 1, FLUSHED = 2, ABORTED = 3, ERRORED = 4, OPEN = 0, CLOSING = 1, CLOSED = 2, DEFAULT_PROGRESSIVE_CHUNK_SIZE = 12800;
      function defaultErrorHandler(error2) {
        return console.error(error2), null;
      }
      function noop$1() {
      }
      function createRequest(children, responseState, rootFormatContext, progressiveChunkSize, onError2, onAllReady, onShellReady, onShellError, onFatalError) {
        var pingedTasks = [], abortSet = /* @__PURE__ */ new Set(), request = {
          destination: null,
          responseState,
          progressiveChunkSize: progressiveChunkSize === void 0 ? DEFAULT_PROGRESSIVE_CHUNK_SIZE : progressiveChunkSize,
          status: OPEN,
          fatalError: null,
          nextSegmentId: 0,
          allPendingTasks: 0,
          pendingRootTasks: 0,
          completedRootSegment: null,
          abortableTasks: abortSet,
          pingedTasks,
          clientRenderedBoundaries: [],
          completedBoundaries: [],
          partialBoundaries: [],
          onError: onError2 === void 0 ? defaultErrorHandler : onError2,
          onAllReady: onAllReady === void 0 ? noop$1 : onAllReady,
          onShellReady: onShellReady === void 0 ? noop$1 : onShellReady,
          onShellError: onShellError === void 0 ? noop$1 : onShellError,
          onFatalError: onFatalError === void 0 ? noop$1 : onFatalError
        }, rootSegment = createPendingSegment(
          request,
          0,
          null,
          rootFormatContext,
          !1,
          !1
        );
        rootSegment.parentFlushed = !0;
        var rootTask = createTask(request, children, null, rootSegment, abortSet, emptyContextObject, rootContextSnapshot, emptyTreeContext);
        return pingedTasks.push(rootTask), request;
      }
      function pingTask(request, task) {
        var pingedTasks = request.pingedTasks;
        pingedTasks.push(task), pingedTasks.length === 1 && scheduleWork(function() {
          return performWork(request);
        });
      }
      function createSuspenseBoundary(request, fallbackAbortableTasks) {
        return {
          id: UNINITIALIZED_SUSPENSE_BOUNDARY_ID,
          rootSegmentID: -1,
          parentFlushed: !1,
          pendingTasks: 0,
          forceClientRender: !1,
          completedSegments: [],
          byteSize: 0,
          fallbackAbortableTasks,
          errorDigest: null
        };
      }
      function createTask(request, node, blockedBoundary, blockedSegment, abortSet, legacyContext, context, treeContext) {
        request.allPendingTasks++, blockedBoundary === null ? request.pendingRootTasks++ : blockedBoundary.pendingTasks++;
        var task = {
          node,
          ping: function() {
            return pingTask(request, task);
          },
          blockedBoundary,
          blockedSegment,
          abortSet,
          legacyContext,
          context,
          treeContext
        };
        return task.componentStack = null, abortSet.add(task), task;
      }
      function createPendingSegment(request, index, boundary, formatContext, lastPushedText, textEmbedded) {
        return {
          status: PENDING,
          id: -1,
          index,
          parentFlushed: !1,
          chunks: [],
          children: [],
          formatContext,
          boundary,
          lastPushedText,
          textEmbedded
        };
      }
      var currentTaskInDEV = null;
      function getCurrentStackInDEV() {
        return currentTaskInDEV === null || currentTaskInDEV.componentStack === null ? "" : getStackByComponentStackNode(currentTaskInDEV.componentStack);
      }
      function pushBuiltInComponentStackInDEV(task, type) {
        task.componentStack = {
          tag: 0,
          parent: task.componentStack,
          type
        };
      }
      function pushFunctionComponentStackInDEV(task, type) {
        task.componentStack = {
          tag: 1,
          parent: task.componentStack,
          type
        };
      }
      function pushClassComponentStackInDEV(task, type) {
        task.componentStack = {
          tag: 2,
          parent: task.componentStack,
          type
        };
      }
      function popComponentStackInDEV(task) {
        task.componentStack === null ? error("Unexpectedly popped too many stack frames. This is a bug in React.") : task.componentStack = task.componentStack.parent;
      }
      var lastBoundaryErrorComponentStackDev = null;
      function captureBoundaryErrorDetailsDev(boundary, error2) {
        {
          var errorMessage;
          typeof error2 == "string" ? errorMessage = error2 : error2 && typeof error2.message == "string" ? errorMessage = error2.message : errorMessage = String(error2);
          var errorComponentStack = lastBoundaryErrorComponentStackDev || getCurrentStackInDEV();
          lastBoundaryErrorComponentStackDev = null, boundary.errorMessage = errorMessage, boundary.errorComponentStack = errorComponentStack;
        }
      }
      function logRecoverableError(request, error2) {
        var errorDigest = request.onError(error2);
        if (errorDigest != null && typeof errorDigest != "string")
          throw new Error('onError returned something with a type other than "string". onError should return a string and may return null or undefined but must not return anything else. It received something of type "' + typeof errorDigest + '" instead');
        return errorDigest;
      }
      function fatalError(request, error2) {
        var onShellError = request.onShellError;
        onShellError(error2);
        var onFatalError = request.onFatalError;
        onFatalError(error2), request.destination !== null ? (request.status = CLOSED, closeWithError(request.destination, error2)) : (request.status = CLOSING, request.fatalError = error2);
      }
      function renderSuspenseBoundary(request, task, props) {
        pushBuiltInComponentStackInDEV(task, "Suspense");
        var parentBoundary = task.blockedBoundary, parentSegment = task.blockedSegment, fallback = props.fallback, content = props.children, fallbackAbortSet = /* @__PURE__ */ new Set(), newBoundary = createSuspenseBoundary(request, fallbackAbortSet), insertionIndex = parentSegment.chunks.length, boundarySegment = createPendingSegment(
          request,
          insertionIndex,
          newBoundary,
          parentSegment.formatContext,
          !1,
          !1
        );
        parentSegment.children.push(boundarySegment), parentSegment.lastPushedText = !1;
        var contentRootSegment = createPendingSegment(
          request,
          0,
          null,
          parentSegment.formatContext,
          !1,
          !1
        );
        contentRootSegment.parentFlushed = !0, task.blockedBoundary = newBoundary, task.blockedSegment = contentRootSegment;
        try {
          if (renderNode(request, task, content), pushSegmentFinale$1(contentRootSegment.chunks, request.responseState, contentRootSegment.lastPushedText, contentRootSegment.textEmbedded), contentRootSegment.status = COMPLETED, queueCompletedSegment(newBoundary, contentRootSegment), newBoundary.pendingTasks === 0) {
            popComponentStackInDEV(task);
            return;
          }
        } catch (error2) {
          contentRootSegment.status = ERRORED, newBoundary.forceClientRender = !0, newBoundary.errorDigest = logRecoverableError(request, error2), captureBoundaryErrorDetailsDev(newBoundary, error2);
        } finally {
          task.blockedBoundary = parentBoundary, task.blockedSegment = parentSegment;
        }
        var suspendedFallbackTask = createTask(request, fallback, parentBoundary, boundarySegment, fallbackAbortSet, task.legacyContext, task.context, task.treeContext);
        suspendedFallbackTask.componentStack = task.componentStack, request.pingedTasks.push(suspendedFallbackTask), popComponentStackInDEV(task);
      }
      function renderHostElement(request, task, type, props) {
        pushBuiltInComponentStackInDEV(task, type);
        var segment = task.blockedSegment, children = pushStartInstance(segment.chunks, type, props, request.responseState, segment.formatContext);
        segment.lastPushedText = !1;
        var prevContext = segment.formatContext;
        segment.formatContext = getChildFormatContext(prevContext, type, props), renderNode(request, task, children), segment.formatContext = prevContext, pushEndInstance(segment.chunks, type), segment.lastPushedText = !1, popComponentStackInDEV(task);
      }
      function shouldConstruct$1(Component) {
        return Component.prototype && Component.prototype.isReactComponent;
      }
      function renderWithHooks(request, task, Component, props, secondArg) {
        var componentIdentity = {};
        prepareToUseHooks(task, componentIdentity);
        var result = Component(props, secondArg);
        return finishHooks(Component, props, result, secondArg);
      }
      function finishClassComponent(request, task, instance, Component, props) {
        var nextChildren = instance.render();
        instance.props !== props && (didWarnAboutReassigningProps || error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromType(Component) || "a component"), didWarnAboutReassigningProps = !0);
        {
          var childContextTypes = Component.childContextTypes;
          if (childContextTypes != null) {
            var previousContext = task.legacyContext, mergedContext = processChildContext(instance, Component, previousContext, childContextTypes);
            task.legacyContext = mergedContext, renderNodeDestructive(request, task, nextChildren), task.legacyContext = previousContext;
            return;
          }
        }
        renderNodeDestructive(request, task, nextChildren);
      }
      function renderClassComponent(request, task, Component, props) {
        pushClassComponentStackInDEV(task, Component);
        var maskedContext = getMaskedContext(Component, task.legacyContext), instance = constructClassInstance(Component, props, maskedContext);
        mountClassInstance(instance, Component, props, maskedContext), finishClassComponent(request, task, instance, Component, props), popComponentStackInDEV(task);
      }
      var didWarnAboutBadClass = {}, didWarnAboutModulePatternComponent = {}, didWarnAboutContextTypeOnFunctionComponent = {}, didWarnAboutGetDerivedStateOnFunctionComponent = {}, didWarnAboutReassigningProps = !1, didWarnAboutGenerators = !1, didWarnAboutMaps = !1, hasWarnedAboutUsingContextAsConsumer = !1;
      function renderIndeterminateComponent(request, task, Component, props) {
        var legacyContext;
        if (legacyContext = getMaskedContext(Component, task.legacyContext), pushFunctionComponentStackInDEV(task, Component), Component.prototype && typeof Component.prototype.render == "function") {
          var componentName = getComponentNameFromType(Component) || "Unknown";
          didWarnAboutBadClass[componentName] || (error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName), didWarnAboutBadClass[componentName] = !0);
        }
        var value = renderWithHooks(request, task, Component, props, legacyContext), hasId = checkDidRenderIdHook();
        if (typeof value == "object" && value !== null && typeof value.render == "function" && value.$$typeof === void 0) {
          var _componentName = getComponentNameFromType(Component) || "Unknown";
          didWarnAboutModulePatternComponent[_componentName] || (error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName), didWarnAboutModulePatternComponent[_componentName] = !0);
        }
        if (typeof value == "object" && value !== null && typeof value.render == "function" && value.$$typeof === void 0) {
          {
            var _componentName2 = getComponentNameFromType(Component) || "Unknown";
            didWarnAboutModulePatternComponent[_componentName2] || (error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2), didWarnAboutModulePatternComponent[_componentName2] = !0);
          }
          mountClassInstance(value, Component, props, legacyContext), finishClassComponent(request, task, value, Component, props);
        } else if (validateFunctionComponentInDev(Component), hasId) {
          var prevTreeContext = task.treeContext, totalChildren = 1, index = 0;
          task.treeContext = pushTreeContext(prevTreeContext, totalChildren, index);
          try {
            renderNodeDestructive(request, task, value);
          } finally {
            task.treeContext = prevTreeContext;
          }
        } else
          renderNodeDestructive(request, task, value);
        popComponentStackInDEV(task);
      }
      function validateFunctionComponentInDev(Component) {
        {
          if (Component && Component.childContextTypes && error("%s(...): childContextTypes cannot be defined on a function component.", Component.displayName || Component.name || "Component"), typeof Component.getDerivedStateFromProps == "function") {
            var _componentName3 = getComponentNameFromType(Component) || "Unknown";
            didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] || (error("%s: Function components do not support getDerivedStateFromProps.", _componentName3), didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = !0);
          }
          if (typeof Component.contextType == "object" && Component.contextType !== null) {
            var _componentName4 = getComponentNameFromType(Component) || "Unknown";
            didWarnAboutContextTypeOnFunctionComponent[_componentName4] || (error("%s: Function components do not support contextType.", _componentName4), didWarnAboutContextTypeOnFunctionComponent[_componentName4] = !0);
          }
        }
      }
      function resolveDefaultProps(Component, baseProps) {
        if (Component && Component.defaultProps) {
          var props = assign({}, baseProps), defaultProps = Component.defaultProps;
          for (var propName in defaultProps)
            props[propName] === void 0 && (props[propName] = defaultProps[propName]);
          return props;
        }
        return baseProps;
      }
      function renderForwardRef(request, task, type, props, ref) {
        pushFunctionComponentStackInDEV(task, type.render);
        var children = renderWithHooks(request, task, type.render, props, ref), hasId = checkDidRenderIdHook();
        if (hasId) {
          var prevTreeContext = task.treeContext, totalChildren = 1, index = 0;
          task.treeContext = pushTreeContext(prevTreeContext, totalChildren, index);
          try {
            renderNodeDestructive(request, task, children);
          } finally {
            task.treeContext = prevTreeContext;
          }
        } else
          renderNodeDestructive(request, task, children);
        popComponentStackInDEV(task);
      }
      function renderMemo(request, task, type, props, ref) {
        var innerType = type.type, resolvedProps = resolveDefaultProps(innerType, props);
        renderElement(request, task, innerType, resolvedProps, ref);
      }
      function renderContextConsumer(request, task, context, props) {
        context._context === void 0 ? context !== context.Consumer && (hasWarnedAboutUsingContextAsConsumer || (hasWarnedAboutUsingContextAsConsumer = !0, error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?"))) : context = context._context;
        var render2 = props.children;
        typeof render2 != "function" && error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
        var newValue = readContext(context), newChildren = render2(newValue);
        renderNodeDestructive(request, task, newChildren);
      }
      function renderContextProvider(request, task, type, props) {
        var context = type._context, value = props.value, children = props.children, prevSnapshot;
        prevSnapshot = task.context, task.context = pushProvider(context, value), renderNodeDestructive(request, task, children), task.context = popProvider(context), prevSnapshot !== task.context && error("Popping the context provider did not return back to the original snapshot. This is a bug in React.");
      }
      function renderLazyComponent(request, task, lazyComponent, props, ref) {
        pushBuiltInComponentStackInDEV(task, "Lazy");
        var payload = lazyComponent._payload, init = lazyComponent._init, Component = init(payload), resolvedProps = resolveDefaultProps(Component, props);
        renderElement(request, task, Component, resolvedProps, ref), popComponentStackInDEV(task);
      }
      function renderElement(request, task, type, props, ref) {
        if (typeof type == "function")
          if (shouldConstruct$1(type)) {
            renderClassComponent(request, task, type, props);
            return;
          } else {
            renderIndeterminateComponent(request, task, type, props);
            return;
          }
        if (typeof type == "string") {
          renderHostElement(request, task, type, props);
          return;
        }
        switch (type) {
          case REACT_LEGACY_HIDDEN_TYPE:
          case REACT_DEBUG_TRACING_MODE_TYPE:
          case REACT_STRICT_MODE_TYPE:
          case REACT_PROFILER_TYPE:
          case REACT_FRAGMENT_TYPE: {
            renderNodeDestructive(request, task, props.children);
            return;
          }
          case REACT_SUSPENSE_LIST_TYPE: {
            pushBuiltInComponentStackInDEV(task, "SuspenseList"), renderNodeDestructive(request, task, props.children), popComponentStackInDEV(task);
            return;
          }
          case REACT_SCOPE_TYPE:
            throw new Error("ReactDOMServer does not yet support scope components.");
          case REACT_SUSPENSE_TYPE: {
            renderSuspenseBoundary(request, task, props);
            return;
          }
        }
        if (typeof type == "object" && type !== null)
          switch (type.$$typeof) {
            case REACT_FORWARD_REF_TYPE: {
              renderForwardRef(request, task, type, props, ref);
              return;
            }
            case REACT_MEMO_TYPE: {
              renderMemo(request, task, type, props, ref);
              return;
            }
            case REACT_PROVIDER_TYPE: {
              renderContextProvider(request, task, type, props);
              return;
            }
            case REACT_CONTEXT_TYPE: {
              renderContextConsumer(request, task, type, props);
              return;
            }
            case REACT_LAZY_TYPE: {
              renderLazyComponent(request, task, type, props);
              return;
            }
          }
        var info = "";
        throw (type === void 0 || typeof type == "object" && type !== null && Object.keys(type).length === 0) && (info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports."), new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info));
      }
      function validateIterable(iterable, iteratorFn) {
        typeof Symbol == "function" && iterable[Symbol.toStringTag] === "Generator" && (didWarnAboutGenerators || error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers."), didWarnAboutGenerators = !0), iterable.entries === iteratorFn && (didWarnAboutMaps || error("Using Maps as children is not supported. Use an array of keyed ReactElements instead."), didWarnAboutMaps = !0);
      }
      function renderNodeDestructive(request, task, node) {
        try {
          return renderNodeDestructiveImpl(request, task, node);
        } catch (x) {
          throw typeof x == "object" && x !== null && typeof x.then == "function" || (lastBoundaryErrorComponentStackDev = lastBoundaryErrorComponentStackDev !== null ? lastBoundaryErrorComponentStackDev : getCurrentStackInDEV()), x;
        }
      }
      function renderNodeDestructiveImpl(request, task, node) {
        if (task.node = node, typeof node == "object" && node !== null) {
          switch (node.$$typeof) {
            case REACT_ELEMENT_TYPE: {
              var element = node, type = element.type, props = element.props, ref = element.ref;
              renderElement(request, task, type, props, ref);
              return;
            }
            case REACT_PORTAL_TYPE:
              throw new Error("Portals are not currently supported by the server renderer. Render them conditionally so that they only appear on the client render.");
            case REACT_LAZY_TYPE: {
              var lazyNode = node, payload = lazyNode._payload, init = lazyNode._init, resolvedNode;
              try {
                resolvedNode = init(payload);
              } catch (x) {
                throw typeof x == "object" && x !== null && typeof x.then == "function" && pushBuiltInComponentStackInDEV(task, "Lazy"), x;
              }
              renderNodeDestructive(request, task, resolvedNode);
              return;
            }
          }
          if (isArray(node)) {
            renderChildrenArray(request, task, node);
            return;
          }
          var iteratorFn = getIteratorFn(node);
          if (iteratorFn) {
            validateIterable(node, iteratorFn);
            var iterator = iteratorFn.call(node);
            if (iterator) {
              var step = iterator.next();
              if (!step.done) {
                var children = [];
                do
                  children.push(step.value), step = iterator.next();
                while (!step.done);
                renderChildrenArray(request, task, children);
                return;
              }
              return;
            }
          }
          var childString = Object.prototype.toString.call(node);
          throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(node).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
        }
        if (typeof node == "string") {
          var segment = task.blockedSegment;
          segment.lastPushedText = pushTextInstance$1(task.blockedSegment.chunks, node, request.responseState, segment.lastPushedText);
          return;
        }
        if (typeof node == "number") {
          var _segment = task.blockedSegment;
          _segment.lastPushedText = pushTextInstance$1(task.blockedSegment.chunks, "" + node, request.responseState, _segment.lastPushedText);
          return;
        }
        typeof node == "function" && error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
      }
      function renderChildrenArray(request, task, children) {
        for (var totalChildren = children.length, i = 0; i < totalChildren; i++) {
          var prevTreeContext = task.treeContext;
          task.treeContext = pushTreeContext(prevTreeContext, totalChildren, i);
          try {
            renderNode(request, task, children[i]);
          } finally {
            task.treeContext = prevTreeContext;
          }
        }
      }
      function spawnNewSuspendedTask(request, task, x) {
        var segment = task.blockedSegment, insertionIndex = segment.chunks.length, newSegment = createPendingSegment(
          request,
          insertionIndex,
          null,
          segment.formatContext,
          segment.lastPushedText,
          !0
        );
        segment.children.push(newSegment), segment.lastPushedText = !1;
        var newTask = createTask(request, task.node, task.blockedBoundary, newSegment, task.abortSet, task.legacyContext, task.context, task.treeContext);
        task.componentStack !== null && (newTask.componentStack = task.componentStack.parent);
        var ping = newTask.ping;
        x.then(ping, ping);
      }
      function renderNode(request, task, node) {
        var previousFormatContext = task.blockedSegment.formatContext, previousLegacyContext = task.legacyContext, previousContext = task.context, previousComponentStack = null;
        previousComponentStack = task.componentStack;
        try {
          return renderNodeDestructive(request, task, node);
        } catch (x) {
          if (resetHooksState(), typeof x == "object" && x !== null && typeof x.then == "function") {
            spawnNewSuspendedTask(request, task, x), task.blockedSegment.formatContext = previousFormatContext, task.legacyContext = previousLegacyContext, task.context = previousContext, switchContext(previousContext), task.componentStack = previousComponentStack;
            return;
          } else
            throw task.blockedSegment.formatContext = previousFormatContext, task.legacyContext = previousLegacyContext, task.context = previousContext, switchContext(previousContext), task.componentStack = previousComponentStack, x;
        }
      }
      function erroredTask(request, boundary, segment, error2) {
        var errorDigest = logRecoverableError(request, error2);
        if (boundary === null ? fatalError(request, error2) : (boundary.pendingTasks--, boundary.forceClientRender || (boundary.forceClientRender = !0, boundary.errorDigest = errorDigest, captureBoundaryErrorDetailsDev(boundary, error2), boundary.parentFlushed && request.clientRenderedBoundaries.push(boundary))), request.allPendingTasks--, request.allPendingTasks === 0) {
          var onAllReady = request.onAllReady;
          onAllReady();
        }
      }
      function abortTaskSoft(task) {
        var request = this, boundary = task.blockedBoundary, segment = task.blockedSegment;
        segment.status = ABORTED, finishedTask(request, boundary, segment);
      }
      function abortTask(task, request, reason) {
        var boundary = task.blockedBoundary, segment = task.blockedSegment;
        if (segment.status = ABORTED, boundary === null)
          request.allPendingTasks--, request.status !== CLOSED && (request.status = CLOSED, request.destination !== null && close(request.destination));
        else {
          if (boundary.pendingTasks--, !boundary.forceClientRender) {
            boundary.forceClientRender = !0;
            var _error = reason === void 0 ? new Error("The render was aborted by the server without a reason.") : reason;
            boundary.errorDigest = request.onError(_error);
            {
              var errorPrefix = "The server did not finish this Suspense boundary: ";
              _error && typeof _error.message == "string" ? _error = errorPrefix + _error.message : _error = errorPrefix + String(_error);
              var previousTaskInDev = currentTaskInDEV;
              currentTaskInDEV = task;
              try {
                captureBoundaryErrorDetailsDev(boundary, _error);
              } finally {
                currentTaskInDEV = previousTaskInDev;
              }
            }
            boundary.parentFlushed && request.clientRenderedBoundaries.push(boundary);
          }
          if (boundary.fallbackAbortableTasks.forEach(function(fallbackTask) {
            return abortTask(fallbackTask, request, reason);
          }), boundary.fallbackAbortableTasks.clear(), request.allPendingTasks--, request.allPendingTasks === 0) {
            var onAllReady = request.onAllReady;
            onAllReady();
          }
        }
      }
      function queueCompletedSegment(boundary, segment) {
        if (segment.chunks.length === 0 && segment.children.length === 1 && segment.children[0].boundary === null) {
          var childSegment = segment.children[0];
          childSegment.id = segment.id, childSegment.parentFlushed = !0, childSegment.status === COMPLETED && queueCompletedSegment(boundary, childSegment);
        } else {
          var completedSegments = boundary.completedSegments;
          completedSegments.push(segment);
        }
      }
      function finishedTask(request, boundary, segment) {
        if (boundary === null) {
          if (segment.parentFlushed) {
            if (request.completedRootSegment !== null)
              throw new Error("There can only be one root segment. This is a bug in React.");
            request.completedRootSegment = segment;
          }
          if (request.pendingRootTasks--, request.pendingRootTasks === 0) {
            request.onShellError = noop$1;
            var onShellReady = request.onShellReady;
            onShellReady();
          }
        } else if (boundary.pendingTasks--, !boundary.forceClientRender) {
          if (boundary.pendingTasks === 0)
            segment.parentFlushed && segment.status === COMPLETED && queueCompletedSegment(boundary, segment), boundary.parentFlushed && request.completedBoundaries.push(boundary), boundary.fallbackAbortableTasks.forEach(abortTaskSoft, request), boundary.fallbackAbortableTasks.clear();
          else if (segment.parentFlushed && segment.status === COMPLETED) {
            queueCompletedSegment(boundary, segment);
            var completedSegments = boundary.completedSegments;
            completedSegments.length === 1 && boundary.parentFlushed && request.partialBoundaries.push(boundary);
          }
        }
        if (request.allPendingTasks--, request.allPendingTasks === 0) {
          var onAllReady = request.onAllReady;
          onAllReady();
        }
      }
      function retryTask(request, task) {
        var segment = task.blockedSegment;
        if (segment.status === PENDING) {
          switchContext(task.context);
          var prevTaskInDEV = null;
          prevTaskInDEV = currentTaskInDEV, currentTaskInDEV = task;
          try {
            renderNodeDestructive(request, task, task.node), pushSegmentFinale$1(segment.chunks, request.responseState, segment.lastPushedText, segment.textEmbedded), task.abortSet.delete(task), segment.status = COMPLETED, finishedTask(request, task.blockedBoundary, segment);
          } catch (x) {
            if (resetHooksState(), typeof x == "object" && x !== null && typeof x.then == "function") {
              var ping = task.ping;
              x.then(ping, ping);
            } else
              task.abortSet.delete(task), segment.status = ERRORED, erroredTask(request, task.blockedBoundary, segment, x);
          } finally {
            currentTaskInDEV = prevTaskInDEV;
          }
        }
      }
      function performWork(request) {
        if (request.status !== CLOSED) {
          var prevContext = getActiveContext(), prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = Dispatcher;
          var prevGetCurrentStackImpl;
          prevGetCurrentStackImpl = ReactDebugCurrentFrame$1.getCurrentStack, ReactDebugCurrentFrame$1.getCurrentStack = getCurrentStackInDEV;
          var prevResponseState = currentResponseState;
          setCurrentResponseState(request.responseState);
          try {
            var pingedTasks = request.pingedTasks, i;
            for (i = 0; i < pingedTasks.length; i++) {
              var task = pingedTasks[i];
              retryTask(request, task);
            }
            pingedTasks.splice(0, i), request.destination !== null && flushCompletedQueues(request, request.destination);
          } catch (error2) {
            logRecoverableError(request, error2), fatalError(request, error2);
          } finally {
            setCurrentResponseState(prevResponseState), ReactCurrentDispatcher$1.current = prevDispatcher, ReactDebugCurrentFrame$1.getCurrentStack = prevGetCurrentStackImpl, prevDispatcher === Dispatcher && switchContext(prevContext);
          }
        }
      }
      function flushSubtree(request, destination, segment) {
        switch (segment.parentFlushed = !0, segment.status) {
          case PENDING: {
            var segmentID = segment.id = request.nextSegmentId++;
            return segment.lastPushedText = !1, segment.textEmbedded = !1, writePlaceholder(destination, request.responseState, segmentID);
          }
          case COMPLETED: {
            segment.status = FLUSHED;
            for (var r2 = !0, chunks = segment.chunks, chunkIdx = 0, children = segment.children, childIdx = 0; childIdx < children.length; childIdx++) {
              for (var nextChild = children[childIdx]; chunkIdx < nextChild.index; chunkIdx++)
                writeChunk(destination, chunks[chunkIdx]);
              r2 = flushSegment(request, destination, nextChild);
            }
            for (; chunkIdx < chunks.length - 1; chunkIdx++)
              writeChunk(destination, chunks[chunkIdx]);
            return chunkIdx < chunks.length && (r2 = writeChunkAndReturn(destination, chunks[chunkIdx])), r2;
          }
          default:
            throw new Error("Aborted, errored or already flushed boundaries should not be flushed again. This is a bug in React.");
        }
      }
      function flushSegment(request, destination, segment) {
        var boundary = segment.boundary;
        if (boundary === null)
          return flushSubtree(request, destination, segment);
        if (boundary.parentFlushed = !0, boundary.forceClientRender)
          return writeStartClientRenderedSuspenseBoundary$1(destination, request.responseState, boundary.errorDigest, boundary.errorMessage, boundary.errorComponentStack), flushSubtree(request, destination, segment), writeEndClientRenderedSuspenseBoundary$1(destination, request.responseState);
        if (boundary.pendingTasks > 0) {
          boundary.rootSegmentID = request.nextSegmentId++, boundary.completedSegments.length > 0 && request.partialBoundaries.push(boundary);
          var id = boundary.id = assignSuspenseBoundaryID(request.responseState);
          return writeStartPendingSuspenseBoundary(destination, request.responseState, id), flushSubtree(request, destination, segment), writeEndPendingSuspenseBoundary(destination, request.responseState);
        } else {
          if (boundary.byteSize > request.progressiveChunkSize)
            return boundary.rootSegmentID = request.nextSegmentId++, request.completedBoundaries.push(boundary), writeStartPendingSuspenseBoundary(destination, request.responseState, boundary.id), flushSubtree(request, destination, segment), writeEndPendingSuspenseBoundary(destination, request.responseState);
          writeStartCompletedSuspenseBoundary$1(destination, request.responseState);
          var completedSegments = boundary.completedSegments;
          if (completedSegments.length !== 1)
            throw new Error("A previously unvisited boundary must have exactly one root segment. This is a bug in React.");
          var contentSegment = completedSegments[0];
          return flushSegment(request, destination, contentSegment), writeEndCompletedSuspenseBoundary$1(destination, request.responseState);
        }
      }
      function flushClientRenderedBoundary(request, destination, boundary) {
        return writeClientRenderBoundaryInstruction(destination, request.responseState, boundary.id, boundary.errorDigest, boundary.errorMessage, boundary.errorComponentStack);
      }
      function flushSegmentContainer(request, destination, segment) {
        return writeStartSegment(destination, request.responseState, segment.formatContext, segment.id), flushSegment(request, destination, segment), writeEndSegment(destination, segment.formatContext);
      }
      function flushCompletedBoundary(request, destination, boundary) {
        for (var completedSegments = boundary.completedSegments, i = 0; i < completedSegments.length; i++) {
          var segment = completedSegments[i];
          flushPartiallyCompletedSegment(request, destination, boundary, segment);
        }
        return completedSegments.length = 0, writeCompletedBoundaryInstruction(destination, request.responseState, boundary.id, boundary.rootSegmentID);
      }
      function flushPartialBoundary(request, destination, boundary) {
        for (var completedSegments = boundary.completedSegments, i = 0; i < completedSegments.length; i++) {
          var segment = completedSegments[i];
          if (!flushPartiallyCompletedSegment(request, destination, boundary, segment))
            return i++, completedSegments.splice(0, i), !1;
        }
        return completedSegments.splice(0, i), !0;
      }
      function flushPartiallyCompletedSegment(request, destination, boundary, segment) {
        if (segment.status === FLUSHED)
          return !0;
        var segmentID = segment.id;
        if (segmentID === -1) {
          var rootSegmentID = segment.id = boundary.rootSegmentID;
          if (rootSegmentID === -1)
            throw new Error("A root segment ID must have been assigned by now. This is a bug in React.");
          return flushSegmentContainer(request, destination, segment);
        } else
          return flushSegmentContainer(request, destination, segment), writeCompletedSegmentInstruction(destination, request.responseState, segmentID);
      }
      function flushCompletedQueues(request, destination) {
        try {
          var completedRootSegment = request.completedRootSegment;
          completedRootSegment !== null && request.pendingRootTasks === 0 && (flushSegment(request, destination, completedRootSegment), request.completedRootSegment = null, writeCompletedRoot(destination, request.responseState));
          var clientRenderedBoundaries = request.clientRenderedBoundaries, i;
          for (i = 0; i < clientRenderedBoundaries.length; i++) {
            var boundary = clientRenderedBoundaries[i];
            if (!flushClientRenderedBoundary(request, destination, boundary)) {
              request.destination = null, i++, clientRenderedBoundaries.splice(0, i);
              return;
            }
          }
          clientRenderedBoundaries.splice(0, i);
          var completedBoundaries = request.completedBoundaries;
          for (i = 0; i < completedBoundaries.length; i++) {
            var _boundary = completedBoundaries[i];
            if (!flushCompletedBoundary(request, destination, _boundary)) {
              request.destination = null, i++, completedBoundaries.splice(0, i);
              return;
            }
          }
          completedBoundaries.splice(0, i);
          var partialBoundaries = request.partialBoundaries;
          for (i = 0; i < partialBoundaries.length; i++) {
            var _boundary2 = partialBoundaries[i];
            if (!flushPartialBoundary(request, destination, _boundary2)) {
              request.destination = null, i++, partialBoundaries.splice(0, i);
              return;
            }
          }
          partialBoundaries.splice(0, i);
          var largeBoundaries = request.completedBoundaries;
          for (i = 0; i < largeBoundaries.length; i++) {
            var _boundary3 = largeBoundaries[i];
            if (!flushCompletedBoundary(request, destination, _boundary3)) {
              request.destination = null, i++, largeBoundaries.splice(0, i);
              return;
            }
          }
          largeBoundaries.splice(0, i);
        } finally {
          request.allPendingTasks === 0 && request.pingedTasks.length === 0 && request.clientRenderedBoundaries.length === 0 && request.completedBoundaries.length === 0 && (request.abortableTasks.size !== 0 && error("There was still abortable task at the root when we closed. This is a bug in React."), close(destination));
        }
      }
      function startWork(request) {
        scheduleWork(function() {
          return performWork(request);
        });
      }
      function startFlowing(request, destination) {
        if (request.status === CLOSING) {
          request.status = CLOSED, closeWithError(destination, request.fatalError);
          return;
        }
        if (request.status !== CLOSED && request.destination === null) {
          request.destination = destination;
          try {
            flushCompletedQueues(request, destination);
          } catch (error2) {
            logRecoverableError(request, error2), fatalError(request, error2);
          }
        }
      }
      function abort(request, reason) {
        try {
          var abortableTasks = request.abortableTasks;
          abortableTasks.forEach(function(task) {
            return abortTask(task, request, reason);
          }), abortableTasks.clear(), request.destination !== null && flushCompletedQueues(request, request.destination);
        } catch (error2) {
          logRecoverableError(request, error2), fatalError(request, error2);
        }
      }
      function onError() {
      }
      function renderToStringImpl(children, options, generateStaticMarkup, abortReason) {
        var didFatal = !1, fatalError2 = null, result = "", destination = {
          push: function(chunk) {
            return chunk !== null && (result += chunk), !0;
          },
          destroy: function(error2) {
            didFatal = !0, fatalError2 = error2;
          }
        }, readyToStream = !1;
        function onShellReady() {
          readyToStream = !0;
        }
        var request = createRequest(children, createResponseState$1(generateStaticMarkup, options ? options.identifierPrefix : void 0), createRootFormatContext(), 1 / 0, onError, void 0, onShellReady, void 0, void 0);
        if (startWork(request), abort(request, abortReason), startFlowing(request, destination), didFatal)
          throw fatalError2;
        if (!readyToStream)
          throw new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
        return result;
      }
      function renderToString2(children, options) {
        return renderToStringImpl(children, options, !1, 'The server used "renderToString" which does not support Suspense. If you intended for this Suspense boundary to render the fallback content on the server consider throwing an Error somewhere within the Suspense boundary. If you intended to have the server wait for the suspended component please switch to "renderToReadableStream" which supports Suspense on the server');
      }
      function renderToStaticMarkup(children, options) {
        return renderToStringImpl(children, options, !0, 'The server used "renderToStaticMarkup" which does not support Suspense. If you intended to have the server wait for the suspended component please switch to "renderToReadableStream" which supports Suspense on the server');
      }
      function renderToNodeStream() {
        throw new Error("ReactDOMServer.renderToNodeStream(): The streaming API is not available in the browser. Use ReactDOMServer.renderToString() instead.");
      }
      function renderToStaticNodeStream() {
        throw new Error("ReactDOMServer.renderToStaticNodeStream(): The streaming API is not available in the browser. Use ReactDOMServer.renderToStaticMarkup() instead.");
      }
      exports.renderToNodeStream = renderToNodeStream, exports.renderToStaticMarkup = renderToStaticMarkup, exports.renderToStaticNodeStream = renderToStaticNodeStream, exports.renderToString = renderToString2, exports.version = ReactVersion;
    })();
  }
});

// ../../node_modules/.pnpm/react-dom@18.2.0_react@18.2.0/node_modules/react-dom/cjs/react-dom-server.browser.development.js
var require_react_dom_server_browser_development = __commonJS({
  "../../node_modules/.pnpm/react-dom@18.2.0_react@18.2.0/node_modules/react-dom/cjs/react-dom-server.browser.development.js"(exports) {
    "use strict";
    (function() {
      "use strict";
      var React8 = require_react(), ReactVersion = "18.2.0", ReactSharedInternals = React8.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
      function warn(format) {
        {
          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)
            args[_key - 1] = arguments[_key];
          printWarning("warn", format, args);
        }
      }
      function error(format) {
        {
          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)
            args[_key2 - 1] = arguments[_key2];
          printWarning("error", format, args);
        }
      }
      function printWarning(level, format, args) {
        {
          var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame, stack = ReactDebugCurrentFrame2.getStackAddendum();
          stack !== "" && (format += "%s", args = args.concat([stack]));
          var argsWithFormat = args.map(function(item) {
            return String(item);
          });
          argsWithFormat.unshift("Warning: " + format), Function.prototype.apply.call(console[level], console, argsWithFormat);
        }
      }
      function scheduleWork(callback) {
        callback();
      }
      var VIEW_SIZE = 512, currentView = null, writtenBytes = 0;
      function beginWriting(destination) {
        currentView = new Uint8Array(VIEW_SIZE), writtenBytes = 0;
      }
      function writeChunk(destination, chunk) {
        if (chunk.length !== 0) {
          if (chunk.length > VIEW_SIZE) {
            writtenBytes > 0 && (destination.enqueue(new Uint8Array(currentView.buffer, 0, writtenBytes)), currentView = new Uint8Array(VIEW_SIZE), writtenBytes = 0), destination.enqueue(chunk);
            return;
          }
          var bytesToWrite = chunk, allowableBytes = currentView.length - writtenBytes;
          allowableBytes < bytesToWrite.length && (allowableBytes === 0 ? destination.enqueue(currentView) : (currentView.set(bytesToWrite.subarray(0, allowableBytes), writtenBytes), destination.enqueue(currentView), bytesToWrite = bytesToWrite.subarray(allowableBytes)), currentView = new Uint8Array(VIEW_SIZE), writtenBytes = 0), currentView.set(bytesToWrite, writtenBytes), writtenBytes += bytesToWrite.length;
        }
      }
      function writeChunkAndReturn(destination, chunk) {
        return writeChunk(destination, chunk), !0;
      }
      function completeWriting(destination) {
        currentView && writtenBytes > 0 && (destination.enqueue(new Uint8Array(currentView.buffer, 0, writtenBytes)), currentView = null, writtenBytes = 0);
      }
      function close(destination) {
        destination.close();
      }
      var textEncoder = new TextEncoder();
      function stringToChunk(content) {
        return textEncoder.encode(content);
      }
      function stringToPrecomputedChunk(content) {
        return textEncoder.encode(content);
      }
      function closeWithError(destination, error2) {
        typeof destination.error == "function" ? destination.error(error2) : destination.close();
      }
      function typeName(value) {
        {
          var hasToStringTag = typeof Symbol == "function" && Symbol.toStringTag, type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
          return type;
        }
      }
      function willCoercionThrow(value) {
        try {
          return testStringCoercion(value), !1;
        } catch {
          return !0;
        }
      }
      function testStringCoercion(value) {
        return "" + value;
      }
      function checkAttributeStringCoercion(value, attributeName) {
        if (willCoercionThrow(value))
          return error("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value)), testStringCoercion(value);
      }
      function checkCSSPropertyStringCoercion(value, propName) {
        if (willCoercionThrow(value))
          return error("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value)), testStringCoercion(value);
      }
      function checkHtmlStringCoercion(value) {
        if (willCoercionThrow(value))
          return error("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value)), testStringCoercion(value);
      }
      var hasOwnProperty = Object.prototype.hasOwnProperty, RESERVED = 0, STRING = 1, BOOLEANISH_STRING = 2, BOOLEAN = 3, OVERLOADED_BOOLEAN = 4, NUMERIC = 5, POSITIVE_NUMERIC = 6, ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD", ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040", VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$"), illegalAttributeNameCache = {}, validatedAttributeNameCache = {};
      function isAttributeNameSafe(attributeName) {
        return hasOwnProperty.call(validatedAttributeNameCache, attributeName) ? !0 : hasOwnProperty.call(illegalAttributeNameCache, attributeName) ? !1 : VALID_ATTRIBUTE_NAME_REGEX.test(attributeName) ? (validatedAttributeNameCache[attributeName] = !0, !0) : (illegalAttributeNameCache[attributeName] = !0, error("Invalid attribute name: `%s`", attributeName), !1);
      }
      function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
        if (propertyInfo !== null && propertyInfo.type === RESERVED)
          return !1;
        switch (typeof value) {
          case "function":
          case "symbol":
            return !0;
          case "boolean": {
            if (isCustomComponentTag)
              return !1;
            if (propertyInfo !== null)
              return !propertyInfo.acceptsBooleans;
            var prefix3 = name.toLowerCase().slice(0, 5);
            return prefix3 !== "data-" && prefix3 !== "aria-";
          }
          default:
            return !1;
        }
      }
      function getPropertyInfo(name) {
        return properties.hasOwnProperty(name) ? properties[name] : null;
      }
      function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
        this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN, this.attributeName = attributeName, this.attributeNamespace = attributeNamespace, this.mustUseProperty = mustUseProperty, this.propertyName = name, this.type = type, this.sanitizeURL = sanitizeURL2, this.removeEmptyString = removeEmptyString;
      }
      var properties = {}, reservedProps = [
        "children",
        "dangerouslySetInnerHTML",
        "defaultValue",
        "defaultChecked",
        "innerHTML",
        "suppressContentEditableWarning",
        "suppressHydrationWarning",
        "style"
      ];
      reservedProps.forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          RESERVED,
          !1,
          name,
          null,
          !1,
          !1
        );
      }), [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
        var name = _ref[0], attributeName = _ref[1];
        properties[name] = new PropertyInfoRecord(
          name,
          STRING,
          !1,
          attributeName,
          null,
          !1,
          !1
        );
      }), ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          BOOLEANISH_STRING,
          !1,
          name.toLowerCase(),
          null,
          !1,
          !1
        );
      }), ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          BOOLEANISH_STRING,
          !1,
          name,
          null,
          !1,
          !1
        );
      }), [
        "allowFullScreen",
        "async",
        "autoFocus",
        "autoPlay",
        "controls",
        "default",
        "defer",
        "disabled",
        "disablePictureInPicture",
        "disableRemotePlayback",
        "formNoValidate",
        "hidden",
        "loop",
        "noModule",
        "noValidate",
        "open",
        "playsInline",
        "readOnly",
        "required",
        "reversed",
        "scoped",
        "seamless",
        "itemScope"
      ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          BOOLEAN,
          !1,
          name.toLowerCase(),
          null,
          !1,
          !1
        );
      }), [
        "checked",
        "multiple",
        "muted",
        "selected"
      ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          BOOLEAN,
          !0,
          name,
          null,
          !1,
          !1
        );
      }), [
        "capture",
        "download"
      ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          OVERLOADED_BOOLEAN,
          !1,
          name,
          null,
          !1,
          !1
        );
      }), [
        "cols",
        "rows",
        "size",
        "span"
      ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          POSITIVE_NUMERIC,
          !1,
          name,
          null,
          !1,
          !1
        );
      }), ["rowSpan", "start"].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          NUMERIC,
          !1,
          name.toLowerCase(),
          null,
          !1,
          !1
        );
      });
      var CAMELIZE = /[\-\:]([a-z])/g, capitalize = function(token) {
        return token[1].toUpperCase();
      };
      [
        "accent-height",
        "alignment-baseline",
        "arabic-form",
        "baseline-shift",
        "cap-height",
        "clip-path",
        "clip-rule",
        "color-interpolation",
        "color-interpolation-filters",
        "color-profile",
        "color-rendering",
        "dominant-baseline",
        "enable-background",
        "fill-opacity",
        "fill-rule",
        "flood-color",
        "flood-opacity",
        "font-family",
        "font-size",
        "font-size-adjust",
        "font-stretch",
        "font-style",
        "font-variant",
        "font-weight",
        "glyph-name",
        "glyph-orientation-horizontal",
        "glyph-orientation-vertical",
        "horiz-adv-x",
        "horiz-origin-x",
        "image-rendering",
        "letter-spacing",
        "lighting-color",
        "marker-end",
        "marker-mid",
        "marker-start",
        "overline-position",
        "overline-thickness",
        "paint-order",
        "panose-1",
        "pointer-events",
        "rendering-intent",
        "shape-rendering",
        "stop-color",
        "stop-opacity",
        "strikethrough-position",
        "strikethrough-thickness",
        "stroke-dasharray",
        "stroke-dashoffset",
        "stroke-linecap",
        "stroke-linejoin",
        "stroke-miterlimit",
        "stroke-opacity",
        "stroke-width",
        "text-anchor",
        "text-decoration",
        "text-rendering",
        "underline-position",
        "underline-thickness",
        "unicode-bidi",
        "unicode-range",
        "units-per-em",
        "v-alphabetic",
        "v-hanging",
        "v-ideographic",
        "v-mathematical",
        "vector-effect",
        "vert-adv-y",
        "vert-origin-x",
        "vert-origin-y",
        "word-spacing",
        "writing-mode",
        "xmlns:xlink",
        "x-height"
      ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(
          name,
          STRING,
          !1,
          attributeName,
          null,
          !1,
          !1
        );
      }), [
        "xlink:actuate",
        "xlink:arcrole",
        "xlink:role",
        "xlink:show",
        "xlink:title",
        "xlink:type"
      ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(
          name,
          STRING,
          !1,
          attributeName,
          "http://www.w3.org/1999/xlink",
          !1,
          !1
        );
      }), [
        "xml:base",
        "xml:lang",
        "xml:space"
      ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(
          name,
          STRING,
          !1,
          attributeName,
          "http://www.w3.org/XML/1998/namespace",
          !1,
          !1
        );
      }), ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
        properties[attributeName] = new PropertyInfoRecord(
          attributeName,
          STRING,
          !1,
          attributeName.toLowerCase(),
          null,
          !1,
          !1
        );
      });
      var xlinkHref = "xlinkHref";
      properties[xlinkHref] = new PropertyInfoRecord(
        "xlinkHref",
        STRING,
        !1,
        "xlink:href",
        "http://www.w3.org/1999/xlink",
        !0,
        !1
      ), ["src", "href", "action", "formAction"].forEach(function(attributeName) {
        properties[attributeName] = new PropertyInfoRecord(
          attributeName,
          STRING,
          !1,
          attributeName.toLowerCase(),
          null,
          !0,
          !0
        );
      });
      var isUnitlessNumber = {
        animationIterationCount: !0,
        aspectRatio: !0,
        borderImageOutset: !0,
        borderImageSlice: !0,
        borderImageWidth: !0,
        boxFlex: !0,
        boxFlexGroup: !0,
        boxOrdinalGroup: !0,
        columnCount: !0,
        columns: !0,
        flex: !0,
        flexGrow: !0,
        flexPositive: !0,
        flexShrink: !0,
        flexNegative: !0,
        flexOrder: !0,
        gridArea: !0,
        gridRow: !0,
        gridRowEnd: !0,
        gridRowSpan: !0,
        gridRowStart: !0,
        gridColumn: !0,
        gridColumnEnd: !0,
        gridColumnSpan: !0,
        gridColumnStart: !0,
        fontWeight: !0,
        lineClamp: !0,
        lineHeight: !0,
        opacity: !0,
        order: !0,
        orphans: !0,
        tabSize: !0,
        widows: !0,
        zIndex: !0,
        zoom: !0,
        fillOpacity: !0,
        floodOpacity: !0,
        stopOpacity: !0,
        strokeDasharray: !0,
        strokeDashoffset: !0,
        strokeMiterlimit: !0,
        strokeOpacity: !0,
        strokeWidth: !0
      };
      function prefixKey(prefix3, key) {
        return prefix3 + key.charAt(0).toUpperCase() + key.substring(1);
      }
      var prefixes = ["Webkit", "ms", "Moz", "O"];
      Object.keys(isUnitlessNumber).forEach(function(prop) {
        prefixes.forEach(function(prefix3) {
          isUnitlessNumber[prefixKey(prefix3, prop)] = isUnitlessNumber[prop];
        });
      });
      var hasReadOnlyValue = {
        button: !0,
        checkbox: !0,
        image: !0,
        hidden: !0,
        radio: !0,
        reset: !0,
        submit: !0
      };
      function checkControlledValueProps(tagName, props) {
        hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null || error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`."), props.onChange || props.readOnly || props.disabled || props.checked == null || error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
      }
      function isCustomComponent(tagName, props) {
        if (tagName.indexOf("-") === -1)
          return typeof props.is == "string";
        switch (tagName) {
          case "annotation-xml":
          case "color-profile":
          case "font-face":
          case "font-face-src":
          case "font-face-uri":
          case "font-face-format":
          case "font-face-name":
          case "missing-glyph":
            return !1;
          default:
            return !0;
        }
      }
      var ariaProperties = {
        "aria-current": 0,
        "aria-description": 0,
        "aria-details": 0,
        "aria-disabled": 0,
        "aria-hidden": 0,
        "aria-invalid": 0,
        "aria-keyshortcuts": 0,
        "aria-label": 0,
        "aria-roledescription": 0,
        "aria-autocomplete": 0,
        "aria-checked": 0,
        "aria-expanded": 0,
        "aria-haspopup": 0,
        "aria-level": 0,
        "aria-modal": 0,
        "aria-multiline": 0,
        "aria-multiselectable": 0,
        "aria-orientation": 0,
        "aria-placeholder": 0,
        "aria-pressed": 0,
        "aria-readonly": 0,
        "aria-required": 0,
        "aria-selected": 0,
        "aria-sort": 0,
        "aria-valuemax": 0,
        "aria-valuemin": 0,
        "aria-valuenow": 0,
        "aria-valuetext": 0,
        "aria-atomic": 0,
        "aria-busy": 0,
        "aria-live": 0,
        "aria-relevant": 0,
        "aria-dropeffect": 0,
        "aria-grabbed": 0,
        "aria-activedescendant": 0,
        "aria-colcount": 0,
        "aria-colindex": 0,
        "aria-colspan": 0,
        "aria-controls": 0,
        "aria-describedby": 0,
        "aria-errormessage": 0,
        "aria-flowto": 0,
        "aria-labelledby": 0,
        "aria-owns": 0,
        "aria-posinset": 0,
        "aria-rowcount": 0,
        "aria-rowindex": 0,
        "aria-rowspan": 0,
        "aria-setsize": 0
      }, warnedProperties = {}, rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$"), rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
      function validateProperty(tagName, name) {
        {
          if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name])
            return !0;
          if (rARIACamel.test(name)) {
            var ariaName = "aria-" + name.slice(4).toLowerCase(), correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
            if (correctName == null)
              return error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name), warnedProperties[name] = !0, !0;
            if (name !== correctName)
              return error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName), warnedProperties[name] = !0, !0;
          }
          if (rARIA.test(name)) {
            var lowerCasedName = name.toLowerCase(), standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
            if (standardName == null)
              return warnedProperties[name] = !0, !1;
            if (name !== standardName)
              return error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName), warnedProperties[name] = !0, !0;
          }
        }
        return !0;
      }
      function warnInvalidARIAProps(type, props) {
        {
          var invalidProps = [];
          for (var key in props) {
            var isValid2 = validateProperty(type, key);
            isValid2 || invalidProps.push(key);
          }
          var unknownPropString = invalidProps.map(function(prop) {
            return "`" + prop + "`";
          }).join(", ");
          invalidProps.length === 1 ? error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type) : invalidProps.length > 1 && error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
        }
      }
      function validateProperties(type, props) {
        isCustomComponent(type, props) || warnInvalidARIAProps(type, props);
      }
      var didWarnValueNull = !1;
      function validateProperties$1(type, props) {
        {
          if (type !== "input" && type !== "textarea" && type !== "select")
            return;
          props != null && props.value === null && !didWarnValueNull && (didWarnValueNull = !0, type === "select" && props.multiple ? error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type) : error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type));
        }
      }
      var possibleStandardNames = {
        accept: "accept",
        acceptcharset: "acceptCharset",
        "accept-charset": "acceptCharset",
        accesskey: "accessKey",
        action: "action",
        allowfullscreen: "allowFullScreen",
        alt: "alt",
        as: "as",
        async: "async",
        autocapitalize: "autoCapitalize",
        autocomplete: "autoComplete",
        autocorrect: "autoCorrect",
        autofocus: "autoFocus",
        autoplay: "autoPlay",
        autosave: "autoSave",
        capture: "capture",
        cellpadding: "cellPadding",
        cellspacing: "cellSpacing",
        challenge: "challenge",
        charset: "charSet",
        checked: "checked",
        children: "children",
        cite: "cite",
        class: "className",
        classid: "classID",
        classname: "className",
        cols: "cols",
        colspan: "colSpan",
        content: "content",
        contenteditable: "contentEditable",
        contextmenu: "contextMenu",
        controls: "controls",
        controlslist: "controlsList",
        coords: "coords",
        crossorigin: "crossOrigin",
        dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
        data: "data",
        datetime: "dateTime",
        default: "default",
        defaultchecked: "defaultChecked",
        defaultvalue: "defaultValue",
        defer: "defer",
        dir: "dir",
        disabled: "disabled",
        disablepictureinpicture: "disablePictureInPicture",
        disableremoteplayback: "disableRemotePlayback",
        download: "download",
        draggable: "draggable",
        enctype: "encType",
        enterkeyhint: "enterKeyHint",
        for: "htmlFor",
        form: "form",
        formmethod: "formMethod",
        formaction: "formAction",
        formenctype: "formEncType",
        formnovalidate: "formNoValidate",
        formtarget: "formTarget",
        frameborder: "frameBorder",
        headers: "headers",
        height: "height",
        hidden: "hidden",
        high: "high",
        href: "href",
        hreflang: "hrefLang",
        htmlfor: "htmlFor",
        httpequiv: "httpEquiv",
        "http-equiv": "httpEquiv",
        icon: "icon",
        id: "id",
        imagesizes: "imageSizes",
        imagesrcset: "imageSrcSet",
        innerhtml: "innerHTML",
        inputmode: "inputMode",
        integrity: "integrity",
        is: "is",
        itemid: "itemID",
        itemprop: "itemProp",
        itemref: "itemRef",
        itemscope: "itemScope",
        itemtype: "itemType",
        keyparams: "keyParams",
        keytype: "keyType",
        kind: "kind",
        label: "label",
        lang: "lang",
        list: "list",
        loop: "loop",
        low: "low",
        manifest: "manifest",
        marginwidth: "marginWidth",
        marginheight: "marginHeight",
        max: "max",
        maxlength: "maxLength",
        media: "media",
        mediagroup: "mediaGroup",
        method: "method",
        min: "min",
        minlength: "minLength",
        multiple: "multiple",
        muted: "muted",
        name: "name",
        nomodule: "noModule",
        nonce: "nonce",
        novalidate: "noValidate",
        open: "open",
        optimum: "optimum",
        pattern: "pattern",
        placeholder: "placeholder",
        playsinline: "playsInline",
        poster: "poster",
        preload: "preload",
        profile: "profile",
        radiogroup: "radioGroup",
        readonly: "readOnly",
        referrerpolicy: "referrerPolicy",
        rel: "rel",
        required: "required",
        reversed: "reversed",
        role: "role",
        rows: "rows",
        rowspan: "rowSpan",
        sandbox: "sandbox",
        scope: "scope",
        scoped: "scoped",
        scrolling: "scrolling",
        seamless: "seamless",
        selected: "selected",
        shape: "shape",
        size: "size",
        sizes: "sizes",
        span: "span",
        spellcheck: "spellCheck",
        src: "src",
        srcdoc: "srcDoc",
        srclang: "srcLang",
        srcset: "srcSet",
        start: "start",
        step: "step",
        style: "style",
        summary: "summary",
        tabindex: "tabIndex",
        target: "target",
        title: "title",
        type: "type",
        usemap: "useMap",
        value: "value",
        width: "width",
        wmode: "wmode",
        wrap: "wrap",
        about: "about",
        accentheight: "accentHeight",
        "accent-height": "accentHeight",
        accumulate: "accumulate",
        additive: "additive",
        alignmentbaseline: "alignmentBaseline",
        "alignment-baseline": "alignmentBaseline",
        allowreorder: "allowReorder",
        alphabetic: "alphabetic",
        amplitude: "amplitude",
        arabicform: "arabicForm",
        "arabic-form": "arabicForm",
        ascent: "ascent",
        attributename: "attributeName",
        attributetype: "attributeType",
        autoreverse: "autoReverse",
        azimuth: "azimuth",
        basefrequency: "baseFrequency",
        baselineshift: "baselineShift",
        "baseline-shift": "baselineShift",
        baseprofile: "baseProfile",
        bbox: "bbox",
        begin: "begin",
        bias: "bias",
        by: "by",
        calcmode: "calcMode",
        capheight: "capHeight",
        "cap-height": "capHeight",
        clip: "clip",
        clippath: "clipPath",
        "clip-path": "clipPath",
        clippathunits: "clipPathUnits",
        cliprule: "clipRule",
        "clip-rule": "clipRule",
        color: "color",
        colorinterpolation: "colorInterpolation",
        "color-interpolation": "colorInterpolation",
        colorinterpolationfilters: "colorInterpolationFilters",
        "color-interpolation-filters": "colorInterpolationFilters",
        colorprofile: "colorProfile",
        "color-profile": "colorProfile",
        colorrendering: "colorRendering",
        "color-rendering": "colorRendering",
        contentscripttype: "contentScriptType",
        contentstyletype: "contentStyleType",
        cursor: "cursor",
        cx: "cx",
        cy: "cy",
        d: "d",
        datatype: "datatype",
        decelerate: "decelerate",
        descent: "descent",
        diffuseconstant: "diffuseConstant",
        direction: "direction",
        display: "display",
        divisor: "divisor",
        dominantbaseline: "dominantBaseline",
        "dominant-baseline": "dominantBaseline",
        dur: "dur",
        dx: "dx",
        dy: "dy",
        edgemode: "edgeMode",
        elevation: "elevation",
        enablebackground: "enableBackground",
        "enable-background": "enableBackground",
        end: "end",
        exponent: "exponent",
        externalresourcesrequired: "externalResourcesRequired",
        fill: "fill",
        fillopacity: "fillOpacity",
        "fill-opacity": "fillOpacity",
        fillrule: "fillRule",
        "fill-rule": "fillRule",
        filter: "filter",
        filterres: "filterRes",
        filterunits: "filterUnits",
        floodopacity: "floodOpacity",
        "flood-opacity": "floodOpacity",
        floodcolor: "floodColor",
        "flood-color": "floodColor",
        focusable: "focusable",
        fontfamily: "fontFamily",
        "font-family": "fontFamily",
        fontsize: "fontSize",
        "font-size": "fontSize",
        fontsizeadjust: "fontSizeAdjust",
        "font-size-adjust": "fontSizeAdjust",
        fontstretch: "fontStretch",
        "font-stretch": "fontStretch",
        fontstyle: "fontStyle",
        "font-style": "fontStyle",
        fontvariant: "fontVariant",
        "font-variant": "fontVariant",
        fontweight: "fontWeight",
        "font-weight": "fontWeight",
        format: "format",
        from: "from",
        fx: "fx",
        fy: "fy",
        g1: "g1",
        g2: "g2",
        glyphname: "glyphName",
        "glyph-name": "glyphName",
        glyphorientationhorizontal: "glyphOrientationHorizontal",
        "glyph-orientation-horizontal": "glyphOrientationHorizontal",
        glyphorientationvertical: "glyphOrientationVertical",
        "glyph-orientation-vertical": "glyphOrientationVertical",
        glyphref: "glyphRef",
        gradienttransform: "gradientTransform",
        gradientunits: "gradientUnits",
        hanging: "hanging",
        horizadvx: "horizAdvX",
        "horiz-adv-x": "horizAdvX",
        horizoriginx: "horizOriginX",
        "horiz-origin-x": "horizOriginX",
        ideographic: "ideographic",
        imagerendering: "imageRendering",
        "image-rendering": "imageRendering",
        in2: "in2",
        in: "in",
        inlist: "inlist",
        intercept: "intercept",
        k1: "k1",
        k2: "k2",
        k3: "k3",
        k4: "k4",
        k: "k",
        kernelmatrix: "kernelMatrix",
        kernelunitlength: "kernelUnitLength",
        kerning: "kerning",
        keypoints: "keyPoints",
        keysplines: "keySplines",
        keytimes: "keyTimes",
        lengthadjust: "lengthAdjust",
        letterspacing: "letterSpacing",
        "letter-spacing": "letterSpacing",
        lightingcolor: "lightingColor",
        "lighting-color": "lightingColor",
        limitingconeangle: "limitingConeAngle",
        local: "local",
        markerend: "markerEnd",
        "marker-end": "markerEnd",
        markerheight: "markerHeight",
        markermid: "markerMid",
        "marker-mid": "markerMid",
        markerstart: "markerStart",
        "marker-start": "markerStart",
        markerunits: "markerUnits",
        markerwidth: "markerWidth",
        mask: "mask",
        maskcontentunits: "maskContentUnits",
        maskunits: "maskUnits",
        mathematical: "mathematical",
        mode: "mode",
        numoctaves: "numOctaves",
        offset: "offset",
        opacity: "opacity",
        operator: "operator",
        order: "order",
        orient: "orient",
        orientation: "orientation",
        origin: "origin",
        overflow: "overflow",
        overlineposition: "overlinePosition",
        "overline-position": "overlinePosition",
        overlinethickness: "overlineThickness",
        "overline-thickness": "overlineThickness",
        paintorder: "paintOrder",
        "paint-order": "paintOrder",
        panose1: "panose1",
        "panose-1": "panose1",
        pathlength: "pathLength",
        patterncontentunits: "patternContentUnits",
        patterntransform: "patternTransform",
        patternunits: "patternUnits",
        pointerevents: "pointerEvents",
        "pointer-events": "pointerEvents",
        points: "points",
        pointsatx: "pointsAtX",
        pointsaty: "pointsAtY",
        pointsatz: "pointsAtZ",
        prefix: "prefix",
        preservealpha: "preserveAlpha",
        preserveaspectratio: "preserveAspectRatio",
        primitiveunits: "primitiveUnits",
        property: "property",
        r: "r",
        radius: "radius",
        refx: "refX",
        refy: "refY",
        renderingintent: "renderingIntent",
        "rendering-intent": "renderingIntent",
        repeatcount: "repeatCount",
        repeatdur: "repeatDur",
        requiredextensions: "requiredExtensions",
        requiredfeatures: "requiredFeatures",
        resource: "resource",
        restart: "restart",
        result: "result",
        results: "results",
        rotate: "rotate",
        rx: "rx",
        ry: "ry",
        scale: "scale",
        security: "security",
        seed: "seed",
        shaperendering: "shapeRendering",
        "shape-rendering": "shapeRendering",
        slope: "slope",
        spacing: "spacing",
        specularconstant: "specularConstant",
        specularexponent: "specularExponent",
        speed: "speed",
        spreadmethod: "spreadMethod",
        startoffset: "startOffset",
        stddeviation: "stdDeviation",
        stemh: "stemh",
        stemv: "stemv",
        stitchtiles: "stitchTiles",
        stopcolor: "stopColor",
        "stop-color": "stopColor",
        stopopacity: "stopOpacity",
        "stop-opacity": "stopOpacity",
        strikethroughposition: "strikethroughPosition",
        "strikethrough-position": "strikethroughPosition",
        strikethroughthickness: "strikethroughThickness",
        "strikethrough-thickness": "strikethroughThickness",
        string: "string",
        stroke: "stroke",
        strokedasharray: "strokeDasharray",
        "stroke-dasharray": "strokeDasharray",
        strokedashoffset: "strokeDashoffset",
        "stroke-dashoffset": "strokeDashoffset",
        strokelinecap: "strokeLinecap",
        "stroke-linecap": "strokeLinecap",
        strokelinejoin: "strokeLinejoin",
        "stroke-linejoin": "strokeLinejoin",
        strokemiterlimit: "strokeMiterlimit",
        "stroke-miterlimit": "strokeMiterlimit",
        strokewidth: "strokeWidth",
        "stroke-width": "strokeWidth",
        strokeopacity: "strokeOpacity",
        "stroke-opacity": "strokeOpacity",
        suppresscontenteditablewarning: "suppressContentEditableWarning",
        suppresshydrationwarning: "suppressHydrationWarning",
        surfacescale: "surfaceScale",
        systemlanguage: "systemLanguage",
        tablevalues: "tableValues",
        targetx: "targetX",
        targety: "targetY",
        textanchor: "textAnchor",
        "text-anchor": "textAnchor",
        textdecoration: "textDecoration",
        "text-decoration": "textDecoration",
        textlength: "textLength",
        textrendering: "textRendering",
        "text-rendering": "textRendering",
        to: "to",
        transform: "transform",
        typeof: "typeof",
        u1: "u1",
        u2: "u2",
        underlineposition: "underlinePosition",
        "underline-position": "underlinePosition",
        underlinethickness: "underlineThickness",
        "underline-thickness": "underlineThickness",
        unicode: "unicode",
        unicodebidi: "unicodeBidi",
        "unicode-bidi": "unicodeBidi",
        unicoderange: "unicodeRange",
        "unicode-range": "unicodeRange",
        unitsperem: "unitsPerEm",
        "units-per-em": "unitsPerEm",
        unselectable: "unselectable",
        valphabetic: "vAlphabetic",
        "v-alphabetic": "vAlphabetic",
        values: "values",
        vectoreffect: "vectorEffect",
        "vector-effect": "vectorEffect",
        version: "version",
        vertadvy: "vertAdvY",
        "vert-adv-y": "vertAdvY",
        vertoriginx: "vertOriginX",
        "vert-origin-x": "vertOriginX",
        vertoriginy: "vertOriginY",
        "vert-origin-y": "vertOriginY",
        vhanging: "vHanging",
        "v-hanging": "vHanging",
        videographic: "vIdeographic",
        "v-ideographic": "vIdeographic",
        viewbox: "viewBox",
        viewtarget: "viewTarget",
        visibility: "visibility",
        vmathematical: "vMathematical",
        "v-mathematical": "vMathematical",
        vocab: "vocab",
        widths: "widths",
        wordspacing: "wordSpacing",
        "word-spacing": "wordSpacing",
        writingmode: "writingMode",
        "writing-mode": "writingMode",
        x1: "x1",
        x2: "x2",
        x: "x",
        xchannelselector: "xChannelSelector",
        xheight: "xHeight",
        "x-height": "xHeight",
        xlinkactuate: "xlinkActuate",
        "xlink:actuate": "xlinkActuate",
        xlinkarcrole: "xlinkArcrole",
        "xlink:arcrole": "xlinkArcrole",
        xlinkhref: "xlinkHref",
        "xlink:href": "xlinkHref",
        xlinkrole: "xlinkRole",
        "xlink:role": "xlinkRole",
        xlinkshow: "xlinkShow",
        "xlink:show": "xlinkShow",
        xlinktitle: "xlinkTitle",
        "xlink:title": "xlinkTitle",
        xlinktype: "xlinkType",
        "xlink:type": "xlinkType",
        xmlbase: "xmlBase",
        "xml:base": "xmlBase",
        xmllang: "xmlLang",
        "xml:lang": "xmlLang",
        xmlns: "xmlns",
        "xml:space": "xmlSpace",
        xmlnsxlink: "xmlnsXlink",
        "xmlns:xlink": "xmlnsXlink",
        xmlspace: "xmlSpace",
        y1: "y1",
        y2: "y2",
        y: "y",
        ychannelselector: "yChannelSelector",
        z: "z",
        zoomandpan: "zoomAndPan"
      }, validateProperty$1 = function() {
      };
      {
        var warnedProperties$1 = {}, EVENT_NAME_REGEX = /^on./, INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/, rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$"), rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
        validateProperty$1 = function(tagName, name, value, eventRegistry) {
          if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name])
            return !0;
          var lowerCasedName = name.toLowerCase();
          if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout")
            return error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React."), warnedProperties$1[name] = !0, !0;
          if (eventRegistry != null) {
            var registrationNameDependencies = eventRegistry.registrationNameDependencies, possibleRegistrationNames = eventRegistry.possibleRegistrationNames;
            if (registrationNameDependencies.hasOwnProperty(name))
              return !0;
            var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;
            if (registrationName != null)
              return error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName), warnedProperties$1[name] = !0, !0;
            if (EVENT_NAME_REGEX.test(name))
              return error("Unknown event handler property `%s`. It will be ignored.", name), warnedProperties$1[name] = !0, !0;
          } else if (EVENT_NAME_REGEX.test(name))
            return INVALID_EVENT_NAME_REGEX.test(name) && error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name), warnedProperties$1[name] = !0, !0;
          if (rARIA$1.test(name) || rARIACamel$1.test(name))
            return !0;
          if (lowerCasedName === "innerhtml")
            return error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`."), warnedProperties$1[name] = !0, !0;
          if (lowerCasedName === "aria")
            return error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead."), warnedProperties$1[name] = !0, !0;
          if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value != "string")
            return error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value), warnedProperties$1[name] = !0, !0;
          if (typeof value == "number" && isNaN(value))
            return error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name), warnedProperties$1[name] = !0, !0;
          var propertyInfo = getPropertyInfo(name), isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
          if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
            var standardName = possibleStandardNames[lowerCasedName];
            if (standardName !== name)
              return error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName), warnedProperties$1[name] = !0, !0;
          } else if (!isReserved && name !== lowerCasedName)
            return error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName), warnedProperties$1[name] = !0, !0;
          return typeof value == "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, !1) ? (value ? error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name) : error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name), warnedProperties$1[name] = !0, !0) : isReserved ? !0 : shouldRemoveAttributeWithWarning(name, value, propertyInfo, !1) ? (warnedProperties$1[name] = !0, !1) : ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN && (error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value), warnedProperties$1[name] = !0), !0);
        };
      }
      var warnUnknownProperties = function(type, props, eventRegistry) {
        {
          var unknownProps = [];
          for (var key in props) {
            var isValid2 = validateProperty$1(type, key, props[key], eventRegistry);
            isValid2 || unknownProps.push(key);
          }
          var unknownPropString = unknownProps.map(function(prop) {
            return "`" + prop + "`";
          }).join(", ");
          unknownProps.length === 1 ? error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type) : unknownProps.length > 1 && error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
        }
      };
      function validateProperties$2(type, props, eventRegistry) {
        isCustomComponent(type, props) || warnUnknownProperties(type, props, eventRegistry);
      }
      var warnValidStyle = function() {
      };
      {
        var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/, msPattern = /^-ms-/, hyphenPattern = /-(.)/g, badStyleValueWithSemicolonPattern = /;\s*$/, warnedStyleNames = {}, warnedStyleValues = {}, warnedForNaNValue = !1, warnedForInfinityValue = !1, camelize = function(string) {
          return string.replace(hyphenPattern, function(_, character) {
            return character.toUpperCase();
          });
        }, warnHyphenatedStyleName = function(name) {
          warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name] || (warnedStyleNames[name] = !0, error(
            "Unsupported style property %s. Did you mean %s?",
            name,
            camelize(name.replace(msPattern, "ms-"))
          ));
        }, warnBadVendoredStyleName = function(name) {
          warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name] || (warnedStyleNames[name] = !0, error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1)));
        }, warnStyleValueWithSemicolon = function(name, value) {
          warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value] || (warnedStyleValues[value] = !0, error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, "")));
        }, warnStyleValueIsNaN = function(name, value) {
          warnedForNaNValue || (warnedForNaNValue = !0, error("`NaN` is an invalid value for the `%s` css style property.", name));
        }, warnStyleValueIsInfinity = function(name, value) {
          warnedForInfinityValue || (warnedForInfinityValue = !0, error("`Infinity` is an invalid value for the `%s` css style property.", name));
        };
        warnValidStyle = function(name, value) {
          name.indexOf("-") > -1 ? warnHyphenatedStyleName(name) : badVendoredStyleNamePattern.test(name) ? warnBadVendoredStyleName(name) : badStyleValueWithSemicolonPattern.test(value) && warnStyleValueWithSemicolon(name, value), typeof value == "number" && (isNaN(value) ? warnStyleValueIsNaN(name, value) : isFinite(value) || warnStyleValueIsInfinity(name, value));
        };
      }
      var warnValidStyle$1 = warnValidStyle, matchHtmlRegExp = /["'&<>]/;
      function escapeHtml2(string) {
        checkHtmlStringCoercion(string);
        var str = "" + string, match = matchHtmlRegExp.exec(str);
        if (!match)
          return str;
        var escape2, html = "", index, lastIndex = 0;
        for (index = match.index; index < str.length; index++) {
          switch (str.charCodeAt(index)) {
            case 34:
              escape2 = "&quot;";
              break;
            case 38:
              escape2 = "&amp;";
              break;
            case 39:
              escape2 = "&#x27;";
              break;
            case 60:
              escape2 = "&lt;";
              break;
            case 62:
              escape2 = "&gt;";
              break;
            default:
              continue;
          }
          lastIndex !== index && (html += str.substring(lastIndex, index)), lastIndex = index + 1, html += escape2;
        }
        return lastIndex !== index ? html + str.substring(lastIndex, index) : html;
      }
      function escapeTextForBrowser(text) {
        return typeof text == "boolean" || typeof text == "number" ? "" + text : escapeHtml2(text);
      }
      var uppercasePattern = /([A-Z])/g, msPattern$1 = /^ms-/;
      function hyphenateStyleName(name) {
        return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern$1, "-ms-");
      }
      var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i, didWarn = !1;
      function sanitizeURL(url) {
        !didWarn && isJavaScriptProtocol.test(url) && (didWarn = !0, error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url)));
      }
      var isArrayImpl = Array.isArray;
      function isArray(a) {
        return isArrayImpl(a);
      }
      var startInlineScript = stringToPrecomputedChunk("<script>"), endInlineScript = stringToPrecomputedChunk("<\/script>"), startScriptSrc = stringToPrecomputedChunk('<script src="'), startModuleSrc = stringToPrecomputedChunk('<script type="module" src="'), endAsyncScript = stringToPrecomputedChunk('" async=""><\/script>');
      function escapeBootstrapScriptContent(scriptText) {
        return checkHtmlStringCoercion(scriptText), ("" + scriptText).replace(scriptRegex, scriptReplacer);
      }
      var scriptRegex = /(<\/|<)(s)(cript)/gi, scriptReplacer = function(match, prefix3, s, suffix) {
        return "" + prefix3 + (s === "s" ? "\\u0073" : "\\u0053") + suffix;
      };
      function createResponseState(identifierPrefix, nonce, bootstrapScriptContent, bootstrapScripts, bootstrapModules) {
        var idPrefix = identifierPrefix === void 0 ? "" : identifierPrefix, inlineScriptWithNonce = nonce === void 0 ? startInlineScript : stringToPrecomputedChunk('<script nonce="' + escapeTextForBrowser(nonce) + '">'), bootstrapChunks = [];
        if (bootstrapScriptContent !== void 0 && bootstrapChunks.push(inlineScriptWithNonce, stringToChunk(escapeBootstrapScriptContent(bootstrapScriptContent)), endInlineScript), bootstrapScripts !== void 0)
          for (var i = 0; i < bootstrapScripts.length; i++)
            bootstrapChunks.push(startScriptSrc, stringToChunk(escapeTextForBrowser(bootstrapScripts[i])), endAsyncScript);
        if (bootstrapModules !== void 0)
          for (var _i = 0; _i < bootstrapModules.length; _i++)
            bootstrapChunks.push(startModuleSrc, stringToChunk(escapeTextForBrowser(bootstrapModules[_i])), endAsyncScript);
        return {
          bootstrapChunks,
          startInlineScript: inlineScriptWithNonce,
          placeholderPrefix: stringToPrecomputedChunk(idPrefix + "P:"),
          segmentPrefix: stringToPrecomputedChunk(idPrefix + "S:"),
          boundaryPrefix: idPrefix + "B:",
          idPrefix,
          nextSuspenseID: 0,
          sentCompleteSegmentFunction: !1,
          sentCompleteBoundaryFunction: !1,
          sentClientRenderFunction: !1
        };
      }
      var ROOT_HTML_MODE = 0, HTML_MODE = 1, SVG_MODE = 2, MATHML_MODE = 3, HTML_TABLE_MODE = 4, HTML_TABLE_BODY_MODE = 5, HTML_TABLE_ROW_MODE = 6, HTML_COLGROUP_MODE = 7;
      function createFormatContext(insertionMode, selectedValue) {
        return {
          insertionMode,
          selectedValue
        };
      }
      function createRootFormatContext(namespaceURI) {
        var insertionMode = namespaceURI === "http://www.w3.org/2000/svg" ? SVG_MODE : namespaceURI === "http://www.w3.org/1998/Math/MathML" ? MATHML_MODE : ROOT_HTML_MODE;
        return createFormatContext(insertionMode, null);
      }
      function getChildFormatContext(parentContext, type, props) {
        switch (type) {
          case "select":
            return createFormatContext(HTML_MODE, props.value != null ? props.value : props.defaultValue);
          case "svg":
            return createFormatContext(SVG_MODE, null);
          case "math":
            return createFormatContext(MATHML_MODE, null);
          case "foreignObject":
            return createFormatContext(HTML_MODE, null);
          case "table":
            return createFormatContext(HTML_TABLE_MODE, null);
          case "thead":
          case "tbody":
          case "tfoot":
            return createFormatContext(HTML_TABLE_BODY_MODE, null);
          case "colgroup":
            return createFormatContext(HTML_COLGROUP_MODE, null);
          case "tr":
            return createFormatContext(HTML_TABLE_ROW_MODE, null);
        }
        return parentContext.insertionMode >= HTML_TABLE_MODE || parentContext.insertionMode === ROOT_HTML_MODE ? createFormatContext(HTML_MODE, null) : parentContext;
      }
      var UNINITIALIZED_SUSPENSE_BOUNDARY_ID = null;
      function assignSuspenseBoundaryID(responseState) {
        var generatedID = responseState.nextSuspenseID++;
        return stringToPrecomputedChunk(responseState.boundaryPrefix + generatedID.toString(16));
      }
      function makeId(responseState, treeId, localId) {
        var idPrefix = responseState.idPrefix, id = ":" + idPrefix + "R" + treeId;
        return localId > 0 && (id += "H" + localId.toString(32)), id + ":";
      }
      function encodeHTMLTextNode(text) {
        return escapeTextForBrowser(text);
      }
      var textSeparator = stringToPrecomputedChunk("<!-- -->");
      function pushTextInstance(target, text, responseState, textEmbedded) {
        return text === "" ? textEmbedded : (textEmbedded && target.push(textSeparator), target.push(stringToChunk(encodeHTMLTextNode(text))), !0);
      }
      function pushSegmentFinale(target, responseState, lastPushedText, textEmbedded) {
        lastPushedText && textEmbedded && target.push(textSeparator);
      }
      var styleNameCache = /* @__PURE__ */ new Map();
      function processStyleName(styleName) {
        var chunk = styleNameCache.get(styleName);
        if (chunk !== void 0)
          return chunk;
        var result = stringToPrecomputedChunk(escapeTextForBrowser(hyphenateStyleName(styleName)));
        return styleNameCache.set(styleName, result), result;
      }
      var styleAttributeStart = stringToPrecomputedChunk(' style="'), styleAssign = stringToPrecomputedChunk(":"), styleSeparator = stringToPrecomputedChunk(";");
      function pushStyle(target, responseState, style) {
        if (typeof style != "object")
          throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
        var isFirst = !0;
        for (var styleName in style)
          if (!!hasOwnProperty.call(style, styleName)) {
            var styleValue = style[styleName];
            if (!(styleValue == null || typeof styleValue == "boolean" || styleValue === "")) {
              var nameChunk = void 0, valueChunk = void 0, isCustomProperty = styleName.indexOf("--") === 0;
              isCustomProperty ? (nameChunk = stringToChunk(escapeTextForBrowser(styleName)), checkCSSPropertyStringCoercion(styleValue, styleName), valueChunk = stringToChunk(escapeTextForBrowser(("" + styleValue).trim()))) : (warnValidStyle$1(styleName, styleValue), nameChunk = processStyleName(styleName), typeof styleValue == "number" ? styleValue !== 0 && !hasOwnProperty.call(isUnitlessNumber, styleName) ? valueChunk = stringToChunk(styleValue + "px") : valueChunk = stringToChunk("" + styleValue) : (checkCSSPropertyStringCoercion(styleValue, styleName), valueChunk = stringToChunk(escapeTextForBrowser(("" + styleValue).trim())))), isFirst ? (isFirst = !1, target.push(styleAttributeStart, nameChunk, styleAssign, valueChunk)) : target.push(styleSeparator, nameChunk, styleAssign, valueChunk);
            }
          }
        isFirst || target.push(attributeEnd);
      }
      var attributeSeparator = stringToPrecomputedChunk(" "), attributeAssign = stringToPrecomputedChunk('="'), attributeEnd = stringToPrecomputedChunk('"'), attributeEmptyString = stringToPrecomputedChunk('=""');
      function pushAttribute(target, responseState, name, value) {
        switch (name) {
          case "style": {
            pushStyle(target, responseState, value);
            return;
          }
          case "defaultValue":
          case "defaultChecked":
          case "innerHTML":
          case "suppressContentEditableWarning":
          case "suppressHydrationWarning":
            return;
        }
        if (!(name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N"))) {
          var propertyInfo = getPropertyInfo(name);
          if (propertyInfo !== null) {
            switch (typeof value) {
              case "function":
              case "symbol":
                return;
              case "boolean":
                if (!propertyInfo.acceptsBooleans)
                  return;
            }
            var attributeName = propertyInfo.attributeName, attributeNameChunk = stringToChunk(attributeName);
            switch (propertyInfo.type) {
              case BOOLEAN:
                value && target.push(attributeSeparator, attributeNameChunk, attributeEmptyString);
                return;
              case OVERLOADED_BOOLEAN:
                value === !0 ? target.push(attributeSeparator, attributeNameChunk, attributeEmptyString) : value === !1 || target.push(attributeSeparator, attributeNameChunk, attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);
                return;
              case NUMERIC:
                isNaN(value) || target.push(attributeSeparator, attributeNameChunk, attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);
                break;
              case POSITIVE_NUMERIC:
                !isNaN(value) && value >= 1 && target.push(attributeSeparator, attributeNameChunk, attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);
                break;
              default:
                propertyInfo.sanitizeURL && (checkAttributeStringCoercion(value, attributeName), value = "" + value, sanitizeURL(value)), target.push(attributeSeparator, attributeNameChunk, attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);
            }
          } else if (isAttributeNameSafe(name)) {
            switch (typeof value) {
              case "function":
              case "symbol":
                return;
              case "boolean": {
                var prefix3 = name.toLowerCase().slice(0, 5);
                if (prefix3 !== "data-" && prefix3 !== "aria-")
                  return;
              }
            }
            target.push(attributeSeparator, stringToChunk(name), attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);
          }
        }
      }
      var endOfStartTag = stringToPrecomputedChunk(">"), endOfStartTagSelfClosing = stringToPrecomputedChunk("/>");
      function pushInnerHTML(target, innerHTML, children) {
        if (innerHTML != null) {
          if (children != null)
            throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
          if (typeof innerHTML != "object" || !("__html" in innerHTML))
            throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
          var html = innerHTML.__html;
          html != null && (checkHtmlStringCoercion(html), target.push(stringToChunk("" + html)));
        }
      }
      var didWarnDefaultInputValue = !1, didWarnDefaultChecked = !1, didWarnDefaultSelectValue = !1, didWarnDefaultTextareaValue = !1, didWarnInvalidOptionChildren = !1, didWarnInvalidOptionInnerHTML = !1, didWarnSelectedSetOnOption = !1;
      function checkSelectProp(props, propName) {
        {
          var value = props[propName];
          if (value != null) {
            var array = isArray(value);
            props.multiple && !array ? error("The `%s` prop supplied to <select> must be an array if `multiple` is true.", propName) : !props.multiple && array && error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.", propName);
          }
        }
      }
      function pushStartSelect(target, props, responseState) {
        checkControlledValueProps("select", props), checkSelectProp(props, "value"), checkSelectProp(props, "defaultValue"), props.value !== void 0 && props.defaultValue !== void 0 && !didWarnDefaultSelectValue && (error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components"), didWarnDefaultSelectValue = !0), target.push(startChunkForTag("select"));
        var children = null, innerHTML = null;
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
                children = propValue;
                break;
              case "dangerouslySetInnerHTML":
                innerHTML = propValue;
                break;
              case "defaultValue":
              case "value":
                break;
              default:
                pushAttribute(target, responseState, propKey, propValue);
                break;
            }
          }
        return target.push(endOfStartTag), pushInnerHTML(target, innerHTML, children), children;
      }
      function flattenOptionChildren(children) {
        var content = "";
        return React8.Children.forEach(children, function(child) {
          child != null && (content += child, !didWarnInvalidOptionChildren && typeof child != "string" && typeof child != "number" && (didWarnInvalidOptionChildren = !0, error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.")));
        }), content;
      }
      var selectedMarkerAttribute = stringToPrecomputedChunk(' selected=""');
      function pushStartOption(target, props, responseState, formatContext) {
        var selectedValue = formatContext.selectedValue;
        target.push(startChunkForTag("option"));
        var children = null, value = null, selected = null, innerHTML = null;
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
                children = propValue;
                break;
              case "selected":
                selected = propValue, didWarnSelectedSetOnOption || (error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>."), didWarnSelectedSetOnOption = !0);
                break;
              case "dangerouslySetInnerHTML":
                innerHTML = propValue;
                break;
              case "value":
                value = propValue;
              default:
                pushAttribute(target, responseState, propKey, propValue);
                break;
            }
          }
        if (selectedValue != null) {
          var stringValue;
          if (value !== null ? (checkAttributeStringCoercion(value, "value"), stringValue = "" + value) : (innerHTML !== null && (didWarnInvalidOptionInnerHTML || (didWarnInvalidOptionInnerHTML = !0, error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected."))), stringValue = flattenOptionChildren(children)), isArray(selectedValue))
            for (var i = 0; i < selectedValue.length; i++) {
              checkAttributeStringCoercion(selectedValue[i], "value");
              var v = "" + selectedValue[i];
              if (v === stringValue) {
                target.push(selectedMarkerAttribute);
                break;
              }
            }
          else
            checkAttributeStringCoercion(selectedValue, "select.value"), "" + selectedValue === stringValue && target.push(selectedMarkerAttribute);
        } else
          selected && target.push(selectedMarkerAttribute);
        return target.push(endOfStartTag), pushInnerHTML(target, innerHTML, children), children;
      }
      function pushInput(target, props, responseState) {
        checkControlledValueProps("input", props), props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnDefaultChecked && (error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", "A component", props.type), didWarnDefaultChecked = !0), props.value !== void 0 && props.defaultValue !== void 0 && !didWarnDefaultInputValue && (error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", "A component", props.type), didWarnDefaultInputValue = !0), target.push(startChunkForTag("input"));
        var value = null, defaultValue = null, checked = null, defaultChecked = null;
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
              case "dangerouslySetInnerHTML":
                throw new Error("input is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
              case "defaultChecked":
                defaultChecked = propValue;
                break;
              case "defaultValue":
                defaultValue = propValue;
                break;
              case "checked":
                checked = propValue;
                break;
              case "value":
                value = propValue;
                break;
              default:
                pushAttribute(target, responseState, propKey, propValue);
                break;
            }
          }
        return checked !== null ? pushAttribute(target, responseState, "checked", checked) : defaultChecked !== null && pushAttribute(target, responseState, "checked", defaultChecked), value !== null ? pushAttribute(target, responseState, "value", value) : defaultValue !== null && pushAttribute(target, responseState, "value", defaultValue), target.push(endOfStartTagSelfClosing), null;
      }
      function pushStartTextArea(target, props, responseState) {
        checkControlledValueProps("textarea", props), props.value !== void 0 && props.defaultValue !== void 0 && !didWarnDefaultTextareaValue && (error("Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components"), didWarnDefaultTextareaValue = !0), target.push(startChunkForTag("textarea"));
        var value = null, defaultValue = null, children = null;
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
                children = propValue;
                break;
              case "value":
                value = propValue;
                break;
              case "defaultValue":
                defaultValue = propValue;
                break;
              case "dangerouslySetInnerHTML":
                throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
              default:
                pushAttribute(target, responseState, propKey, propValue);
                break;
            }
          }
        if (value === null && defaultValue !== null && (value = defaultValue), target.push(endOfStartTag), children != null) {
          if (error("Use the `defaultValue` or `value` props instead of setting children on <textarea>."), value != null)
            throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
          if (isArray(children)) {
            if (children.length > 1)
              throw new Error("<textarea> can only have at most one child.");
            checkHtmlStringCoercion(children[0]), value = "" + children[0];
          }
          checkHtmlStringCoercion(children), value = "" + children;
        }
        return typeof value == "string" && value[0] === `
` && target.push(leadingNewline), value !== null && (checkAttributeStringCoercion(value, "value"), target.push(stringToChunk(encodeHTMLTextNode("" + value)))), null;
      }
      function pushSelfClosing(target, props, tag, responseState) {
        target.push(startChunkForTag(tag));
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
              case "dangerouslySetInnerHTML":
                throw new Error(tag + " is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
              default:
                pushAttribute(target, responseState, propKey, propValue);
                break;
            }
          }
        return target.push(endOfStartTagSelfClosing), null;
      }
      function pushStartMenuItem(target, props, responseState) {
        target.push(startChunkForTag("menuitem"));
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
              case "dangerouslySetInnerHTML":
                throw new Error("menuitems cannot have `children` nor `dangerouslySetInnerHTML`.");
              default:
                pushAttribute(target, responseState, propKey, propValue);
                break;
            }
          }
        return target.push(endOfStartTag), null;
      }
      function pushStartTitle(target, props, responseState) {
        target.push(startChunkForTag("title"));
        var children = null;
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
                children = propValue;
                break;
              case "dangerouslySetInnerHTML":
                throw new Error("`dangerouslySetInnerHTML` does not make sense on <title>.");
              default:
                pushAttribute(target, responseState, propKey, propValue);
                break;
            }
          }
        target.push(endOfStartTag);
        {
          var child = Array.isArray(children) && children.length < 2 ? children[0] || null : children;
          Array.isArray(children) && children.length > 1 ? error("A title element received an array with more than 1 element as children. In browsers title Elements can only have Text Nodes as children. If the children being rendered output more than a single text node in aggregate the browser will display markup and comments as text in the title and hydration will likely fail and fall back to client rendering") : child != null && child.$$typeof != null ? error("A title element received a React element for children. In the browser title Elements can only have Text Nodes as children. If the children being rendered output more than a single text node in aggregate the browser will display markup and comments as text in the title and hydration will likely fail and fall back to client rendering") : child != null && typeof child != "string" && typeof child != "number" && error("A title element received a value that was not a string or number for children. In the browser title Elements can only have Text Nodes as children. If the children being rendered output more than a single text node in aggregate the browser will display markup and comments as text in the title and hydration will likely fail and fall back to client rendering");
        }
        return children;
      }
      function pushStartGenericElement(target, props, tag, responseState) {
        target.push(startChunkForTag(tag));
        var children = null, innerHTML = null;
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
                children = propValue;
                break;
              case "dangerouslySetInnerHTML":
                innerHTML = propValue;
                break;
              default:
                pushAttribute(target, responseState, propKey, propValue);
                break;
            }
          }
        return target.push(endOfStartTag), pushInnerHTML(target, innerHTML, children), typeof children == "string" ? (target.push(stringToChunk(encodeHTMLTextNode(children))), null) : children;
      }
      function pushStartCustomElement(target, props, tag, responseState) {
        target.push(startChunkForTag(tag));
        var children = null, innerHTML = null;
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
                children = propValue;
                break;
              case "dangerouslySetInnerHTML":
                innerHTML = propValue;
                break;
              case "style":
                pushStyle(target, responseState, propValue);
                break;
              case "suppressContentEditableWarning":
              case "suppressHydrationWarning":
                break;
              default:
                isAttributeNameSafe(propKey) && typeof propValue != "function" && typeof propValue != "symbol" && target.push(attributeSeparator, stringToChunk(propKey), attributeAssign, stringToChunk(escapeTextForBrowser(propValue)), attributeEnd);
                break;
            }
          }
        return target.push(endOfStartTag), pushInnerHTML(target, innerHTML, children), children;
      }
      var leadingNewline = stringToPrecomputedChunk(`
`);
      function pushStartPreformattedElement(target, props, tag, responseState) {
        target.push(startChunkForTag(tag));
        var children = null, innerHTML = null;
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
                children = propValue;
                break;
              case "dangerouslySetInnerHTML":
                innerHTML = propValue;
                break;
              default:
                pushAttribute(target, responseState, propKey, propValue);
                break;
            }
          }
        if (target.push(endOfStartTag), innerHTML != null) {
          if (children != null)
            throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
          if (typeof innerHTML != "object" || !("__html" in innerHTML))
            throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
          var html = innerHTML.__html;
          html != null && (typeof html == "string" && html.length > 0 && html[0] === `
` ? target.push(leadingNewline, stringToChunk(html)) : (checkHtmlStringCoercion(html), target.push(stringToChunk("" + html))));
        }
        return typeof children == "string" && children[0] === `
` && target.push(leadingNewline), children;
      }
      var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/, validatedTagCache = /* @__PURE__ */ new Map();
      function startChunkForTag(tag) {
        var tagStartChunk = validatedTagCache.get(tag);
        if (tagStartChunk === void 0) {
          if (!VALID_TAG_REGEX.test(tag))
            throw new Error("Invalid tag: " + tag);
          tagStartChunk = stringToPrecomputedChunk("<" + tag), validatedTagCache.set(tag, tagStartChunk);
        }
        return tagStartChunk;
      }
      var DOCTYPE = stringToPrecomputedChunk("<!DOCTYPE html>");
      function pushStartInstance(target, type, props, responseState, formatContext) {
        switch (validateProperties(type, props), validateProperties$1(type, props), validateProperties$2(type, props, null), !props.suppressContentEditableWarning && props.contentEditable && props.children != null && error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional."), formatContext.insertionMode !== SVG_MODE && formatContext.insertionMode !== MATHML_MODE && type.indexOf("-") === -1 && typeof props.is != "string" && type.toLowerCase() !== type && error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type), type) {
          case "select":
            return pushStartSelect(target, props, responseState);
          case "option":
            return pushStartOption(target, props, responseState, formatContext);
          case "textarea":
            return pushStartTextArea(target, props, responseState);
          case "input":
            return pushInput(target, props, responseState);
          case "menuitem":
            return pushStartMenuItem(target, props, responseState);
          case "title":
            return pushStartTitle(target, props, responseState);
          case "listing":
          case "pre":
            return pushStartPreformattedElement(target, props, type, responseState);
          case "area":
          case "base":
          case "br":
          case "col":
          case "embed":
          case "hr":
          case "img":
          case "keygen":
          case "link":
          case "meta":
          case "param":
          case "source":
          case "track":
          case "wbr":
            return pushSelfClosing(target, props, type, responseState);
          case "annotation-xml":
          case "color-profile":
          case "font-face":
          case "font-face-src":
          case "font-face-uri":
          case "font-face-format":
          case "font-face-name":
          case "missing-glyph":
            return pushStartGenericElement(target, props, type, responseState);
          case "html":
            return formatContext.insertionMode === ROOT_HTML_MODE && target.push(DOCTYPE), pushStartGenericElement(target, props, type, responseState);
          default:
            return type.indexOf("-") === -1 && typeof props.is != "string" ? pushStartGenericElement(target, props, type, responseState) : pushStartCustomElement(target, props, type, responseState);
        }
      }
      var endTag1 = stringToPrecomputedChunk("</"), endTag2 = stringToPrecomputedChunk(">");
      function pushEndInstance(target, type, props) {
        switch (type) {
          case "area":
          case "base":
          case "br":
          case "col":
          case "embed":
          case "hr":
          case "img":
          case "input":
          case "keygen":
          case "link":
          case "meta":
          case "param":
          case "source":
          case "track":
          case "wbr":
            break;
          default:
            target.push(endTag1, stringToChunk(type), endTag2);
        }
      }
      function writeCompletedRoot(destination, responseState) {
        for (var bootstrapChunks = responseState.bootstrapChunks, i = 0; i < bootstrapChunks.length - 1; i++)
          writeChunk(destination, bootstrapChunks[i]);
        return i < bootstrapChunks.length ? writeChunkAndReturn(destination, bootstrapChunks[i]) : !0;
      }
      var placeholder1 = stringToPrecomputedChunk('<template id="'), placeholder2 = stringToPrecomputedChunk('"></template>');
      function writePlaceholder(destination, responseState, id) {
        writeChunk(destination, placeholder1), writeChunk(destination, responseState.placeholderPrefix);
        var formattedID = stringToChunk(id.toString(16));
        return writeChunk(destination, formattedID), writeChunkAndReturn(destination, placeholder2);
      }
      var startCompletedSuspenseBoundary = stringToPrecomputedChunk("<!--$-->"), startPendingSuspenseBoundary1 = stringToPrecomputedChunk('<!--$?--><template id="'), startPendingSuspenseBoundary2 = stringToPrecomputedChunk('"></template>'), startClientRenderedSuspenseBoundary = stringToPrecomputedChunk("<!--$!-->"), endSuspenseBoundary = stringToPrecomputedChunk("<!--/$-->"), clientRenderedSuspenseBoundaryError1 = stringToPrecomputedChunk("<template"), clientRenderedSuspenseBoundaryErrorAttrInterstitial = stringToPrecomputedChunk('"'), clientRenderedSuspenseBoundaryError1A = stringToPrecomputedChunk(' data-dgst="'), clientRenderedSuspenseBoundaryError1B = stringToPrecomputedChunk(' data-msg="'), clientRenderedSuspenseBoundaryError1C = stringToPrecomputedChunk(' data-stck="'), clientRenderedSuspenseBoundaryError2 = stringToPrecomputedChunk("></template>");
      function writeStartCompletedSuspenseBoundary(destination, responseState) {
        return writeChunkAndReturn(destination, startCompletedSuspenseBoundary);
      }
      function writeStartPendingSuspenseBoundary(destination, responseState, id) {
        if (writeChunk(destination, startPendingSuspenseBoundary1), id === null)
          throw new Error("An ID must have been assigned before we can complete the boundary.");
        return writeChunk(destination, id), writeChunkAndReturn(destination, startPendingSuspenseBoundary2);
      }
      function writeStartClientRenderedSuspenseBoundary(destination, responseState, errorDigest, errorMesssage, errorComponentStack) {
        var result;
        return result = writeChunkAndReturn(destination, startClientRenderedSuspenseBoundary), writeChunk(destination, clientRenderedSuspenseBoundaryError1), errorDigest && (writeChunk(destination, clientRenderedSuspenseBoundaryError1A), writeChunk(destination, stringToChunk(escapeTextForBrowser(errorDigest))), writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial)), errorMesssage && (writeChunk(destination, clientRenderedSuspenseBoundaryError1B), writeChunk(destination, stringToChunk(escapeTextForBrowser(errorMesssage))), writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial)), errorComponentStack && (writeChunk(destination, clientRenderedSuspenseBoundaryError1C), writeChunk(destination, stringToChunk(escapeTextForBrowser(errorComponentStack))), writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial)), result = writeChunkAndReturn(destination, clientRenderedSuspenseBoundaryError2), result;
      }
      function writeEndCompletedSuspenseBoundary(destination, responseState) {
        return writeChunkAndReturn(destination, endSuspenseBoundary);
      }
      function writeEndPendingSuspenseBoundary(destination, responseState) {
        return writeChunkAndReturn(destination, endSuspenseBoundary);
      }
      function writeEndClientRenderedSuspenseBoundary(destination, responseState) {
        return writeChunkAndReturn(destination, endSuspenseBoundary);
      }
      var startSegmentHTML = stringToPrecomputedChunk('<div hidden id="'), startSegmentHTML2 = stringToPrecomputedChunk('">'), endSegmentHTML = stringToPrecomputedChunk("</div>"), startSegmentSVG = stringToPrecomputedChunk('<svg aria-hidden="true" style="display:none" id="'), startSegmentSVG2 = stringToPrecomputedChunk('">'), endSegmentSVG = stringToPrecomputedChunk("</svg>"), startSegmentMathML = stringToPrecomputedChunk('<math aria-hidden="true" style="display:none" id="'), startSegmentMathML2 = stringToPrecomputedChunk('">'), endSegmentMathML = stringToPrecomputedChunk("</math>"), startSegmentTable = stringToPrecomputedChunk('<table hidden id="'), startSegmentTable2 = stringToPrecomputedChunk('">'), endSegmentTable = stringToPrecomputedChunk("</table>"), startSegmentTableBody = stringToPrecomputedChunk('<table hidden><tbody id="'), startSegmentTableBody2 = stringToPrecomputedChunk('">'), endSegmentTableBody = stringToPrecomputedChunk("</tbody></table>"), startSegmentTableRow = stringToPrecomputedChunk('<table hidden><tr id="'), startSegmentTableRow2 = stringToPrecomputedChunk('">'), endSegmentTableRow = stringToPrecomputedChunk("</tr></table>"), startSegmentColGroup = stringToPrecomputedChunk('<table hidden><colgroup id="'), startSegmentColGroup2 = stringToPrecomputedChunk('">'), endSegmentColGroup = stringToPrecomputedChunk("</colgroup></table>");
      function writeStartSegment(destination, responseState, formatContext, id) {
        switch (formatContext.insertionMode) {
          case ROOT_HTML_MODE:
          case HTML_MODE:
            return writeChunk(destination, startSegmentHTML), writeChunk(destination, responseState.segmentPrefix), writeChunk(destination, stringToChunk(id.toString(16))), writeChunkAndReturn(destination, startSegmentHTML2);
          case SVG_MODE:
            return writeChunk(destination, startSegmentSVG), writeChunk(destination, responseState.segmentPrefix), writeChunk(destination, stringToChunk(id.toString(16))), writeChunkAndReturn(destination, startSegmentSVG2);
          case MATHML_MODE:
            return writeChunk(destination, startSegmentMathML), writeChunk(destination, responseState.segmentPrefix), writeChunk(destination, stringToChunk(id.toString(16))), writeChunkAndReturn(destination, startSegmentMathML2);
          case HTML_TABLE_MODE:
            return writeChunk(destination, startSegmentTable), writeChunk(destination, responseState.segmentPrefix), writeChunk(destination, stringToChunk(id.toString(16))), writeChunkAndReturn(destination, startSegmentTable2);
          case HTML_TABLE_BODY_MODE:
            return writeChunk(destination, startSegmentTableBody), writeChunk(destination, responseState.segmentPrefix), writeChunk(destination, stringToChunk(id.toString(16))), writeChunkAndReturn(destination, startSegmentTableBody2);
          case HTML_TABLE_ROW_MODE:
            return writeChunk(destination, startSegmentTableRow), writeChunk(destination, responseState.segmentPrefix), writeChunk(destination, stringToChunk(id.toString(16))), writeChunkAndReturn(destination, startSegmentTableRow2);
          case HTML_COLGROUP_MODE:
            return writeChunk(destination, startSegmentColGroup), writeChunk(destination, responseState.segmentPrefix), writeChunk(destination, stringToChunk(id.toString(16))), writeChunkAndReturn(destination, startSegmentColGroup2);
          default:
            throw new Error("Unknown insertion mode. This is a bug in React.");
        }
      }
      function writeEndSegment(destination, formatContext) {
        switch (formatContext.insertionMode) {
          case ROOT_HTML_MODE:
          case HTML_MODE:
            return writeChunkAndReturn(destination, endSegmentHTML);
          case SVG_MODE:
            return writeChunkAndReturn(destination, endSegmentSVG);
          case MATHML_MODE:
            return writeChunkAndReturn(destination, endSegmentMathML);
          case HTML_TABLE_MODE:
            return writeChunkAndReturn(destination, endSegmentTable);
          case HTML_TABLE_BODY_MODE:
            return writeChunkAndReturn(destination, endSegmentTableBody);
          case HTML_TABLE_ROW_MODE:
            return writeChunkAndReturn(destination, endSegmentTableRow);
          case HTML_COLGROUP_MODE:
            return writeChunkAndReturn(destination, endSegmentColGroup);
          default:
            throw new Error("Unknown insertion mode. This is a bug in React.");
        }
      }
      var completeSegmentFunction = "function $RS(a,b){a=document.getElementById(a);b=document.getElementById(b);for(a.parentNode.removeChild(a);a.firstChild;)b.parentNode.insertBefore(a.firstChild,b);b.parentNode.removeChild(b)}", completeBoundaryFunction = 'function $RC(a,b){a=document.getElementById(a);b=document.getElementById(b);b.parentNode.removeChild(b);if(a){a=a.previousSibling;var f=a.parentNode,c=a.nextSibling,e=0;do{if(c&&8===c.nodeType){var d=c.data;if("/$"===d)if(0===e)break;else e--;else"$"!==d&&"$?"!==d&&"$!"!==d||e++}d=c.nextSibling;f.removeChild(c);c=d}while(c);for(;b.firstChild;)f.insertBefore(b.firstChild,c);a.data="$";a._reactRetry&&a._reactRetry()}}', clientRenderFunction = 'function $RX(b,c,d,e){var a=document.getElementById(b);a&&(b=a.previousSibling,b.data="$!",a=a.dataset,c&&(a.dgst=c),d&&(a.msg=d),e&&(a.stck=e),b._reactRetry&&b._reactRetry())}', completeSegmentScript1Full = stringToPrecomputedChunk(completeSegmentFunction + ';$RS("'), completeSegmentScript1Partial = stringToPrecomputedChunk('$RS("'), completeSegmentScript2 = stringToPrecomputedChunk('","'), completeSegmentScript3 = stringToPrecomputedChunk('")<\/script>');
      function writeCompletedSegmentInstruction(destination, responseState, contentSegmentID) {
        writeChunk(destination, responseState.startInlineScript), responseState.sentCompleteSegmentFunction ? writeChunk(destination, completeSegmentScript1Partial) : (responseState.sentCompleteSegmentFunction = !0, writeChunk(destination, completeSegmentScript1Full)), writeChunk(destination, responseState.segmentPrefix);
        var formattedID = stringToChunk(contentSegmentID.toString(16));
        return writeChunk(destination, formattedID), writeChunk(destination, completeSegmentScript2), writeChunk(destination, responseState.placeholderPrefix), writeChunk(destination, formattedID), writeChunkAndReturn(destination, completeSegmentScript3);
      }
      var completeBoundaryScript1Full = stringToPrecomputedChunk(completeBoundaryFunction + ';$RC("'), completeBoundaryScript1Partial = stringToPrecomputedChunk('$RC("'), completeBoundaryScript2 = stringToPrecomputedChunk('","'), completeBoundaryScript3 = stringToPrecomputedChunk('")<\/script>');
      function writeCompletedBoundaryInstruction(destination, responseState, boundaryID, contentSegmentID) {
        if (writeChunk(destination, responseState.startInlineScript), responseState.sentCompleteBoundaryFunction ? writeChunk(destination, completeBoundaryScript1Partial) : (responseState.sentCompleteBoundaryFunction = !0, writeChunk(destination, completeBoundaryScript1Full)), boundaryID === null)
          throw new Error("An ID must have been assigned before we can complete the boundary.");
        var formattedContentID = stringToChunk(contentSegmentID.toString(16));
        return writeChunk(destination, boundaryID), writeChunk(destination, completeBoundaryScript2), writeChunk(destination, responseState.segmentPrefix), writeChunk(destination, formattedContentID), writeChunkAndReturn(destination, completeBoundaryScript3);
      }
      var clientRenderScript1Full = stringToPrecomputedChunk(clientRenderFunction + ';$RX("'), clientRenderScript1Partial = stringToPrecomputedChunk('$RX("'), clientRenderScript1A = stringToPrecomputedChunk('"'), clientRenderScript2 = stringToPrecomputedChunk(")<\/script>"), clientRenderErrorScriptArgInterstitial = stringToPrecomputedChunk(",");
      function writeClientRenderBoundaryInstruction(destination, responseState, boundaryID, errorDigest, errorMessage, errorComponentStack) {
        if (writeChunk(destination, responseState.startInlineScript), responseState.sentClientRenderFunction ? writeChunk(destination, clientRenderScript1Partial) : (responseState.sentClientRenderFunction = !0, writeChunk(destination, clientRenderScript1Full)), boundaryID === null)
          throw new Error("An ID must have been assigned before we can complete the boundary.");
        return writeChunk(destination, boundaryID), writeChunk(destination, clientRenderScript1A), (errorDigest || errorMessage || errorComponentStack) && (writeChunk(destination, clientRenderErrorScriptArgInterstitial), writeChunk(destination, stringToChunk(escapeJSStringsForInstructionScripts(errorDigest || "")))), (errorMessage || errorComponentStack) && (writeChunk(destination, clientRenderErrorScriptArgInterstitial), writeChunk(destination, stringToChunk(escapeJSStringsForInstructionScripts(errorMessage || "")))), errorComponentStack && (writeChunk(destination, clientRenderErrorScriptArgInterstitial), writeChunk(destination, stringToChunk(escapeJSStringsForInstructionScripts(errorComponentStack)))), writeChunkAndReturn(destination, clientRenderScript2);
      }
      var regexForJSStringsInScripts = /[<\u2028\u2029]/g;
      function escapeJSStringsForInstructionScripts(input) {
        var escaped = JSON.stringify(input);
        return escaped.replace(regexForJSStringsInScripts, function(match) {
          switch (match) {
            case "<":
              return "\\u003c";
            case "\u2028":
              return "\\u2028";
            case "\u2029":
              return "\\u2029";
            default:
              throw new Error("escapeJSStringsForInstructionScripts encountered a match it does not know how to replace. this means the match regex and the replacement characters are no longer in sync. This is a bug in React");
          }
        });
      }
      var assign = Object.assign, REACT_ELEMENT_TYPE = Symbol.for("react.element"), REACT_PORTAL_TYPE = Symbol.for("react.portal"), REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"), REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"), REACT_PROFILER_TYPE = Symbol.for("react.profiler"), REACT_PROVIDER_TYPE = Symbol.for("react.provider"), REACT_CONTEXT_TYPE = Symbol.for("react.context"), REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"), REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"), REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"), REACT_MEMO_TYPE = Symbol.for("react.memo"), REACT_LAZY_TYPE = Symbol.for("react.lazy"), REACT_SCOPE_TYPE = Symbol.for("react.scope"), REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode"), REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden"), REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED = Symbol.for("react.default_value"), MAYBE_ITERATOR_SYMBOL = Symbol.iterator, FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable != "object")
          return null;
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        return typeof maybeIterator == "function" ? maybeIterator : null;
      }
      function getWrappedName(outerType, innerType, wrapperName) {
        var displayName = outerType.displayName;
        if (displayName)
          return displayName;
        var functionName = innerType.displayName || innerType.name || "";
        return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
      }
      function getContextName(type) {
        return type.displayName || "Context";
      }
      function getComponentNameFromType(type) {
        if (type == null)
          return null;
        if (typeof type.tag == "number" && error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."), typeof type == "function")
          return type.displayName || type.name || null;
        if (typeof type == "string")
          return type;
        switch (type) {
          case REACT_FRAGMENT_TYPE:
            return "Fragment";
          case REACT_PORTAL_TYPE:
            return "Portal";
          case REACT_PROFILER_TYPE:
            return "Profiler";
          case REACT_STRICT_MODE_TYPE:
            return "StrictMode";
          case REACT_SUSPENSE_TYPE:
            return "Suspense";
          case REACT_SUSPENSE_LIST_TYPE:
            return "SuspenseList";
        }
        if (typeof type == "object")
          switch (type.$$typeof) {
            case REACT_CONTEXT_TYPE:
              var context = type;
              return getContextName(context) + ".Consumer";
            case REACT_PROVIDER_TYPE:
              var provider = type;
              return getContextName(provider._context) + ".Provider";
            case REACT_FORWARD_REF_TYPE:
              return getWrappedName(type, type.render, "ForwardRef");
            case REACT_MEMO_TYPE:
              var outerName = type.displayName || null;
              return outerName !== null ? outerName : getComponentNameFromType(type.type) || "Memo";
            case REACT_LAZY_TYPE: {
              var lazyComponent = type, payload = lazyComponent._payload, init = lazyComponent._init;
              try {
                return getComponentNameFromType(init(payload));
              } catch {
                return null;
              }
            }
          }
        return null;
      }
      var disabledDepth = 0, prevLog, prevInfo, prevWarn, prevError, prevGroup, prevGroupCollapsed, prevGroupEnd;
      function disabledLog() {
      }
      disabledLog.__reactDisabledLog = !0;
      function disableLogs() {
        {
          if (disabledDepth === 0) {
            prevLog = console.log, prevInfo = console.info, prevWarn = console.warn, prevError = console.error, prevGroup = console.group, prevGroupCollapsed = console.groupCollapsed, prevGroupEnd = console.groupEnd;
            var props = {
              configurable: !0,
              enumerable: !0,
              value: disabledLog,
              writable: !0
            };
            Object.defineProperties(console, {
              info: props,
              log: props,
              warn: props,
              error: props,
              group: props,
              groupCollapsed: props,
              groupEnd: props
            });
          }
          disabledDepth++;
        }
      }
      function reenableLogs() {
        {
          if (disabledDepth--, disabledDepth === 0) {
            var props = {
              configurable: !0,
              enumerable: !0,
              writable: !0
            };
            Object.defineProperties(console, {
              log: assign({}, props, {
                value: prevLog
              }),
              info: assign({}, props, {
                value: prevInfo
              }),
              warn: assign({}, props, {
                value: prevWarn
              }),
              error: assign({}, props, {
                value: prevError
              }),
              group: assign({}, props, {
                value: prevGroup
              }),
              groupCollapsed: assign({}, props, {
                value: prevGroupCollapsed
              }),
              groupEnd: assign({}, props, {
                value: prevGroupEnd
              })
            });
          }
          disabledDepth < 0 && error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
        }
      }
      var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher, prefix2;
      function describeBuiltInComponentFrame(name, source, ownerFn) {
        {
          if (prefix2 === void 0)
            try {
              throw Error();
            } catch (x) {
              var match = x.stack.trim().match(/\n( *(at )?)/);
              prefix2 = match && match[1] || "";
            }
          return `
` + prefix2 + name;
        }
      }
      var reentry = !1, componentFrameCache;
      {
        var PossiblyWeakMap = typeof WeakMap == "function" ? WeakMap : Map;
        componentFrameCache = new PossiblyWeakMap();
      }
      function describeNativeComponentFrame(fn, construct) {
        if (!fn || reentry)
          return "";
        {
          var frame = componentFrameCache.get(fn);
          if (frame !== void 0)
            return frame;
        }
        var control;
        reentry = !0;
        var previousPrepareStackTrace = Error.prepareStackTrace;
        Error.prepareStackTrace = void 0;
        var previousDispatcher;
        previousDispatcher = ReactCurrentDispatcher.current, ReactCurrentDispatcher.current = null, disableLogs();
        try {
          if (construct) {
            var Fake = function() {
              throw Error();
            };
            if (Object.defineProperty(Fake.prototype, "props", {
              set: function() {
                throw Error();
              }
            }), typeof Reflect == "object" && Reflect.construct) {
              try {
                Reflect.construct(Fake, []);
              } catch (x) {
                control = x;
              }
              Reflect.construct(fn, [], Fake);
            } else {
              try {
                Fake.call();
              } catch (x) {
                control = x;
              }
              fn.call(Fake.prototype);
            }
          } else {
            try {
              throw Error();
            } catch (x) {
              control = x;
            }
            fn();
          }
        } catch (sample) {
          if (sample && control && typeof sample.stack == "string") {
            for (var sampleLines = sample.stack.split(`
`), controlLines = control.stack.split(`
`), s = sampleLines.length - 1, c = controlLines.length - 1; s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]; )
              c--;
            for (; s >= 1 && c >= 0; s--, c--)
              if (sampleLines[s] !== controlLines[c]) {
                if (s !== 1 || c !== 1)
                  do
                    if (s--, c--, c < 0 || sampleLines[s] !== controlLines[c]) {
                      var _frame = `
` + sampleLines[s].replace(" at new ", " at ");
                      return fn.displayName && _frame.includes("<anonymous>") && (_frame = _frame.replace("<anonymous>", fn.displayName)), typeof fn == "function" && componentFrameCache.set(fn, _frame), _frame;
                    }
                  while (s >= 1 && c >= 0);
                break;
              }
          }
        } finally {
          reentry = !1, ReactCurrentDispatcher.current = previousDispatcher, reenableLogs(), Error.prepareStackTrace = previousPrepareStackTrace;
        }
        var name = fn ? fn.displayName || fn.name : "", syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
        return typeof fn == "function" && componentFrameCache.set(fn, syntheticFrame), syntheticFrame;
      }
      function describeClassComponentFrame(ctor, source, ownerFn) {
        return describeNativeComponentFrame(ctor, !0);
      }
      function describeFunctionComponentFrame(fn, source, ownerFn) {
        return describeNativeComponentFrame(fn, !1);
      }
      function shouldConstruct(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
      }
      function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null)
          return "";
        if (typeof type == "function")
          return describeNativeComponentFrame(type, shouldConstruct(type));
        if (typeof type == "string")
          return describeBuiltInComponentFrame(type);
        switch (type) {
          case REACT_SUSPENSE_TYPE:
            return describeBuiltInComponentFrame("Suspense");
          case REACT_SUSPENSE_LIST_TYPE:
            return describeBuiltInComponentFrame("SuspenseList");
        }
        if (typeof type == "object")
          switch (type.$$typeof) {
            case REACT_FORWARD_REF_TYPE:
              return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
              return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_LAZY_TYPE: {
              var lazyComponent = type, payload = lazyComponent._payload, init = lazyComponent._init;
              try {
                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
              } catch {
              }
            }
          }
        return "";
      }
      var loggedTypeFailures = {}, ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
      function setCurrentlyValidatingElement(element) {
        if (element) {
          var owner = element._owner, stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
          ReactDebugCurrentFrame.setExtraStackFrame(stack);
        } else
          ReactDebugCurrentFrame.setExtraStackFrame(null);
      }
      function checkPropTypes(typeSpecs, values, location, componentName, element) {
        {
          var has = Function.call.bind(hasOwnProperty);
          for (var typeSpecName in typeSpecs)
            if (has(typeSpecs, typeSpecName)) {
              var error$1 = void 0;
              try {
                if (typeof typeSpecs[typeSpecName] != "function") {
                  var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                  throw err.name = "Invariant Violation", err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
              } catch (ex) {
                error$1 = ex;
              }
              error$1 && !(error$1 instanceof Error) && (setCurrentlyValidatingElement(element), error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1), setCurrentlyValidatingElement(null)), error$1 instanceof Error && !(error$1.message in loggedTypeFailures) && (loggedTypeFailures[error$1.message] = !0, setCurrentlyValidatingElement(element), error("Failed %s type: %s", location, error$1.message), setCurrentlyValidatingElement(null));
            }
        }
      }
      var warnedAboutMissingGetChildContext;
      warnedAboutMissingGetChildContext = {};
      var emptyContextObject = {};
      Object.freeze(emptyContextObject);
      function getMaskedContext(type, unmaskedContext) {
        {
          var contextTypes = type.contextTypes;
          if (!contextTypes)
            return emptyContextObject;
          var context = {};
          for (var key in contextTypes)
            context[key] = unmaskedContext[key];
          {
            var name = getComponentNameFromType(type) || "Unknown";
            checkPropTypes(contextTypes, context, "context", name);
          }
          return context;
        }
      }
      function processChildContext(instance, type, parentContext, childContextTypes) {
        {
          if (typeof instance.getChildContext != "function") {
            {
              var componentName = getComponentNameFromType(type) || "Unknown";
              warnedAboutMissingGetChildContext[componentName] || (warnedAboutMissingGetChildContext[componentName] = !0, error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName));
            }
            return parentContext;
          }
          var childContext = instance.getChildContext();
          for (var contextKey in childContext)
            if (!(contextKey in childContextTypes))
              throw new Error((getComponentNameFromType(type) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
          {
            var name = getComponentNameFromType(type) || "Unknown";
            checkPropTypes(childContextTypes, childContext, "child context", name);
          }
          return assign({}, parentContext, childContext);
        }
      }
      var rendererSigil;
      rendererSigil = {};
      var rootContextSnapshot = null, currentActiveSnapshot = null;
      function popNode(prev) {
        prev.context._currentValue = prev.parentValue;
      }
      function pushNode(next) {
        next.context._currentValue = next.value;
      }
      function popToNearestCommonAncestor(prev, next) {
        if (prev !== next) {
          popNode(prev);
          var parentPrev = prev.parent, parentNext = next.parent;
          if (parentPrev === null) {
            if (parentNext !== null)
              throw new Error("The stacks must reach the root at the same time. This is a bug in React.");
          } else {
            if (parentNext === null)
              throw new Error("The stacks must reach the root at the same time. This is a bug in React.");
            popToNearestCommonAncestor(parentPrev, parentNext);
          }
          pushNode(next);
        }
      }
      function popAllPrevious(prev) {
        popNode(prev);
        var parentPrev = prev.parent;
        parentPrev !== null && popAllPrevious(parentPrev);
      }
      function pushAllNext(next) {
        var parentNext = next.parent;
        parentNext !== null && pushAllNext(parentNext), pushNode(next);
      }
      function popPreviousToCommonLevel(prev, next) {
        popNode(prev);
        var parentPrev = prev.parent;
        if (parentPrev === null)
          throw new Error("The depth must equal at least at zero before reaching the root. This is a bug in React.");
        parentPrev.depth === next.depth ? popToNearestCommonAncestor(parentPrev, next) : popPreviousToCommonLevel(parentPrev, next);
      }
      function popNextToCommonLevel(prev, next) {
        var parentNext = next.parent;
        if (parentNext === null)
          throw new Error("The depth must equal at least at zero before reaching the root. This is a bug in React.");
        prev.depth === parentNext.depth ? popToNearestCommonAncestor(prev, parentNext) : popNextToCommonLevel(prev, parentNext), pushNode(next);
      }
      function switchContext(newSnapshot) {
        var prev = currentActiveSnapshot, next = newSnapshot;
        prev !== next && (prev === null ? pushAllNext(next) : next === null ? popAllPrevious(prev) : prev.depth === next.depth ? popToNearestCommonAncestor(prev, next) : prev.depth > next.depth ? popPreviousToCommonLevel(prev, next) : popNextToCommonLevel(prev, next), currentActiveSnapshot = next);
      }
      function pushProvider(context, nextValue) {
        var prevValue;
        prevValue = context._currentValue, context._currentValue = nextValue, context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil && error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported."), context._currentRenderer = rendererSigil;
        var prevNode = currentActiveSnapshot, newNode = {
          parent: prevNode,
          depth: prevNode === null ? 0 : prevNode.depth + 1,
          context,
          parentValue: prevValue,
          value: nextValue
        };
        return currentActiveSnapshot = newNode, newNode;
      }
      function popProvider(context) {
        var prevSnapshot = currentActiveSnapshot;
        if (prevSnapshot === null)
          throw new Error("Tried to pop a Context at the root of the app. This is a bug in React.");
        prevSnapshot.context !== context && error("The parent context is not the expected context. This is probably a bug in React.");
        {
          var value = prevSnapshot.parentValue;
          value === REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED ? prevSnapshot.context._currentValue = prevSnapshot.context._defaultValue : prevSnapshot.context._currentValue = value, context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil && error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported."), context._currentRenderer = rendererSigil;
        }
        return currentActiveSnapshot = prevSnapshot.parent;
      }
      function getActiveContext() {
        return currentActiveSnapshot;
      }
      function readContext(context) {
        var value = context._currentValue;
        return value;
      }
      function get(key) {
        return key._reactInternals;
      }
      function set(key, value) {
        key._reactInternals = value;
      }
      var didWarnAboutNoopUpdateForComponent = {}, didWarnAboutDeprecatedWillMount = {}, didWarnAboutUninitializedState, didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate, didWarnAboutLegacyLifecyclesAndDerivedState, didWarnAboutUndefinedDerivedState, warnOnUndefinedDerivedState, warnOnInvalidCallback, didWarnAboutDirectlyAssigningPropsToState, didWarnAboutContextTypeAndContextTypes, didWarnAboutInvalidateContextType;
      {
        didWarnAboutUninitializedState = /* @__PURE__ */ new Set(), didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set(), didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set(), didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set(), didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set(), didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set(), didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
        var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
        warnOnInvalidCallback = function(callback, callerName) {
          if (!(callback === null || typeof callback == "function")) {
            var key = callerName + "_" + callback;
            didWarnOnInvalidCallback.has(key) || (didWarnOnInvalidCallback.add(key), error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback));
          }
        }, warnOnUndefinedDerivedState = function(type, partialState) {
          if (partialState === void 0) {
            var componentName = getComponentNameFromType(type) || "Component";
            didWarnAboutUndefinedDerivedState.has(componentName) || (didWarnAboutUndefinedDerivedState.add(componentName), error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName));
          }
        };
      }
      function warnNoop(publicInstance, callerName) {
        {
          var _constructor = publicInstance.constructor, componentName = _constructor && getComponentNameFromType(_constructor) || "ReactClass", warningKey = componentName + "." + callerName;
          if (didWarnAboutNoopUpdateForComponent[warningKey])
            return;
          error(`%s(...): Can only update a mounting component. This usually means you called %s() outside componentWillMount() on the server. This is a no-op.

Please check the code for the %s component.`, callerName, callerName, componentName), didWarnAboutNoopUpdateForComponent[warningKey] = !0;
        }
      }
      var classComponentUpdater = {
        isMounted: function(inst) {
          return !1;
        },
        enqueueSetState: function(inst, payload, callback) {
          var internals = get(inst);
          internals.queue === null ? warnNoop(inst, "setState") : (internals.queue.push(payload), callback != null && warnOnInvalidCallback(callback, "setState"));
        },
        enqueueReplaceState: function(inst, payload, callback) {
          var internals = get(inst);
          internals.replace = !0, internals.queue = [payload], callback != null && warnOnInvalidCallback(callback, "setState");
        },
        enqueueForceUpdate: function(inst, callback) {
          var internals = get(inst);
          internals.queue === null ? warnNoop(inst, "forceUpdate") : callback != null && warnOnInvalidCallback(callback, "setState");
        }
      };
      function applyDerivedStateFromProps(instance, ctor, getDerivedStateFromProps, prevState, nextProps) {
        var partialState = getDerivedStateFromProps(nextProps, prevState);
        warnOnUndefinedDerivedState(ctor, partialState);
        var newState = partialState == null ? prevState : assign({}, prevState, partialState);
        return newState;
      }
      function constructClassInstance(ctor, props, maskedLegacyContext) {
        var context = emptyContextObject, contextType = ctor.contextType;
        if ("contextType" in ctor) {
          var isValid2 = contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0;
          if (!isValid2 && !didWarnAboutInvalidateContextType.has(ctor)) {
            didWarnAboutInvalidateContextType.add(ctor);
            var addendum = "";
            contextType === void 0 ? addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file." : typeof contextType != "object" ? addendum = " However, it is set to a " + typeof contextType + "." : contextType.$$typeof === REACT_PROVIDER_TYPE ? addendum = " Did you accidentally pass the Context.Provider instead?" : contextType._context !== void 0 ? addendum = " Did you accidentally pass the Context.Consumer instead?" : addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.", error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
          }
        }
        typeof contextType == "object" && contextType !== null ? context = readContext(contextType) : context = maskedLegacyContext;
        var instance = new ctor(props, context);
        {
          if (typeof ctor.getDerivedStateFromProps == "function" && (instance.state === null || instance.state === void 0)) {
            var componentName = getComponentNameFromType(ctor) || "Component";
            didWarnAboutUninitializedState.has(componentName) || (didWarnAboutUninitializedState.add(componentName), error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName));
          }
          if (typeof ctor.getDerivedStateFromProps == "function" || typeof instance.getSnapshotBeforeUpdate == "function") {
            var foundWillMountName = null, foundWillReceivePropsName = null, foundWillUpdateName = null;
            if (typeof instance.componentWillMount == "function" && instance.componentWillMount.__suppressDeprecationWarning !== !0 ? foundWillMountName = "componentWillMount" : typeof instance.UNSAFE_componentWillMount == "function" && (foundWillMountName = "UNSAFE_componentWillMount"), typeof instance.componentWillReceiveProps == "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== !0 ? foundWillReceivePropsName = "componentWillReceiveProps" : typeof instance.UNSAFE_componentWillReceiveProps == "function" && (foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps"), typeof instance.componentWillUpdate == "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== !0 ? foundWillUpdateName = "componentWillUpdate" : typeof instance.UNSAFE_componentWillUpdate == "function" && (foundWillUpdateName = "UNSAFE_componentWillUpdate"), foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
              var _componentName = getComponentNameFromType(ctor) || "Component", newApiName = typeof ctor.getDerivedStateFromProps == "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
              didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName) || (didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName), error(`Unsafe legacy lifecycles will not be called for components using new component APIs.

%s uses %s but also contains the following legacy lifecycles:%s%s%s

The above lifecycles should be removed. Learn more about this warning here:
https://reactjs.org/link/unsafe-component-lifecycles`, _componentName, newApiName, foundWillMountName !== null ? `
  ` + foundWillMountName : "", foundWillReceivePropsName !== null ? `
  ` + foundWillReceivePropsName : "", foundWillUpdateName !== null ? `
  ` + foundWillUpdateName : ""));
            }
          }
        }
        return instance;
      }
      function checkClassInstance(instance, ctor, newProps) {
        {
          var name = getComponentNameFromType(ctor) || "Component", renderPresent = instance.render;
          renderPresent || (ctor.prototype && typeof ctor.prototype.render == "function" ? error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name) : error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name)), instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state && error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name), instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved && error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name), instance.propTypes && error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name), instance.contextType && error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name), instance.contextTypes && error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name), ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor) && (didWarnAboutContextTypeAndContextTypes.add(ctor), error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name)), typeof instance.componentShouldUpdate == "function" && error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name), ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate < "u" && error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component"), typeof instance.componentDidUnmount == "function" && error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name), typeof instance.componentDidReceiveProps == "function" && error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name), typeof instance.componentWillRecieveProps == "function" && error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name), typeof instance.UNSAFE_componentWillRecieveProps == "function" && error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
          var hasMutatedProps = instance.props !== newProps;
          instance.props !== void 0 && hasMutatedProps && error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name), instance.defaultProps && error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name), typeof instance.getSnapshotBeforeUpdate == "function" && typeof instance.componentDidUpdate != "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor) && (didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor), error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor))), typeof instance.getDerivedStateFromProps == "function" && error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name), typeof instance.getDerivedStateFromError == "function" && error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name), typeof ctor.getSnapshotBeforeUpdate == "function" && error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
          var _state = instance.state;
          _state && (typeof _state != "object" || isArray(_state)) && error("%s.state: must be set to an object or null", name), typeof instance.getChildContext == "function" && typeof ctor.childContextTypes != "object" && error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
        }
      }
      function callComponentWillMount(type, instance) {
        var oldState = instance.state;
        if (typeof instance.componentWillMount == "function") {
          if (instance.componentWillMount.__suppressDeprecationWarning !== !0) {
            var componentName = getComponentNameFromType(type) || "Unknown";
            didWarnAboutDeprecatedWillMount[componentName] || (warn(
              `componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.

* Move code from componentWillMount to componentDidMount (preferred in most cases) or the constructor.

Please update the following components: %s`,
              componentName
            ), didWarnAboutDeprecatedWillMount[componentName] = !0);
          }
          instance.componentWillMount();
        }
        typeof instance.UNSAFE_componentWillMount == "function" && instance.UNSAFE_componentWillMount(), oldState !== instance.state && (error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromType(type) || "Component"), classComponentUpdater.enqueueReplaceState(instance, instance.state, null));
      }
      function processUpdateQueue(internalInstance, inst, props, maskedLegacyContext) {
        if (internalInstance.queue !== null && internalInstance.queue.length > 0) {
          var oldQueue = internalInstance.queue, oldReplace = internalInstance.replace;
          if (internalInstance.queue = null, internalInstance.replace = !1, oldReplace && oldQueue.length === 1)
            inst.state = oldQueue[0];
          else {
            for (var nextState = oldReplace ? oldQueue[0] : inst.state, dontMutate = !0, i = oldReplace ? 1 : 0; i < oldQueue.length; i++) {
              var partial = oldQueue[i], partialState = typeof partial == "function" ? partial.call(inst, nextState, props, maskedLegacyContext) : partial;
              partialState != null && (dontMutate ? (dontMutate = !1, nextState = assign({}, nextState, partialState)) : assign(nextState, partialState));
            }
            inst.state = nextState;
          }
        } else
          internalInstance.queue = null;
      }
      function mountClassInstance(instance, ctor, newProps, maskedLegacyContext) {
        checkClassInstance(instance, ctor, newProps);
        var initialState = instance.state !== void 0 ? instance.state : null;
        instance.updater = classComponentUpdater, instance.props = newProps, instance.state = initialState;
        var internalInstance = {
          queue: [],
          replace: !1
        };
        set(instance, internalInstance);
        var contextType = ctor.contextType;
        if (typeof contextType == "object" && contextType !== null ? instance.context = readContext(contextType) : instance.context = maskedLegacyContext, instance.state === newProps) {
          var componentName = getComponentNameFromType(ctor) || "Component";
          didWarnAboutDirectlyAssigningPropsToState.has(componentName) || (didWarnAboutDirectlyAssigningPropsToState.add(componentName), error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName));
        }
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        typeof getDerivedStateFromProps == "function" && (instance.state = applyDerivedStateFromProps(instance, ctor, getDerivedStateFromProps, initialState, newProps)), typeof ctor.getDerivedStateFromProps != "function" && typeof instance.getSnapshotBeforeUpdate != "function" && (typeof instance.UNSAFE_componentWillMount == "function" || typeof instance.componentWillMount == "function") && (callComponentWillMount(ctor, instance), processUpdateQueue(internalInstance, instance, newProps, maskedLegacyContext));
      }
      var emptyTreeContext = {
        id: 1,
        overflow: ""
      };
      function getTreeId(context) {
        var overflow = context.overflow, idWithLeadingBit = context.id, id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
        return id.toString(32) + overflow;
      }
      function pushTreeContext(baseContext, totalChildren, index) {
        var baseIdWithLeadingBit = baseContext.id, baseOverflow = baseContext.overflow, baseLength = getBitLength(baseIdWithLeadingBit) - 1, baseId = baseIdWithLeadingBit & ~(1 << baseLength), slot = index + 1, length = getBitLength(totalChildren) + baseLength;
        if (length > 30) {
          var numberOfOverflowBits = baseLength - baseLength % 5, newOverflowBits = (1 << numberOfOverflowBits) - 1, newOverflow = (baseId & newOverflowBits).toString(32), restOfBaseId = baseId >> numberOfOverflowBits, restOfBaseLength = baseLength - numberOfOverflowBits, restOfLength = getBitLength(totalChildren) + restOfBaseLength, restOfNewBits = slot << restOfBaseLength, id = restOfNewBits | restOfBaseId, overflow = newOverflow + baseOverflow;
          return {
            id: 1 << restOfLength | id,
            overflow
          };
        } else {
          var newBits = slot << baseLength, _id = newBits | baseId, _overflow = baseOverflow;
          return {
            id: 1 << length | _id,
            overflow: _overflow
          };
        }
      }
      function getBitLength(number) {
        return 32 - clz32(number);
      }
      function getLeadingBit(id) {
        return 1 << getBitLength(id) - 1;
      }
      var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback, log = Math.log, LN2 = Math.LN2;
      function clz32Fallback(x) {
        var asUint = x >>> 0;
        return asUint === 0 ? 32 : 31 - (log(asUint) / LN2 | 0) | 0;
      }
      function is(x, y) {
        return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
      }
      var objectIs = typeof Object.is == "function" ? Object.is : is, currentlyRenderingComponent = null, currentlyRenderingTask = null, firstWorkInProgressHook = null, workInProgressHook = null, isReRender = !1, didScheduleRenderPhaseUpdate = !1, localIdCounter = 0, renderPhaseUpdates = null, numberOfReRenders = 0, RE_RENDER_LIMIT = 25, isInHookUserCodeInDev = !1, currentHookNameInDev;
      function resolveCurrentlyRenderingComponent() {
        if (currentlyRenderingComponent === null)
          throw new Error(`Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:
1. You might have mismatching versions of React and the renderer (such as React DOM)
2. You might be breaking the Rules of Hooks
3. You might have more than one copy of React in the same app
See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.`);
        return isInHookUserCodeInDev && error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks"), currentlyRenderingComponent;
      }
      function areHookInputsEqual(nextDeps, prevDeps) {
        if (prevDeps === null)
          return error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev), !1;
        nextDeps.length !== prevDeps.length && error(`The final argument passed to %s changed size between renders. The order and size of this array must remain constant.

Previous: %s
Incoming: %s`, currentHookNameInDev, "[" + nextDeps.join(", ") + "]", "[" + prevDeps.join(", ") + "]");
        for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++)
          if (!objectIs(nextDeps[i], prevDeps[i]))
            return !1;
        return !0;
      }
      function createHook() {
        if (numberOfReRenders > 0)
          throw new Error("Rendered more hooks than during the previous render");
        return {
          memoizedState: null,
          queue: null,
          next: null
        };
      }
      function createWorkInProgressHook() {
        return workInProgressHook === null ? firstWorkInProgressHook === null ? (isReRender = !1, firstWorkInProgressHook = workInProgressHook = createHook()) : (isReRender = !0, workInProgressHook = firstWorkInProgressHook) : workInProgressHook.next === null ? (isReRender = !1, workInProgressHook = workInProgressHook.next = createHook()) : (isReRender = !0, workInProgressHook = workInProgressHook.next), workInProgressHook;
      }
      function prepareToUseHooks(task, componentIdentity) {
        currentlyRenderingComponent = componentIdentity, currentlyRenderingTask = task, isInHookUserCodeInDev = !1, localIdCounter = 0;
      }
      function finishHooks(Component, props, children, refOrContext) {
        for (; didScheduleRenderPhaseUpdate; )
          didScheduleRenderPhaseUpdate = !1, localIdCounter = 0, numberOfReRenders += 1, workInProgressHook = null, children = Component(props, refOrContext);
        return resetHooksState(), children;
      }
      function checkDidRenderIdHook() {
        var didRenderIdHook = localIdCounter !== 0;
        return didRenderIdHook;
      }
      function resetHooksState() {
        isInHookUserCodeInDev = !1, currentlyRenderingComponent = null, currentlyRenderingTask = null, didScheduleRenderPhaseUpdate = !1, firstWorkInProgressHook = null, numberOfReRenders = 0, renderPhaseUpdates = null, workInProgressHook = null;
      }
      function readContext$1(context) {
        return isInHookUserCodeInDev && error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo()."), readContext(context);
      }
      function useContext6(context) {
        return currentHookNameInDev = "useContext", resolveCurrentlyRenderingComponent(), readContext(context);
      }
      function basicStateReducer(state, action3) {
        return typeof action3 == "function" ? action3(state) : action3;
      }
      function useState6(initialState) {
        return currentHookNameInDev = "useState", useReducer3(
          basicStateReducer,
          initialState
        );
      }
      function useReducer3(reducer, initialArg, init) {
        if (reducer !== basicStateReducer && (currentHookNameInDev = "useReducer"), currentlyRenderingComponent = resolveCurrentlyRenderingComponent(), workInProgressHook = createWorkInProgressHook(), isReRender) {
          var queue = workInProgressHook.queue, dispatch = queue.dispatch;
          if (renderPhaseUpdates !== null) {
            var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);
            if (firstRenderPhaseUpdate !== void 0) {
              renderPhaseUpdates.delete(queue);
              var newState = workInProgressHook.memoizedState, update = firstRenderPhaseUpdate;
              do {
                var action3 = update.action;
                isInHookUserCodeInDev = !0, newState = reducer(newState, action3), isInHookUserCodeInDev = !1, update = update.next;
              } while (update !== null);
              return workInProgressHook.memoizedState = newState, [newState, dispatch];
            }
          }
          return [workInProgressHook.memoizedState, dispatch];
        } else {
          isInHookUserCodeInDev = !0;
          var initialState;
          reducer === basicStateReducer ? initialState = typeof initialArg == "function" ? initialArg() : initialArg : initialState = init !== void 0 ? init(initialArg) : initialArg, isInHookUserCodeInDev = !1, workInProgressHook.memoizedState = initialState;
          var _queue = workInProgressHook.queue = {
            last: null,
            dispatch: null
          }, _dispatch = _queue.dispatch = dispatchAction.bind(null, currentlyRenderingComponent, _queue);
          return [workInProgressHook.memoizedState, _dispatch];
        }
      }
      function useMemo6(nextCreate, deps) {
        currentlyRenderingComponent = resolveCurrentlyRenderingComponent(), workInProgressHook = createWorkInProgressHook();
        var nextDeps = deps === void 0 ? null : deps;
        if (workInProgressHook !== null) {
          var prevState = workInProgressHook.memoizedState;
          if (prevState !== null && nextDeps !== null) {
            var prevDeps = prevState[1];
            if (areHookInputsEqual(nextDeps, prevDeps))
              return prevState[0];
          }
        }
        isInHookUserCodeInDev = !0;
        var nextValue = nextCreate();
        return isInHookUserCodeInDev = !1, workInProgressHook.memoizedState = [nextValue, nextDeps], nextValue;
      }
      function useRef6(initialValue) {
        currentlyRenderingComponent = resolveCurrentlyRenderingComponent(), workInProgressHook = createWorkInProgressHook();
        var previousRef = workInProgressHook.memoizedState;
        if (previousRef === null) {
          var ref = {
            current: initialValue
          };
          return Object.seal(ref), workInProgressHook.memoizedState = ref, ref;
        } else
          return previousRef;
      }
      function useLayoutEffect5(create, inputs) {
        currentHookNameInDev = "useLayoutEffect", error("useLayoutEffect does nothing on the server, because its effect cannot be encoded into the server renderer's output format. This will lead to a mismatch between the initial, non-hydrated UI and the intended UI. To avoid this, useLayoutEffect should only be used in components that render exclusively on the client. See https://reactjs.org/link/uselayouteffect-ssr for common fixes.");
      }
      function dispatchAction(componentIdentity, queue, action3) {
        if (numberOfReRenders >= RE_RENDER_LIMIT)
          throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
        if (componentIdentity === currentlyRenderingComponent) {
          didScheduleRenderPhaseUpdate = !0;
          var update = {
            action: action3,
            next: null
          };
          renderPhaseUpdates === null && (renderPhaseUpdates = /* @__PURE__ */ new Map());
          var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);
          if (firstRenderPhaseUpdate === void 0)
            renderPhaseUpdates.set(queue, update);
          else {
            for (var lastRenderPhaseUpdate = firstRenderPhaseUpdate; lastRenderPhaseUpdate.next !== null; )
              lastRenderPhaseUpdate = lastRenderPhaseUpdate.next;
            lastRenderPhaseUpdate.next = update;
          }
        }
      }
      function useCallback5(callback, deps) {
        return useMemo6(function() {
          return callback;
        }, deps);
      }
      function useMutableSource(source, getSnapshot, subscribe) {
        return resolveCurrentlyRenderingComponent(), getSnapshot(source._source);
      }
      function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
        if (getServerSnapshot === void 0)
          throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
        return getServerSnapshot();
      }
      function useDeferredValue(value) {
        return resolveCurrentlyRenderingComponent(), value;
      }
      function unsupportedStartTransition() {
        throw new Error("startTransition cannot be called during server rendering.");
      }
      function useTransition2() {
        return resolveCurrentlyRenderingComponent(), [!1, unsupportedStartTransition];
      }
      function useId() {
        var task = currentlyRenderingTask, treeId = getTreeId(task.treeContext), responseState = currentResponseState;
        if (responseState === null)
          throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component.");
        var localId = localIdCounter++;
        return makeId(responseState, treeId, localId);
      }
      function noop() {
      }
      var Dispatcher = {
        readContext: readContext$1,
        useContext: useContext6,
        useMemo: useMemo6,
        useReducer: useReducer3,
        useRef: useRef6,
        useState: useState6,
        useInsertionEffect: noop,
        useLayoutEffect: useLayoutEffect5,
        useCallback: useCallback5,
        useImperativeHandle: noop,
        useEffect: noop,
        useDebugValue: noop,
        useDeferredValue,
        useTransition: useTransition2,
        useId,
        useMutableSource,
        useSyncExternalStore
      }, currentResponseState = null;
      function setCurrentResponseState(responseState) {
        currentResponseState = responseState;
      }
      function getStackByComponentStackNode(componentStack) {
        try {
          var info = "", node = componentStack;
          do {
            switch (node.tag) {
              case 0:
                info += describeBuiltInComponentFrame(node.type, null, null);
                break;
              case 1:
                info += describeFunctionComponentFrame(node.type, null, null);
                break;
              case 2:
                info += describeClassComponentFrame(node.type, null, null);
                break;
            }
            node = node.parent;
          } while (node);
          return info;
        } catch (x) {
          return `
Error generating stack: ` + x.message + `
` + x.stack;
        }
      }
      var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame, PENDING = 0, COMPLETED = 1, FLUSHED = 2, ABORTED = 3, ERRORED = 4, OPEN = 0, CLOSING = 1, CLOSED = 2, DEFAULT_PROGRESSIVE_CHUNK_SIZE = 12800;
      function defaultErrorHandler(error2) {
        return console.error(error2), null;
      }
      function noop$1() {
      }
      function createRequest(children, responseState, rootFormatContext, progressiveChunkSize, onError, onAllReady, onShellReady, onShellError, onFatalError) {
        var pingedTasks = [], abortSet = /* @__PURE__ */ new Set(), request = {
          destination: null,
          responseState,
          progressiveChunkSize: progressiveChunkSize === void 0 ? DEFAULT_PROGRESSIVE_CHUNK_SIZE : progressiveChunkSize,
          status: OPEN,
          fatalError: null,
          nextSegmentId: 0,
          allPendingTasks: 0,
          pendingRootTasks: 0,
          completedRootSegment: null,
          abortableTasks: abortSet,
          pingedTasks,
          clientRenderedBoundaries: [],
          completedBoundaries: [],
          partialBoundaries: [],
          onError: onError === void 0 ? defaultErrorHandler : onError,
          onAllReady: onAllReady === void 0 ? noop$1 : onAllReady,
          onShellReady: onShellReady === void 0 ? noop$1 : onShellReady,
          onShellError: onShellError === void 0 ? noop$1 : onShellError,
          onFatalError: onFatalError === void 0 ? noop$1 : onFatalError
        }, rootSegment = createPendingSegment(
          request,
          0,
          null,
          rootFormatContext,
          !1,
          !1
        );
        rootSegment.parentFlushed = !0;
        var rootTask = createTask(request, children, null, rootSegment, abortSet, emptyContextObject, rootContextSnapshot, emptyTreeContext);
        return pingedTasks.push(rootTask), request;
      }
      function pingTask(request, task) {
        var pingedTasks = request.pingedTasks;
        pingedTasks.push(task), pingedTasks.length === 1 && scheduleWork(function() {
          return performWork(request);
        });
      }
      function createSuspenseBoundary(request, fallbackAbortableTasks) {
        return {
          id: UNINITIALIZED_SUSPENSE_BOUNDARY_ID,
          rootSegmentID: -1,
          parentFlushed: !1,
          pendingTasks: 0,
          forceClientRender: !1,
          completedSegments: [],
          byteSize: 0,
          fallbackAbortableTasks,
          errorDigest: null
        };
      }
      function createTask(request, node, blockedBoundary, blockedSegment, abortSet, legacyContext, context, treeContext) {
        request.allPendingTasks++, blockedBoundary === null ? request.pendingRootTasks++ : blockedBoundary.pendingTasks++;
        var task = {
          node,
          ping: function() {
            return pingTask(request, task);
          },
          blockedBoundary,
          blockedSegment,
          abortSet,
          legacyContext,
          context,
          treeContext
        };
        return task.componentStack = null, abortSet.add(task), task;
      }
      function createPendingSegment(request, index, boundary, formatContext, lastPushedText, textEmbedded) {
        return {
          status: PENDING,
          id: -1,
          index,
          parentFlushed: !1,
          chunks: [],
          children: [],
          formatContext,
          boundary,
          lastPushedText,
          textEmbedded
        };
      }
      var currentTaskInDEV = null;
      function getCurrentStackInDEV() {
        return currentTaskInDEV === null || currentTaskInDEV.componentStack === null ? "" : getStackByComponentStackNode(currentTaskInDEV.componentStack);
      }
      function pushBuiltInComponentStackInDEV(task, type) {
        task.componentStack = {
          tag: 0,
          parent: task.componentStack,
          type
        };
      }
      function pushFunctionComponentStackInDEV(task, type) {
        task.componentStack = {
          tag: 1,
          parent: task.componentStack,
          type
        };
      }
      function pushClassComponentStackInDEV(task, type) {
        task.componentStack = {
          tag: 2,
          parent: task.componentStack,
          type
        };
      }
      function popComponentStackInDEV(task) {
        task.componentStack === null ? error("Unexpectedly popped too many stack frames. This is a bug in React.") : task.componentStack = task.componentStack.parent;
      }
      var lastBoundaryErrorComponentStackDev = null;
      function captureBoundaryErrorDetailsDev(boundary, error2) {
        {
          var errorMessage;
          typeof error2 == "string" ? errorMessage = error2 : error2 && typeof error2.message == "string" ? errorMessage = error2.message : errorMessage = String(error2);
          var errorComponentStack = lastBoundaryErrorComponentStackDev || getCurrentStackInDEV();
          lastBoundaryErrorComponentStackDev = null, boundary.errorMessage = errorMessage, boundary.errorComponentStack = errorComponentStack;
        }
      }
      function logRecoverableError(request, error2) {
        var errorDigest = request.onError(error2);
        if (errorDigest != null && typeof errorDigest != "string")
          throw new Error('onError returned something with a type other than "string". onError should return a string and may return null or undefined but must not return anything else. It received something of type "' + typeof errorDigest + '" instead');
        return errorDigest;
      }
      function fatalError(request, error2) {
        var onShellError = request.onShellError;
        onShellError(error2);
        var onFatalError = request.onFatalError;
        onFatalError(error2), request.destination !== null ? (request.status = CLOSED, closeWithError(request.destination, error2)) : (request.status = CLOSING, request.fatalError = error2);
      }
      function renderSuspenseBoundary(request, task, props) {
        pushBuiltInComponentStackInDEV(task, "Suspense");
        var parentBoundary = task.blockedBoundary, parentSegment = task.blockedSegment, fallback = props.fallback, content = props.children, fallbackAbortSet = /* @__PURE__ */ new Set(), newBoundary = createSuspenseBoundary(request, fallbackAbortSet), insertionIndex = parentSegment.chunks.length, boundarySegment = createPendingSegment(
          request,
          insertionIndex,
          newBoundary,
          parentSegment.formatContext,
          !1,
          !1
        );
        parentSegment.children.push(boundarySegment), parentSegment.lastPushedText = !1;
        var contentRootSegment = createPendingSegment(
          request,
          0,
          null,
          parentSegment.formatContext,
          !1,
          !1
        );
        contentRootSegment.parentFlushed = !0, task.blockedBoundary = newBoundary, task.blockedSegment = contentRootSegment;
        try {
          if (renderNode(request, task, content), pushSegmentFinale(contentRootSegment.chunks, request.responseState, contentRootSegment.lastPushedText, contentRootSegment.textEmbedded), contentRootSegment.status = COMPLETED, queueCompletedSegment(newBoundary, contentRootSegment), newBoundary.pendingTasks === 0) {
            popComponentStackInDEV(task);
            return;
          }
        } catch (error2) {
          contentRootSegment.status = ERRORED, newBoundary.forceClientRender = !0, newBoundary.errorDigest = logRecoverableError(request, error2), captureBoundaryErrorDetailsDev(newBoundary, error2);
        } finally {
          task.blockedBoundary = parentBoundary, task.blockedSegment = parentSegment;
        }
        var suspendedFallbackTask = createTask(request, fallback, parentBoundary, boundarySegment, fallbackAbortSet, task.legacyContext, task.context, task.treeContext);
        suspendedFallbackTask.componentStack = task.componentStack, request.pingedTasks.push(suspendedFallbackTask), popComponentStackInDEV(task);
      }
      function renderHostElement(request, task, type, props) {
        pushBuiltInComponentStackInDEV(task, type);
        var segment = task.blockedSegment, children = pushStartInstance(segment.chunks, type, props, request.responseState, segment.formatContext);
        segment.lastPushedText = !1;
        var prevContext = segment.formatContext;
        segment.formatContext = getChildFormatContext(prevContext, type, props), renderNode(request, task, children), segment.formatContext = prevContext, pushEndInstance(segment.chunks, type), segment.lastPushedText = !1, popComponentStackInDEV(task);
      }
      function shouldConstruct$1(Component) {
        return Component.prototype && Component.prototype.isReactComponent;
      }
      function renderWithHooks(request, task, Component, props, secondArg) {
        var componentIdentity = {};
        prepareToUseHooks(task, componentIdentity);
        var result = Component(props, secondArg);
        return finishHooks(Component, props, result, secondArg);
      }
      function finishClassComponent(request, task, instance, Component, props) {
        var nextChildren = instance.render();
        instance.props !== props && (didWarnAboutReassigningProps || error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromType(Component) || "a component"), didWarnAboutReassigningProps = !0);
        {
          var childContextTypes = Component.childContextTypes;
          if (childContextTypes != null) {
            var previousContext = task.legacyContext, mergedContext = processChildContext(instance, Component, previousContext, childContextTypes);
            task.legacyContext = mergedContext, renderNodeDestructive(request, task, nextChildren), task.legacyContext = previousContext;
            return;
          }
        }
        renderNodeDestructive(request, task, nextChildren);
      }
      function renderClassComponent(request, task, Component, props) {
        pushClassComponentStackInDEV(task, Component);
        var maskedContext = getMaskedContext(Component, task.legacyContext), instance = constructClassInstance(Component, props, maskedContext);
        mountClassInstance(instance, Component, props, maskedContext), finishClassComponent(request, task, instance, Component, props), popComponentStackInDEV(task);
      }
      var didWarnAboutBadClass = {}, didWarnAboutModulePatternComponent = {}, didWarnAboutContextTypeOnFunctionComponent = {}, didWarnAboutGetDerivedStateOnFunctionComponent = {}, didWarnAboutReassigningProps = !1, didWarnAboutGenerators = !1, didWarnAboutMaps = !1, hasWarnedAboutUsingContextAsConsumer = !1;
      function renderIndeterminateComponent(request, task, Component, props) {
        var legacyContext;
        if (legacyContext = getMaskedContext(Component, task.legacyContext), pushFunctionComponentStackInDEV(task, Component), Component.prototype && typeof Component.prototype.render == "function") {
          var componentName = getComponentNameFromType(Component) || "Unknown";
          didWarnAboutBadClass[componentName] || (error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName), didWarnAboutBadClass[componentName] = !0);
        }
        var value = renderWithHooks(request, task, Component, props, legacyContext), hasId = checkDidRenderIdHook();
        if (typeof value == "object" && value !== null && typeof value.render == "function" && value.$$typeof === void 0) {
          var _componentName = getComponentNameFromType(Component) || "Unknown";
          didWarnAboutModulePatternComponent[_componentName] || (error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName), didWarnAboutModulePatternComponent[_componentName] = !0);
        }
        if (typeof value == "object" && value !== null && typeof value.render == "function" && value.$$typeof === void 0) {
          {
            var _componentName2 = getComponentNameFromType(Component) || "Unknown";
            didWarnAboutModulePatternComponent[_componentName2] || (error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2), didWarnAboutModulePatternComponent[_componentName2] = !0);
          }
          mountClassInstance(value, Component, props, legacyContext), finishClassComponent(request, task, value, Component, props);
        } else if (validateFunctionComponentInDev(Component), hasId) {
          var prevTreeContext = task.treeContext, totalChildren = 1, index = 0;
          task.treeContext = pushTreeContext(prevTreeContext, totalChildren, index);
          try {
            renderNodeDestructive(request, task, value);
          } finally {
            task.treeContext = prevTreeContext;
          }
        } else
          renderNodeDestructive(request, task, value);
        popComponentStackInDEV(task);
      }
      function validateFunctionComponentInDev(Component) {
        {
          if (Component && Component.childContextTypes && error("%s(...): childContextTypes cannot be defined on a function component.", Component.displayName || Component.name || "Component"), typeof Component.getDerivedStateFromProps == "function") {
            var _componentName3 = getComponentNameFromType(Component) || "Unknown";
            didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] || (error("%s: Function components do not support getDerivedStateFromProps.", _componentName3), didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = !0);
          }
          if (typeof Component.contextType == "object" && Component.contextType !== null) {
            var _componentName4 = getComponentNameFromType(Component) || "Unknown";
            didWarnAboutContextTypeOnFunctionComponent[_componentName4] || (error("%s: Function components do not support contextType.", _componentName4), didWarnAboutContextTypeOnFunctionComponent[_componentName4] = !0);
          }
        }
      }
      function resolveDefaultProps(Component, baseProps) {
        if (Component && Component.defaultProps) {
          var props = assign({}, baseProps), defaultProps = Component.defaultProps;
          for (var propName in defaultProps)
            props[propName] === void 0 && (props[propName] = defaultProps[propName]);
          return props;
        }
        return baseProps;
      }
      function renderForwardRef(request, task, type, props, ref) {
        pushFunctionComponentStackInDEV(task, type.render);
        var children = renderWithHooks(request, task, type.render, props, ref), hasId = checkDidRenderIdHook();
        if (hasId) {
          var prevTreeContext = task.treeContext, totalChildren = 1, index = 0;
          task.treeContext = pushTreeContext(prevTreeContext, totalChildren, index);
          try {
            renderNodeDestructive(request, task, children);
          } finally {
            task.treeContext = prevTreeContext;
          }
        } else
          renderNodeDestructive(request, task, children);
        popComponentStackInDEV(task);
      }
      function renderMemo(request, task, type, props, ref) {
        var innerType = type.type, resolvedProps = resolveDefaultProps(innerType, props);
        renderElement(request, task, innerType, resolvedProps, ref);
      }
      function renderContextConsumer(request, task, context, props) {
        context._context === void 0 ? context !== context.Consumer && (hasWarnedAboutUsingContextAsConsumer || (hasWarnedAboutUsingContextAsConsumer = !0, error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?"))) : context = context._context;
        var render2 = props.children;
        typeof render2 != "function" && error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
        var newValue = readContext(context), newChildren = render2(newValue);
        renderNodeDestructive(request, task, newChildren);
      }
      function renderContextProvider(request, task, type, props) {
        var context = type._context, value = props.value, children = props.children, prevSnapshot;
        prevSnapshot = task.context, task.context = pushProvider(context, value), renderNodeDestructive(request, task, children), task.context = popProvider(context), prevSnapshot !== task.context && error("Popping the context provider did not return back to the original snapshot. This is a bug in React.");
      }
      function renderLazyComponent(request, task, lazyComponent, props, ref) {
        pushBuiltInComponentStackInDEV(task, "Lazy");
        var payload = lazyComponent._payload, init = lazyComponent._init, Component = init(payload), resolvedProps = resolveDefaultProps(Component, props);
        renderElement(request, task, Component, resolvedProps, ref), popComponentStackInDEV(task);
      }
      function renderElement(request, task, type, props, ref) {
        if (typeof type == "function")
          if (shouldConstruct$1(type)) {
            renderClassComponent(request, task, type, props);
            return;
          } else {
            renderIndeterminateComponent(request, task, type, props);
            return;
          }
        if (typeof type == "string") {
          renderHostElement(request, task, type, props);
          return;
        }
        switch (type) {
          case REACT_LEGACY_HIDDEN_TYPE:
          case REACT_DEBUG_TRACING_MODE_TYPE:
          case REACT_STRICT_MODE_TYPE:
          case REACT_PROFILER_TYPE:
          case REACT_FRAGMENT_TYPE: {
            renderNodeDestructive(request, task, props.children);
            return;
          }
          case REACT_SUSPENSE_LIST_TYPE: {
            pushBuiltInComponentStackInDEV(task, "SuspenseList"), renderNodeDestructive(request, task, props.children), popComponentStackInDEV(task);
            return;
          }
          case REACT_SCOPE_TYPE:
            throw new Error("ReactDOMServer does not yet support scope components.");
          case REACT_SUSPENSE_TYPE: {
            renderSuspenseBoundary(request, task, props);
            return;
          }
        }
        if (typeof type == "object" && type !== null)
          switch (type.$$typeof) {
            case REACT_FORWARD_REF_TYPE: {
              renderForwardRef(request, task, type, props, ref);
              return;
            }
            case REACT_MEMO_TYPE: {
              renderMemo(request, task, type, props, ref);
              return;
            }
            case REACT_PROVIDER_TYPE: {
              renderContextProvider(request, task, type, props);
              return;
            }
            case REACT_CONTEXT_TYPE: {
              renderContextConsumer(request, task, type, props);
              return;
            }
            case REACT_LAZY_TYPE: {
              renderLazyComponent(request, task, type, props);
              return;
            }
          }
        var info = "";
        throw (type === void 0 || typeof type == "object" && type !== null && Object.keys(type).length === 0) && (info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports."), new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info));
      }
      function validateIterable(iterable, iteratorFn) {
        typeof Symbol == "function" && iterable[Symbol.toStringTag] === "Generator" && (didWarnAboutGenerators || error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers."), didWarnAboutGenerators = !0), iterable.entries === iteratorFn && (didWarnAboutMaps || error("Using Maps as children is not supported. Use an array of keyed ReactElements instead."), didWarnAboutMaps = !0);
      }
      function renderNodeDestructive(request, task, node) {
        try {
          return renderNodeDestructiveImpl(request, task, node);
        } catch (x) {
          throw typeof x == "object" && x !== null && typeof x.then == "function" || (lastBoundaryErrorComponentStackDev = lastBoundaryErrorComponentStackDev !== null ? lastBoundaryErrorComponentStackDev : getCurrentStackInDEV()), x;
        }
      }
      function renderNodeDestructiveImpl(request, task, node) {
        if (task.node = node, typeof node == "object" && node !== null) {
          switch (node.$$typeof) {
            case REACT_ELEMENT_TYPE: {
              var element = node, type = element.type, props = element.props, ref = element.ref;
              renderElement(request, task, type, props, ref);
              return;
            }
            case REACT_PORTAL_TYPE:
              throw new Error("Portals are not currently supported by the server renderer. Render them conditionally so that they only appear on the client render.");
            case REACT_LAZY_TYPE: {
              var lazyNode = node, payload = lazyNode._payload, init = lazyNode._init, resolvedNode;
              try {
                resolvedNode = init(payload);
              } catch (x) {
                throw typeof x == "object" && x !== null && typeof x.then == "function" && pushBuiltInComponentStackInDEV(task, "Lazy"), x;
              }
              renderNodeDestructive(request, task, resolvedNode);
              return;
            }
          }
          if (isArray(node)) {
            renderChildrenArray(request, task, node);
            return;
          }
          var iteratorFn = getIteratorFn(node);
          if (iteratorFn) {
            validateIterable(node, iteratorFn);
            var iterator = iteratorFn.call(node);
            if (iterator) {
              var step = iterator.next();
              if (!step.done) {
                var children = [];
                do
                  children.push(step.value), step = iterator.next();
                while (!step.done);
                renderChildrenArray(request, task, children);
                return;
              }
              return;
            }
          }
          var childString = Object.prototype.toString.call(node);
          throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(node).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
        }
        if (typeof node == "string") {
          var segment = task.blockedSegment;
          segment.lastPushedText = pushTextInstance(task.blockedSegment.chunks, node, request.responseState, segment.lastPushedText);
          return;
        }
        if (typeof node == "number") {
          var _segment = task.blockedSegment;
          _segment.lastPushedText = pushTextInstance(task.blockedSegment.chunks, "" + node, request.responseState, _segment.lastPushedText);
          return;
        }
        typeof node == "function" && error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
      }
      function renderChildrenArray(request, task, children) {
        for (var totalChildren = children.length, i = 0; i < totalChildren; i++) {
          var prevTreeContext = task.treeContext;
          task.treeContext = pushTreeContext(prevTreeContext, totalChildren, i);
          try {
            renderNode(request, task, children[i]);
          } finally {
            task.treeContext = prevTreeContext;
          }
        }
      }
      function spawnNewSuspendedTask(request, task, x) {
        var segment = task.blockedSegment, insertionIndex = segment.chunks.length, newSegment = createPendingSegment(
          request,
          insertionIndex,
          null,
          segment.formatContext,
          segment.lastPushedText,
          !0
        );
        segment.children.push(newSegment), segment.lastPushedText = !1;
        var newTask = createTask(request, task.node, task.blockedBoundary, newSegment, task.abortSet, task.legacyContext, task.context, task.treeContext);
        task.componentStack !== null && (newTask.componentStack = task.componentStack.parent);
        var ping = newTask.ping;
        x.then(ping, ping);
      }
      function renderNode(request, task, node) {
        var previousFormatContext = task.blockedSegment.formatContext, previousLegacyContext = task.legacyContext, previousContext = task.context, previousComponentStack = null;
        previousComponentStack = task.componentStack;
        try {
          return renderNodeDestructive(request, task, node);
        } catch (x) {
          if (resetHooksState(), typeof x == "object" && x !== null && typeof x.then == "function") {
            spawnNewSuspendedTask(request, task, x), task.blockedSegment.formatContext = previousFormatContext, task.legacyContext = previousLegacyContext, task.context = previousContext, switchContext(previousContext), task.componentStack = previousComponentStack;
            return;
          } else
            throw task.blockedSegment.formatContext = previousFormatContext, task.legacyContext = previousLegacyContext, task.context = previousContext, switchContext(previousContext), task.componentStack = previousComponentStack, x;
        }
      }
      function erroredTask(request, boundary, segment, error2) {
        var errorDigest = logRecoverableError(request, error2);
        if (boundary === null ? fatalError(request, error2) : (boundary.pendingTasks--, boundary.forceClientRender || (boundary.forceClientRender = !0, boundary.errorDigest = errorDigest, captureBoundaryErrorDetailsDev(boundary, error2), boundary.parentFlushed && request.clientRenderedBoundaries.push(boundary))), request.allPendingTasks--, request.allPendingTasks === 0) {
          var onAllReady = request.onAllReady;
          onAllReady();
        }
      }
      function abortTaskSoft(task) {
        var request = this, boundary = task.blockedBoundary, segment = task.blockedSegment;
        segment.status = ABORTED, finishedTask(request, boundary, segment);
      }
      function abortTask(task, request, reason) {
        var boundary = task.blockedBoundary, segment = task.blockedSegment;
        if (segment.status = ABORTED, boundary === null)
          request.allPendingTasks--, request.status !== CLOSED && (request.status = CLOSED, request.destination !== null && close(request.destination));
        else {
          if (boundary.pendingTasks--, !boundary.forceClientRender) {
            boundary.forceClientRender = !0;
            var _error = reason === void 0 ? new Error("The render was aborted by the server without a reason.") : reason;
            boundary.errorDigest = request.onError(_error);
            {
              var errorPrefix = "The server did not finish this Suspense boundary: ";
              _error && typeof _error.message == "string" ? _error = errorPrefix + _error.message : _error = errorPrefix + String(_error);
              var previousTaskInDev = currentTaskInDEV;
              currentTaskInDEV = task;
              try {
                captureBoundaryErrorDetailsDev(boundary, _error);
              } finally {
                currentTaskInDEV = previousTaskInDev;
              }
            }
            boundary.parentFlushed && request.clientRenderedBoundaries.push(boundary);
          }
          if (boundary.fallbackAbortableTasks.forEach(function(fallbackTask) {
            return abortTask(fallbackTask, request, reason);
          }), boundary.fallbackAbortableTasks.clear(), request.allPendingTasks--, request.allPendingTasks === 0) {
            var onAllReady = request.onAllReady;
            onAllReady();
          }
        }
      }
      function queueCompletedSegment(boundary, segment) {
        if (segment.chunks.length === 0 && segment.children.length === 1 && segment.children[0].boundary === null) {
          var childSegment = segment.children[0];
          childSegment.id = segment.id, childSegment.parentFlushed = !0, childSegment.status === COMPLETED && queueCompletedSegment(boundary, childSegment);
        } else {
          var completedSegments = boundary.completedSegments;
          completedSegments.push(segment);
        }
      }
      function finishedTask(request, boundary, segment) {
        if (boundary === null) {
          if (segment.parentFlushed) {
            if (request.completedRootSegment !== null)
              throw new Error("There can only be one root segment. This is a bug in React.");
            request.completedRootSegment = segment;
          }
          if (request.pendingRootTasks--, request.pendingRootTasks === 0) {
            request.onShellError = noop$1;
            var onShellReady = request.onShellReady;
            onShellReady();
          }
        } else if (boundary.pendingTasks--, !boundary.forceClientRender) {
          if (boundary.pendingTasks === 0)
            segment.parentFlushed && segment.status === COMPLETED && queueCompletedSegment(boundary, segment), boundary.parentFlushed && request.completedBoundaries.push(boundary), boundary.fallbackAbortableTasks.forEach(abortTaskSoft, request), boundary.fallbackAbortableTasks.clear();
          else if (segment.parentFlushed && segment.status === COMPLETED) {
            queueCompletedSegment(boundary, segment);
            var completedSegments = boundary.completedSegments;
            completedSegments.length === 1 && boundary.parentFlushed && request.partialBoundaries.push(boundary);
          }
        }
        if (request.allPendingTasks--, request.allPendingTasks === 0) {
          var onAllReady = request.onAllReady;
          onAllReady();
        }
      }
      function retryTask(request, task) {
        var segment = task.blockedSegment;
        if (segment.status === PENDING) {
          switchContext(task.context);
          var prevTaskInDEV = null;
          prevTaskInDEV = currentTaskInDEV, currentTaskInDEV = task;
          try {
            renderNodeDestructive(request, task, task.node), pushSegmentFinale(segment.chunks, request.responseState, segment.lastPushedText, segment.textEmbedded), task.abortSet.delete(task), segment.status = COMPLETED, finishedTask(request, task.blockedBoundary, segment);
          } catch (x) {
            if (resetHooksState(), typeof x == "object" && x !== null && typeof x.then == "function") {
              var ping = task.ping;
              x.then(ping, ping);
            } else
              task.abortSet.delete(task), segment.status = ERRORED, erroredTask(request, task.blockedBoundary, segment, x);
          } finally {
            currentTaskInDEV = prevTaskInDEV;
          }
        }
      }
      function performWork(request) {
        if (request.status !== CLOSED) {
          var prevContext = getActiveContext(), prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = Dispatcher;
          var prevGetCurrentStackImpl;
          prevGetCurrentStackImpl = ReactDebugCurrentFrame$1.getCurrentStack, ReactDebugCurrentFrame$1.getCurrentStack = getCurrentStackInDEV;
          var prevResponseState = currentResponseState;
          setCurrentResponseState(request.responseState);
          try {
            var pingedTasks = request.pingedTasks, i;
            for (i = 0; i < pingedTasks.length; i++) {
              var task = pingedTasks[i];
              retryTask(request, task);
            }
            pingedTasks.splice(0, i), request.destination !== null && flushCompletedQueues(request, request.destination);
          } catch (error2) {
            logRecoverableError(request, error2), fatalError(request, error2);
          } finally {
            setCurrentResponseState(prevResponseState), ReactCurrentDispatcher$1.current = prevDispatcher, ReactDebugCurrentFrame$1.getCurrentStack = prevGetCurrentStackImpl, prevDispatcher === Dispatcher && switchContext(prevContext);
          }
        }
      }
      function flushSubtree(request, destination, segment) {
        switch (segment.parentFlushed = !0, segment.status) {
          case PENDING: {
            var segmentID = segment.id = request.nextSegmentId++;
            return segment.lastPushedText = !1, segment.textEmbedded = !1, writePlaceholder(destination, request.responseState, segmentID);
          }
          case COMPLETED: {
            segment.status = FLUSHED;
            for (var r2 = !0, chunks = segment.chunks, chunkIdx = 0, children = segment.children, childIdx = 0; childIdx < children.length; childIdx++) {
              for (var nextChild = children[childIdx]; chunkIdx < nextChild.index; chunkIdx++)
                writeChunk(destination, chunks[chunkIdx]);
              r2 = flushSegment(request, destination, nextChild);
            }
            for (; chunkIdx < chunks.length - 1; chunkIdx++)
              writeChunk(destination, chunks[chunkIdx]);
            return chunkIdx < chunks.length && (r2 = writeChunkAndReturn(destination, chunks[chunkIdx])), r2;
          }
          default:
            throw new Error("Aborted, errored or already flushed boundaries should not be flushed again. This is a bug in React.");
        }
      }
      function flushSegment(request, destination, segment) {
        var boundary = segment.boundary;
        if (boundary === null)
          return flushSubtree(request, destination, segment);
        if (boundary.parentFlushed = !0, boundary.forceClientRender)
          return writeStartClientRenderedSuspenseBoundary(destination, request.responseState, boundary.errorDigest, boundary.errorMessage, boundary.errorComponentStack), flushSubtree(request, destination, segment), writeEndClientRenderedSuspenseBoundary(destination, request.responseState);
        if (boundary.pendingTasks > 0) {
          boundary.rootSegmentID = request.nextSegmentId++, boundary.completedSegments.length > 0 && request.partialBoundaries.push(boundary);
          var id = boundary.id = assignSuspenseBoundaryID(request.responseState);
          return writeStartPendingSuspenseBoundary(destination, request.responseState, id), flushSubtree(request, destination, segment), writeEndPendingSuspenseBoundary(destination, request.responseState);
        } else {
          if (boundary.byteSize > request.progressiveChunkSize)
            return boundary.rootSegmentID = request.nextSegmentId++, request.completedBoundaries.push(boundary), writeStartPendingSuspenseBoundary(destination, request.responseState, boundary.id), flushSubtree(request, destination, segment), writeEndPendingSuspenseBoundary(destination, request.responseState);
          writeStartCompletedSuspenseBoundary(destination, request.responseState);
          var completedSegments = boundary.completedSegments;
          if (completedSegments.length !== 1)
            throw new Error("A previously unvisited boundary must have exactly one root segment. This is a bug in React.");
          var contentSegment = completedSegments[0];
          return flushSegment(request, destination, contentSegment), writeEndCompletedSuspenseBoundary(destination, request.responseState);
        }
      }
      function flushClientRenderedBoundary(request, destination, boundary) {
        return writeClientRenderBoundaryInstruction(destination, request.responseState, boundary.id, boundary.errorDigest, boundary.errorMessage, boundary.errorComponentStack);
      }
      function flushSegmentContainer(request, destination, segment) {
        return writeStartSegment(destination, request.responseState, segment.formatContext, segment.id), flushSegment(request, destination, segment), writeEndSegment(destination, segment.formatContext);
      }
      function flushCompletedBoundary(request, destination, boundary) {
        for (var completedSegments = boundary.completedSegments, i = 0; i < completedSegments.length; i++) {
          var segment = completedSegments[i];
          flushPartiallyCompletedSegment(request, destination, boundary, segment);
        }
        return completedSegments.length = 0, writeCompletedBoundaryInstruction(destination, request.responseState, boundary.id, boundary.rootSegmentID);
      }
      function flushPartialBoundary(request, destination, boundary) {
        for (var completedSegments = boundary.completedSegments, i = 0; i < completedSegments.length; i++) {
          var segment = completedSegments[i];
          if (!flushPartiallyCompletedSegment(request, destination, boundary, segment))
            return i++, completedSegments.splice(0, i), !1;
        }
        return completedSegments.splice(0, i), !0;
      }
      function flushPartiallyCompletedSegment(request, destination, boundary, segment) {
        if (segment.status === FLUSHED)
          return !0;
        var segmentID = segment.id;
        if (segmentID === -1) {
          var rootSegmentID = segment.id = boundary.rootSegmentID;
          if (rootSegmentID === -1)
            throw new Error("A root segment ID must have been assigned by now. This is a bug in React.");
          return flushSegmentContainer(request, destination, segment);
        } else
          return flushSegmentContainer(request, destination, segment), writeCompletedSegmentInstruction(destination, request.responseState, segmentID);
      }
      function flushCompletedQueues(request, destination) {
        beginWriting();
        try {
          var completedRootSegment = request.completedRootSegment;
          completedRootSegment !== null && request.pendingRootTasks === 0 && (flushSegment(request, destination, completedRootSegment), request.completedRootSegment = null, writeCompletedRoot(destination, request.responseState));
          var clientRenderedBoundaries = request.clientRenderedBoundaries, i;
          for (i = 0; i < clientRenderedBoundaries.length; i++) {
            var boundary = clientRenderedBoundaries[i];
            if (!flushClientRenderedBoundary(request, destination, boundary)) {
              request.destination = null, i++, clientRenderedBoundaries.splice(0, i);
              return;
            }
          }
          clientRenderedBoundaries.splice(0, i);
          var completedBoundaries = request.completedBoundaries;
          for (i = 0; i < completedBoundaries.length; i++) {
            var _boundary = completedBoundaries[i];
            if (!flushCompletedBoundary(request, destination, _boundary)) {
              request.destination = null, i++, completedBoundaries.splice(0, i);
              return;
            }
          }
          completedBoundaries.splice(0, i), completeWriting(destination), beginWriting(destination);
          var partialBoundaries = request.partialBoundaries;
          for (i = 0; i < partialBoundaries.length; i++) {
            var _boundary2 = partialBoundaries[i];
            if (!flushPartialBoundary(request, destination, _boundary2)) {
              request.destination = null, i++, partialBoundaries.splice(0, i);
              return;
            }
          }
          partialBoundaries.splice(0, i);
          var largeBoundaries = request.completedBoundaries;
          for (i = 0; i < largeBoundaries.length; i++) {
            var _boundary3 = largeBoundaries[i];
            if (!flushCompletedBoundary(request, destination, _boundary3)) {
              request.destination = null, i++, largeBoundaries.splice(0, i);
              return;
            }
          }
          largeBoundaries.splice(0, i);
        } finally {
          completeWriting(destination), request.allPendingTasks === 0 && request.pingedTasks.length === 0 && request.clientRenderedBoundaries.length === 0 && request.completedBoundaries.length === 0 && (request.abortableTasks.size !== 0 && error("There was still abortable task at the root when we closed. This is a bug in React."), close(destination));
        }
      }
      function startWork(request) {
        scheduleWork(function() {
          return performWork(request);
        });
      }
      function startFlowing(request, destination) {
        if (request.status === CLOSING) {
          request.status = CLOSED, closeWithError(destination, request.fatalError);
          return;
        }
        if (request.status !== CLOSED && request.destination === null) {
          request.destination = destination;
          try {
            flushCompletedQueues(request, destination);
          } catch (error2) {
            logRecoverableError(request, error2), fatalError(request, error2);
          }
        }
      }
      function abort(request, reason) {
        try {
          var abortableTasks = request.abortableTasks;
          abortableTasks.forEach(function(task) {
            return abortTask(task, request, reason);
          }), abortableTasks.clear(), request.destination !== null && flushCompletedQueues(request, request.destination);
        } catch (error2) {
          logRecoverableError(request, error2), fatalError(request, error2);
        }
      }
      function renderToReadableStream(children, options) {
        return new Promise(function(resolve, reject) {
          var onFatalError, onAllReady, allReady = new Promise(function(res, rej) {
            onAllReady = res, onFatalError = rej;
          });
          function onShellReady() {
            var stream = new ReadableStream(
              {
                type: "bytes",
                pull: function(controller) {
                  startFlowing(request, controller);
                },
                cancel: function(reason) {
                  abort(request);
                }
              },
              {
                highWaterMark: 0
              }
            );
            stream.allReady = allReady, resolve(stream);
          }
          function onShellError(error2) {
            allReady.catch(function() {
            }), reject(error2);
          }
          var request = createRequest(children, createResponseState(options ? options.identifierPrefix : void 0, options ? options.nonce : void 0, options ? options.bootstrapScriptContent : void 0, options ? options.bootstrapScripts : void 0, options ? options.bootstrapModules : void 0), createRootFormatContext(options ? options.namespaceURI : void 0), options ? options.progressiveChunkSize : void 0, options ? options.onError : void 0, onAllReady, onShellReady, onShellError, onFatalError);
          if (options && options.signal) {
            var signal = options.signal, listener = function() {
              abort(request, signal.reason), signal.removeEventListener("abort", listener);
            };
            signal.addEventListener("abort", listener);
          }
          startWork(request);
        });
      }
      exports.renderToReadableStream = renderToReadableStream, exports.version = ReactVersion;
    })();
  }
});

// ../../node_modules/.pnpm/react-dom@18.2.0_react@18.2.0/node_modules/react-dom/server.browser.js
var require_server_browser = __commonJS({
  "../../node_modules/.pnpm/react-dom@18.2.0_react@18.2.0/node_modules/react-dom/server.browser.js"(exports) {
    "use strict";
    var l, s;
    l = require_react_dom_server_legacy_browser_development(), s = require_react_dom_server_browser_development();
    exports.version = l.version;
    exports.renderToString = l.renderToString;
    exports.renderToStaticMarkup = l.renderToStaticMarkup;
    exports.renderToNodeStream = l.renderToNodeStream;
    exports.renderToStaticNodeStream = l.renderToStaticNodeStream;
    exports.renderToReadableStream = s.renderToReadableStream;
  }
});

// ../../node_modules/.pnpm/react@18.2.0/node_modules/react/cjs/react-jsx-dev-runtime.development.js
var require_react_jsx_dev_runtime_development = __commonJS({
  "../../node_modules/.pnpm/react@18.2.0/node_modules/react/cjs/react-jsx-dev-runtime.development.js"(exports) {
    "use strict";
    (function() {
      "use strict";
      var React8 = require_react(), REACT_ELEMENT_TYPE = Symbol.for("react.element"), REACT_PORTAL_TYPE = Symbol.for("react.portal"), REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"), REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"), REACT_PROFILER_TYPE = Symbol.for("react.profiler"), REACT_PROVIDER_TYPE = Symbol.for("react.provider"), REACT_CONTEXT_TYPE = Symbol.for("react.context"), REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"), REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"), REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"), REACT_MEMO_TYPE = Symbol.for("react.memo"), REACT_LAZY_TYPE = Symbol.for("react.lazy"), REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen"), MAYBE_ITERATOR_SYMBOL = Symbol.iterator, FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable != "object")
          return null;
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        return typeof maybeIterator == "function" ? maybeIterator : null;
      }
      var ReactSharedInternals = React8.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
      function error(format) {
        {
          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)
            args[_key2 - 1] = arguments[_key2];
          printWarning("error", format, args);
        }
      }
      function printWarning(level, format, args) {
        {
          var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame, stack = ReactDebugCurrentFrame2.getStackAddendum();
          stack !== "" && (format += "%s", args = args.concat([stack]));
          var argsWithFormat = args.map(function(item) {
            return String(item);
          });
          argsWithFormat.unshift("Warning: " + format), Function.prototype.apply.call(console[level], console, argsWithFormat);
        }
      }
      var enableScopeAPI = !1, enableCacheElement = !1, enableTransitionTracing = !1, enableLegacyHidden = !1, enableDebugTracing = !1, REACT_MODULE_REFERENCE;
      REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
      function isValidElementType(type) {
        return !!(typeof type == "string" || typeof type == "function" || type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing || typeof type == "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0));
      }
      function getWrappedName(outerType, innerType, wrapperName) {
        var displayName = outerType.displayName;
        if (displayName)
          return displayName;
        var functionName = innerType.displayName || innerType.name || "";
        return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
      }
      function getContextName(type) {
        return type.displayName || "Context";
      }
      function getComponentNameFromType(type) {
        if (type == null)
          return null;
        if (typeof type.tag == "number" && error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."), typeof type == "function")
          return type.displayName || type.name || null;
        if (typeof type == "string")
          return type;
        switch (type) {
          case REACT_FRAGMENT_TYPE:
            return "Fragment";
          case REACT_PORTAL_TYPE:
            return "Portal";
          case REACT_PROFILER_TYPE:
            return "Profiler";
          case REACT_STRICT_MODE_TYPE:
            return "StrictMode";
          case REACT_SUSPENSE_TYPE:
            return "Suspense";
          case REACT_SUSPENSE_LIST_TYPE:
            return "SuspenseList";
        }
        if (typeof type == "object")
          switch (type.$$typeof) {
            case REACT_CONTEXT_TYPE:
              var context = type;
              return getContextName(context) + ".Consumer";
            case REACT_PROVIDER_TYPE:
              var provider = type;
              return getContextName(provider._context) + ".Provider";
            case REACT_FORWARD_REF_TYPE:
              return getWrappedName(type, type.render, "ForwardRef");
            case REACT_MEMO_TYPE:
              var outerName = type.displayName || null;
              return outerName !== null ? outerName : getComponentNameFromType(type.type) || "Memo";
            case REACT_LAZY_TYPE: {
              var lazyComponent = type, payload = lazyComponent._payload, init = lazyComponent._init;
              try {
                return getComponentNameFromType(init(payload));
              } catch {
                return null;
              }
            }
          }
        return null;
      }
      var assign = Object.assign, disabledDepth = 0, prevLog, prevInfo, prevWarn, prevError, prevGroup, prevGroupCollapsed, prevGroupEnd;
      function disabledLog() {
      }
      disabledLog.__reactDisabledLog = !0;
      function disableLogs() {
        {
          if (disabledDepth === 0) {
            prevLog = console.log, prevInfo = console.info, prevWarn = console.warn, prevError = console.error, prevGroup = console.group, prevGroupCollapsed = console.groupCollapsed, prevGroupEnd = console.groupEnd;
            var props = {
              configurable: !0,
              enumerable: !0,
              value: disabledLog,
              writable: !0
            };
            Object.defineProperties(console, {
              info: props,
              log: props,
              warn: props,
              error: props,
              group: props,
              groupCollapsed: props,
              groupEnd: props
            });
          }
          disabledDepth++;
        }
      }
      function reenableLogs() {
        {
          if (disabledDepth--, disabledDepth === 0) {
            var props = {
              configurable: !0,
              enumerable: !0,
              writable: !0
            };
            Object.defineProperties(console, {
              log: assign({}, props, {
                value: prevLog
              }),
              info: assign({}, props, {
                value: prevInfo
              }),
              warn: assign({}, props, {
                value: prevWarn
              }),
              error: assign({}, props, {
                value: prevError
              }),
              group: assign({}, props, {
                value: prevGroup
              }),
              groupCollapsed: assign({}, props, {
                value: prevGroupCollapsed
              }),
              groupEnd: assign({}, props, {
                value: prevGroupEnd
              })
            });
          }
          disabledDepth < 0 && error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
        }
      }
      var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher, prefix2;
      function describeBuiltInComponentFrame(name, source, ownerFn) {
        {
          if (prefix2 === void 0)
            try {
              throw Error();
            } catch (x) {
              var match = x.stack.trim().match(/\n( *(at )?)/);
              prefix2 = match && match[1] || "";
            }
          return `
` + prefix2 + name;
        }
      }
      var reentry = !1, componentFrameCache;
      {
        var PossiblyWeakMap = typeof WeakMap == "function" ? WeakMap : Map;
        componentFrameCache = new PossiblyWeakMap();
      }
      function describeNativeComponentFrame(fn, construct) {
        if (!fn || reentry)
          return "";
        {
          var frame = componentFrameCache.get(fn);
          if (frame !== void 0)
            return frame;
        }
        var control;
        reentry = !0;
        var previousPrepareStackTrace = Error.prepareStackTrace;
        Error.prepareStackTrace = void 0;
        var previousDispatcher;
        previousDispatcher = ReactCurrentDispatcher.current, ReactCurrentDispatcher.current = null, disableLogs();
        try {
          if (construct) {
            var Fake = function() {
              throw Error();
            };
            if (Object.defineProperty(Fake.prototype, "props", {
              set: function() {
                throw Error();
              }
            }), typeof Reflect == "object" && Reflect.construct) {
              try {
                Reflect.construct(Fake, []);
              } catch (x) {
                control = x;
              }
              Reflect.construct(fn, [], Fake);
            } else {
              try {
                Fake.call();
              } catch (x) {
                control = x;
              }
              fn.call(Fake.prototype);
            }
          } else {
            try {
              throw Error();
            } catch (x) {
              control = x;
            }
            fn();
          }
        } catch (sample) {
          if (sample && control && typeof sample.stack == "string") {
            for (var sampleLines = sample.stack.split(`
`), controlLines = control.stack.split(`
`), s = sampleLines.length - 1, c = controlLines.length - 1; s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]; )
              c--;
            for (; s >= 1 && c >= 0; s--, c--)
              if (sampleLines[s] !== controlLines[c]) {
                if (s !== 1 || c !== 1)
                  do
                    if (s--, c--, c < 0 || sampleLines[s] !== controlLines[c]) {
                      var _frame = `
` + sampleLines[s].replace(" at new ", " at ");
                      return fn.displayName && _frame.includes("<anonymous>") && (_frame = _frame.replace("<anonymous>", fn.displayName)), typeof fn == "function" && componentFrameCache.set(fn, _frame), _frame;
                    }
                  while (s >= 1 && c >= 0);
                break;
              }
          }
        } finally {
          reentry = !1, ReactCurrentDispatcher.current = previousDispatcher, reenableLogs(), Error.prepareStackTrace = previousPrepareStackTrace;
        }
        var name = fn ? fn.displayName || fn.name : "", syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
        return typeof fn == "function" && componentFrameCache.set(fn, syntheticFrame), syntheticFrame;
      }
      function describeFunctionComponentFrame(fn, source, ownerFn) {
        return describeNativeComponentFrame(fn, !1);
      }
      function shouldConstruct(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
      }
      function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null)
          return "";
        if (typeof type == "function")
          return describeNativeComponentFrame(type, shouldConstruct(type));
        if (typeof type == "string")
          return describeBuiltInComponentFrame(type);
        switch (type) {
          case REACT_SUSPENSE_TYPE:
            return describeBuiltInComponentFrame("Suspense");
          case REACT_SUSPENSE_LIST_TYPE:
            return describeBuiltInComponentFrame("SuspenseList");
        }
        if (typeof type == "object")
          switch (type.$$typeof) {
            case REACT_FORWARD_REF_TYPE:
              return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
              return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_LAZY_TYPE: {
              var lazyComponent = type, payload = lazyComponent._payload, init = lazyComponent._init;
              try {
                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
              } catch {
              }
            }
          }
        return "";
      }
      var hasOwnProperty = Object.prototype.hasOwnProperty, loggedTypeFailures = {}, ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
      function setCurrentlyValidatingElement(element) {
        if (element) {
          var owner = element._owner, stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
          ReactDebugCurrentFrame.setExtraStackFrame(stack);
        } else
          ReactDebugCurrentFrame.setExtraStackFrame(null);
      }
      function checkPropTypes(typeSpecs, values, location, componentName, element) {
        {
          var has = Function.call.bind(hasOwnProperty);
          for (var typeSpecName in typeSpecs)
            if (has(typeSpecs, typeSpecName)) {
              var error$1 = void 0;
              try {
                if (typeof typeSpecs[typeSpecName] != "function") {
                  var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                  throw err.name = "Invariant Violation", err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
              } catch (ex) {
                error$1 = ex;
              }
              error$1 && !(error$1 instanceof Error) && (setCurrentlyValidatingElement(element), error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1), setCurrentlyValidatingElement(null)), error$1 instanceof Error && !(error$1.message in loggedTypeFailures) && (loggedTypeFailures[error$1.message] = !0, setCurrentlyValidatingElement(element), error("Failed %s type: %s", location, error$1.message), setCurrentlyValidatingElement(null));
            }
        }
      }
      var isArrayImpl = Array.isArray;
      function isArray(a) {
        return isArrayImpl(a);
      }
      function typeName(value) {
        {
          var hasToStringTag = typeof Symbol == "function" && Symbol.toStringTag, type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
          return type;
        }
      }
      function willCoercionThrow(value) {
        try {
          return testStringCoercion(value), !1;
        } catch {
          return !0;
        }
      }
      function testStringCoercion(value) {
        return "" + value;
      }
      function checkKeyStringCoercion(value) {
        if (willCoercionThrow(value))
          return error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value)), testStringCoercion(value);
      }
      var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner, RESERVED_PROPS = {
        key: !0,
        ref: !0,
        __self: !0,
        __source: !0
      }, specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
      didWarnAboutStringRefs = {};
      function hasValidRef(config2) {
        if (hasOwnProperty.call(config2, "ref")) {
          var getter = Object.getOwnPropertyDescriptor(config2, "ref").get;
          if (getter && getter.isReactWarning)
            return !1;
        }
        return config2.ref !== void 0;
      }
      function hasValidKey(config2) {
        if (hasOwnProperty.call(config2, "key")) {
          var getter = Object.getOwnPropertyDescriptor(config2, "key").get;
          if (getter && getter.isReactWarning)
            return !1;
        }
        return config2.key !== void 0;
      }
      function warnIfStringRefCannotBeAutoConverted(config2, self2) {
        if (typeof config2.ref == "string" && ReactCurrentOwner.current && self2 && ReactCurrentOwner.current.stateNode !== self2) {
          var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
          didWarnAboutStringRefs[componentName] || (error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config2.ref), didWarnAboutStringRefs[componentName] = !0);
        }
      }
      function defineKeyPropWarningGetter(props, displayName) {
        {
          var warnAboutAccessingKey = function() {
            specialPropKeyWarningShown || (specialPropKeyWarningShown = !0, error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName));
          };
          warnAboutAccessingKey.isReactWarning = !0, Object.defineProperty(props, "key", {
            get: warnAboutAccessingKey,
            configurable: !0
          });
        }
      }
      function defineRefPropWarningGetter(props, displayName) {
        {
          var warnAboutAccessingRef = function() {
            specialPropRefWarningShown || (specialPropRefWarningShown = !0, error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName));
          };
          warnAboutAccessingRef.isReactWarning = !0, Object.defineProperty(props, "ref", {
            get: warnAboutAccessingRef,
            configurable: !0
          });
        }
      }
      var ReactElement = function(type, key, ref, self2, source, owner, props) {
        var element = {
          $$typeof: REACT_ELEMENT_TYPE,
          type,
          key,
          ref,
          props,
          _owner: owner
        };
        return element._store = {}, Object.defineProperty(element._store, "validated", {
          configurable: !1,
          enumerable: !1,
          writable: !0,
          value: !1
        }), Object.defineProperty(element, "_self", {
          configurable: !1,
          enumerable: !1,
          writable: !1,
          value: self2
        }), Object.defineProperty(element, "_source", {
          configurable: !1,
          enumerable: !1,
          writable: !1,
          value: source
        }), Object.freeze && (Object.freeze(element.props), Object.freeze(element)), element;
      };
      function jsxDEV25(type, config2, maybeKey, source, self2) {
        {
          var propName, props = {}, key = null, ref = null;
          maybeKey !== void 0 && (checkKeyStringCoercion(maybeKey), key = "" + maybeKey), hasValidKey(config2) && (checkKeyStringCoercion(config2.key), key = "" + config2.key), hasValidRef(config2) && (ref = config2.ref, warnIfStringRefCannotBeAutoConverted(config2, self2));
          for (propName in config2)
            hasOwnProperty.call(config2, propName) && !RESERVED_PROPS.hasOwnProperty(propName) && (props[propName] = config2[propName]);
          if (type && type.defaultProps) {
            var defaultProps = type.defaultProps;
            for (propName in defaultProps)
              props[propName] === void 0 && (props[propName] = defaultProps[propName]);
          }
          if (key || ref) {
            var displayName = typeof type == "function" ? type.displayName || type.name || "Unknown" : type;
            key && defineKeyPropWarningGetter(props, displayName), ref && defineRefPropWarningGetter(props, displayName);
          }
          return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
        }
      }
      var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner, ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
      function setCurrentlyValidatingElement$1(element) {
        if (element) {
          var owner = element._owner, stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
          ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
        } else
          ReactDebugCurrentFrame$1.setExtraStackFrame(null);
      }
      var propTypesMisspellWarningShown;
      propTypesMisspellWarningShown = !1;
      function isValidElement2(object) {
        return typeof object == "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
      }
      function getDeclarationErrorAddendum() {
        {
          if (ReactCurrentOwner$1.current) {
            var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);
            if (name)
              return `

Check the render method of \`` + name + "`.";
          }
          return "";
        }
      }
      function getSourceInfoErrorAddendum(source) {
        {
          if (source !== void 0) {
            var fileName = source.fileName.replace(/^.*[\\\/]/, ""), lineNumber = source.lineNumber;
            return `

Check your code at ` + fileName + ":" + lineNumber + ".";
          }
          return "";
        }
      }
      var ownerHasKeyUseWarning = {};
      function getCurrentComponentErrorInfo(parentType) {
        {
          var info = getDeclarationErrorAddendum();
          if (!info) {
            var parentName = typeof parentType == "string" ? parentType : parentType.displayName || parentType.name;
            parentName && (info = `

Check the top-level render call using <` + parentName + ">.");
          }
          return info;
        }
      }
      function validateExplicitKey(element, parentType) {
        {
          if (!element._store || element._store.validated || element.key != null)
            return;
          element._store.validated = !0;
          var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
          if (ownerHasKeyUseWarning[currentComponentErrorInfo])
            return;
          ownerHasKeyUseWarning[currentComponentErrorInfo] = !0;
          var childOwner = "";
          element && element._owner && element._owner !== ReactCurrentOwner$1.current && (childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + "."), setCurrentlyValidatingElement$1(element), error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner), setCurrentlyValidatingElement$1(null);
        }
      }
      function validateChildKeys(node, parentType) {
        {
          if (typeof node != "object")
            return;
          if (isArray(node))
            for (var i = 0; i < node.length; i++) {
              var child = node[i];
              isValidElement2(child) && validateExplicitKey(child, parentType);
            }
          else if (isValidElement2(node))
            node._store && (node._store.validated = !0);
          else if (node) {
            var iteratorFn = getIteratorFn(node);
            if (typeof iteratorFn == "function" && iteratorFn !== node.entries)
              for (var iterator = iteratorFn.call(node), step; !(step = iterator.next()).done; )
                isValidElement2(step.value) && validateExplicitKey(step.value, parentType);
          }
        }
      }
      function validatePropTypes(element) {
        {
          var type = element.type;
          if (type == null || typeof type == "string")
            return;
          var propTypes;
          if (typeof type == "function")
            propTypes = type.propTypes;
          else if (typeof type == "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE))
            propTypes = type.propTypes;
          else
            return;
          if (propTypes) {
            var name = getComponentNameFromType(type);
            checkPropTypes(propTypes, element.props, "prop", name, element);
          } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
            propTypesMisspellWarningShown = !0;
            var _name = getComponentNameFromType(type);
            error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
          }
          typeof type.getDefaultProps == "function" && !type.getDefaultProps.isReactClassApproved && error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
        }
      }
      function validateFragmentProps(fragment) {
        {
          for (var keys = Object.keys(fragment.props), i = 0; i < keys.length; i++) {
            var key = keys[i];
            if (key !== "children" && key !== "key") {
              setCurrentlyValidatingElement$1(fragment), error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key), setCurrentlyValidatingElement$1(null);
              break;
            }
          }
          fragment.ref !== null && (setCurrentlyValidatingElement$1(fragment), error("Invalid attribute `ref` supplied to `React.Fragment`."), setCurrentlyValidatingElement$1(null));
        }
      }
      function jsxWithValidation(type, props, key, isStaticChildren, source, self2) {
        {
          var validType = isValidElementType(type);
          if (!validType) {
            var info = "";
            (type === void 0 || typeof type == "object" && type !== null && Object.keys(type).length === 0) && (info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.");
            var sourceInfo = getSourceInfoErrorAddendum(source);
            sourceInfo ? info += sourceInfo : info += getDeclarationErrorAddendum();
            var typeString;
            type === null ? typeString = "null" : isArray(type) ? typeString = "array" : type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE ? (typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />", info = " Did you accidentally export a JSX literal instead of a component?") : typeString = typeof type, error("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
          }
          var element = jsxDEV25(type, props, key, source, self2);
          if (element == null)
            return element;
          if (validType) {
            var children = props.children;
            if (children !== void 0)
              if (isStaticChildren)
                if (isArray(children)) {
                  for (var i = 0; i < children.length; i++)
                    validateChildKeys(children[i], type);
                  Object.freeze && Object.freeze(children);
                } else
                  error("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
              else
                validateChildKeys(children, type);
          }
          return type === REACT_FRAGMENT_TYPE ? validateFragmentProps(element) : validatePropTypes(element), element;
        }
      }
      var jsxDEV$1 = jsxWithValidation;
      exports.Fragment = REACT_FRAGMENT_TYPE, exports.jsxDEV = jsxDEV$1;
    })();
  }
});

// ../../node_modules/.pnpm/react@18.2.0/node_modules/react/jsx-dev-runtime.js
var require_jsx_dev_runtime = __commonJS({
  "../../node_modules/.pnpm/react@18.2.0/node_modules/react/jsx-dev-runtime.js"(exports, module) {
    "use strict";
    module.exports = require_react_jsx_dev_runtime_development();
  }
});

// ../../node_modules/.pnpm/react@18.2.0/node_modules/react/cjs/react-jsx-runtime.development.js
var require_react_jsx_runtime_development = __commonJS({
  "../../node_modules/.pnpm/react@18.2.0/node_modules/react/cjs/react-jsx-runtime.development.js"(exports) {
    "use strict";
    (function() {
      "use strict";
      var React8 = require_react(), REACT_ELEMENT_TYPE = Symbol.for("react.element"), REACT_PORTAL_TYPE = Symbol.for("react.portal"), REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"), REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"), REACT_PROFILER_TYPE = Symbol.for("react.profiler"), REACT_PROVIDER_TYPE = Symbol.for("react.provider"), REACT_CONTEXT_TYPE = Symbol.for("react.context"), REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"), REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"), REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"), REACT_MEMO_TYPE = Symbol.for("react.memo"), REACT_LAZY_TYPE = Symbol.for("react.lazy"), REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen"), MAYBE_ITERATOR_SYMBOL = Symbol.iterator, FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable != "object")
          return null;
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        return typeof maybeIterator == "function" ? maybeIterator : null;
      }
      var ReactSharedInternals = React8.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
      function error(format) {
        {
          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)
            args[_key2 - 1] = arguments[_key2];
          printWarning("error", format, args);
        }
      }
      function printWarning(level, format, args) {
        {
          var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame, stack = ReactDebugCurrentFrame2.getStackAddendum();
          stack !== "" && (format += "%s", args = args.concat([stack]));
          var argsWithFormat = args.map(function(item) {
            return String(item);
          });
          argsWithFormat.unshift("Warning: " + format), Function.prototype.apply.call(console[level], console, argsWithFormat);
        }
      }
      var enableScopeAPI = !1, enableCacheElement = !1, enableTransitionTracing = !1, enableLegacyHidden = !1, enableDebugTracing = !1, REACT_MODULE_REFERENCE;
      REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
      function isValidElementType(type) {
        return !!(typeof type == "string" || typeof type == "function" || type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing || typeof type == "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0));
      }
      function getWrappedName(outerType, innerType, wrapperName) {
        var displayName = outerType.displayName;
        if (displayName)
          return displayName;
        var functionName = innerType.displayName || innerType.name || "";
        return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
      }
      function getContextName(type) {
        return type.displayName || "Context";
      }
      function getComponentNameFromType(type) {
        if (type == null)
          return null;
        if (typeof type.tag == "number" && error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."), typeof type == "function")
          return type.displayName || type.name || null;
        if (typeof type == "string")
          return type;
        switch (type) {
          case REACT_FRAGMENT_TYPE:
            return "Fragment";
          case REACT_PORTAL_TYPE:
            return "Portal";
          case REACT_PROFILER_TYPE:
            return "Profiler";
          case REACT_STRICT_MODE_TYPE:
            return "StrictMode";
          case REACT_SUSPENSE_TYPE:
            return "Suspense";
          case REACT_SUSPENSE_LIST_TYPE:
            return "SuspenseList";
        }
        if (typeof type == "object")
          switch (type.$$typeof) {
            case REACT_CONTEXT_TYPE:
              var context = type;
              return getContextName(context) + ".Consumer";
            case REACT_PROVIDER_TYPE:
              var provider = type;
              return getContextName(provider._context) + ".Provider";
            case REACT_FORWARD_REF_TYPE:
              return getWrappedName(type, type.render, "ForwardRef");
            case REACT_MEMO_TYPE:
              var outerName = type.displayName || null;
              return outerName !== null ? outerName : getComponentNameFromType(type.type) || "Memo";
            case REACT_LAZY_TYPE: {
              var lazyComponent = type, payload = lazyComponent._payload, init = lazyComponent._init;
              try {
                return getComponentNameFromType(init(payload));
              } catch {
                return null;
              }
            }
          }
        return null;
      }
      var assign = Object.assign, disabledDepth = 0, prevLog, prevInfo, prevWarn, prevError, prevGroup, prevGroupCollapsed, prevGroupEnd;
      function disabledLog() {
      }
      disabledLog.__reactDisabledLog = !0;
      function disableLogs() {
        {
          if (disabledDepth === 0) {
            prevLog = console.log, prevInfo = console.info, prevWarn = console.warn, prevError = console.error, prevGroup = console.group, prevGroupCollapsed = console.groupCollapsed, prevGroupEnd = console.groupEnd;
            var props = {
              configurable: !0,
              enumerable: !0,
              value: disabledLog,
              writable: !0
            };
            Object.defineProperties(console, {
              info: props,
              log: props,
              warn: props,
              error: props,
              group: props,
              groupCollapsed: props,
              groupEnd: props
            });
          }
          disabledDepth++;
        }
      }
      function reenableLogs() {
        {
          if (disabledDepth--, disabledDepth === 0) {
            var props = {
              configurable: !0,
              enumerable: !0,
              writable: !0
            };
            Object.defineProperties(console, {
              log: assign({}, props, {
                value: prevLog
              }),
              info: assign({}, props, {
                value: prevInfo
              }),
              warn: assign({}, props, {
                value: prevWarn
              }),
              error: assign({}, props, {
                value: prevError
              }),
              group: assign({}, props, {
                value: prevGroup
              }),
              groupCollapsed: assign({}, props, {
                value: prevGroupCollapsed
              }),
              groupEnd: assign({}, props, {
                value: prevGroupEnd
              })
            });
          }
          disabledDepth < 0 && error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
        }
      }
      var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher, prefix2;
      function describeBuiltInComponentFrame(name, source, ownerFn) {
        {
          if (prefix2 === void 0)
            try {
              throw Error();
            } catch (x) {
              var match = x.stack.trim().match(/\n( *(at )?)/);
              prefix2 = match && match[1] || "";
            }
          return `
` + prefix2 + name;
        }
      }
      var reentry = !1, componentFrameCache;
      {
        var PossiblyWeakMap = typeof WeakMap == "function" ? WeakMap : Map;
        componentFrameCache = new PossiblyWeakMap();
      }
      function describeNativeComponentFrame(fn, construct) {
        if (!fn || reentry)
          return "";
        {
          var frame = componentFrameCache.get(fn);
          if (frame !== void 0)
            return frame;
        }
        var control;
        reentry = !0;
        var previousPrepareStackTrace = Error.prepareStackTrace;
        Error.prepareStackTrace = void 0;
        var previousDispatcher;
        previousDispatcher = ReactCurrentDispatcher.current, ReactCurrentDispatcher.current = null, disableLogs();
        try {
          if (construct) {
            var Fake = function() {
              throw Error();
            };
            if (Object.defineProperty(Fake.prototype, "props", {
              set: function() {
                throw Error();
              }
            }), typeof Reflect == "object" && Reflect.construct) {
              try {
                Reflect.construct(Fake, []);
              } catch (x) {
                control = x;
              }
              Reflect.construct(fn, [], Fake);
            } else {
              try {
                Fake.call();
              } catch (x) {
                control = x;
              }
              fn.call(Fake.prototype);
            }
          } else {
            try {
              throw Error();
            } catch (x) {
              control = x;
            }
            fn();
          }
        } catch (sample) {
          if (sample && control && typeof sample.stack == "string") {
            for (var sampleLines = sample.stack.split(`
`), controlLines = control.stack.split(`
`), s = sampleLines.length - 1, c = controlLines.length - 1; s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]; )
              c--;
            for (; s >= 1 && c >= 0; s--, c--)
              if (sampleLines[s] !== controlLines[c]) {
                if (s !== 1 || c !== 1)
                  do
                    if (s--, c--, c < 0 || sampleLines[s] !== controlLines[c]) {
                      var _frame = `
` + sampleLines[s].replace(" at new ", " at ");
                      return fn.displayName && _frame.includes("<anonymous>") && (_frame = _frame.replace("<anonymous>", fn.displayName)), typeof fn == "function" && componentFrameCache.set(fn, _frame), _frame;
                    }
                  while (s >= 1 && c >= 0);
                break;
              }
          }
        } finally {
          reentry = !1, ReactCurrentDispatcher.current = previousDispatcher, reenableLogs(), Error.prepareStackTrace = previousPrepareStackTrace;
        }
        var name = fn ? fn.displayName || fn.name : "", syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
        return typeof fn == "function" && componentFrameCache.set(fn, syntheticFrame), syntheticFrame;
      }
      function describeFunctionComponentFrame(fn, source, ownerFn) {
        return describeNativeComponentFrame(fn, !1);
      }
      function shouldConstruct(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
      }
      function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null)
          return "";
        if (typeof type == "function")
          return describeNativeComponentFrame(type, shouldConstruct(type));
        if (typeof type == "string")
          return describeBuiltInComponentFrame(type);
        switch (type) {
          case REACT_SUSPENSE_TYPE:
            return describeBuiltInComponentFrame("Suspense");
          case REACT_SUSPENSE_LIST_TYPE:
            return describeBuiltInComponentFrame("SuspenseList");
        }
        if (typeof type == "object")
          switch (type.$$typeof) {
            case REACT_FORWARD_REF_TYPE:
              return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
              return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_LAZY_TYPE: {
              var lazyComponent = type, payload = lazyComponent._payload, init = lazyComponent._init;
              try {
                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
              } catch {
              }
            }
          }
        return "";
      }
      var hasOwnProperty = Object.prototype.hasOwnProperty, loggedTypeFailures = {}, ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
      function setCurrentlyValidatingElement(element) {
        if (element) {
          var owner = element._owner, stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
          ReactDebugCurrentFrame.setExtraStackFrame(stack);
        } else
          ReactDebugCurrentFrame.setExtraStackFrame(null);
      }
      function checkPropTypes(typeSpecs, values, location, componentName, element) {
        {
          var has = Function.call.bind(hasOwnProperty);
          for (var typeSpecName in typeSpecs)
            if (has(typeSpecs, typeSpecName)) {
              var error$1 = void 0;
              try {
                if (typeof typeSpecs[typeSpecName] != "function") {
                  var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                  throw err.name = "Invariant Violation", err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
              } catch (ex) {
                error$1 = ex;
              }
              error$1 && !(error$1 instanceof Error) && (setCurrentlyValidatingElement(element), error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1), setCurrentlyValidatingElement(null)), error$1 instanceof Error && !(error$1.message in loggedTypeFailures) && (loggedTypeFailures[error$1.message] = !0, setCurrentlyValidatingElement(element), error("Failed %s type: %s", location, error$1.message), setCurrentlyValidatingElement(null));
            }
        }
      }
      var isArrayImpl = Array.isArray;
      function isArray(a) {
        return isArrayImpl(a);
      }
      function typeName(value) {
        {
          var hasToStringTag = typeof Symbol == "function" && Symbol.toStringTag, type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
          return type;
        }
      }
      function willCoercionThrow(value) {
        try {
          return testStringCoercion(value), !1;
        } catch {
          return !0;
        }
      }
      function testStringCoercion(value) {
        return "" + value;
      }
      function checkKeyStringCoercion(value) {
        if (willCoercionThrow(value))
          return error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value)), testStringCoercion(value);
      }
      var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner, RESERVED_PROPS = {
        key: !0,
        ref: !0,
        __self: !0,
        __source: !0
      }, specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
      didWarnAboutStringRefs = {};
      function hasValidRef(config2) {
        if (hasOwnProperty.call(config2, "ref")) {
          var getter = Object.getOwnPropertyDescriptor(config2, "ref").get;
          if (getter && getter.isReactWarning)
            return !1;
        }
        return config2.ref !== void 0;
      }
      function hasValidKey(config2) {
        if (hasOwnProperty.call(config2, "key")) {
          var getter = Object.getOwnPropertyDescriptor(config2, "key").get;
          if (getter && getter.isReactWarning)
            return !1;
        }
        return config2.key !== void 0;
      }
      function warnIfStringRefCannotBeAutoConverted(config2, self2) {
        if (typeof config2.ref == "string" && ReactCurrentOwner.current && self2 && ReactCurrentOwner.current.stateNode !== self2) {
          var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
          didWarnAboutStringRefs[componentName] || (error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config2.ref), didWarnAboutStringRefs[componentName] = !0);
        }
      }
      function defineKeyPropWarningGetter(props, displayName) {
        {
          var warnAboutAccessingKey = function() {
            specialPropKeyWarningShown || (specialPropKeyWarningShown = !0, error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName));
          };
          warnAboutAccessingKey.isReactWarning = !0, Object.defineProperty(props, "key", {
            get: warnAboutAccessingKey,
            configurable: !0
          });
        }
      }
      function defineRefPropWarningGetter(props, displayName) {
        {
          var warnAboutAccessingRef = function() {
            specialPropRefWarningShown || (specialPropRefWarningShown = !0, error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName));
          };
          warnAboutAccessingRef.isReactWarning = !0, Object.defineProperty(props, "ref", {
            get: warnAboutAccessingRef,
            configurable: !0
          });
        }
      }
      var ReactElement = function(type, key, ref, self2, source, owner, props) {
        var element = {
          $$typeof: REACT_ELEMENT_TYPE,
          type,
          key,
          ref,
          props,
          _owner: owner
        };
        return element._store = {}, Object.defineProperty(element._store, "validated", {
          configurable: !1,
          enumerable: !1,
          writable: !0,
          value: !1
        }), Object.defineProperty(element, "_self", {
          configurable: !1,
          enumerable: !1,
          writable: !1,
          value: self2
        }), Object.defineProperty(element, "_source", {
          configurable: !1,
          enumerable: !1,
          writable: !1,
          value: source
        }), Object.freeze && (Object.freeze(element.props), Object.freeze(element)), element;
      };
      function jsxDEV25(type, config2, maybeKey, source, self2) {
        {
          var propName, props = {}, key = null, ref = null;
          maybeKey !== void 0 && (checkKeyStringCoercion(maybeKey), key = "" + maybeKey), hasValidKey(config2) && (checkKeyStringCoercion(config2.key), key = "" + config2.key), hasValidRef(config2) && (ref = config2.ref, warnIfStringRefCannotBeAutoConverted(config2, self2));
          for (propName in config2)
            hasOwnProperty.call(config2, propName) && !RESERVED_PROPS.hasOwnProperty(propName) && (props[propName] = config2[propName]);
          if (type && type.defaultProps) {
            var defaultProps = type.defaultProps;
            for (propName in defaultProps)
              props[propName] === void 0 && (props[propName] = defaultProps[propName]);
          }
          if (key || ref) {
            var displayName = typeof type == "function" ? type.displayName || type.name || "Unknown" : type;
            key && defineKeyPropWarningGetter(props, displayName), ref && defineRefPropWarningGetter(props, displayName);
          }
          return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
        }
      }
      var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner, ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
      function setCurrentlyValidatingElement$1(element) {
        if (element) {
          var owner = element._owner, stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
          ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
        } else
          ReactDebugCurrentFrame$1.setExtraStackFrame(null);
      }
      var propTypesMisspellWarningShown;
      propTypesMisspellWarningShown = !1;
      function isValidElement2(object) {
        return typeof object == "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
      }
      function getDeclarationErrorAddendum() {
        {
          if (ReactCurrentOwner$1.current) {
            var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);
            if (name)
              return `

Check the render method of \`` + name + "`.";
          }
          return "";
        }
      }
      function getSourceInfoErrorAddendum(source) {
        {
          if (source !== void 0) {
            var fileName = source.fileName.replace(/^.*[\\\/]/, ""), lineNumber = source.lineNumber;
            return `

Check your code at ` + fileName + ":" + lineNumber + ".";
          }
          return "";
        }
      }
      var ownerHasKeyUseWarning = {};
      function getCurrentComponentErrorInfo(parentType) {
        {
          var info = getDeclarationErrorAddendum();
          if (!info) {
            var parentName = typeof parentType == "string" ? parentType : parentType.displayName || parentType.name;
            parentName && (info = `

Check the top-level render call using <` + parentName + ">.");
          }
          return info;
        }
      }
      function validateExplicitKey(element, parentType) {
        {
          if (!element._store || element._store.validated || element.key != null)
            return;
          element._store.validated = !0;
          var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
          if (ownerHasKeyUseWarning[currentComponentErrorInfo])
            return;
          ownerHasKeyUseWarning[currentComponentErrorInfo] = !0;
          var childOwner = "";
          element && element._owner && element._owner !== ReactCurrentOwner$1.current && (childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + "."), setCurrentlyValidatingElement$1(element), error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner), setCurrentlyValidatingElement$1(null);
        }
      }
      function validateChildKeys(node, parentType) {
        {
          if (typeof node != "object")
            return;
          if (isArray(node))
            for (var i = 0; i < node.length; i++) {
              var child = node[i];
              isValidElement2(child) && validateExplicitKey(child, parentType);
            }
          else if (isValidElement2(node))
            node._store && (node._store.validated = !0);
          else if (node) {
            var iteratorFn = getIteratorFn(node);
            if (typeof iteratorFn == "function" && iteratorFn !== node.entries)
              for (var iterator = iteratorFn.call(node), step; !(step = iterator.next()).done; )
                isValidElement2(step.value) && validateExplicitKey(step.value, parentType);
          }
        }
      }
      function validatePropTypes(element) {
        {
          var type = element.type;
          if (type == null || typeof type == "string")
            return;
          var propTypes;
          if (typeof type == "function")
            propTypes = type.propTypes;
          else if (typeof type == "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE))
            propTypes = type.propTypes;
          else
            return;
          if (propTypes) {
            var name = getComponentNameFromType(type);
            checkPropTypes(propTypes, element.props, "prop", name, element);
          } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
            propTypesMisspellWarningShown = !0;
            var _name = getComponentNameFromType(type);
            error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
          }
          typeof type.getDefaultProps == "function" && !type.getDefaultProps.isReactClassApproved && error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
        }
      }
      function validateFragmentProps(fragment) {
        {
          for (var keys = Object.keys(fragment.props), i = 0; i < keys.length; i++) {
            var key = keys[i];
            if (key !== "children" && key !== "key") {
              setCurrentlyValidatingElement$1(fragment), error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key), setCurrentlyValidatingElement$1(null);
              break;
            }
          }
          fragment.ref !== null && (setCurrentlyValidatingElement$1(fragment), error("Invalid attribute `ref` supplied to `React.Fragment`."), setCurrentlyValidatingElement$1(null));
        }
      }
      function jsxWithValidation(type, props, key, isStaticChildren, source, self2) {
        {
          var validType = isValidElementType(type);
          if (!validType) {
            var info = "";
            (type === void 0 || typeof type == "object" && type !== null && Object.keys(type).length === 0) && (info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.");
            var sourceInfo = getSourceInfoErrorAddendum(source);
            sourceInfo ? info += sourceInfo : info += getDeclarationErrorAddendum();
            var typeString;
            type === null ? typeString = "null" : isArray(type) ? typeString = "array" : type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE ? (typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />", info = " Did you accidentally export a JSX literal instead of a component?") : typeString = typeof type, error("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
          }
          var element = jsxDEV25(type, props, key, source, self2);
          if (element == null)
            return element;
          if (validType) {
            var children = props.children;
            if (children !== void 0)
              if (isStaticChildren)
                if (isArray(children)) {
                  for (var i = 0; i < children.length; i++)
                    validateChildKeys(children[i], type);
                  Object.freeze && Object.freeze(children);
                } else
                  error("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
              else
                validateChildKeys(children, type);
          }
          return type === REACT_FRAGMENT_TYPE ? validateFragmentProps(element) : validatePropTypes(element), element;
        }
      }
      function jsxWithValidationStatic(type, props, key) {
        return jsxWithValidation(type, props, key, !0);
      }
      function jsxWithValidationDynamic(type, props, key) {
        return jsxWithValidation(type, props, key, !1);
      }
      var jsx2 = jsxWithValidationDynamic, jsxs2 = jsxWithValidationStatic;
      exports.Fragment = REACT_FRAGMENT_TYPE, exports.jsx = jsx2, exports.jsxs = jsxs2;
    })();
  }
});

// ../../node_modules/.pnpm/react@18.2.0/node_modules/react/jsx-runtime.js
var require_jsx_runtime = __commonJS({
  "../../node_modules/.pnpm/react@18.2.0/node_modules/react/jsx-runtime.js"(exports, module) {
    "use strict";
    module.exports = require_react_jsx_runtime_development();
  }
});

// ../../node_modules/.pnpm/@iconify+icons-heroicons@1.2.5/node_modules/@iconify/icons-heroicons/bars-3-bottom-left.js
var require_bars_3_bottom_left = __commonJS({
  "../../node_modules/.pnpm/@iconify+icons-heroicons@1.2.5/node_modules/@iconify/icons-heroicons/bars-3-bottom-left.js"(exports) {
    var data = {
      width: 24,
      height: 24,
      body: '<path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25H12"/>'
    };
    exports.__esModule = !0;
    exports.default = data;
  }
});

// ../../node_modules/.pnpm/@iconify+icons-heroicons@1.2.5/node_modules/@iconify/icons-heroicons/plus.js
var require_plus = __commonJS({
  "../../node_modules/.pnpm/@iconify+icons-heroicons@1.2.5/node_modules/@iconify/icons-heroicons/plus.js"(exports) {
    var data = {
      width: 24,
      height: 24,
      body: '<path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M12 4.5v15m7.5-7.5h-15"/>'
    };
    exports.__esModule = !0;
    exports.default = data;
  }
});

// ../../node_modules/.pnpm/@iconify+icons-heroicons@1.2.5/node_modules/@iconify/icons-heroicons/server-stack.js
var require_server_stack = __commonJS({
  "../../node_modules/.pnpm/@iconify+icons-heroicons@1.2.5/node_modules/@iconify/icons-heroicons/server-stack.js"(exports) {
    var data = {
      width: 24,
      height: 24,
      body: '<path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M5.25 14.25h13.5m-13.5 0a3 3 0 0 1-3-3m3 3a3 3 0 1 0 0 6h13.5a3 3 0 1 0 0-6m-16.5-3a3 3 0 0 1 3-3h13.5a3 3 0 0 1 3 3m-19.5 0a4.5 4.5 0 0 1 .9-2.7L5.737 5.1a3.375 3.375 0 0 1 2.7-1.35h7.126c1.062 0 2.062.5 2.7 1.35l2.587 3.45a4.5 4.5 0 0 1 .9 2.7m0 0a3 3 0 0 1-3 3m0 3h.008v.008h-.008v-.008Zm0-6h.008v.008h-.008v-.008Zm-3 6h.008v.008h-.008v-.008Zm0-6h.008v.008h-.008v-.008Z"/>'
    };
    exports.__esModule = !0;
    exports.default = data;
  }
});

// ../../node_modules/.pnpm/@iconify+icons-heroicons@1.2.5/node_modules/@iconify/icons-heroicons/building-office-2.js
var require_building_office_2 = __commonJS({
  "../../node_modules/.pnpm/@iconify+icons-heroicons@1.2.5/node_modules/@iconify/icons-heroicons/building-office-2.js"(exports) {
    var data = {
      width: 24,
      height: 24,
      body: '<path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M2.25 21h19.5m-18-18v18m10.5-18v18m6-13.5V21M6.75 6.75h.75m-.75 3h.75m-.75 3h.75m3-6h.75m-.75 3h.75m-.75 3h.75M6.75 21v-3.375c0-.621.504-1.125 1.125-1.125h2.25c.621 0 1.125.504 1.125 1.125V21M3 3h12m-.75 4.5H21m-3.75 3.75h.008v.008h-.008v-.008Zm0 3h.008v.008h-.008v-.008Zm0 3h.008v.008h-.008v-.008Z"/>'
    };
    exports.__esModule = !0;
    exports.default = data;
  }
});

// ../../node_modules/.pnpm/@iconify+icons-heroicons@1.2.5/node_modules/@iconify/icons-heroicons/link.js
var require_link = __commonJS({
  "../../node_modules/.pnpm/@iconify+icons-heroicons@1.2.5/node_modules/@iconify/icons-heroicons/link.js"(exports) {
    var data = {
      width: 24,
      height: 24,
      body: '<path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M13.19 8.688a4.5 4.5 0 0 1 1.242 7.244l-4.5 4.5a4.5 4.5 0 0 1-6.364-6.364l1.757-1.757m13.35-.622l1.757-1.757a4.5 4.5 0 0 0-6.364-6.364l-4.5 4.5a4.5 4.5 0 0 0 1.242 7.244"/>'
    };
    exports.__esModule = !0;
    exports.default = data;
  }
});

// ../../node_modules/.pnpm/remix-validated-form@4.6.0_tqrz5xj7ze2637rw7lxknenghu/node_modules/remix-validated-form/dist/remix-validated-form.cjs.js
var require_remix_validated_form_cjs = __commonJS({
  "../../node_modules/.pnpm/remix-validated-form@4.6.0_tqrz5xj7ze2637rw7lxknenghu/node_modules/remix-validated-form/dist/remix-validated-form.cjs.js"(exports) {
    "use strict";
    Object.defineProperties(exports, { __esModule: { value: !0 }, [Symbol.toStringTag]: { value: "Module" } });
    var b = require_react(), ce = (init_esm2(), __toCommonJS(esm_exports2));
    function ya(e) {
      return e && typeof e == "object" && "default" in e ? e : { default: e };
    }
    var w = ya(b), _e = typeof globalThis < "u" ? globalThis : typeof window < "u" ? window : typeof globalThis < "u" ? globalThis : typeof self < "u" ? self : {};
    function ha() {
      this.__data__ = [], this.size = 0;
    }
    var ga = ha;
    function ba(e, r2) {
      return e === r2 || e !== e && r2 !== r2;
    }
    var vr = ba, $a = vr;
    function ma(e, r2) {
      for (var t = e.length; t--; )
        if ($a(e[t][0], r2))
          return t;
      return -1;
    }
    var je = ma, _a = je, Sa = Array.prototype, Fa = Sa.splice;
    function Ta(e) {
      var r2 = this.__data__, t = _a(r2, e);
      if (t < 0)
        return !1;
      var n = r2.length - 1;
      return t == n ? r2.pop() : Fa.call(r2, t, 1), --this.size, !0;
    }
    var Aa = Ta, Ea = je;
    function Oa(e) {
      var r2 = this.__data__, t = Ea(r2, e);
      return t < 0 ? void 0 : r2[t][1];
    }
    var Pa = Oa, Ia = je;
    function wa(e) {
      return Ia(this.__data__, e) > -1;
    }
    var Ca = wa, Da = je;
    function ja(e, r2) {
      var t = this.__data__, n = Da(t, e);
      return n < 0 ? (++this.size, t.push([e, r2])) : t[n][1] = r2, this;
    }
    var Ma = ja, xa = ga, Va = Aa, Ra = Pa, La = Ca, Ua = Ma;
    function Y(e) {
      var r2 = -1, t = e == null ? 0 : e.length;
      for (this.clear(); ++r2 < t; ) {
        var n = e[r2];
        this.set(n[0], n[1]);
      }
    }
    Y.prototype.clear = xa;
    Y.prototype.delete = Va;
    Y.prototype.get = Ra;
    Y.prototype.has = La;
    Y.prototype.set = Ua;
    var Me = Y, Ba = Me;
    function Ga() {
      this.__data__ = new Ba(), this.size = 0;
    }
    var Ha = Ga;
    function Ka(e) {
      var r2 = this.__data__, t = r2.delete(e);
      return this.size = r2.size, t;
    }
    var qa = Ka;
    function za(e) {
      return this.__data__.get(e);
    }
    var ka = za;
    function Na(e) {
      return this.__data__.has(e);
    }
    var Wa = Na, Xa = typeof _e == "object" && _e && _e.Object === Object && _e, an = Xa, Ya = an, Ja = typeof self == "object" && self && self.Object === Object && self, Za = Ya || Ja || Function("return this")(), x = Za, Qa = x, eo = Qa.Symbol, J = eo, tt = J, on = Object.prototype, ro = on.hasOwnProperty, to = on.toString, se = tt ? tt.toStringTag : void 0;
    function no(e) {
      var r2 = ro.call(e, se), t = e[se];
      try {
        e[se] = void 0;
        var n = !0;
      } catch {
      }
      var a = to.call(e);
      return n && (r2 ? e[se] = t : delete e[se]), a;
    }
    var ao = no, oo = Object.prototype, so = oo.toString;
    function io(e) {
      return so.call(e);
    }
    var uo = io, nt = J, lo = ao, co = uo, fo = "[object Null]", vo = "[object Undefined]", at = nt ? nt.toStringTag : void 0;
    function po(e) {
      return e == null ? e === void 0 ? vo : fo : at && at in Object(e) ? lo(e) : co(e);
    }
    var Z = po;
    function yo(e) {
      var r2 = typeof e;
      return e != null && (r2 == "object" || r2 == "function");
    }
    var z = yo, ho = Z, go = z, bo = "[object AsyncFunction]", $o = "[object Function]", mo = "[object GeneratorFunction]", _o = "[object Proxy]";
    function So(e) {
      if (!go(e))
        return !1;
      var r2 = ho(e);
      return r2 == $o || r2 == mo || r2 == bo || r2 == _o;
    }
    var sn = So, Fo = x, To = Fo["__core-js_shared__"], Ao = To, He = Ao, ot = function() {
      var e = /[^.]+$/.exec(He && He.keys && He.keys.IE_PROTO || "");
      return e ? "Symbol(src)_1." + e : "";
    }();
    function Eo(e) {
      return !!ot && ot in e;
    }
    var Oo = Eo, Po = Function.prototype, Io = Po.toString;
    function wo(e) {
      if (e != null) {
        try {
          return Io.call(e);
        } catch {
        }
        try {
          return e + "";
        } catch {
        }
      }
      return "";
    }
    var un = wo, Co = sn, Do = Oo, jo = z, Mo = un, xo = /[\\^$.*+?()[\]{}|]/g, Vo = /^\[object .+?Constructor\]$/, Ro = Function.prototype, Lo = Object.prototype, Uo = Ro.toString, Bo = Lo.hasOwnProperty, Go = RegExp("^" + Uo.call(Bo).replace(xo, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
    function Ho(e) {
      if (!jo(e) || Do(e))
        return !1;
      var r2 = Co(e) ? Go : Vo;
      return r2.test(Mo(e));
    }
    var Ko = Ho;
    function qo(e, r2) {
      return e == null ? void 0 : e[r2];
    }
    var zo = qo, ko = Ko, No = zo;
    function Wo(e, r2) {
      var t = No(e, r2);
      return ko(t) ? t : void 0;
    }
    var k = Wo, Xo = k, Yo = x, Jo = Xo(Yo, "Map"), pr = Jo, Zo = k, Qo = Zo(Object, "create"), xe = Qo, st = xe;
    function es() {
      this.__data__ = st ? st(null) : {}, this.size = 0;
    }
    var rs = es;
    function ts(e) {
      var r2 = this.has(e) && delete this.__data__[e];
      return this.size -= r2 ? 1 : 0, r2;
    }
    var ns = ts, as = xe, os = "__lodash_hash_undefined__", ss = Object.prototype, is = ss.hasOwnProperty;
    function us(e) {
      var r2 = this.__data__;
      if (as) {
        var t = r2[e];
        return t === os ? void 0 : t;
      }
      return is.call(r2, e) ? r2[e] : void 0;
    }
    var ls = us, cs = xe, fs = Object.prototype, ds = fs.hasOwnProperty;
    function vs(e) {
      var r2 = this.__data__;
      return cs ? r2[e] !== void 0 : ds.call(r2, e);
    }
    var ps = vs, ys = xe, hs = "__lodash_hash_undefined__";
    function gs(e, r2) {
      var t = this.__data__;
      return this.size += this.has(e) ? 0 : 1, t[e] = ys && r2 === void 0 ? hs : r2, this;
    }
    var bs = gs, $s = rs, ms = ns, _s = ls, Ss = ps, Fs = bs;
    function Q(e) {
      var r2 = -1, t = e == null ? 0 : e.length;
      for (this.clear(); ++r2 < t; ) {
        var n = e[r2];
        this.set(n[0], n[1]);
      }
    }
    Q.prototype.clear = $s;
    Q.prototype.delete = ms;
    Q.prototype.get = _s;
    Q.prototype.has = Ss;
    Q.prototype.set = Fs;
    var Ts = Q, it = Ts, As = Me, Es = pr;
    function Os() {
      this.size = 0, this.__data__ = { hash: new it(), map: new (Es || As)(), string: new it() };
    }
    var Ps = Os;
    function Is(e) {
      var r2 = typeof e;
      return r2 == "string" || r2 == "number" || r2 == "symbol" || r2 == "boolean" ? e !== "__proto__" : e === null;
    }
    var ws = Is, Cs = ws;
    function Ds(e, r2) {
      var t = e.__data__;
      return Cs(r2) ? t[typeof r2 == "string" ? "string" : "hash"] : t.map;
    }
    var Ve = Ds, js = Ve;
    function Ms(e) {
      var r2 = js(this, e).delete(e);
      return this.size -= r2 ? 1 : 0, r2;
    }
    var xs = Ms, Vs = Ve;
    function Rs(e) {
      return Vs(this, e).get(e);
    }
    var Ls = Rs, Us = Ve;
    function Bs(e) {
      return Us(this, e).has(e);
    }
    var Gs = Bs, Hs = Ve;
    function Ks(e, r2) {
      var t = Hs(this, e), n = t.size;
      return t.set(e, r2), this.size += t.size == n ? 0 : 1, this;
    }
    var qs = Ks, zs = Ps, ks = xs, Ns = Ls, Ws = Gs, Xs = qs;
    function ee(e) {
      var r2 = -1, t = e == null ? 0 : e.length;
      for (this.clear(); ++r2 < t; ) {
        var n = e[r2];
        this.set(n[0], n[1]);
      }
    }
    ee.prototype.clear = zs;
    ee.prototype.delete = ks;
    ee.prototype.get = Ns;
    ee.prototype.has = Ws;
    ee.prototype.set = Xs;
    var yr = ee, Ys = Me, Js = pr, Zs = yr, Qs = 200;
    function ei(e, r2) {
      var t = this.__data__;
      if (t instanceof Ys) {
        var n = t.__data__;
        if (!Js || n.length < Qs - 1)
          return n.push([e, r2]), this.size = ++t.size, this;
        t = this.__data__ = new Zs(n);
      }
      return t.set(e, r2), this.size = t.size, this;
    }
    var ri = ei, ti = Me, ni = Ha, ai = qa, oi = ka, si = Wa, ii = ri;
    function re(e) {
      var r2 = this.__data__ = new ti(e);
      this.size = r2.size;
    }
    re.prototype.clear = ni;
    re.prototype.delete = ai;
    re.prototype.get = oi;
    re.prototype.has = si;
    re.prototype.set = ii;
    var hr = re, ui = "__lodash_hash_undefined__";
    function li(e) {
      return this.__data__.set(e, ui), this;
    }
    var ci = li;
    function fi(e) {
      return this.__data__.has(e);
    }
    var di = fi, vi = yr, pi = ci, yi = di;
    function Ie(e) {
      var r2 = -1, t = e == null ? 0 : e.length;
      for (this.__data__ = new vi(); ++r2 < t; )
        this.add(e[r2]);
    }
    Ie.prototype.add = Ie.prototype.push = pi;
    Ie.prototype.has = yi;
    var ln = Ie;
    function hi(e, r2) {
      for (var t = -1, n = e == null ? 0 : e.length; ++t < n; )
        if (r2(e[t], t, e))
          return !0;
      return !1;
    }
    var gi = hi;
    function bi(e, r2) {
      return e.has(r2);
    }
    var cn = bi, $i = ln, mi = gi, _i = cn, Si = 1, Fi = 2;
    function Ti(e, r2, t, n, a, o) {
      var s = t & Si, i = e.length, l = r2.length;
      if (i != l && !(s && l > i))
        return !1;
      var u = o.get(e), c = o.get(r2);
      if (u && c)
        return u == r2 && c == e;
      var f2 = -1, d = !0, v = t & Fi ? new $i() : void 0;
      for (o.set(e, r2), o.set(r2, e); ++f2 < i; ) {
        var y = e[f2], p = r2[f2];
        if (n)
          var $ = s ? n(p, y, f2, r2, e, o) : n(y, p, f2, e, r2, o);
        if ($ !== void 0) {
          if ($)
            continue;
          d = !1;
          break;
        }
        if (v) {
          if (!mi(r2, function(S, T) {
            if (!_i(v, T) && (y === S || a(y, S, t, n, o)))
              return v.push(T);
          })) {
            d = !1;
            break;
          }
        } else if (!(y === p || a(y, p, t, n, o))) {
          d = !1;
          break;
        }
      }
      return o.delete(e), o.delete(r2), d;
    }
    var fn = Ti, Ai = x, Ei = Ai.Uint8Array, dn = Ei;
    function Oi(e) {
      var r2 = -1, t = Array(e.size);
      return e.forEach(function(n, a) {
        t[++r2] = [a, n];
      }), t;
    }
    var Pi = Oi;
    function Ii(e) {
      var r2 = -1, t = Array(e.size);
      return e.forEach(function(n) {
        t[++r2] = n;
      }), t;
    }
    var gr = Ii, ut = J, lt = dn, wi = vr, Ci = fn, Di = Pi, ji = gr, Mi = 1, xi = 2, Vi = "[object Boolean]", Ri = "[object Date]", Li = "[object Error]", Ui = "[object Map]", Bi = "[object Number]", Gi = "[object RegExp]", Hi = "[object Set]", Ki = "[object String]", qi = "[object Symbol]", zi = "[object ArrayBuffer]", ki = "[object DataView]", ct = ut ? ut.prototype : void 0, Ke = ct ? ct.valueOf : void 0;
    function Ni(e, r2, t, n, a, o, s) {
      switch (t) {
        case ki:
          if (e.byteLength != r2.byteLength || e.byteOffset != r2.byteOffset)
            return !1;
          e = e.buffer, r2 = r2.buffer;
        case zi:
          return !(e.byteLength != r2.byteLength || !o(new lt(e), new lt(r2)));
        case Vi:
        case Ri:
        case Bi:
          return wi(+e, +r2);
        case Li:
          return e.name == r2.name && e.message == r2.message;
        case Gi:
        case Ki:
          return e == r2 + "";
        case Ui:
          var i = Di;
        case Hi:
          var l = n & Mi;
          if (i || (i = ji), e.size != r2.size && !l)
            return !1;
          var u = s.get(e);
          if (u)
            return u == r2;
          n |= xi, s.set(e, r2);
          var c = Ci(i(e), i(r2), n, a, o, s);
          return s.delete(e), c;
        case qi:
          if (Ke)
            return Ke.call(e) == Ke.call(r2);
      }
      return !1;
    }
    var Wi = Ni;
    function Xi(e, r2) {
      for (var t = -1, n = r2.length, a = e.length; ++t < n; )
        e[a + t] = r2[t];
      return e;
    }
    var br = Xi, Yi = Array.isArray, V = Yi, Ji = br, Zi = V;
    function Qi(e, r2, t) {
      var n = r2(e);
      return Zi(e) ? n : Ji(n, t(e));
    }
    var vn = Qi;
    function eu(e, r2) {
      for (var t = -1, n = e == null ? 0 : e.length, a = 0, o = []; ++t < n; ) {
        var s = e[t];
        r2(s, t, e) && (o[a++] = s);
      }
      return o;
    }
    var ru = eu;
    function tu() {
      return [];
    }
    var pn = tu, nu = ru, au = pn, ou = Object.prototype, su = ou.propertyIsEnumerable, ft = Object.getOwnPropertySymbols, iu = ft ? function(e) {
      return e == null ? [] : (e = Object(e), nu(ft(e), function(r2) {
        return su.call(e, r2);
      }));
    } : au, $r = iu;
    function uu(e, r2) {
      for (var t = -1, n = Array(e); ++t < e; )
        n[t] = r2(t);
      return n;
    }
    var lu = uu;
    function cu(e) {
      return e != null && typeof e == "object";
    }
    var G = cu, fu = Z, du = G, vu = "[object Arguments]";
    function pu(e) {
      return du(e) && fu(e) == vu;
    }
    var yu = pu, dt = yu, hu = G, yn = Object.prototype, gu = yn.hasOwnProperty, bu = yn.propertyIsEnumerable, $u = dt(function() {
      return arguments;
    }()) ? dt : function(e) {
      return hu(e) && gu.call(e, "callee") && !bu.call(e, "callee");
    }, mr = $u, fe = { exports: {} };
    function mu() {
      return !1;
    }
    var _u = mu;
    (function(e, r2) {
      var t = x, n = _u, a = r2 && !r2.nodeType && r2, o = a && !0 && e && !e.nodeType && e, s = o && o.exports === a, i = s ? t.Buffer : void 0, l = i ? i.isBuffer : void 0, u = l || n;
      e.exports = u;
    })(fe, fe.exports);
    var Su = 9007199254740991, Fu = /^(?:0|[1-9]\d*)$/;
    function Tu(e, r2) {
      var t = typeof e;
      return r2 = r2 ?? Su, !!r2 && (t == "number" || t != "symbol" && Fu.test(e)) && e > -1 && e % 1 == 0 && e < r2;
    }
    var _r = Tu, Au = 9007199254740991;
    function Eu(e) {
      return typeof e == "number" && e > -1 && e % 1 == 0 && e <= Au;
    }
    var Sr = Eu, Ou = Z, Pu = Sr, Iu = G, wu = "[object Arguments]", Cu = "[object Array]", Du = "[object Boolean]", ju = "[object Date]", Mu = "[object Error]", xu = "[object Function]", Vu = "[object Map]", Ru = "[object Number]", Lu = "[object Object]", Uu = "[object RegExp]", Bu = "[object Set]", Gu = "[object String]", Hu = "[object WeakMap]", Ku = "[object ArrayBuffer]", qu = "[object DataView]", zu = "[object Float32Array]", ku = "[object Float64Array]", Nu = "[object Int8Array]", Wu = "[object Int16Array]", Xu = "[object Int32Array]", Yu = "[object Uint8Array]", Ju = "[object Uint8ClampedArray]", Zu = "[object Uint16Array]", Qu = "[object Uint32Array]", _ = {};
    _[zu] = _[ku] = _[Nu] = _[Wu] = _[Xu] = _[Yu] = _[Ju] = _[Zu] = _[Qu] = !0;
    _[wu] = _[Cu] = _[Ku] = _[Du] = _[qu] = _[ju] = _[Mu] = _[xu] = _[Vu] = _[Ru] = _[Lu] = _[Uu] = _[Bu] = _[Gu] = _[Hu] = !1;
    function el(e) {
      return Iu(e) && Pu(e.length) && !!_[Ou(e)];
    }
    var rl = el;
    function tl(e) {
      return function(r2) {
        return e(r2);
      };
    }
    var Fr = tl, de = { exports: {} };
    (function(e, r2) {
      var t = an, n = r2 && !r2.nodeType && r2, a = n && !0 && e && !e.nodeType && e, o = a && a.exports === n, s = o && t.process, i = function() {
        try {
          var l = a && a.require && a.require("util").types;
          return l || s && s.binding && s.binding("util");
        } catch {
        }
      }();
      e.exports = i;
    })(de, de.exports);
    var nl = rl, al = Fr, vt = de.exports, pt = vt && vt.isTypedArray, ol = pt ? al(pt) : nl, hn = ol, sl = lu, il = mr, ul = V, ll = fe.exports, cl = _r, fl = hn, dl = Object.prototype, vl = dl.hasOwnProperty;
    function pl(e, r2) {
      var t = ul(e), n = !t && il(e), a = !t && !n && ll(e), o = !t && !n && !a && fl(e), s = t || n || a || o, i = s ? sl(e.length, String) : [], l = i.length;
      for (var u in e)
        (r2 || vl.call(e, u)) && !(s && (u == "length" || a && (u == "offset" || u == "parent") || o && (u == "buffer" || u == "byteLength" || u == "byteOffset") || cl(u, l))) && i.push(u);
      return i;
    }
    var gn = pl, yl = Object.prototype;
    function hl(e) {
      var r2 = e && e.constructor, t = typeof r2 == "function" && r2.prototype || yl;
      return e === t;
    }
    var Tr = hl;
    function gl(e, r2) {
      return function(t) {
        return e(r2(t));
      };
    }
    var bn = gl, bl = bn, $l = bl(Object.keys, Object), ml = $l, _l = Tr, Sl = ml, Fl = Object.prototype, Tl = Fl.hasOwnProperty;
    function Al(e) {
      if (!_l(e))
        return Sl(e);
      var r2 = [];
      for (var t in Object(e))
        Tl.call(e, t) && t != "constructor" && r2.push(t);
      return r2;
    }
    var El = Al, Ol = sn, Pl = Sr;
    function Il(e) {
      return e != null && Pl(e.length) && !Ol(e);
    }
    var $n = Il, wl = gn, Cl = El, Dl = $n;
    function jl(e) {
      return Dl(e) ? wl(e) : Cl(e);
    }
    var Re = jl, Ml = vn, xl = $r, Vl = Re;
    function Rl(e) {
      return Ml(e, Vl, xl);
    }
    var mn = Rl, yt = mn, Ll = 1, Ul = Object.prototype, Bl = Ul.hasOwnProperty;
    function Gl(e, r2, t, n, a, o) {
      var s = t & Ll, i = yt(e), l = i.length, u = yt(r2), c = u.length;
      if (l != c && !s)
        return !1;
      for (var f2 = l; f2--; ) {
        var d = i[f2];
        if (!(s ? d in r2 : Bl.call(r2, d)))
          return !1;
      }
      var v = o.get(e), y = o.get(r2);
      if (v && y)
        return v == r2 && y == e;
      var p = !0;
      o.set(e, r2), o.set(r2, e);
      for (var $ = s; ++f2 < l; ) {
        d = i[f2];
        var S = e[d], T = r2[d];
        if (n)
          var D = s ? n(T, S, d, r2, e, o) : n(S, T, d, e, r2, o);
        if (!(D === void 0 ? S === T || a(S, T, t, n, o) : D)) {
          p = !1;
          break;
        }
        $ || ($ = d == "constructor");
      }
      if (p && !$) {
        var L = e.constructor, I = r2.constructor;
        L != I && "constructor" in e && "constructor" in r2 && !(typeof L == "function" && L instanceof L && typeof I == "function" && I instanceof I) && (p = !1);
      }
      return o.delete(e), o.delete(r2), p;
    }
    var Hl = Gl, Kl = k, ql = x, zl = Kl(ql, "DataView"), kl = zl, Nl = k, Wl = x, Xl = Nl(Wl, "Promise"), Yl = Xl, Jl = k, Zl = x, Ql = Jl(Zl, "Set"), _n = Ql, ec = k, rc = x, tc = ec(rc, "WeakMap"), nc = tc, er = kl, rr = pr, tr = Yl, nr = _n, ar = nc, Sn = Z, te = un, ht = "[object Map]", ac = "[object Object]", gt = "[object Promise]", bt = "[object Set]", $t = "[object WeakMap]", mt = "[object DataView]", oc = te(er), sc = te(rr), ic = te(tr), uc = te(nr), lc = te(ar), H = Sn;
    (er && H(new er(new ArrayBuffer(1))) != mt || rr && H(new rr()) != ht || tr && H(tr.resolve()) != gt || nr && H(new nr()) != bt || ar && H(new ar()) != $t) && (H = function(e) {
      var r2 = Sn(e), t = r2 == ac ? e.constructor : void 0, n = t ? te(t) : "";
      if (n)
        switch (n) {
          case oc:
            return mt;
          case sc:
            return ht;
          case ic:
            return gt;
          case uc:
            return bt;
          case lc:
            return $t;
        }
      return r2;
    });
    var Le = H, qe = hr, cc = fn, fc = Wi, dc = Hl, _t = Le, St = V, Ft = fe.exports, vc = hn, pc = 1, Tt = "[object Arguments]", At = "[object Array]", Se = "[object Object]", yc = Object.prototype, Et = yc.hasOwnProperty;
    function hc(e, r2, t, n, a, o) {
      var s = St(e), i = St(r2), l = s ? At : _t(e), u = i ? At : _t(r2);
      l = l == Tt ? Se : l, u = u == Tt ? Se : u;
      var c = l == Se, f2 = u == Se, d = l == u;
      if (d && Ft(e)) {
        if (!Ft(r2))
          return !1;
        s = !0, c = !1;
      }
      if (d && !c)
        return o || (o = new qe()), s || vc(e) ? cc(e, r2, t, n, a, o) : fc(e, r2, l, t, n, a, o);
      if (!(t & pc)) {
        var v = c && Et.call(e, "__wrapped__"), y = f2 && Et.call(r2, "__wrapped__");
        if (v || y) {
          var p = v ? e.value() : e, $ = y ? r2.value() : r2;
          return o || (o = new qe()), a(p, $, t, n, o);
        }
      }
      return d ? (o || (o = new qe()), dc(e, r2, t, n, a, o)) : !1;
    }
    var gc = hc, bc = gc, Ot = G;
    function Fn(e, r2, t, n, a) {
      return e === r2 ? !0 : e == null || r2 == null || !Ot(e) && !Ot(r2) ? e !== e && r2 !== r2 : bc(e, r2, t, n, Fn, a);
    }
    var Ar = Fn, $c = hr, mc = Ar, _c = 1, Sc = 2;
    function Fc(e, r2, t, n) {
      var a = t.length, o = a, s = !n;
      if (e == null)
        return !o;
      for (e = Object(e); a--; ) {
        var i = t[a];
        if (s && i[2] ? i[1] !== e[i[0]] : !(i[0] in e))
          return !1;
      }
      for (; ++a < o; ) {
        i = t[a];
        var l = i[0], u = e[l], c = i[1];
        if (s && i[2]) {
          if (u === void 0 && !(l in e))
            return !1;
        } else {
          var f2 = new $c();
          if (n)
            var d = n(u, c, l, e, r2, f2);
          if (!(d === void 0 ? mc(c, u, _c | Sc, n, f2) : d))
            return !1;
        }
      }
      return !0;
    }
    var Tc = Fc, Ac = z;
    function Ec(e) {
      return e === e && !Ac(e);
    }
    var Tn = Ec, Oc = Tn, Pc = Re;
    function Ic(e) {
      for (var r2 = Pc(e), t = r2.length; t--; ) {
        var n = r2[t], a = e[n];
        r2[t] = [n, a, Oc(a)];
      }
      return r2;
    }
    var wc = Ic;
    function Cc(e, r2) {
      return function(t) {
        return t == null ? !1 : t[e] === r2 && (r2 !== void 0 || e in Object(t));
      };
    }
    var An = Cc, Dc = Tc, jc = wc, Mc = An;
    function xc(e) {
      var r2 = jc(e);
      return r2.length == 1 && r2[0][2] ? Mc(r2[0][0], r2[0][1]) : function(t) {
        return t === e || Dc(t, e, r2);
      };
    }
    var Vc = xc, Rc = Z, Lc = G, Uc = "[object Symbol]";
    function Bc(e) {
      return typeof e == "symbol" || Lc(e) && Rc(e) == Uc;
    }
    var Er = Bc, Gc = V, Hc = Er, Kc = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, qc = /^\w*$/;
    function zc(e, r2) {
      if (Gc(e))
        return !1;
      var t = typeof e;
      return t == "number" || t == "symbol" || t == "boolean" || e == null || Hc(e) ? !0 : qc.test(e) || !Kc.test(e) || r2 != null && e in Object(r2);
    }
    var Or = zc, En = yr, kc = "Expected a function";
    function Pr(e, r2) {
      if (typeof e != "function" || r2 != null && typeof r2 != "function")
        throw new TypeError(kc);
      var t = function() {
        var n = arguments, a = r2 ? r2.apply(this, n) : n[0], o = t.cache;
        if (o.has(a))
          return o.get(a);
        var s = e.apply(this, n);
        return t.cache = o.set(a, s) || o, s;
      };
      return t.cache = new (Pr.Cache || En)(), t;
    }
    Pr.Cache = En;
    var Nc = Pr, Wc = Nc, Xc = 500;
    function Yc(e) {
      var r2 = Wc(e, function(n) {
        return t.size === Xc && t.clear(), n;
      }), t = r2.cache;
      return r2;
    }
    var Jc = Yc, Zc = Jc, Qc = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g, ef = /\\(\\)?/g, rf = Zc(function(e) {
      var r2 = [];
      return e.charCodeAt(0) === 46 && r2.push(""), e.replace(Qc, function(t, n, a, o) {
        r2.push(a ? o.replace(ef, "$1") : n || t);
      }), r2;
    }), tf = rf;
    function nf(e, r2) {
      for (var t = -1, n = e == null ? 0 : e.length, a = Array(n); ++t < n; )
        a[t] = r2(e[t], t, e);
      return a;
    }
    var Ir = nf, Pt = J, af = Ir, of = V, sf = Er, uf = 1 / 0, It = Pt ? Pt.prototype : void 0, wt = It ? It.toString : void 0;
    function On(e) {
      if (typeof e == "string")
        return e;
      if (of(e))
        return af(e, On) + "";
      if (sf(e))
        return wt ? wt.call(e) : "";
      var r2 = e + "";
      return r2 == "0" && 1 / e == -uf ? "-0" : r2;
    }
    var lf = On, cf = lf;
    function ff(e) {
      return e == null ? "" : cf(e);
    }
    var df = ff, vf = V, pf = Or, yf = tf, hf = df;
    function gf(e, r2) {
      return vf(e) ? e : pf(e, r2) ? [e] : yf(hf(e));
    }
    var ne = gf, bf = Er, $f = 1 / 0;
    function mf(e) {
      if (typeof e == "string" || bf(e))
        return e;
      var r2 = e + "";
      return r2 == "0" && 1 / e == -$f ? "-0" : r2;
    }
    var ae = mf, _f = ne, Sf = ae;
    function Ff(e, r2) {
      r2 = _f(r2, e);
      for (var t = 0, n = r2.length; e != null && t < n; )
        e = e[Sf(r2[t++])];
      return t && t == n ? e : void 0;
    }
    var Ue = Ff, Tf = Ue;
    function Af(e, r2, t) {
      var n = e == null ? void 0 : Tf(e, r2);
      return n === void 0 ? t : n;
    }
    var B = Af;
    function Ef(e, r2) {
      return e != null && r2 in Object(e);
    }
    var Of = Ef, Pf = ne, If = mr, wf = V, Cf = _r, Df = Sr, jf = ae;
    function Mf(e, r2, t) {
      r2 = Pf(r2, e);
      for (var n = -1, a = r2.length, o = !1; ++n < a; ) {
        var s = jf(r2[n]);
        if (!(o = e != null && t(e, s)))
          break;
        e = e[s];
      }
      return o || ++n != a ? o : (a = e == null ? 0 : e.length, !!a && Df(a) && Cf(s, a) && (wf(e) || If(e)));
    }
    var xf = Mf, Vf = Of, Rf = xf;
    function Lf(e, r2) {
      return e != null && Rf(e, r2, Vf);
    }
    var Uf = Lf, Bf = Ar, Gf = B, Hf = Uf, Kf = Or, qf = Tn, zf = An, kf = ae, Nf = 1, Wf = 2;
    function Xf(e, r2) {
      return Kf(e) && qf(r2) ? zf(kf(e), r2) : function(t) {
        var n = Gf(t, e);
        return n === void 0 && n === r2 ? Hf(t, e) : Bf(r2, n, Nf | Wf);
      };
    }
    var Yf = Xf;
    function Jf(e) {
      return e;
    }
    var Pn = Jf;
    function Zf(e) {
      return function(r2) {
        return r2 == null ? void 0 : r2[e];
      };
    }
    var Qf = Zf, ed = Ue;
    function rd(e) {
      return function(r2) {
        return ed(r2, e);
      };
    }
    var td = rd, nd = Qf, ad = td, od = Or, sd = ae;
    function id(e) {
      return od(e) ? nd(sd(e)) : ad(e);
    }
    var ud = id, ld = Vc, cd = Yf, fd = Pn, dd = V, vd = ud;
    function pd(e) {
      return typeof e == "function" ? e : e == null ? fd : typeof e == "object" ? dd(e) ? cd(e[0], e[1]) : ld(e) : vd(e);
    }
    var In = pd, yd = "Expected a function";
    function hd(e) {
      if (typeof e != "function")
        throw new TypeError(yd);
      return function() {
        var r2 = arguments;
        switch (r2.length) {
          case 0:
            return !e.call(this);
          case 1:
            return !e.call(this, r2[0]);
          case 2:
            return !e.call(this, r2[0], r2[1]);
          case 3:
            return !e.call(this, r2[0], r2[1], r2[2]);
        }
        return !e.apply(this, r2);
      };
    }
    var gd = hd, bd = k, $d = function() {
      try {
        var e = bd(Object, "defineProperty");
        return e({}, "", {}), e;
      } catch {
      }
    }(), wn = $d, Ct = wn;
    function md(e, r2, t) {
      r2 == "__proto__" && Ct ? Ct(e, r2, { configurable: !0, enumerable: !0, value: t, writable: !0 }) : e[r2] = t;
    }
    var Cn = md, _d = Cn, Sd = vr, Fd = Object.prototype, Td = Fd.hasOwnProperty;
    function Ad(e, r2, t) {
      var n = e[r2];
      (!(Td.call(e, r2) && Sd(n, t)) || t === void 0 && !(r2 in e)) && _d(e, r2, t);
    }
    var wr = Ad, Ed = wr, Od = ne, Pd = _r, Dt = z, Id = ae;
    function wd(e, r2, t, n) {
      if (!Dt(e))
        return e;
      r2 = Od(r2, e);
      for (var a = -1, o = r2.length, s = o - 1, i = e; i != null && ++a < o; ) {
        var l = Id(r2[a]), u = t;
        if (l === "__proto__" || l === "constructor" || l === "prototype")
          return e;
        if (a != s) {
          var c = i[l];
          u = n ? n(c, l, i) : void 0, u === void 0 && (u = Dt(c) ? c : Pd(r2[a + 1]) ? [] : {});
        }
        Ed(i, l, u), i = i[l];
      }
      return e;
    }
    var Dn = wd, Cd = Ue, Dd = Dn, jd = ne;
    function Md(e, r2, t) {
      for (var n = -1, a = r2.length, o = {}; ++n < a; ) {
        var s = r2[n], i = Cd(e, s);
        t(i, s) && Dd(o, jd(s, e), i);
      }
      return o;
    }
    var xd = Md, Vd = bn, Rd = Vd(Object.getPrototypeOf, Object), Cr = Rd, Ld = br, Ud = Cr, Bd = $r, Gd = pn, Hd = Object.getOwnPropertySymbols, Kd = Hd ? function(e) {
      for (var r2 = []; e; )
        Ld(r2, Bd(e)), e = Ud(e);
      return r2;
    } : Gd, jn = Kd;
    function qd(e) {
      var r2 = [];
      if (e != null)
        for (var t in Object(e))
          r2.push(t);
      return r2;
    }
    var zd = qd, kd = z, Nd = Tr, Wd = zd, Xd = Object.prototype, Yd = Xd.hasOwnProperty;
    function Jd(e) {
      if (!kd(e))
        return Wd(e);
      var r2 = Nd(e), t = [];
      for (var n in e)
        n == "constructor" && (r2 || !Yd.call(e, n)) || t.push(n);
      return t;
    }
    var Zd = Jd, Qd = gn, ev = Zd, rv = $n;
    function tv(e) {
      return rv(e) ? Qd(e, !0) : ev(e);
    }
    var Dr = tv, nv = vn, av = jn, ov = Dr;
    function sv(e) {
      return nv(e, ov, av);
    }
    var jr = sv, iv = Ir, uv = In, lv = xd, cv = jr;
    function fv(e, r2) {
      if (e == null)
        return {};
      var t = iv(cv(e), function(n) {
        return [n];
      });
      return r2 = uv(r2), lv(e, t, function(n, a) {
        return r2(n, a[0]);
      });
    }
    var dv = fv, vv = In, pv = gd, yv = dv;
    function hv(e, r2) {
      return yv(e, pv(vv(r2)));
    }
    var gv = hv, bv = (e = "on", r2) => {
      if (Array.isArray(r2))
        return r2.some((t) => t === !0 || t === e);
      if (typeof r2 == "boolean")
        return r2;
      if (typeof r2 == "string")
        return r2 === e;
    }, $v = (e = "on", r2) => {
      if (typeof r2 == "string")
        return r2 === e;
    }, mv = { initial: "onBlur", whenTouched: "onChange", whenSubmitted: "onChange" }, _v = ({ clearError: e, validate: r2, defaultValue: t, touched: n, setTouched: a, hasBeenSubmitted: o, validationBehavior: s, name: i }) => {
      let l = { ...mv, ...s };
      return (u = {}) => {
        let c = o ? l.whenSubmitted : n ? l.whenTouched : l.initial, f2 = { ...u, onChange: (...d) => {
          var v;
          return c === "onChange" ? r2() : e(), (v = u == null ? void 0 : u.onChange) == null ? void 0 : v.call(u, ...d);
        }, onBlur: (...d) => {
          var v;
          return c === "onBlur" && r2(), a(!0), (v = u == null ? void 0 : u.onBlur) == null ? void 0 : v.call(u, ...d);
        }, name: i };
        return u.type === "checkbox" ? f2.defaultChecked = bv(u.value, t) : u.type === "radio" ? f2.defaultChecked = $v(u.value, t) : u.value === void 0 && (f2.defaultValue = t), gv(f2, (d) => d === void 0);
      };
    }, Sv = !0, ze = "Invariant failed";
    function U(e, r2) {
      if (!e) {
        if (Sv)
          throw new Error(ze);
        var t = typeof r2 == "function" ? r2() : r2, n = t ? ze + ": " + t : ze;
        throw new Error(n);
      }
    }
    var le = "__rvfInternalFormId", Fv = "__rvfInternalFormDefaults", Mn = (e) => `${Fv}_${e}`, xn = b.createContext(null), Mr = (e) => ({ hydrateTo: () => e, map: (r2) => Mr(r2(e)) }), xr = () => ({ hydrateTo: (e) => e, map: () => xr() }), Tv = (e, r2) => r2 ? xr() : Mr(e), ie = { serverData: Mr, hydratedData: xr, from: Tv }, Av = Dn;
    function Ev(e, r2, t) {
      return e == null ? e : Av(e, r2, t);
    }
    var N = Ev, jt = (e) => {
      let r2, t = /* @__PURE__ */ new Set(), n = (l, u) => {
        let c = typeof l == "function" ? l(r2) : l;
        if (c !== r2) {
          let f2 = r2;
          r2 = u ? c : Object.assign({}, r2, c), t.forEach((d) => d(r2, f2));
        }
      }, a = () => r2, i = { setState: n, getState: a, subscribe: (l) => (t.add(l), () => t.delete(l)), destroy: () => t.clear() };
      return r2 = e(n, a, i), i;
    }, Ov = (e) => e ? jt(e) : jt, Vn = { exports: {} }, Rn = {}, Ln = { exports: {} }, Un = {};
    var W = w.default;
    function Pv(e, r2) {
      return e === r2 && (e !== 0 || 1 / e === 1 / r2) || e !== e && r2 !== r2;
    }
    var Iv = typeof Object.is == "function" ? Object.is : Pv, wv = W.useState, Cv = W.useEffect, Dv = W.useLayoutEffect, jv = W.useDebugValue;
    function Mv(e, r2) {
      var t = r2(), n = wv({ inst: { value: t, getSnapshot: r2 } }), a = n[0].inst, o = n[1];
      return Dv(function() {
        a.value = t, a.getSnapshot = r2, ke(a) && o({ inst: a });
      }, [e, t, r2]), Cv(function() {
        return ke(a) && o({ inst: a }), e(function() {
          ke(a) && o({ inst: a });
        });
      }, [e]), jv(t), t;
    }
    function ke(e) {
      var r2 = e.getSnapshot;
      e = e.value;
      try {
        var t = r2();
        return !Iv(e, t);
      } catch {
        return !0;
      }
    }
    function xv(e, r2) {
      return r2();
    }
    var Vv = typeof window > "u" || typeof window.document > "u" || typeof window.document.createElement > "u" ? xv : Mv;
    Un.useSyncExternalStore = W.useSyncExternalStore !== void 0 ? W.useSyncExternalStore : Vv;
    Ln.exports = Un;
    var Be = w.default, Rv = Ln.exports;
    function Lv(e, r2) {
      return e === r2 && (e !== 0 || 1 / e === 1 / r2) || e !== e && r2 !== r2;
    }
    var Uv = typeof Object.is == "function" ? Object.is : Lv, Bv = Rv.useSyncExternalStore, Gv = Be.useRef, Hv = Be.useEffect, Kv = Be.useMemo, qv = Be.useDebugValue;
    Rn.useSyncExternalStoreWithSelector = function(e, r2, t, n, a) {
      var o = Gv(null);
      if (o.current === null) {
        var s = { hasValue: !1, value: null };
        o.current = s;
      } else
        s = o.current;
      o = Kv(function() {
        function l(v) {
          if (!u) {
            if (u = !0, c = v, v = n(v), a !== void 0 && s.hasValue) {
              var y = s.value;
              if (a(y, v))
                return f2 = y;
            }
            return f2 = v;
          }
          if (y = f2, Uv(c, v))
            return y;
          var p = n(v);
          return a !== void 0 && a(y, p) ? y : (c = v, f2 = p);
        }
        var u = !1, c, f2, d = t === void 0 ? null : t;
        return [function() {
          return l(r2());
        }, d === null ? void 0 : function() {
          return l(d());
        }];
      }, [r2, t, n, a]);
      var i = Bv(e, o[0], o[1]);
      return Hv(function() {
        s.hasValue = !0, s.value = i;
      }, [i]), qv(i), i;
    };
    Vn.exports = Rn;
    function zv(e, r2 = e.getState, t) {
      let n = Vn.exports.useSyncExternalStoreWithSelector(e.subscribe, e.getState, e.getServerState || e.getState, r2, t);
      return b.useDebugValue(n), n;
    }
    var Mt = (e) => {
      let r2 = typeof e == "function" ? Ov(e) : e, t = (n, a) => zv(r2, n, a);
      return Object.assign(t, r2), t;
    }, kv = (e) => e ? Mt(e) : Mt, Nv = kv;
    function C(e) {
      for (var r2 = arguments.length, t = Array(r2 > 1 ? r2 - 1 : 0), n = 1; n < r2; n++)
        t[n - 1] = arguments[n];
      throw Error("[Immer] minified error nr: " + e + (t.length ? " " + t.map(function(a) {
        return "'" + a + "'";
      }).join(",") : "") + ". Find the full error at: https://bit.ly/3cXEKWf");
    }
    function X(e) {
      return !!e && !!e[O];
    }
    function q(e) {
      return !!e && (function(r2) {
        if (!r2 || typeof r2 != "object")
          return !1;
        var t = Object.getPrototypeOf(r2);
        if (t === null)
          return !0;
        var n = Object.hasOwnProperty.call(t, "constructor") && t.constructor;
        return n === Object || typeof n == "function" && Function.toString.call(n) === rp;
      }(e) || Array.isArray(e) || !!e[Ht] || !!e.constructor[Ht] || Vr(e) || Rr(e));
    }
    function ve(e, r2, t) {
      t === void 0 && (t = !1), oe(e) === 0 ? (t ? Object.keys : Hr)(e).forEach(function(n) {
        t && typeof n == "symbol" || r2(n, e[n], e);
      }) : e.forEach(function(n, a) {
        return r2(a, n, e);
      });
    }
    function oe(e) {
      var r2 = e[O];
      return r2 ? r2.i > 3 ? r2.i - 4 : r2.i : Array.isArray(e) ? 1 : Vr(e) ? 2 : Rr(e) ? 3 : 0;
    }
    function or(e, r2) {
      return oe(e) === 2 ? e.has(r2) : Object.prototype.hasOwnProperty.call(e, r2);
    }
    function Wv(e, r2) {
      return oe(e) === 2 ? e.get(r2) : e[r2];
    }
    function Bn(e, r2, t) {
      var n = oe(e);
      n === 2 ? e.set(r2, t) : n === 3 ? (e.delete(r2), e.add(t)) : e[r2] = t;
    }
    function Xv(e, r2) {
      return e === r2 ? e !== 0 || 1 / e == 1 / r2 : e != e && r2 != r2;
    }
    function Vr(e) {
      return Qv && e instanceof Map;
    }
    function Rr(e) {
      return ep && e instanceof Set;
    }
    function K(e) {
      return e.o || e.t;
    }
    function Lr(e) {
      if (Array.isArray(e))
        return Array.prototype.slice.call(e);
      var r2 = tp(e);
      delete r2[O];
      for (var t = Hr(r2), n = 0; n < t.length; n++) {
        var a = t[n], o = r2[a];
        o.writable === !1 && (o.writable = !0, o.configurable = !0), (o.get || o.set) && (r2[a] = { configurable: !0, writable: !0, enumerable: o.enumerable, value: e[a] });
      }
      return Object.create(Object.getPrototypeOf(e), r2);
    }
    function Ur(e, r2) {
      return r2 === void 0 && (r2 = !1), Br(e) || X(e) || !q(e) || (oe(e) > 1 && (e.set = e.add = e.clear = e.delete = Yv), Object.freeze(e), r2 && ve(e, function(t, n) {
        return Ur(n, !0);
      }, !0)), e;
    }
    function Yv() {
      C(2);
    }
    function Br(e) {
      return e == null || typeof e != "object" || Object.isFrozen(e);
    }
    function M(e) {
      var r2 = np[e];
      return r2 || C(18, e), r2;
    }
    function xt() {
      return pe;
    }
    function Ne(e, r2) {
      r2 && (M("Patches"), e.u = [], e.s = [], e.v = r2);
    }
    function we(e) {
      sr(e), e.p.forEach(Jv), e.p = null;
    }
    function sr(e) {
      e === pe && (pe = e.l);
    }
    function Vt(e) {
      return pe = { p: [], l: pe, h: e, m: !0, _: 0 };
    }
    function Jv(e) {
      var r2 = e[O];
      r2.i === 0 || r2.i === 1 ? r2.j() : r2.O = !0;
    }
    function We(e, r2) {
      r2._ = r2.p.length;
      var t = r2.p[0], n = e !== void 0 && e !== t;
      return r2.h.g || M("ES5").S(r2, e, n), n ? (t[O].P && (we(r2), C(4)), q(e) && (e = Ce(r2, e), r2.l || De(r2, e)), r2.u && M("Patches").M(t[O].t, e, r2.u, r2.s)) : e = Ce(r2, t, []), we(r2), r2.u && r2.v(r2.u, r2.s), e !== Gn ? e : void 0;
    }
    function Ce(e, r2, t) {
      if (Br(r2))
        return r2;
      var n = r2[O];
      if (!n)
        return ve(r2, function(o, s) {
          return Rt(e, n, r2, o, s, t);
        }, !0), r2;
      if (n.A !== e)
        return r2;
      if (!n.P)
        return De(e, n.t, !0), n.t;
      if (!n.I) {
        n.I = !0, n.A._--;
        var a = n.i === 4 || n.i === 5 ? n.o = Lr(n.k) : n.o;
        ve(n.i === 3 ? new Set(a) : a, function(o, s) {
          return Rt(e, n, a, o, s, t);
        }), De(e, a, !1), t && e.u && M("Patches").R(n, t, e.u, e.s);
      }
      return n.o;
    }
    function Rt(e, r2, t, n, a, o) {
      if (X(a)) {
        var s = Ce(e, a, o && r2 && r2.i !== 3 && !or(r2.D, n) ? o.concat(n) : void 0);
        if (Bn(t, n, s), !X(s))
          return;
        e.m = !1;
      }
      if (q(a) && !Br(a)) {
        if (!e.h.F && e._ < 1)
          return;
        Ce(e, a), r2 && r2.A.l || De(e, a);
      }
    }
    function De(e, r2, t) {
      t === void 0 && (t = !1), e.h.F && e.m && Ur(r2, t);
    }
    function Xe(e, r2) {
      var t = e[O];
      return (t ? K(t) : e)[r2];
    }
    function Lt(e, r2) {
      if (r2 in e)
        for (var t = Object.getPrototypeOf(e); t; ) {
          var n = Object.getOwnPropertyDescriptor(t, r2);
          if (n)
            return n;
          t = Object.getPrototypeOf(t);
        }
    }
    function ir(e) {
      e.P || (e.P = !0, e.l && ir(e.l));
    }
    function Ye(e) {
      e.o || (e.o = Lr(e.t));
    }
    function ur(e, r2, t) {
      var n = Vr(r2) ? M("MapSet").N(r2, t) : Rr(r2) ? M("MapSet").T(r2, t) : e.g ? function(a, o) {
        var s = Array.isArray(a), i = { i: s ? 1 : 0, A: o ? o.A : xt(), P: !1, I: !1, D: {}, l: o, t: a, k: null, o: null, j: null, C: !1 }, l = i, u = lr;
        s && (l = [i], u = ue);
        var c = Proxy.revocable(l, u), f2 = c.revoke, d = c.proxy;
        return i.k = d, i.j = f2, d;
      }(r2, t) : M("ES5").J(r2, t);
      return (t ? t.A : xt()).p.push(n), n;
    }
    function Zv(e) {
      return X(e) || C(22, e), function r2(t) {
        if (!q(t))
          return t;
        var n, a = t[O], o = oe(t);
        if (a) {
          if (!a.P && (a.i < 4 || !M("ES5").K(a)))
            return a.t;
          a.I = !0, n = Ut(t, o), a.I = !1;
        } else
          n = Ut(t, o);
        return ve(n, function(s, i) {
          a && Wv(a.t, s) === i || Bn(n, s, r2(i));
        }), o === 3 ? new Set(n) : n;
      }(e);
    }
    function Ut(e, r2) {
      switch (r2) {
        case 2:
          return new Map(e);
        case 3:
          return Array.from(e);
      }
      return Lr(e);
    }
    var Bt, pe, Gr = typeof Symbol < "u" && typeof Symbol("x") == "symbol", Qv = typeof Map < "u", ep = typeof Set < "u", Gt = typeof Proxy < "u" && Proxy.revocable !== void 0 && typeof Reflect < "u", Gn = Gr ? Symbol.for("immer-nothing") : ((Bt = {})["immer-nothing"] = !0, Bt), Ht = Gr ? Symbol.for("immer-draftable") : "__$immer_draftable", O = Gr ? Symbol.for("immer-state") : "__$immer_state", rp = "" + Object.prototype.constructor, Hr = typeof Reflect < "u" && Reflect.ownKeys ? Reflect.ownKeys : Object.getOwnPropertySymbols !== void 0 ? function(e) {
      return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e));
    } : Object.getOwnPropertyNames, tp = Object.getOwnPropertyDescriptors || function(e) {
      var r2 = {};
      return Hr(e).forEach(function(t) {
        r2[t] = Object.getOwnPropertyDescriptor(e, t);
      }), r2;
    }, np = {}, lr = { get: function(e, r2) {
      if (r2 === O)
        return e;
      var t = K(e);
      if (!or(t, r2))
        return function(a, o, s) {
          var i, l = Lt(o, s);
          return l ? "value" in l ? l.value : (i = l.get) === null || i === void 0 ? void 0 : i.call(a.k) : void 0;
        }(e, t, r2);
      var n = t[r2];
      return e.I || !q(n) ? n : n === Xe(e.t, r2) ? (Ye(e), e.o[r2] = ur(e.A.h, n, e)) : n;
    }, has: function(e, r2) {
      return r2 in K(e);
    }, ownKeys: function(e) {
      return Reflect.ownKeys(K(e));
    }, set: function(e, r2, t) {
      var n = Lt(K(e), r2);
      if (n != null && n.set)
        return n.set.call(e.k, t), !0;
      if (!e.P) {
        var a = Xe(K(e), r2), o = a == null ? void 0 : a[O];
        if (o && o.t === t)
          return e.o[r2] = t, e.D[r2] = !1, !0;
        if (Xv(t, a) && (t !== void 0 || or(e.t, r2)))
          return !0;
        Ye(e), ir(e);
      }
      return e.o[r2] === t && typeof t != "number" && (t !== void 0 || r2 in e.o) || (e.o[r2] = t, e.D[r2] = !0, !0);
    }, deleteProperty: function(e, r2) {
      return Xe(e.t, r2) !== void 0 || r2 in e.t ? (e.D[r2] = !1, Ye(e), ir(e)) : delete e.D[r2], e.o && delete e.o[r2], !0;
    }, getOwnPropertyDescriptor: function(e, r2) {
      var t = K(e), n = Reflect.getOwnPropertyDescriptor(t, r2);
      return n && { writable: !0, configurable: e.i !== 1 || r2 !== "length", enumerable: n.enumerable, value: t[r2] };
    }, defineProperty: function() {
      C(11);
    }, getPrototypeOf: function(e) {
      return Object.getPrototypeOf(e.t);
    }, setPrototypeOf: function() {
      C(12);
    } }, ue = {};
    ve(lr, function(e, r2) {
      ue[e] = function() {
        return arguments[0] = arguments[0][0], r2.apply(this, arguments);
      };
    }), ue.deleteProperty = function(e, r2) {
      return ue.set.call(this, e, r2, void 0);
    }, ue.set = function(e, r2, t) {
      return lr.set.call(this, e[0], r2, t, e[0]);
    };
    var ap = function() {
      function e(t) {
        var n = this;
        this.g = Gt, this.F = !0, this.produce = function(a, o, s) {
          if (typeof a == "function" && typeof o != "function") {
            var i = o;
            o = a;
            var l = n;
            return function(p) {
              var $ = this;
              p === void 0 && (p = i);
              for (var S = arguments.length, T = Array(S > 1 ? S - 1 : 0), D = 1; D < S; D++)
                T[D - 1] = arguments[D];
              return l.produce(p, function(L) {
                var I;
                return (I = o).call.apply(I, [$, L].concat(T));
              });
            };
          }
          var u;
          if (typeof o != "function" && C(6), s !== void 0 && typeof s != "function" && C(7), q(a)) {
            var c = Vt(n), f2 = ur(n, a, void 0), d = !0;
            try {
              u = o(f2), d = !1;
            } finally {
              d ? we(c) : sr(c);
            }
            return typeof Promise < "u" && u instanceof Promise ? u.then(function(p) {
              return Ne(c, s), We(p, c);
            }, function(p) {
              throw we(c), p;
            }) : (Ne(c, s), We(u, c));
          }
          if (!a || typeof a != "object") {
            if ((u = o(a)) === void 0 && (u = a), u === Gn && (u = void 0), n.F && Ur(u, !0), s) {
              var v = [], y = [];
              M("Patches").M(a, u, v, y), s(v, y);
            }
            return u;
          }
          C(21, a);
        }, this.produceWithPatches = function(a, o) {
          if (typeof a == "function")
            return function(u) {
              for (var c = arguments.length, f2 = Array(c > 1 ? c - 1 : 0), d = 1; d < c; d++)
                f2[d - 1] = arguments[d];
              return n.produceWithPatches(u, function(v) {
                return a.apply(void 0, [v].concat(f2));
              });
            };
          var s, i, l = n.produce(a, o, function(u, c) {
            s = u, i = c;
          });
          return typeof Promise < "u" && l instanceof Promise ? l.then(function(u) {
            return [u, s, i];
          }) : [l, s, i];
        }, typeof (t == null ? void 0 : t.useProxies) == "boolean" && this.setUseProxies(t.useProxies), typeof (t == null ? void 0 : t.autoFreeze) == "boolean" && this.setAutoFreeze(t.autoFreeze);
      }
      var r2 = e.prototype;
      return r2.createDraft = function(t) {
        q(t) || C(8), X(t) && (t = Zv(t));
        var n = Vt(this), a = ur(this, t, void 0);
        return a[O].C = !0, sr(n), a;
      }, r2.finishDraft = function(t, n) {
        var a = t && t[O], o = a.A;
        return Ne(o, n), We(void 0, o);
      }, r2.setAutoFreeze = function(t) {
        this.F = t;
      }, r2.setUseProxies = function(t) {
        t && !Gt && C(20), this.g = t;
      }, r2.applyPatches = function(t, n) {
        var a;
        for (a = n.length - 1; a >= 0; a--) {
          var o = n[a];
          if (o.path.length === 0 && o.op === "replace") {
            t = o.value;
            break;
          }
        }
        a > -1 && (n = n.slice(a + 1));
        var s = M("Patches").$;
        return X(t) ? s(t, n) : this.produce(t, function(i) {
          return s(i, n);
        });
      }, e;
    }(), P = new ap(), op = P.produce;
    P.produceWithPatches.bind(P);
    P.setAutoFreeze.bind(P);
    P.setUseProxies.bind(P);
    P.applyPatches.bind(P);
    P.createDraft.bind(P);
    P.finishDraft.bind(P);
    var sp = (e) => (r2, t, n) => (n.setState = (a, o, ...s) => {
      let i = typeof a == "function" ? op(a) : a;
      return r2(i, o, ...s);
    }, e(n.setState, t, n)), ip = sp, up = (e, r2) => {
      if (typeof Object.getPrototypeOf(e).requestSubmit == "function") {
        e.requestSubmit(r2);
        return;
      }
      if (r2) {
        lp(e, r2), r2.click();
        return;
      }
      let t = document.createElement("input");
      t.type = "submit", t.hidden = !0, e.appendChild(t), t.click(), e.removeChild(t);
    };
    function lp(e, r2) {
      r2 instanceof HTMLElement || Je(TypeError, "parameter 1 is not of type 'HTMLElement'"), "type" in r2 && r2.type === "submit" || Je(TypeError, "The specified element is not a submit button"), "form" in r2 && r2.form === e || Je(DOMException, "The specified element is not owned by this form element", "NotFoundError");
    }
    function Je(e, r2, t) {
      throw new e("Failed to execute 'requestSubmit' on 'HTMLFormElement': " + r2 + ".", t);
    }
    var A = (e, r2) => {
      let t = B(e, r2);
      if (t == null) {
        let n = [];
        return N(e, r2, n), n;
      }
      return U(Array.isArray(t), `FieldArray: defaultValue value for ${r2} must be an array, null, or undefined`), t;
    }, Fe = (e, r2, t) => {
      let n = e[r2], a = e[t], o = r2 in e, s = t in e;
      o ? e[t] = n : delete e[t], s ? e[r2] = a : delete e[r2];
    };
    function ye(e, r2, t, n) {
      return e.length < r2 && n && (e.length = r2), arguments.length === 4 ? e.splice(r2, t, n) : e.splice(r2, t);
    }
    var Te = (e, r2, t) => {
      let [n] = ye(e, r2, 1);
      ye(e, t, 0, n);
    }, Ae = (e, r2, t) => {
      ye(e, r2, 0, t);
    }, Ee = (e, r2) => {
      ye(e, r2, 1);
    }, Oe = (e, r2, t) => {
      ye(e, r2, 1, t);
    }, E = (e, r2, t) => {
      let n = /* @__PURE__ */ new Set(), a = [];
      for (let [s, i] of Object.entries(r2))
        s.startsWith(e) && s !== e && n.add(s), N(a, s.substring(e.length), i);
      t(a);
      for (let s of n)
        delete r2[s];
      let o = cr(a);
      for (let s of o) {
        let i = B(a, s);
        r2[`${e}${s}`] = i;
      }
    }, cr = (e, r2 = "") => Array.isArray(e) ? e.flatMap((t, n) => cr(t, `${r2}[${n}]`)) : typeof e == "object" ? Object.keys(e).flatMap((t) => cr(e[t], `${r2}.${t}`)) : [r2], F = () => {
    }, cp = { isHydrated: !1, isSubmitting: !1, hasBeenSubmitted: !1, touchedFields: {}, fieldErrors: {}, formElement: null, isValid: () => !0, startSubmit: F, endSubmit: F, setTouched: F, setFieldError: F, setFieldErrors: F, clearFieldError: F, currentDefaultValues: {}, reset: () => F, syncFormProps: F, setFormElement: F, validateField: async () => null, validate: async () => {
      throw new Error("Validate called before form was initialized.");
    }, submit: async () => {
      throw new Error("Submit called before form was initialized.");
    }, resetFormElement: F, getValues: () => new FormData(), controlledFields: { values: {}, refCounts: {}, valueUpdatePromises: {}, valueUpdateResolvers: {}, register: F, unregister: F, setValue: F, getValue: F, kickoffValueUpdate: F, awaitValueUpdate: async () => {
      throw new Error("AwaitValueUpdate called before form was initialized.");
    }, array: { push: F, swap: F, move: F, insert: F, unshift: F, remove: F, pop: F, replace: F } } }, fp = (e, r2) => ({ isHydrated: !1, isSubmitting: !1, hasBeenSubmitted: !1, touchedFields: {}, fieldErrors: {}, formElement: null, currentDefaultValues: {}, isValid: () => Object.keys(r2().fieldErrors).length === 0, startSubmit: () => e((t) => {
      t.isSubmitting = !0, t.hasBeenSubmitted = !0;
    }), endSubmit: () => e((t) => {
      t.isSubmitting = !1;
    }), setTouched: (t, n) => e((a) => {
      a.touchedFields[t] = n;
    }), setFieldError: (t, n) => e((a) => {
      a.fieldErrors[t] = n;
    }), setFieldErrors: (t) => e((n) => {
      n.fieldErrors = t;
    }), clearFieldError: (t) => e((n) => {
      delete n.fieldErrors[t];
    }), reset: () => e((t) => {
      var a, o;
      t.fieldErrors = {}, t.touchedFields = {}, t.hasBeenSubmitted = !1;
      let n = (o = (a = t.formProps) == null ? void 0 : a.defaultValues) != null ? o : {};
      t.controlledFields.values = n, t.currentDefaultValues = n;
    }), syncFormProps: (t) => e((n) => {
      n.isHydrated || (n.controlledFields.values = t.defaultValues, n.currentDefaultValues = t.defaultValues), n.formProps = t, n.isHydrated = !0;
    }), setFormElement: (t) => {
      r2().formElement !== t && e((n) => {
        n.formElement = t;
      });
    }, validateField: async (t) => {
      var s, i, l;
      let n = r2().formElement;
      U(n, "Cannot find reference to form. This is probably a bug in remix-validated-form.");
      let a = (s = r2().formProps) == null ? void 0 : s.validator;
      U(a, "Cannot validator. This is probably a bug in remix-validated-form."), await ((l = (i = r2().controlledFields).awaitValueUpdate) == null ? void 0 : l.call(i, t));
      let { error: o } = await a.validateField(new FormData(n), t);
      return o ? (r2().setFieldError(t, o), o) : (r2().clearFieldError(t), null);
    }, validate: async () => {
      var o;
      let t = r2().formElement;
      U(t, "Cannot find reference to form. This is probably a bug in remix-validated-form.");
      let n = (o = r2().formProps) == null ? void 0 : o.validator;
      U(n, "Cannot validator. This is probably a bug in remix-validated-form.");
      let a = await n.validate(new FormData(t));
      return a.error && r2().setFieldErrors(a.error.fieldErrors), a;
    }, submit: () => {
      let t = r2().formElement;
      U(t, "Cannot find reference to form. This is probably a bug in remix-validated-form."), up(t);
    }, getValues: () => {
      var t;
      return new FormData((t = r2().formElement) != null ? t : void 0);
    }, resetFormElement: () => {
      var t;
      return (t = r2().formElement) == null ? void 0 : t.reset();
    }, controlledFields: { values: {}, refCounts: {}, valueUpdatePromises: {}, valueUpdateResolvers: {}, register: (t) => {
      e((n) => {
        var o;
        let a = (o = n.controlledFields.refCounts[t]) != null ? o : 0;
        n.controlledFields.refCounts[t] = a + 1;
      });
    }, unregister: (t) => {
      r2() === null || r2() === void 0 || e((n) => {
        var s, i, l;
        let a = (s = n.controlledFields.refCounts[t]) != null ? s : 0;
        if (a > 1) {
          n.controlledFields.refCounts[t] = a - 1;
          return;
        }
        Object.keys(n.controlledFields.refCounts).some((u) => t.startsWith(u) && u !== t) || (N(n.controlledFields.values, t, B((i = n.formProps) == null ? void 0 : i.defaultValues, t)), N(n.currentDefaultValues, t, B((l = n.formProps) == null ? void 0 : l.defaultValues, t))), delete n.controlledFields.refCounts[t];
      });
    }, getValue: (t) => B(r2().controlledFields.values, t), setValue: (t, n) => {
      e((a) => {
        N(a.controlledFields.values, t, n);
      }), r2().controlledFields.kickoffValueUpdate(t);
    }, kickoffValueUpdate: (t) => {
      let n = () => e((a) => {
        delete a.controlledFields.valueUpdateResolvers[t], delete a.controlledFields.valueUpdatePromises[t];
      });
      e((a) => {
        let o = new Promise((s) => {
          a.controlledFields.valueUpdateResolvers[t] = s;
        }).then(n);
        a.controlledFields.valueUpdatePromises[t] = o;
      });
    }, awaitValueUpdate: async (t) => {
      await r2().controlledFields.valueUpdatePromises[t];
    }, array: { push: (t, n) => {
      e((a) => {
        A(a.controlledFields.values, t).push(n), A(a.currentDefaultValues, t).push(n);
      }), r2().controlledFields.kickoffValueUpdate(t);
    }, swap: (t, n, a) => {
      e((o) => {
        Fe(A(o.controlledFields.values, t), n, a), Fe(A(o.currentDefaultValues, t), n, a), E(t, o.touchedFields, (s) => Fe(s, n, a)), E(t, o.fieldErrors, (s) => Fe(s, n, a));
      }), r2().controlledFields.kickoffValueUpdate(t);
    }, move: (t, n, a) => {
      e((o) => {
        Te(A(o.controlledFields.values, t), n, a), Te(A(o.currentDefaultValues, t), n, a), E(t, o.touchedFields, (s) => Te(s, n, a)), E(t, o.fieldErrors, (s) => Te(s, n, a));
      }), r2().controlledFields.kickoffValueUpdate(t);
    }, insert: (t, n, a) => {
      e((o) => {
        Ae(A(o.controlledFields.values, t), n, a), Ae(A(o.currentDefaultValues, t), n, a), E(t, o.touchedFields, (s) => Ae(s, n, !1)), E(t, o.fieldErrors, (s) => Ae(s, n, void 0));
      }), r2().controlledFields.kickoffValueUpdate(t);
    }, remove: (t, n) => {
      e((a) => {
        Ee(A(a.controlledFields.values, t), n), Ee(A(a.currentDefaultValues, t), n), E(t, a.touchedFields, (o) => Ee(o, n)), E(t, a.fieldErrors, (o) => Ee(o, n));
      }), r2().controlledFields.kickoffValueUpdate(t);
    }, pop: (t) => {
      e((n) => {
        A(n.controlledFields.values, t).pop(), A(n.currentDefaultValues, t).pop(), E(t, n.touchedFields, (a) => a.pop()), E(t, n.fieldErrors, (a) => a.pop());
      }), r2().controlledFields.kickoffValueUpdate(t);
    }, unshift: (t, n) => {
      e((a) => {
        A(a.controlledFields.values, t).unshift(n), A(a.currentDefaultValues, t).unshift(n), E(t, a.touchedFields, (o) => o.unshift(!1)), E(t, a.fieldErrors, (o) => o.unshift(void 0));
      });
    }, replace: (t, n, a) => {
      e((o) => {
        Oe(A(o.controlledFields.values, t), n, a), Oe(A(o.currentDefaultValues, t), n, a), E(t, o.touchedFields, (s) => Oe(s, n, a)), E(t, o.fieldErrors, (s) => Oe(s, n, a));
      }), r2().controlledFields.kickoffValueUpdate(t);
    } } } }), fr = Nv()(ip((e, r2) => ({ forms: {}, form: (t) => {
      var n;
      return (n = r2().forms[t]) != null ? n : cp;
    }, cleanupForm: (t) => {
      e((n) => {
        delete n.forms[t];
      });
    }, registerForm: (t) => {
      r2().forms[t] || e((n) => {
        n.forms[t] = fp((a) => e((o) => a(o.forms[t])), () => r2().forms[t]);
      });
    } }))), h = (e, r2) => fr((t) => r2(t.form(e))), R = (e, r2) => {
      let t = b.useContext(xn);
      if (e)
        return { formId: e };
      if (t)
        return t;
      throw new Error(`Unable to determine form for ${r2}. Please use it inside a ValidatedForm or pass a 'formId'.`);
    };
    function Kr({ fetcher: e, subaction: r2, formId: t }) {
      var a;
      let n = ce.useActionData();
      return e ? (a = e.data) != null && a.fieldErrors ? e.data : null : n != null && n.fieldErrors ? typeof t == "string" && n.formId ? n.formId === t ? n : null : !r2 && !n.subaction || n.subaction === r2 ? n : null : null;
    }
    var Hn = (e) => {
      let r2 = Kr(e), t = h(e.formId, (n) => n.isHydrated);
      return ie.from(r2 == null ? void 0 : r2.fieldErrors, t);
    }, Kn = ({ formId: e }) => {
      let r2 = ce.useMatches();
      if (typeof e == "string") {
        let t = Mn(e), n = r2.reverse().find((a) => a.data && t in a.data);
        return n == null ? void 0 : n.data[t];
      }
      return null;
    }, qn = (e) => {
      let { formId: r2, defaultValuesProp: t } = e, n = h(r2, (s) => s.isHydrated), a = Kr(e), o = Kn(e);
      return n ? ie.hydratedData() : a != null && a.repopulateFields ? (U(typeof a.repopulateFields == "object", "repopulateFields returned something other than an object"), ie.serverData(a.repopulateFields)) : t ? ie.serverData(t) : ie.serverData(o);
    }, dp = ({ fetcher: e }) => {
      let r2 = ce.useTransition();
      return e ? e.state === "submitting" : !!r2.submission;
    }, vp = (e, { formId: r2 }) => {
      let t = h(r2, (o) => o.touchedFields[e]), n = h(r2, (o) => o.setTouched), a = b.useCallback((o) => n(e, o), [e, n]);
      return [t, a];
    }, zn = (e, r2) => {
      let t = Hn(r2), n = h(r2.formId, (a) => a.fieldErrors[e]);
      return t.map((a) => a == null ? void 0 : a[e]).hydrateTo(n);
    }, kn = (e) => {
      let { formId: r2 } = e;
      return h(r2, (t) => t.clearFieldError);
    }, pp = (e, r2) => h(e, (t) => B(t.currentDefaultValues, r2)), qr = (e, r2) => {
      let t = qn(r2), n = pp(r2.formId, e);
      return t.map((a) => B(a, e)).hydrateTo(n);
    }, Nn = (e) => h(e, (r2) => r2.isSubmitting), Wn = (e) => h(e, (r2) => r2.isValid()), zr = (e) => h(e, (r2) => r2.hasBeenSubmitted), kr = (e) => h(e, (r2) => r2.validateField), yp = (e) => h(e, (r2) => r2.validate), hp = () => () => {
    }, Xn = (e) => h(e, (r2) => {
      var t, n;
      return (n = (t = r2.formProps) == null ? void 0 : t.registerReceiveFocus) != null ? n : hp;
    }), gp = {}, bp = (e) => h(e, (r2) => {
      var t, n;
      return (n = (t = r2.formProps) == null ? void 0 : t.defaultValues) != null ? n : gp;
    }), $p = ({ formId: e }) => h(e, (r2) => r2.setTouched), mp = (e) => h(e, (r2) => r2.touchedFields), _p = (e) => h(e, (r2) => r2.fieldErrors), Yn = (e) => h(e, (r2) => r2.setFieldErrors), Sp = (e) => h(e, (r2) => r2.resetFormElement), Fp = (e) => h(e, (r2) => r2.submit), Tp = (e) => h(e, (r2) => {
      var t;
      return (t = r2.formProps) == null ? void 0 : t.action;
    }), Ap = (e) => h(e, (r2) => {
      var t;
      return (t = r2.formProps) == null ? void 0 : t.subaction;
    }), Ep = (e) => h(e, (r2) => r2.getValues), Op = (e, r2) => {
      let t = h(e.formId, (o) => o.controlledFields.getValue(r2)), n = h(e.formId, (o) => o.isHydrated), a = qr(r2, e);
      return n ? t : a;
    }, Jn = (e, r2) => {
      let t = h(e.formId, (o) => o.controlledFields.valueUpdateResolvers[r2]);
      b.useEffect(() => {
        t == null || t();
      }, [t]);
      let n = h(e.formId, (o) => o.controlledFields.register), a = h(e.formId, (o) => o.controlledFields.unregister);
      b.useEffect(() => (n(r2), () => a(r2)), [e.formId, r2, n, a]);
    }, Pp = (e, r2) => {
      Jn(e, r2);
      let t = h(e.formId, (o) => o.controlledFields.setValue), n = b.useCallback((o) => t(r2, o), [r2, t]);
      return [Op(e, r2), n];
    }, Ip = (e) => {
      let r2 = h(e, (t) => t.controlledFields.setValue);
      return b.useCallback((t, n) => r2(t, n), [r2]);
    }, Zn = (e) => {
      let r2 = R(e, "useIsSubmitting");
      return Nn(r2.formId);
    }, Qn = (e) => {
      let r2 = R(e, "useIsValid");
      return Wn(r2.formId);
    }, wp = (e, r2) => {
      let { formId: t, handleReceiveFocus: n } = r2 ?? {}, a = R(t, "useField"), o = qr(e, a), [s, i] = vp(e, a), l = zn(e, a), u = kn(a), c = zr(a.formId), f2 = kr(a.formId), d = Xn(a.formId);
      return b.useEffect(() => {
        if (n)
          return d(e, n);
      }, [n, e, d]), b.useMemo(() => {
        let y = { error: l, clearError: () => u(e), validate: () => {
          f2(e);
        }, defaultValue: o, touched: s, setTouched: i }, p = _v({ ...y, name: e, hasBeenSubmitted: c, validationBehavior: r2 == null ? void 0 : r2.validationBehavior });
        return { ...y, getInputProps: p };
      }, [l, u, o, s, i, e, c, r2 == null ? void 0 : r2.validationBehavior, f2]);
    }, Cp = (e, r2) => {
      let t = R(r2, "useControlField"), [n, a] = Pp(t, e);
      return [n, a];
    }, Dp = (e) => {
      let r2 = R(e, "useControlField");
      return Ip(r2.formId);
    };
    var jp = (e, r2 = {}) => {
      let t = typeof r2 == "number" ? { status: r2 } : r2, n = new Headers(t.headers);
      return n.has("Content-Type") || n.set("Content-Type", "application/json; charset=utf-8"), new Response(JSON.stringify(e), { ...t, headers: n });
    };
    function Mp(e, r2, t) {
      return jp({ fieldErrors: e.fieldErrors, subaction: e.subaction, repopulateFields: r2, formId: e.formId }, { status: 422, ...t });
    }
    var xp = (e, r2) => ({ [Mn(e)]: r2 });
    function Vp(e, r2, t, n) {
      for (var a = e.length, o = t + (n ? 1 : -1); n ? o-- : ++o < a; )
        if (r2(e[o], o, e))
          return o;
      return -1;
    }
    var Rp = Vp;
    function Lp(e) {
      return e !== e;
    }
    var Up = Lp;
    function Bp(e, r2, t) {
      for (var n = t - 1, a = e.length; ++n < a; )
        if (e[n] === r2)
          return n;
      return -1;
    }
    var Gp = Bp, Hp = Rp, Kp = Up, qp = Gp;
    function zp(e, r2, t) {
      return r2 === r2 ? qp(e, r2, t) : Hp(e, Kp, t);
    }
    var kp = zp, Np = kp;
    function Wp(e, r2) {
      var t = e == null ? 0 : e.length;
      return !!t && Np(e, r2, 0) > -1;
    }
    var Xp = Wp;
    function Yp(e, r2, t) {
      for (var n = -1, a = e == null ? 0 : e.length; ++n < a; )
        if (t(r2, e[n]))
          return !0;
      return !1;
    }
    var Jp = Yp;
    function Zp() {
    }
    var Qp = Zp, Ze = _n, ey = Qp, ry = gr, ty = 1 / 0, ny = Ze && 1 / ry(new Ze([, -0]))[1] == ty ? function(e) {
      return new Ze(e);
    } : ey, ay = ny, oy = ln, sy = Xp, iy = Jp, uy = cn, ly = ay, cy = gr, fy = 200;
    function dy(e, r2, t) {
      var n = -1, a = sy, o = e.length, s = !0, i = [], l = i;
      if (t)
        s = !1, a = iy;
      else if (o >= fy) {
        var u = r2 ? null : ly(e);
        if (u)
          return cy(u);
        s = !1, a = uy, l = new oy();
      } else
        l = r2 ? [] : i;
      e:
        for (; ++n < o; ) {
          var c = e[n], f2 = r2 ? r2(c) : c;
          if (c = t || c !== 0 ? c : 0, s && f2 === f2) {
            for (var d = l.length; d--; )
              if (l[d] === f2)
                continue e;
            r2 && l.push(f2), i.push(c);
          } else
            a(l, f2, t) || (l !== i && l.push(f2), i.push(c));
        }
      return i;
    }
    var vy = dy, py = vy;
    function yy(e) {
      return e && e.length ? py(e) : [];
    }
    var hy = yy, ea = class {
      constructor() {
        this.dict = /* @__PURE__ */ new Map(), this.add = (r2, t) => {
          this.dict.has(r2) ? this.dict.get(r2).push(t) : this.dict.set(r2, [t]);
        }, this.delete = (r2) => {
          this.dict.delete(r2);
        }, this.remove = (r2, t) => {
          if (!this.dict.has(r2))
            return;
          let n = this.dict.get(r2), a = n.indexOf(t);
          a !== -1 && n.splice(a, 1), n.length === 0 && this.dict.delete(r2);
        }, this.getAll = (r2) => {
          var t;
          return (t = this.dict.get(r2)) != null ? t : [];
        }, this.entries = () => this.dict.entries(), this.values = () => this.dict.values(), this.has = (r2) => this.dict.has(r2);
      }
    }, gy = () => {
      let e = b.useRef(null);
      return b.useCallback(() => (e.current || (e.current = new ea()), e.current), []);
    };
    function ra(e, r2) {
      let t = b.useRef(!1);
      b.useEffect(() => {
        e && (t.current = !0), !e && t.current && (t.current = !1, r2());
      });
    }
    var by = Ar;
    function $y(e, r2) {
      return by(e, r2);
    }
    var my = $y, _y = (e) => (r2) => {
      e.filter(Boolean).forEach((t) => {
        typeof t == "function" ? t(r2) : t != null && (t.current = r2);
      });
    }, Qe = typeof window < "u" ? b.useLayoutEffect : b.useEffect, Sy = (e) => {
      let r2 = b.useRef(e), t = r2.current === e || my(r2.current, e);
      return b.useEffect(() => {
        t || (r2.current = e);
      }), t ? r2.current : e;
    }, Fy = (e) => new FormData(e);
    function Ty(e) {
      return e !== null;
    }
    var Ay = (e, r2, t) => {
      var o;
      let n = [...t.elements].map((s) => {
        let i = s instanceof RadioNodeList ? s[0] : s;
        return i instanceof HTMLElement && "name" in i ? i.name : null;
      }).filter(Ty).filter((s) => s in e), a = hy(n);
      for (let s of a) {
        if (r2.has(s)) {
          r2.getAll(s).forEach((l) => {
            l();
          });
          break;
        }
        let i = t.elements.namedItem(s);
        if (i) {
          if (i instanceof RadioNodeList) {
            let l = (o = [...i].filter((u) => u instanceof HTMLInputElement).find((u) => u.value === i.value)) != null ? o : i[0];
            if (l && l instanceof HTMLInputElement) {
              l.focus();
              break;
            }
          }
          if (i instanceof HTMLElement) {
            if (i instanceof HTMLInputElement && i.type === "hidden")
              continue;
            i.focus();
            break;
          }
        }
      }
    }, Ey = (e) => {
      let [r2] = b.useState(() => Symbol("remix-validated-form-id"));
      return e ?? r2;
    }, Oy = ({ resetAfterSubmit: e, formRef: r2 }) => {
      let t = Zn(), n = Qn();
      return ra(t, () => {
        var a;
        n && e && ((a = r2.current) == null || a.reset());
      }), null;
    };
    function Py(e) {
      let r2 = !1;
      return new Proxy(e, { get: (t, n) => n === "preventDefault" ? () => {
        r2 = !0;
      } : n === "defaultPrevented" ? r2 : t[n] });
    }
    function Iy({ validator: e, onSubmit: r2, children: t, fetcher: n, action: a, defaultValues: o, formRef: s, onReset: i, subaction: l, resetAfterSubmit: u = !1, disableFocusOnError: c, method: f2, replace: d, id: v, ...y }) {
      var Qr;
      let p = Ey(v), $ = Sy(o), S = b.useMemo(() => ({ formId: p, action: a, subaction: l, defaultValuesProp: $, fetcher: n }), [a, n, p, $, l]), T = Kr(S), D = Kn(S), L = dp(S), I = b.useRef(null), ua = (Qr = n == null ? void 0 : n.Form) != null ? Qr : ce.Form, la = ce.useSubmit(), ge = Yn(p), ca = h(p, (g) => g.setFieldError), fa = h(p, (g) => g.reset), da = h(p, (g) => g.startSubmit), Ge = h(p, (g) => g.endSubmit), Wr = h(p, (g) => g.syncFormProps), Xr = h(p, (g) => g.setFormElement), Yr = fr((g) => g.cleanupForm), Jr = fr((g) => g.registerForm), be = gy(), Zr = b.useCallback((g, $e) => (be().add(g, $e), () => {
        be().remove(g, $e);
      }), [be]);
      Qe(() => (Jr(p), () => Yr(p)), [Yr, p, Jr]), Qe(() => {
        var g;
        Wr({ action: a, defaultValues: (g = $ ?? D) != null ? g : {}, subaction: l, registerReceiveFocus: Zr, validator: e });
      }, [a, $, Zr, l, Wr, D, e]), Qe(() => {
        Xr(I.current);
      }, [Xr]), b.useEffect(() => {
        var g;
        ge((g = T == null ? void 0 : T.fieldErrors) != null ? g : {});
      }, [T == null ? void 0 : T.fieldErrors, ge, ca]), ra(L, () => {
        Ge();
      });
      let va = async (g, $e, pa) => {
        da();
        let j = pa.submitter, et = Fy(g.currentTarget);
        j != null && j.name && et.append(j.name, j.value);
        let me = await e.validate(et);
        if (me.error)
          ge(me.error.fieldErrors), Ge(), c || Ay(me.error.fieldErrors, be(), I.current);
        else {
          ge({});
          let rt = Py(g);
          if (await (r2 == null ? void 0 : r2(me.data, rt)), rt.defaultPrevented) {
            Ge();
            return;
          }
          n ? n.submit(j || g.currentTarget) : la(j || $e, { replace: d, method: (j == null ? void 0 : j.formMethod) || f2 });
        }
      };
      return w.default.createElement(ua, { ref: _y([I, s]), ...y, id: v, action: a, method: f2, replace: d, onSubmit: (g) => {
        g.preventDefault(), va(g, g.currentTarget, g.nativeEvent);
      }, onReset: (g) => {
        i == null || i(g), !g.defaultPrevented && fa();
      } }, w.default.createElement(xn.Provider, { value: S }, w.default.createElement(w.default.Fragment, null, w.default.createElement(Oy, { formRef: I, resetAfterSubmit: u }), l && w.default.createElement("input", { type: "hidden", value: l, name: "subaction" }), v && w.default.createElement("input", { type: "hidden", value: v, name: le }), t)));
    }
    function wy(e, r2) {
      for (var t = -1, n = e == null ? 0 : e.length; ++t < n && r2(e[t], t, e) !== !1; )
        ;
      return e;
    }
    var Cy = wy, Dy = wr, jy = Cn;
    function My(e, r2, t, n) {
      var a = !t;
      t || (t = {});
      for (var o = -1, s = r2.length; ++o < s; ) {
        var i = r2[o], l = n ? n(t[i], e[i], i, t, e) : void 0;
        l === void 0 && (l = e[i]), a ? jy(t, i, l) : Dy(t, i, l);
      }
      return t;
    }
    var he = My, xy = he, Vy = Re;
    function Ry(e, r2) {
      return e && xy(r2, Vy(r2), e);
    }
    var Ly = Ry, Uy = he, By = Dr;
    function Gy(e, r2) {
      return e && Uy(r2, By(r2), e);
    }
    var Hy = Gy, dr = { exports: {} };
    (function(e, r2) {
      var t = x, n = r2 && !r2.nodeType && r2, a = n && !0 && e && !e.nodeType && e, o = a && a.exports === n, s = o ? t.Buffer : void 0, i = s ? s.allocUnsafe : void 0;
      function l(u, c) {
        if (c)
          return u.slice();
        var f2 = u.length, d = i ? i(f2) : new u.constructor(f2);
        return u.copy(d), d;
      }
      e.exports = l;
    })(dr, dr.exports);
    function Ky(e, r2) {
      var t = -1, n = e.length;
      for (r2 || (r2 = Array(n)); ++t < n; )
        r2[t] = e[t];
      return r2;
    }
    var qy = Ky, zy = he, ky = $r;
    function Ny(e, r2) {
      return zy(e, ky(e), r2);
    }
    var Wy = Ny, Xy = he, Yy = jn;
    function Jy(e, r2) {
      return Xy(e, Yy(e), r2);
    }
    var Zy = Jy, Qy = Object.prototype, eh = Qy.hasOwnProperty;
    function rh(e) {
      var r2 = e.length, t = new e.constructor(r2);
      return r2 && typeof e[0] == "string" && eh.call(e, "index") && (t.index = e.index, t.input = e.input), t;
    }
    var th = rh, Kt = dn;
    function nh(e) {
      var r2 = new e.constructor(e.byteLength);
      return new Kt(r2).set(new Kt(e)), r2;
    }
    var Nr = nh, ah = Nr;
    function oh(e, r2) {
      var t = r2 ? ah(e.buffer) : e.buffer;
      return new e.constructor(t, e.byteOffset, e.byteLength);
    }
    var sh = oh, ih = /\w*$/;
    function uh(e) {
      var r2 = new e.constructor(e.source, ih.exec(e));
      return r2.lastIndex = e.lastIndex, r2;
    }
    var lh = uh, qt = J, zt = qt ? qt.prototype : void 0, kt = zt ? zt.valueOf : void 0;
    function ch(e) {
      return kt ? Object(kt.call(e)) : {};
    }
    var fh = ch, dh = Nr;
    function vh(e, r2) {
      var t = r2 ? dh(e.buffer) : e.buffer;
      return new e.constructor(t, e.byteOffset, e.length);
    }
    var ph = vh, yh = Nr, hh = sh, gh = lh, bh = fh, $h = ph, mh = "[object Boolean]", _h = "[object Date]", Sh = "[object Map]", Fh = "[object Number]", Th = "[object RegExp]", Ah = "[object Set]", Eh = "[object String]", Oh = "[object Symbol]", Ph = "[object ArrayBuffer]", Ih = "[object DataView]", wh = "[object Float32Array]", Ch = "[object Float64Array]", Dh = "[object Int8Array]", jh = "[object Int16Array]", Mh = "[object Int32Array]", xh = "[object Uint8Array]", Vh = "[object Uint8ClampedArray]", Rh = "[object Uint16Array]", Lh = "[object Uint32Array]";
    function Uh(e, r2, t) {
      var n = e.constructor;
      switch (r2) {
        case Ph:
          return yh(e);
        case mh:
        case _h:
          return new n(+e);
        case Ih:
          return hh(e, t);
        case wh:
        case Ch:
        case Dh:
        case jh:
        case Mh:
        case xh:
        case Vh:
        case Rh:
        case Lh:
          return $h(e, t);
        case Sh:
          return new n();
        case Fh:
        case Eh:
          return new n(e);
        case Th:
          return gh(e);
        case Ah:
          return new n();
        case Oh:
          return bh(e);
      }
    }
    var Bh = Uh, Gh = z, Nt = Object.create, Hh = function() {
      function e() {
      }
      return function(r2) {
        if (!Gh(r2))
          return {};
        if (Nt)
          return Nt(r2);
        e.prototype = r2;
        var t = new e();
        return e.prototype = void 0, t;
      };
    }(), Kh = Hh, qh = Kh, zh = Cr, kh = Tr;
    function Nh(e) {
      return typeof e.constructor == "function" && !kh(e) ? qh(zh(e)) : {};
    }
    var Wh = Nh, Xh = Le, Yh = G, Jh = "[object Map]";
    function Zh(e) {
      return Yh(e) && Xh(e) == Jh;
    }
    var Qh = Zh, eg = Qh, rg = Fr, Wt = de.exports, Xt = Wt && Wt.isMap, tg = Xt ? rg(Xt) : eg, ng = tg, ag = Le, og = G, sg = "[object Set]";
    function ig(e) {
      return og(e) && ag(e) == sg;
    }
    var ug = ig, lg = ug, cg = Fr, Yt = de.exports, Jt = Yt && Yt.isSet, fg = Jt ? cg(Jt) : lg, dg = fg, vg = hr, pg = Cy, yg = wr, hg = Ly, gg = Hy, bg = dr.exports, $g = qy, mg = Wy, _g = Zy, Sg = mn, Fg = jr, Tg = Le, Ag = th, Eg = Bh, Og = Wh, Pg = V, Ig = fe.exports, wg = ng, Cg = z, Dg = dg, jg = Re, Mg = Dr, xg = 1, Vg = 2, Rg = 4, ta = "[object Arguments]", Lg = "[object Array]", Ug = "[object Boolean]", Bg = "[object Date]", Gg = "[object Error]", na = "[object Function]", Hg = "[object GeneratorFunction]", Kg = "[object Map]", qg = "[object Number]", aa = "[object Object]", zg = "[object RegExp]", kg = "[object Set]", Ng = "[object String]", Wg = "[object Symbol]", Xg = "[object WeakMap]", Yg = "[object ArrayBuffer]", Jg = "[object DataView]", Zg = "[object Float32Array]", Qg = "[object Float64Array]", eb = "[object Int8Array]", rb = "[object Int16Array]", tb = "[object Int32Array]", nb = "[object Uint8Array]", ab = "[object Uint8ClampedArray]", ob = "[object Uint16Array]", sb = "[object Uint32Array]", m = {};
    m[ta] = m[Lg] = m[Yg] = m[Jg] = m[Ug] = m[Bg] = m[Zg] = m[Qg] = m[eb] = m[rb] = m[tb] = m[Kg] = m[qg] = m[aa] = m[zg] = m[kg] = m[Ng] = m[Wg] = m[nb] = m[ab] = m[ob] = m[sb] = !0;
    m[Gg] = m[na] = m[Xg] = !1;
    function Pe(e, r2, t, n, a, o) {
      var s, i = r2 & xg, l = r2 & Vg, u = r2 & Rg;
      if (t && (s = a ? t(e, n, a, o) : t(e)), s !== void 0)
        return s;
      if (!Cg(e))
        return e;
      var c = Pg(e);
      if (c) {
        if (s = Ag(e), !i)
          return $g(e, s);
      } else {
        var f2 = Tg(e), d = f2 == na || f2 == Hg;
        if (Ig(e))
          return bg(e, i);
        if (f2 == aa || f2 == ta || d && !a) {
          if (s = l || d ? {} : Og(e), !i)
            return l ? _g(e, gg(s, e)) : mg(e, hg(s, e));
        } else {
          if (!m[f2])
            return a ? e : {};
          s = Eg(e, f2, i);
        }
      }
      o || (o = new vg());
      var v = o.get(e);
      if (v)
        return v;
      o.set(e, s), Dg(e) ? e.forEach(function($) {
        s.add(Pe($, r2, t, $, e, o));
      }) : wg(e) && e.forEach(function($, S) {
        s.set(S, Pe($, r2, t, S, e, o));
      });
      var y = u ? l ? Fg : Sg : l ? Mg : jg, p = c ? void 0 : y(e);
      return pg(p || e, function($, S) {
        p && (S = $, $ = e[S]), yg(s, S, Pe($, r2, t, S, e, o));
      }), s;
    }
    var ib = Pe;
    function ub(e) {
      var r2 = e == null ? 0 : e.length;
      return r2 ? e[r2 - 1] : void 0;
    }
    var lb = ub;
    function cb(e, r2, t) {
      var n = -1, a = e.length;
      r2 < 0 && (r2 = -r2 > a ? 0 : a + r2), t = t > a ? a : t, t < 0 && (t += a), a = r2 > t ? 0 : t - r2 >>> 0, r2 >>>= 0;
      for (var o = Array(a); ++n < a; )
        o[n] = e[n + r2];
      return o;
    }
    var fb = cb, db = Ue, vb = fb;
    function pb(e, r2) {
      return r2.length < 2 ? e : db(e, vb(r2, 0, -1));
    }
    var yb = pb, hb = ne, gb = lb, bb = yb, $b = ae;
    function mb(e, r2) {
      return r2 = hb(r2, e), e = bb(e, r2), e == null || delete e[$b(gb(r2))];
    }
    var _b = mb, Sb = Z, Fb = Cr, Tb = G, Ab = "[object Object]", Eb = Function.prototype, Ob = Object.prototype, oa = Eb.toString, Pb = Ob.hasOwnProperty, Ib = oa.call(Object);
    function wb(e) {
      if (!Tb(e) || Sb(e) != Ab)
        return !1;
      var r2 = Fb(e);
      if (r2 === null)
        return !0;
      var t = Pb.call(r2, "constructor") && r2.constructor;
      return typeof t == "function" && t instanceof t && oa.call(t) == Ib;
    }
    var Cb = wb, Db = Cb;
    function jb(e) {
      return Db(e) ? void 0 : e;
    }
    var Mb = jb, Zt = J, xb = mr, Vb = V, Qt = Zt ? Zt.isConcatSpreadable : void 0;
    function Rb(e) {
      return Vb(e) || xb(e) || !!(Qt && e && e[Qt]);
    }
    var Lb = Rb, Ub = br, Bb = Lb;
    function sa(e, r2, t, n, a) {
      var o = -1, s = e.length;
      for (t || (t = Bb), a || (a = []); ++o < s; ) {
        var i = e[o];
        r2 > 0 && t(i) ? r2 > 1 ? sa(i, r2 - 1, t, n, a) : Ub(a, i) : n || (a[a.length] = i);
      }
      return a;
    }
    var Gb = sa, Hb = Gb;
    function Kb(e) {
      var r2 = e == null ? 0 : e.length;
      return r2 ? Hb(e, 1) : [];
    }
    var qb = Kb;
    function zb(e, r2, t) {
      switch (t.length) {
        case 0:
          return e.call(r2);
        case 1:
          return e.call(r2, t[0]);
        case 2:
          return e.call(r2, t[0], t[1]);
        case 3:
          return e.call(r2, t[0], t[1], t[2]);
      }
      return e.apply(r2, t);
    }
    var kb = zb, Nb = kb, en = Math.max;
    function Wb(e, r2, t) {
      return r2 = en(r2 === void 0 ? e.length - 1 : r2, 0), function() {
        for (var n = arguments, a = -1, o = en(n.length - r2, 0), s = Array(o); ++a < o; )
          s[a] = n[r2 + a];
        a = -1;
        for (var i = Array(r2 + 1); ++a < r2; )
          i[a] = n[a];
        return i[r2] = t(s), Nb(e, this, i);
      };
    }
    var Xb = Wb;
    function Yb(e) {
      return function() {
        return e;
      };
    }
    var Jb = Yb, Zb = Jb, rn = wn, Qb = Pn, e$ = rn ? function(e, r2) {
      return rn(e, "toString", { configurable: !0, enumerable: !1, value: Zb(r2), writable: !0 });
    } : Qb, r$ = e$, t$ = 800, n$ = 16, a$ = Date.now;
    function o$(e) {
      var r2 = 0, t = 0;
      return function() {
        var n = a$(), a = n$ - (n - t);
        if (t = n, a > 0) {
          if (++r2 >= t$)
            return arguments[0];
        } else
          r2 = 0;
        return e.apply(void 0, arguments);
      };
    }
    var s$ = o$, i$ = r$, u$ = s$, l$ = u$(i$), c$ = l$, f$ = qb, d$ = Xb, v$ = c$;
    function p$(e) {
      return v$(d$(e, void 0, f$), e + "");
    }
    var y$ = p$, h$ = Ir, g$ = ib, b$ = _b, $$ = ne, m$ = he, _$ = Mb, S$ = y$, F$ = jr, T$ = 1, A$ = 2, E$ = 4, O$ = S$(function(e, r2) {
      var t = {};
      if (e == null)
        return t;
      var n = !1;
      r2 = h$(r2, function(o) {
        return o = $$(o, e), n || (n = o.length > 1), o;
      }), m$(e, F$(e), t), n && (t = g$(t, T$ | A$ | E$, _$));
      for (var a = r2.length; a--; )
        b$(t, r2[a]);
      return t;
    }), P$ = O$, tn = (e) => {
      let r2 = new ea();
      return e.forEach(([t, n]) => r2.add(t, n)), [...r2.entries()].reduce((t, [n, a]) => N(t, n, a.length === 1 ? a[0] : a), {});
    }, nn = (e) => "entries" in e && typeof e.entries == "function" ? tn([...e.entries()]) : tn(Object.entries(e)), I$ = (e) => P$(e, le);
    function w$(e) {
      return { validate: async (r2) => {
        let t = nn(r2), n = await e.validate(I$(t));
        return n.error ? { data: void 0, error: { fieldErrors: n.error, subaction: t.subaction, formId: t[le] }, submittedData: t, formId: t[le] } : { data: n.data, error: void 0, submittedData: t, formId: t[le] };
      }, validateField: (r2, t) => e.validateField(nn(r2), t) };
    }
    var C$ = (e) => {
      let r2 = R(e, "useFormState"), t = Nn(r2.formId), n = zr(r2.formId), a = mp(r2.formId), o = Wn(r2.formId), s = Tp(r2.formId), i = Ap(r2.formId), l = bp(r2.formId), c = qn(r2).hydrateTo(l), f2 = _p(r2.formId), v = Hn(r2).hydrateTo(f2);
      return b.useMemo(() => ({ action: s, subaction: i, defaultValues: c, fieldErrors: v ?? {}, hasBeenSubmitted: n, isSubmitting: t, touchedFields: a, isValid: o }), [s, n, c, v, t, o, i, a]);
    }, D$ = (e) => {
      let r2 = R(e, "useFormHelpers"), t = $p(r2), n = kr(r2.formId), a = yp(r2.formId), o = kn(r2), s = Yn(r2.formId), i = Sp(r2.formId), l = Fp(r2.formId), u = Ep(r2.formId);
      return b.useMemo(() => ({ setTouched: t, validateField: n, clearError: o, validate: a, clearAllErrors: () => s({}), reset: i, submit: l, getValues: u }), [o, i, s, t, l, a, n, u]);
    }, j$ = (e) => {
      let r2 = R(e, "useFormContext"), t = C$(e), { clearError: n, setTouched: a, validateField: o, clearAllErrors: s, validate: i, reset: l, submit: u, getValues: c } = D$(e), f2 = Xn(r2.formId), d = b.useCallback((...v) => {
        v.forEach((y) => {
          n(y);
        });
      }, [n]);
      return b.useMemo(() => ({ ...t, setFieldTouched: a, validateField: o, clearError: d, registerReceiveFocus: f2, clearAllErrors: s, validate: i, reset: l, submit: u, getValues: c }), [s, d, f2, l, a, t, u, i, o, c]);
    }, ia = (e, r2, t) => {
      let n = qr(r2, e);
      Jn(e, r2);
      let a = zr(e.formId), o = kr(e.formId), s = zn(r2, e), i = { initial: "onSubmit", whenSubmitted: "onChange", ...t }, l = a ? i.whenSubmitted : i.initial, u = b.useCallback(() => {
        l === "onChange" && o(r2);
      }, [l, r2, o]);
      U(n == null || Array.isArray(n), `FieldArray: defaultValue value for ${r2} must be an array, null, or undefined`);
      let c = h(e.formId, (v) => v.controlledFields.array), f2 = b.useMemo(() => ({ push: (v) => {
        c.push(r2, v), u();
      }, swap: (v, y) => {
        c.swap(r2, v, y), u();
      }, move: (v, y) => {
        c.move(r2, v, y), u();
      }, insert: (v, y) => {
        c.insert(r2, v, y), u();
      }, unshift: (v) => {
        c.unshift(r2, v), u();
      }, remove: (v) => {
        c.remove(r2, v), u();
      }, pop: () => {
        c.pop(r2), u();
      }, replace: (v, y) => {
        c.replace(r2, v, y), u();
      } }), [c, r2, u]);
      return [b.useMemo(() => n ?? [], [n]), f2, s];
    };
    function M$(e, { formId: r2, validationBehavior: t } = {}) {
      let n = R(r2, "FieldArray");
      return ia(n, e, t);
    }
    var x$ = ({ name: e, children: r2, formId: t, validationBehavior: n }) => {
      let a = R(t, "FieldArray"), [o, s, i] = ia(a, e, n);
      return w.default.createElement(w.default.Fragment, null, r2(o, s, i));
    };
    exports.FieldArray = x$;
    exports.ValidatedForm = Iy;
    exports.createValidator = w$;
    exports.setFormDefaults = xp;
    exports.useControlField = Cp;
    exports.useField = wp;
    exports.useFieldArray = M$;
    exports.useFormContext = j$;
    exports.useIsSubmitting = Zn;
    exports.useIsValid = Qn;
    exports.useUpdateControlledField = Dp;
    exports.validationError = Mp;
  }
});

// ../../node_modules/.pnpm/zod@3.19.1/node_modules/zod/lib/helpers/util.js
var require_util = __commonJS({
  "../../node_modules/.pnpm/zod@3.19.1/node_modules/zod/lib/helpers/util.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    exports.getParsedType = exports.ZodParsedType = exports.util = void 0;
    var util2;
    (function(util3) {
      util3.assertEqual = (val) => val;
      function assertIs(_arg) {
      }
      util3.assertIs = assertIs;
      function assertNever(_x) {
        throw new Error();
      }
      util3.assertNever = assertNever, util3.arrayToEnum = (items) => {
        let obj = {};
        for (let item of items)
          obj[item] = item;
        return obj;
      }, util3.getValidEnumValues = (obj) => {
        let validKeys = util3.objectKeys(obj).filter((k) => typeof obj[obj[k]] != "number"), filtered = {};
        for (let k of validKeys)
          filtered[k] = obj[k];
        return util3.objectValues(filtered);
      }, util3.objectValues = (obj) => util3.objectKeys(obj).map(function(e) {
        return obj[e];
      }), util3.objectKeys = typeof Object.keys == "function" ? (obj) => Object.keys(obj) : (object) => {
        let keys = [];
        for (let key in object)
          Object.prototype.hasOwnProperty.call(object, key) && keys.push(key);
        return keys;
      }, util3.find = (arr, checker) => {
        for (let item of arr)
          if (checker(item))
            return item;
      }, util3.isInteger = typeof Number.isInteger == "function" ? (val) => Number.isInteger(val) : (val) => typeof val == "number" && isFinite(val) && Math.floor(val) === val;
      function joinValues(array, separator2 = " | ") {
        return array.map((val) => typeof val == "string" ? `'${val}'` : val).join(separator2);
      }
      util3.joinValues = joinValues, util3.jsonStringifyReplacer = (_, value) => typeof value == "bigint" ? value.toString() : value;
    })(util2 = exports.util || (exports.util = {}));
    exports.ZodParsedType = util2.arrayToEnum([
      "string",
      "nan",
      "number",
      "integer",
      "float",
      "boolean",
      "date",
      "bigint",
      "symbol",
      "function",
      "undefined",
      "null",
      "array",
      "object",
      "unknown",
      "promise",
      "void",
      "never",
      "map",
      "set"
    ]);
    var getParsedType2 = (data) => {
      switch (typeof data) {
        case "undefined":
          return exports.ZodParsedType.undefined;
        case "string":
          return exports.ZodParsedType.string;
        case "number":
          return isNaN(data) ? exports.ZodParsedType.nan : exports.ZodParsedType.number;
        case "boolean":
          return exports.ZodParsedType.boolean;
        case "function":
          return exports.ZodParsedType.function;
        case "bigint":
          return exports.ZodParsedType.bigint;
        case "object":
          return Array.isArray(data) ? exports.ZodParsedType.array : data === null ? exports.ZodParsedType.null : data.then && typeof data.then == "function" && data.catch && typeof data.catch == "function" ? exports.ZodParsedType.promise : typeof Map < "u" && data instanceof Map ? exports.ZodParsedType.map : typeof Set < "u" && data instanceof Set ? exports.ZodParsedType.set : typeof Date < "u" && data instanceof Date ? exports.ZodParsedType.date : exports.ZodParsedType.object;
        default:
          return exports.ZodParsedType.unknown;
      }
    };
    exports.getParsedType = getParsedType2;
  }
});

// ../../node_modules/.pnpm/zod@3.19.1/node_modules/zod/lib/ZodError.js
var require_ZodError = __commonJS({
  "../../node_modules/.pnpm/zod@3.19.1/node_modules/zod/lib/ZodError.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    exports.ZodError = exports.quotelessJson = exports.ZodIssueCode = void 0;
    var util_1 = require_util();
    exports.ZodIssueCode = util_1.util.arrayToEnum([
      "invalid_type",
      "invalid_literal",
      "custom",
      "invalid_union",
      "invalid_union_discriminator",
      "invalid_enum_value",
      "unrecognized_keys",
      "invalid_arguments",
      "invalid_return_type",
      "invalid_date",
      "invalid_string",
      "too_small",
      "too_big",
      "invalid_intersection_types",
      "not_multiple_of"
    ]);
    var quotelessJson2 = (obj) => JSON.stringify(obj, null, 2).replace(/"([^"]+)":/g, "$1:");
    exports.quotelessJson = quotelessJson2;
    var ZodError2 = class extends Error {
      constructor(issues) {
        super(), this.issues = [], this.addIssue = (sub) => {
          this.issues = [...this.issues, sub];
        }, this.addIssues = (subs = []) => {
          this.issues = [...this.issues, ...subs];
        };
        let actualProto = new.target.prototype;
        Object.setPrototypeOf ? Object.setPrototypeOf(this, actualProto) : this.__proto__ = actualProto, this.name = "ZodError", this.issues = issues;
      }
      get errors() {
        return this.issues;
      }
      format(_mapper) {
        let mapper = _mapper || function(issue) {
          return issue.message;
        }, fieldErrors = { _errors: [] }, processError = (error) => {
          for (let issue of error.issues)
            if (issue.code === "invalid_union")
              issue.unionErrors.map(processError);
            else if (issue.code === "invalid_return_type")
              processError(issue.returnTypeError);
            else if (issue.code === "invalid_arguments")
              processError(issue.argumentsError);
            else if (issue.path.length === 0)
              fieldErrors._errors.push(mapper(issue));
            else {
              let curr = fieldErrors, i = 0;
              for (; i < issue.path.length; ) {
                let el = issue.path[i];
                i === issue.path.length - 1 ? (curr[el] = curr[el] || { _errors: [] }, curr[el]._errors.push(mapper(issue))) : curr[el] = curr[el] || { _errors: [] }, curr = curr[el], i++;
              }
            }
        };
        return processError(this), fieldErrors;
      }
      toString() {
        return this.message;
      }
      get message() {
        return JSON.stringify(this.issues, util_1.util.jsonStringifyReplacer, 2);
      }
      get isEmpty() {
        return this.issues.length === 0;
      }
      flatten(mapper = (issue) => issue.message) {
        let fieldErrors = {}, formErrors = [];
        for (let sub of this.issues)
          sub.path.length > 0 ? (fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [], fieldErrors[sub.path[0]].push(mapper(sub))) : formErrors.push(mapper(sub));
        return { formErrors, fieldErrors };
      }
      get formErrors() {
        return this.flatten();
      }
    };
    exports.ZodError = ZodError2;
    ZodError2.create = (issues) => new ZodError2(issues);
  }
});

// ../../node_modules/.pnpm/zod@3.19.1/node_modules/zod/lib/locales/en.js
var require_en = __commonJS({
  "../../node_modules/.pnpm/zod@3.19.1/node_modules/zod/lib/locales/en.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var util_1 = require_util(), ZodError_1 = require_ZodError(), errorMap2 = (issue, _ctx) => {
      let message;
      switch (issue.code) {
        case ZodError_1.ZodIssueCode.invalid_type:
          issue.received === util_1.ZodParsedType.undefined ? message = "Required" : message = `Expected ${issue.expected}, received ${issue.received}`;
          break;
        case ZodError_1.ZodIssueCode.invalid_literal:
          message = `Invalid literal value, expected ${JSON.stringify(issue.expected, util_1.util.jsonStringifyReplacer)}`;
          break;
        case ZodError_1.ZodIssueCode.unrecognized_keys:
          message = `Unrecognized key(s) in object: ${util_1.util.joinValues(issue.keys, ", ")}`;
          break;
        case ZodError_1.ZodIssueCode.invalid_union:
          message = "Invalid input";
          break;
        case ZodError_1.ZodIssueCode.invalid_union_discriminator:
          message = `Invalid discriminator value. Expected ${util_1.util.joinValues(issue.options)}`;
          break;
        case ZodError_1.ZodIssueCode.invalid_enum_value:
          message = `Invalid enum value. Expected ${util_1.util.joinValues(issue.options)}, received '${issue.received}'`;
          break;
        case ZodError_1.ZodIssueCode.invalid_arguments:
          message = "Invalid function arguments";
          break;
        case ZodError_1.ZodIssueCode.invalid_return_type:
          message = "Invalid function return type";
          break;
        case ZodError_1.ZodIssueCode.invalid_date:
          message = "Invalid date";
          break;
        case ZodError_1.ZodIssueCode.invalid_string:
          typeof issue.validation == "object" ? "startsWith" in issue.validation ? message = `Invalid input: must start with "${issue.validation.startsWith}"` : "endsWith" in issue.validation ? message = `Invalid input: must end with "${issue.validation.endsWith}"` : util_1.util.assertNever(issue.validation) : issue.validation !== "regex" ? message = `Invalid ${issue.validation}` : message = "Invalid";
          break;
        case ZodError_1.ZodIssueCode.too_small:
          issue.type === "array" ? message = `Array must contain ${issue.inclusive ? "at least" : "more than"} ${issue.minimum} element(s)` : issue.type === "string" ? message = `String must contain ${issue.inclusive ? "at least" : "over"} ${issue.minimum} character(s)` : issue.type === "number" ? message = `Number must be greater than ${issue.inclusive ? "or equal to " : ""}${issue.minimum}` : issue.type === "date" ? message = `Date must be greater than ${issue.inclusive ? "or equal to " : ""}${new Date(issue.minimum)}` : message = "Invalid input";
          break;
        case ZodError_1.ZodIssueCode.too_big:
          issue.type === "array" ? message = `Array must contain ${issue.inclusive ? "at most" : "less than"} ${issue.maximum} element(s)` : issue.type === "string" ? message = `String must contain ${issue.inclusive ? "at most" : "under"} ${issue.maximum} character(s)` : issue.type === "number" ? message = `Number must be less than ${issue.inclusive ? "or equal to " : ""}${issue.maximum}` : issue.type === "date" ? message = `Date must be smaller than ${issue.inclusive ? "or equal to " : ""}${new Date(issue.maximum)}` : message = "Invalid input";
          break;
        case ZodError_1.ZodIssueCode.custom:
          message = "Invalid input";
          break;
        case ZodError_1.ZodIssueCode.invalid_intersection_types:
          message = "Intersection results could not be merged";
          break;
        case ZodError_1.ZodIssueCode.not_multiple_of:
          message = `Number must be a multiple of ${issue.multipleOf}`;
          break;
        default:
          message = _ctx.defaultError, util_1.util.assertNever(issue);
      }
      return { message };
    };
    exports.default = errorMap2;
  }
});

// ../../node_modules/.pnpm/zod@3.19.1/node_modules/zod/lib/errors.js
var require_errors = __commonJS({
  "../../node_modules/.pnpm/zod@3.19.1/node_modules/zod/lib/errors.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { default: mod2 };
    };
    Object.defineProperty(exports, "__esModule", { value: !0 });
    exports.getErrorMap = exports.setErrorMap = exports.defaultErrorMap = void 0;
    var en_1 = __importDefault(require_en());
    exports.defaultErrorMap = en_1.default;
    var overrideErrorMap2 = en_1.default;
    function setErrorMap2(map) {
      overrideErrorMap2 = map;
    }
    exports.setErrorMap = setErrorMap2;
    function getErrorMap2() {
      return overrideErrorMap2;
    }
    exports.getErrorMap = getErrorMap2;
  }
});

// ../../node_modules/.pnpm/zod@3.19.1/node_modules/zod/lib/helpers/parseUtil.js
var require_parseUtil = __commonJS({
  "../../node_modules/.pnpm/zod@3.19.1/node_modules/zod/lib/helpers/parseUtil.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { default: mod2 };
    };
    Object.defineProperty(exports, "__esModule", { value: !0 });
    exports.isAsync = exports.isValid = exports.isDirty = exports.isAborted = exports.OK = exports.DIRTY = exports.INVALID = exports.ParseStatus = exports.addIssueToContext = exports.EMPTY_PATH = exports.makeIssue = void 0;
    var errors_1 = require_errors(), en_1 = __importDefault(require_en()), makeIssue2 = (params) => {
      let { data, path, errorMaps, issueData } = params, fullPath = [...path, ...issueData.path || []], fullIssue = {
        ...issueData,
        path: fullPath
      }, errorMessage = "", maps = errorMaps.filter((m) => !!m).slice().reverse();
      for (let map of maps)
        errorMessage = map(fullIssue, { data, defaultError: errorMessage }).message;
      return {
        ...issueData,
        path: fullPath,
        message: issueData.message || errorMessage
      };
    };
    exports.makeIssue = makeIssue2;
    exports.EMPTY_PATH = [];
    function addIssueToContext2(ctx, issueData) {
      let issue = exports.makeIssue({
        issueData,
        data: ctx.data,
        path: ctx.path,
        errorMaps: [
          ctx.common.contextualErrorMap,
          ctx.schemaErrorMap,
          errors_1.getErrorMap(),
          en_1.default
        ].filter((x) => !!x)
      });
      ctx.common.issues.push(issue);
    }
    exports.addIssueToContext = addIssueToContext2;
    var ParseStatus2 = class {
      constructor() {
        this.value = "valid";
      }
      dirty() {
        this.value === "valid" && (this.value = "dirty");
      }
      abort() {
        this.value !== "aborted" && (this.value = "aborted");
      }
      static mergeArray(status, results) {
        let arrayValue = [];
        for (let s of results) {
          if (s.status === "aborted")
            return exports.INVALID;
          s.status === "dirty" && status.dirty(), arrayValue.push(s.value);
        }
        return { status: status.value, value: arrayValue };
      }
      static async mergeObjectAsync(status, pairs) {
        let syncPairs = [];
        for (let pair of pairs)
          syncPairs.push({
            key: await pair.key,
            value: await pair.value
          });
        return ParseStatus2.mergeObjectSync(status, syncPairs);
      }
      static mergeObjectSync(status, pairs) {
        let finalObject = {};
        for (let pair of pairs) {
          let { key, value } = pair;
          if (key.status === "aborted" || value.status === "aborted")
            return exports.INVALID;
          key.status === "dirty" && status.dirty(), value.status === "dirty" && status.dirty(), (typeof value.value < "u" || pair.alwaysSet) && (finalObject[key.value] = value.value);
        }
        return { status: status.value, value: finalObject };
      }
    };
    exports.ParseStatus = ParseStatus2;
    exports.INVALID = Object.freeze({
      status: "aborted"
    });
    var DIRTY2 = (value) => ({ status: "dirty", value });
    exports.DIRTY = DIRTY2;
    var OK2 = (value) => ({ status: "valid", value });
    exports.OK = OK2;
    var isAborted2 = (x) => x.status === "aborted";
    exports.isAborted = isAborted2;
    var isDirty2 = (x) => x.status === "dirty";
    exports.isDirty = isDirty2;
    var isValid2 = (x) => x.status === "valid";
    exports.isValid = isValid2;
    var isAsync2 = (x) => typeof Promise !== void 0 && x instanceof Promise;
    exports.isAsync = isAsync2;
  }
});

// ../../node_modules/.pnpm/zod@3.19.1/node_modules/zod/lib/helpers/typeAliases.js
var require_typeAliases = __commonJS({
  "../../node_modules/.pnpm/zod@3.19.1/node_modules/zod/lib/helpers/typeAliases.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
  }
});

// ../../node_modules/.pnpm/zod@3.19.1/node_modules/zod/lib/helpers/errorUtil.js
var require_errorUtil = __commonJS({
  "../../node_modules/.pnpm/zod@3.19.1/node_modules/zod/lib/helpers/errorUtil.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    exports.errorUtil = void 0;
    var errorUtil2;
    (function(errorUtil3) {
      errorUtil3.errToObj = (message) => typeof message == "string" ? { message } : message || {}, errorUtil3.toString = (message) => typeof message == "string" ? message : message == null ? void 0 : message.message;
    })(errorUtil2 = exports.errorUtil || (exports.errorUtil = {}));
  }
});

// ../../node_modules/.pnpm/zod@3.19.1/node_modules/zod/lib/types.js
var require_types = __commonJS({
  "../../node_modules/.pnpm/zod@3.19.1/node_modules/zod/lib/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    exports.function = exports.enum = exports.effect = exports.discriminatedUnion = exports.date = exports.boolean = exports.bigint = exports.array = exports.any = exports.ZodFirstPartyTypeKind = exports.late = exports.ZodSchema = exports.Schema = exports.custom = exports.ZodBranded = exports.BRAND = exports.ZodNaN = exports.ZodDefault = exports.ZodNullable = exports.ZodOptional = exports.ZodTransformer = exports.ZodEffects = exports.ZodPromise = exports.ZodNativeEnum = exports.ZodEnum = exports.ZodLiteral = exports.ZodLazy = exports.ZodFunction = exports.ZodSet = exports.ZodMap = exports.ZodRecord = exports.ZodTuple = exports.ZodIntersection = exports.ZodDiscriminatedUnion = exports.ZodUnion = exports.ZodObject = exports.objectUtil = exports.ZodArray = exports.ZodVoid = exports.ZodNever = exports.ZodUnknown = exports.ZodAny = exports.ZodNull = exports.ZodUndefined = exports.ZodDate = exports.ZodBoolean = exports.ZodBigInt = exports.ZodNumber = exports.ZodString = exports.ZodType = void 0;
    exports.NEVER = exports.void = exports.unknown = exports.union = exports.undefined = exports.tuple = exports.transformer = exports.string = exports.strictObject = exports.set = exports.record = exports.promise = exports.preprocess = exports.ostring = exports.optional = exports.onumber = exports.oboolean = exports.object = exports.number = exports.nullable = exports.null = exports.never = exports.nativeEnum = exports.nan = exports.map = exports.literal = exports.lazy = exports.intersection = exports.instanceof = void 0;
    var errors_1 = require_errors(), errorUtil_1 = require_errorUtil(), parseUtil_1 = require_parseUtil(), util_1 = require_util(), ZodError_1 = require_ZodError(), ParseInputLazyPath2 = class {
      constructor(parent, value, path, key) {
        this.parent = parent, this.data = value, this._path = path, this._key = key;
      }
      get path() {
        return this._path.concat(this._key);
      }
    }, handleResult2 = (ctx, result) => {
      if (parseUtil_1.isValid(result))
        return { success: !0, data: result.value };
      {
        if (!ctx.common.issues.length)
          throw new Error("Validation failed but no issues detected.");
        let error = new ZodError_1.ZodError(ctx.common.issues);
        return { success: !1, error };
      }
    };
    function processCreateParams2(params) {
      if (!params)
        return {};
      let { errorMap: errorMap2, invalid_type_error, required_error, description } = params;
      if (errorMap2 && (invalid_type_error || required_error))
        throw new Error(`Can't use "invalid_type_error" or "required_error" in conjunction with custom error map.`);
      return errorMap2 ? { errorMap: errorMap2, description } : { errorMap: (iss, ctx) => iss.code !== "invalid_type" ? { message: ctx.defaultError } : typeof ctx.data > "u" ? { message: required_error ?? ctx.defaultError } : { message: invalid_type_error ?? ctx.defaultError }, description };
    }
    var ZodType2 = class {
      constructor(def) {
        this.spa = this.safeParseAsync, this.superRefine = this._refinement, this._def = def, this.parse = this.parse.bind(this), this.safeParse = this.safeParse.bind(this), this.parseAsync = this.parseAsync.bind(this), this.safeParseAsync = this.safeParseAsync.bind(this), this.spa = this.spa.bind(this), this.refine = this.refine.bind(this), this.refinement = this.refinement.bind(this), this.superRefine = this.superRefine.bind(this), this.optional = this.optional.bind(this), this.nullable = this.nullable.bind(this), this.nullish = this.nullish.bind(this), this.array = this.array.bind(this), this.promise = this.promise.bind(this), this.or = this.or.bind(this), this.and = this.and.bind(this), this.transform = this.transform.bind(this), this.default = this.default.bind(this), this.describe = this.describe.bind(this), this.isNullable = this.isNullable.bind(this), this.isOptional = this.isOptional.bind(this);
      }
      get description() {
        return this._def.description;
      }
      _getType(input) {
        return util_1.getParsedType(input.data);
      }
      _getOrReturnCtx(input, ctx) {
        return ctx || {
          common: input.parent.common,
          data: input.data,
          parsedType: util_1.getParsedType(input.data),
          schemaErrorMap: this._def.errorMap,
          path: input.path,
          parent: input.parent
        };
      }
      _processInputParams(input) {
        return {
          status: new parseUtil_1.ParseStatus(),
          ctx: {
            common: input.parent.common,
            data: input.data,
            parsedType: util_1.getParsedType(input.data),
            schemaErrorMap: this._def.errorMap,
            path: input.path,
            parent: input.parent
          }
        };
      }
      _parseSync(input) {
        let result = this._parse(input);
        if (parseUtil_1.isAsync(result))
          throw new Error("Synchronous parse encountered promise.");
        return result;
      }
      _parseAsync(input) {
        let result = this._parse(input);
        return Promise.resolve(result);
      }
      parse(data, params) {
        let result = this.safeParse(data, params);
        if (result.success)
          return result.data;
        throw result.error;
      }
      safeParse(data, params) {
        var _a;
        let ctx = {
          common: {
            issues: [],
            async: (_a = params == null ? void 0 : params.async) !== null && _a !== void 0 ? _a : !1,
            contextualErrorMap: params == null ? void 0 : params.errorMap
          },
          path: (params == null ? void 0 : params.path) || [],
          schemaErrorMap: this._def.errorMap,
          parent: null,
          data,
          parsedType: util_1.getParsedType(data)
        }, result = this._parseSync({ data, path: ctx.path, parent: ctx });
        return handleResult2(ctx, result);
      }
      async parseAsync(data, params) {
        let result = await this.safeParseAsync(data, params);
        if (result.success)
          return result.data;
        throw result.error;
      }
      async safeParseAsync(data, params) {
        let ctx = {
          common: {
            issues: [],
            contextualErrorMap: params == null ? void 0 : params.errorMap,
            async: !0
          },
          path: (params == null ? void 0 : params.path) || [],
          schemaErrorMap: this._def.errorMap,
          parent: null,
          data,
          parsedType: util_1.getParsedType(data)
        }, maybeAsyncResult = this._parse({ data, path: [], parent: ctx }), result = await (parseUtil_1.isAsync(maybeAsyncResult) ? maybeAsyncResult : Promise.resolve(maybeAsyncResult));
        return handleResult2(ctx, result);
      }
      refine(check, message) {
        let getIssueProperties = (val) => typeof message == "string" || typeof message > "u" ? { message } : typeof message == "function" ? message(val) : message;
        return this._refinement((val, ctx) => {
          let result = check(val), setError = () => ctx.addIssue({
            code: ZodError_1.ZodIssueCode.custom,
            ...getIssueProperties(val)
          });
          return typeof Promise < "u" && result instanceof Promise ? result.then((data) => data ? !0 : (setError(), !1)) : result ? !0 : (setError(), !1);
        });
      }
      refinement(check, refinementData) {
        return this._refinement((val, ctx) => check(val) ? !0 : (ctx.addIssue(typeof refinementData == "function" ? refinementData(val, ctx) : refinementData), !1));
      }
      _refinement(refinement) {
        return new ZodEffects2({
          schema: this,
          typeName: ZodFirstPartyTypeKind2.ZodEffects,
          effect: { type: "refinement", refinement }
        });
      }
      optional() {
        return ZodOptional2.create(this);
      }
      nullable() {
        return ZodNullable2.create(this);
      }
      nullish() {
        return this.optional().nullable();
      }
      array() {
        return ZodArray2.create(this);
      }
      promise() {
        return ZodPromise2.create(this);
      }
      or(option) {
        return ZodUnion2.create([this, option]);
      }
      and(incoming) {
        return ZodIntersection2.create(this, incoming);
      }
      transform(transform) {
        return new ZodEffects2({
          schema: this,
          typeName: ZodFirstPartyTypeKind2.ZodEffects,
          effect: { type: "transform", transform }
        });
      }
      default(def) {
        let defaultValueFunc = typeof def == "function" ? def : () => def;
        return new ZodDefault2({
          innerType: this,
          defaultValue: defaultValueFunc,
          typeName: ZodFirstPartyTypeKind2.ZodDefault
        });
      }
      brand() {
        return new ZodBranded2({
          typeName: ZodFirstPartyTypeKind2.ZodBranded,
          type: this,
          ...processCreateParams2(void 0)
        });
      }
      describe(description) {
        let This = this.constructor;
        return new This({
          ...this._def,
          description
        });
      }
      isOptional() {
        return this.safeParse(void 0).success;
      }
      isNullable() {
        return this.safeParse(null).success;
      }
    };
    exports.ZodType = ZodType2;
    exports.Schema = ZodType2;
    exports.ZodSchema = ZodType2;
    var cuidRegex2 = /^c[^\s-]{8,}$/i, uuidRegex2 = /^([a-f0-9]{8}-[a-f0-9]{4}-[1-5][a-f0-9]{3}-[a-f0-9]{4}-[a-f0-9]{12}|00000000-0000-0000-0000-000000000000)$/i, emailRegex2 = /^(([^<>()[\]\.,;:\s@\"]+(\.[^<>()[\]\.,;:\s@\"]+)*)|(\".+\"))@(([^<>()[\]\.,;:\s@\"]+\.)+[^<>()[\]\.,;:\s@\"]{2,})$/i, ZodString2 = class extends ZodType2 {
      constructor() {
        super(...arguments), this._regex = (regex2, validation, message) => this.refinement((data) => regex2.test(data), {
          validation,
          code: ZodError_1.ZodIssueCode.invalid_string,
          ...errorUtil_1.errorUtil.errToObj(message)
        }), this.nonempty = (message) => this.min(1, errorUtil_1.errorUtil.errToObj(message)), this.trim = () => new ZodString2({
          ...this._def,
          checks: [...this._def.checks, { kind: "trim" }]
        });
      }
      _parse(input) {
        if (this._getType(input) !== util_1.ZodParsedType.string) {
          let ctx2 = this._getOrReturnCtx(input);
          return parseUtil_1.addIssueToContext(
            ctx2,
            {
              code: ZodError_1.ZodIssueCode.invalid_type,
              expected: util_1.ZodParsedType.string,
              received: ctx2.parsedType
            }
          ), parseUtil_1.INVALID;
        }
        let status = new parseUtil_1.ParseStatus(), ctx;
        for (let check of this._def.checks)
          if (check.kind === "min")
            input.data.length < check.value && (ctx = this._getOrReturnCtx(input, ctx), parseUtil_1.addIssueToContext(ctx, {
              code: ZodError_1.ZodIssueCode.too_small,
              minimum: check.value,
              type: "string",
              inclusive: !0,
              message: check.message
            }), status.dirty());
          else if (check.kind === "max")
            input.data.length > check.value && (ctx = this._getOrReturnCtx(input, ctx), parseUtil_1.addIssueToContext(ctx, {
              code: ZodError_1.ZodIssueCode.too_big,
              maximum: check.value,
              type: "string",
              inclusive: !0,
              message: check.message
            }), status.dirty());
          else if (check.kind === "email")
            emailRegex2.test(input.data) || (ctx = this._getOrReturnCtx(input, ctx), parseUtil_1.addIssueToContext(ctx, {
              validation: "email",
              code: ZodError_1.ZodIssueCode.invalid_string,
              message: check.message
            }), status.dirty());
          else if (check.kind === "uuid")
            uuidRegex2.test(input.data) || (ctx = this._getOrReturnCtx(input, ctx), parseUtil_1.addIssueToContext(ctx, {
              validation: "uuid",
              code: ZodError_1.ZodIssueCode.invalid_string,
              message: check.message
            }), status.dirty());
          else if (check.kind === "cuid")
            cuidRegex2.test(input.data) || (ctx = this._getOrReturnCtx(input, ctx), parseUtil_1.addIssueToContext(ctx, {
              validation: "cuid",
              code: ZodError_1.ZodIssueCode.invalid_string,
              message: check.message
            }), status.dirty());
          else if (check.kind === "url")
            try {
              new URL(input.data);
            } catch {
              ctx = this._getOrReturnCtx(input, ctx), parseUtil_1.addIssueToContext(ctx, {
                validation: "url",
                code: ZodError_1.ZodIssueCode.invalid_string,
                message: check.message
              }), status.dirty();
            }
          else
            check.kind === "regex" ? (check.regex.lastIndex = 0, check.regex.test(input.data) || (ctx = this._getOrReturnCtx(input, ctx), parseUtil_1.addIssueToContext(ctx, {
              validation: "regex",
              code: ZodError_1.ZodIssueCode.invalid_string,
              message: check.message
            }), status.dirty())) : check.kind === "trim" ? input.data = input.data.trim() : check.kind === "startsWith" ? input.data.startsWith(check.value) || (ctx = this._getOrReturnCtx(input, ctx), parseUtil_1.addIssueToContext(ctx, {
              code: ZodError_1.ZodIssueCode.invalid_string,
              validation: { startsWith: check.value },
              message: check.message
            }), status.dirty()) : check.kind === "endsWith" ? input.data.endsWith(check.value) || (ctx = this._getOrReturnCtx(input, ctx), parseUtil_1.addIssueToContext(ctx, {
              code: ZodError_1.ZodIssueCode.invalid_string,
              validation: { endsWith: check.value },
              message: check.message
            }), status.dirty()) : util_1.util.assertNever(check);
        return { status: status.value, value: input.data };
      }
      _addCheck(check) {
        return new ZodString2({
          ...this._def,
          checks: [...this._def.checks, check]
        });
      }
      email(message) {
        return this._addCheck({ kind: "email", ...errorUtil_1.errorUtil.errToObj(message) });
      }
      url(message) {
        return this._addCheck({ kind: "url", ...errorUtil_1.errorUtil.errToObj(message) });
      }
      uuid(message) {
        return this._addCheck({ kind: "uuid", ...errorUtil_1.errorUtil.errToObj(message) });
      }
      cuid(message) {
        return this._addCheck({ kind: "cuid", ...errorUtil_1.errorUtil.errToObj(message) });
      }
      regex(regex2, message) {
        return this._addCheck({
          kind: "regex",
          regex: regex2,
          ...errorUtil_1.errorUtil.errToObj(message)
        });
      }
      startsWith(value, message) {
        return this._addCheck({
          kind: "startsWith",
          value,
          ...errorUtil_1.errorUtil.errToObj(message)
        });
      }
      endsWith(value, message) {
        return this._addCheck({
          kind: "endsWith",
          value,
          ...errorUtil_1.errorUtil.errToObj(message)
        });
      }
      min(minLength, message) {
        return this._addCheck({
          kind: "min",
          value: minLength,
          ...errorUtil_1.errorUtil.errToObj(message)
        });
      }
      max(maxLength, message) {
        return this._addCheck({
          kind: "max",
          value: maxLength,
          ...errorUtil_1.errorUtil.errToObj(message)
        });
      }
      length(len, message) {
        return this.min(len, message).max(len, message);
      }
      get isEmail() {
        return !!this._def.checks.find((ch) => ch.kind === "email");
      }
      get isURL() {
        return !!this._def.checks.find((ch) => ch.kind === "url");
      }
      get isUUID() {
        return !!this._def.checks.find((ch) => ch.kind === "uuid");
      }
      get isCUID() {
        return !!this._def.checks.find((ch) => ch.kind === "cuid");
      }
      get minLength() {
        let min = null;
        for (let ch of this._def.checks)
          ch.kind === "min" && (min === null || ch.value > min) && (min = ch.value);
        return min;
      }
      get maxLength() {
        let max = null;
        for (let ch of this._def.checks)
          ch.kind === "max" && (max === null || ch.value < max) && (max = ch.value);
        return max;
      }
    };
    exports.ZodString = ZodString2;
    ZodString2.create = (params) => new ZodString2({
      checks: [],
      typeName: ZodFirstPartyTypeKind2.ZodString,
      ...processCreateParams2(params)
    });
    function floatSafeRemainder2(val, step) {
      let valDecCount = (val.toString().split(".")[1] || "").length, stepDecCount = (step.toString().split(".")[1] || "").length, decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount, valInt = parseInt(val.toFixed(decCount).replace(".", "")), stepInt = parseInt(step.toFixed(decCount).replace(".", ""));
      return valInt % stepInt / Math.pow(10, decCount);
    }
    var ZodNumber2 = class extends ZodType2 {
      constructor() {
        super(...arguments), this.min = this.gte, this.max = this.lte, this.step = this.multipleOf;
      }
      _parse(input) {
        if (this._getType(input) !== util_1.ZodParsedType.number) {
          let ctx2 = this._getOrReturnCtx(input);
          return parseUtil_1.addIssueToContext(ctx2, {
            code: ZodError_1.ZodIssueCode.invalid_type,
            expected: util_1.ZodParsedType.number,
            received: ctx2.parsedType
          }), parseUtil_1.INVALID;
        }
        let ctx, status = new parseUtil_1.ParseStatus();
        for (let check of this._def.checks)
          check.kind === "int" ? util_1.util.isInteger(input.data) || (ctx = this._getOrReturnCtx(input, ctx), parseUtil_1.addIssueToContext(ctx, {
            code: ZodError_1.ZodIssueCode.invalid_type,
            expected: "integer",
            received: "float",
            message: check.message
          }), status.dirty()) : check.kind === "min" ? (check.inclusive ? input.data < check.value : input.data <= check.value) && (ctx = this._getOrReturnCtx(input, ctx), parseUtil_1.addIssueToContext(ctx, {
            code: ZodError_1.ZodIssueCode.too_small,
            minimum: check.value,
            type: "number",
            inclusive: check.inclusive,
            message: check.message
          }), status.dirty()) : check.kind === "max" ? (check.inclusive ? input.data > check.value : input.data >= check.value) && (ctx = this._getOrReturnCtx(input, ctx), parseUtil_1.addIssueToContext(ctx, {
            code: ZodError_1.ZodIssueCode.too_big,
            maximum: check.value,
            type: "number",
            inclusive: check.inclusive,
            message: check.message
          }), status.dirty()) : check.kind === "multipleOf" ? floatSafeRemainder2(input.data, check.value) !== 0 && (ctx = this._getOrReturnCtx(input, ctx), parseUtil_1.addIssueToContext(ctx, {
            code: ZodError_1.ZodIssueCode.not_multiple_of,
            multipleOf: check.value,
            message: check.message
          }), status.dirty()) : util_1.util.assertNever(check);
        return { status: status.value, value: input.data };
      }
      gte(value, message) {
        return this.setLimit("min", value, !0, errorUtil_1.errorUtil.toString(message));
      }
      gt(value, message) {
        return this.setLimit("min", value, !1, errorUtil_1.errorUtil.toString(message));
      }
      lte(value, message) {
        return this.setLimit("max", value, !0, errorUtil_1.errorUtil.toString(message));
      }
      lt(value, message) {
        return this.setLimit("max", value, !1, errorUtil_1.errorUtil.toString(message));
      }
      setLimit(kind, value, inclusive, message) {
        return new ZodNumber2({
          ...this._def,
          checks: [
            ...this._def.checks,
            {
              kind,
              value,
              inclusive,
              message: errorUtil_1.errorUtil.toString(message)
            }
          ]
        });
      }
      _addCheck(check) {
        return new ZodNumber2({
          ...this._def,
          checks: [...this._def.checks, check]
        });
      }
      int(message) {
        return this._addCheck({
          kind: "int",
          message: errorUtil_1.errorUtil.toString(message)
        });
      }
      positive(message) {
        return this._addCheck({
          kind: "min",
          value: 0,
          inclusive: !1,
          message: errorUtil_1.errorUtil.toString(message)
        });
      }
      negative(message) {
        return this._addCheck({
          kind: "max",
          value: 0,
          inclusive: !1,
          message: errorUtil_1.errorUtil.toString(message)
        });
      }
      nonpositive(message) {
        return this._addCheck({
          kind: "max",
          value: 0,
          inclusive: !0,
          message: errorUtil_1.errorUtil.toString(message)
        });
      }
      nonnegative(message) {
        return this._addCheck({
          kind: "min",
          value: 0,
          inclusive: !0,
          message: errorUtil_1.errorUtil.toString(message)
        });
      }
      multipleOf(value, message) {
        return this._addCheck({
          kind: "multipleOf",
          value,
          message: errorUtil_1.errorUtil.toString(message)
        });
      }
      get minValue() {
        let min = null;
        for (let ch of this._def.checks)
          ch.kind === "min" && (min === null || ch.value > min) && (min = ch.value);
        return min;
      }
      get maxValue() {
        let max = null;
        for (let ch of this._def.checks)
          ch.kind === "max" && (max === null || ch.value < max) && (max = ch.value);
        return max;
      }
      get isInt() {
        return !!this._def.checks.find((ch) => ch.kind === "int");
      }
    };
    exports.ZodNumber = ZodNumber2;
    ZodNumber2.create = (params) => new ZodNumber2({
      checks: [],
      typeName: ZodFirstPartyTypeKind2.ZodNumber,
      ...processCreateParams2(params)
    });
    var ZodBigInt2 = class extends ZodType2 {
      _parse(input) {
        if (this._getType(input) !== util_1.ZodParsedType.bigint) {
          let ctx = this._getOrReturnCtx(input);
          return parseUtil_1.addIssueToContext(ctx, {
            code: ZodError_1.ZodIssueCode.invalid_type,
            expected: util_1.ZodParsedType.bigint,
            received: ctx.parsedType
          }), parseUtil_1.INVALID;
        }
        return parseUtil_1.OK(input.data);
      }
    };
    exports.ZodBigInt = ZodBigInt2;
    ZodBigInt2.create = (params) => new ZodBigInt2({
      typeName: ZodFirstPartyTypeKind2.ZodBigInt,
      ...processCreateParams2(params)
    });
    var ZodBoolean2 = class extends ZodType2 {
      _parse(input) {
        if (this._getType(input) !== util_1.ZodParsedType.boolean) {
          let ctx = this._getOrReturnCtx(input);
          return parseUtil_1.addIssueToContext(ctx, {
            code: ZodError_1.ZodIssueCode.invalid_type,
            expected: util_1.ZodParsedType.boolean,
            received: ctx.parsedType
          }), parseUtil_1.INVALID;
        }
        return parseUtil_1.OK(input.data);
      }
    };
    exports.ZodBoolean = ZodBoolean2;
    ZodBoolean2.create = (params) => new ZodBoolean2({
      typeName: ZodFirstPartyTypeKind2.ZodBoolean,
      ...processCreateParams2(params)
    });
    var ZodDate2 = class extends ZodType2 {
      _parse(input) {
        if (this._getType(input) !== util_1.ZodParsedType.date) {
          let ctx2 = this._getOrReturnCtx(input);
          return parseUtil_1.addIssueToContext(ctx2, {
            code: ZodError_1.ZodIssueCode.invalid_type,
            expected: util_1.ZodParsedType.date,
            received: ctx2.parsedType
          }), parseUtil_1.INVALID;
        }
        if (isNaN(input.data.getTime())) {
          let ctx2 = this._getOrReturnCtx(input);
          return parseUtil_1.addIssueToContext(ctx2, {
            code: ZodError_1.ZodIssueCode.invalid_date
          }), parseUtil_1.INVALID;
        }
        let status = new parseUtil_1.ParseStatus(), ctx;
        for (let check of this._def.checks)
          check.kind === "min" ? input.data.getTime() < check.value && (ctx = this._getOrReturnCtx(input, ctx), parseUtil_1.addIssueToContext(ctx, {
            code: ZodError_1.ZodIssueCode.too_small,
            message: check.message,
            inclusive: !0,
            minimum: check.value,
            type: "date"
          }), status.dirty()) : check.kind === "max" ? input.data.getTime() > check.value && (ctx = this._getOrReturnCtx(input, ctx), parseUtil_1.addIssueToContext(ctx, {
            code: ZodError_1.ZodIssueCode.too_big,
            message: check.message,
            inclusive: !0,
            maximum: check.value,
            type: "date"
          }), status.dirty()) : util_1.util.assertNever(check);
        return {
          status: status.value,
          value: new Date(input.data.getTime())
        };
      }
      _addCheck(check) {
        return new ZodDate2({
          ...this._def,
          checks: [...this._def.checks, check]
        });
      }
      min(minDate, message) {
        return this._addCheck({
          kind: "min",
          value: minDate.getTime(),
          message: errorUtil_1.errorUtil.toString(message)
        });
      }
      max(maxDate, message) {
        return this._addCheck({
          kind: "max",
          value: maxDate.getTime(),
          message: errorUtil_1.errorUtil.toString(message)
        });
      }
      get minDate() {
        let min = null;
        for (let ch of this._def.checks)
          ch.kind === "min" && (min === null || ch.value > min) && (min = ch.value);
        return min != null ? new Date(min) : null;
      }
      get maxDate() {
        let max = null;
        for (let ch of this._def.checks)
          ch.kind === "max" && (max === null || ch.value < max) && (max = ch.value);
        return max != null ? new Date(max) : null;
      }
    };
    exports.ZodDate = ZodDate2;
    ZodDate2.create = (params) => new ZodDate2({
      checks: [],
      typeName: ZodFirstPartyTypeKind2.ZodDate,
      ...processCreateParams2(params)
    });
    var ZodUndefined2 = class extends ZodType2 {
      _parse(input) {
        if (this._getType(input) !== util_1.ZodParsedType.undefined) {
          let ctx = this._getOrReturnCtx(input);
          return parseUtil_1.addIssueToContext(ctx, {
            code: ZodError_1.ZodIssueCode.invalid_type,
            expected: util_1.ZodParsedType.undefined,
            received: ctx.parsedType
          }), parseUtil_1.INVALID;
        }
        return parseUtil_1.OK(input.data);
      }
    };
    exports.ZodUndefined = ZodUndefined2;
    ZodUndefined2.create = (params) => new ZodUndefined2({
      typeName: ZodFirstPartyTypeKind2.ZodUndefined,
      ...processCreateParams2(params)
    });
    var ZodNull2 = class extends ZodType2 {
      _parse(input) {
        if (this._getType(input) !== util_1.ZodParsedType.null) {
          let ctx = this._getOrReturnCtx(input);
          return parseUtil_1.addIssueToContext(ctx, {
            code: ZodError_1.ZodIssueCode.invalid_type,
            expected: util_1.ZodParsedType.null,
            received: ctx.parsedType
          }), parseUtil_1.INVALID;
        }
        return parseUtil_1.OK(input.data);
      }
    };
    exports.ZodNull = ZodNull2;
    ZodNull2.create = (params) => new ZodNull2({
      typeName: ZodFirstPartyTypeKind2.ZodNull,
      ...processCreateParams2(params)
    });
    var ZodAny2 = class extends ZodType2 {
      constructor() {
        super(...arguments), this._any = !0;
      }
      _parse(input) {
        return parseUtil_1.OK(input.data);
      }
    };
    exports.ZodAny = ZodAny2;
    ZodAny2.create = (params) => new ZodAny2({
      typeName: ZodFirstPartyTypeKind2.ZodAny,
      ...processCreateParams2(params)
    });
    var ZodUnknown2 = class extends ZodType2 {
      constructor() {
        super(...arguments), this._unknown = !0;
      }
      _parse(input) {
        return parseUtil_1.OK(input.data);
      }
    };
    exports.ZodUnknown = ZodUnknown2;
    ZodUnknown2.create = (params) => new ZodUnknown2({
      typeName: ZodFirstPartyTypeKind2.ZodUnknown,
      ...processCreateParams2(params)
    });
    var ZodNever2 = class extends ZodType2 {
      _parse(input) {
        let ctx = this._getOrReturnCtx(input);
        return parseUtil_1.addIssueToContext(ctx, {
          code: ZodError_1.ZodIssueCode.invalid_type,
          expected: util_1.ZodParsedType.never,
          received: ctx.parsedType
        }), parseUtil_1.INVALID;
      }
    };
    exports.ZodNever = ZodNever2;
    ZodNever2.create = (params) => new ZodNever2({
      typeName: ZodFirstPartyTypeKind2.ZodNever,
      ...processCreateParams2(params)
    });
    var ZodVoid2 = class extends ZodType2 {
      _parse(input) {
        if (this._getType(input) !== util_1.ZodParsedType.undefined) {
          let ctx = this._getOrReturnCtx(input);
          return parseUtil_1.addIssueToContext(ctx, {
            code: ZodError_1.ZodIssueCode.invalid_type,
            expected: util_1.ZodParsedType.void,
            received: ctx.parsedType
          }), parseUtil_1.INVALID;
        }
        return parseUtil_1.OK(input.data);
      }
    };
    exports.ZodVoid = ZodVoid2;
    ZodVoid2.create = (params) => new ZodVoid2({
      typeName: ZodFirstPartyTypeKind2.ZodVoid,
      ...processCreateParams2(params)
    });
    var ZodArray2 = class extends ZodType2 {
      _parse(input) {
        let { ctx, status } = this._processInputParams(input), def = this._def;
        if (ctx.parsedType !== util_1.ZodParsedType.array)
          return parseUtil_1.addIssueToContext(ctx, {
            code: ZodError_1.ZodIssueCode.invalid_type,
            expected: util_1.ZodParsedType.array,
            received: ctx.parsedType
          }), parseUtil_1.INVALID;
        if (def.minLength !== null && ctx.data.length < def.minLength.value && (parseUtil_1.addIssueToContext(ctx, {
          code: ZodError_1.ZodIssueCode.too_small,
          minimum: def.minLength.value,
          type: "array",
          inclusive: !0,
          message: def.minLength.message
        }), status.dirty()), def.maxLength !== null && ctx.data.length > def.maxLength.value && (parseUtil_1.addIssueToContext(ctx, {
          code: ZodError_1.ZodIssueCode.too_big,
          maximum: def.maxLength.value,
          type: "array",
          inclusive: !0,
          message: def.maxLength.message
        }), status.dirty()), ctx.common.async)
          return Promise.all(ctx.data.map((item, i) => def.type._parseAsync(new ParseInputLazyPath2(ctx, item, ctx.path, i)))).then((result2) => parseUtil_1.ParseStatus.mergeArray(status, result2));
        let result = ctx.data.map((item, i) => def.type._parseSync(new ParseInputLazyPath2(ctx, item, ctx.path, i)));
        return parseUtil_1.ParseStatus.mergeArray(status, result);
      }
      get element() {
        return this._def.type;
      }
      min(minLength, message) {
        return new ZodArray2({
          ...this._def,
          minLength: { value: minLength, message: errorUtil_1.errorUtil.toString(message) }
        });
      }
      max(maxLength, message) {
        return new ZodArray2({
          ...this._def,
          maxLength: { value: maxLength, message: errorUtil_1.errorUtil.toString(message) }
        });
      }
      length(len, message) {
        return this.min(len, message).max(len, message);
      }
      nonempty(message) {
        return this.min(1, message);
      }
    };
    exports.ZodArray = ZodArray2;
    ZodArray2.create = (schema2, params) => new ZodArray2({
      type: schema2,
      minLength: null,
      maxLength: null,
      typeName: ZodFirstPartyTypeKind2.ZodArray,
      ...processCreateParams2(params)
    });
    var objectUtil2;
    (function(objectUtil3) {
      objectUtil3.mergeShapes = (first, second) => ({
        ...first,
        ...second
      });
    })(objectUtil2 = exports.objectUtil || (exports.objectUtil = {}));
    var AugmentFactory2 = (def) => (augmentation) => new ZodObject2({
      ...def,
      shape: () => ({
        ...def.shape(),
        ...augmentation
      })
    });
    function deepPartialify2(schema2) {
      if (schema2 instanceof ZodObject2) {
        let newShape = {};
        for (let key in schema2.shape) {
          let fieldSchema = schema2.shape[key];
          newShape[key] = ZodOptional2.create(deepPartialify2(fieldSchema));
        }
        return new ZodObject2({
          ...schema2._def,
          shape: () => newShape
        });
      } else
        return schema2 instanceof ZodArray2 ? ZodArray2.create(deepPartialify2(schema2.element)) : schema2 instanceof ZodOptional2 ? ZodOptional2.create(deepPartialify2(schema2.unwrap())) : schema2 instanceof ZodNullable2 ? ZodNullable2.create(deepPartialify2(schema2.unwrap())) : schema2 instanceof ZodTuple2 ? ZodTuple2.create(schema2.items.map((item) => deepPartialify2(item))) : schema2;
    }
    var ZodObject2 = class extends ZodType2 {
      constructor() {
        super(...arguments), this._cached = null, this.nonstrict = this.passthrough, this.augment = AugmentFactory2(this._def), this.extend = AugmentFactory2(this._def);
      }
      _getCached() {
        if (this._cached !== null)
          return this._cached;
        let shape = this._def.shape(), keys = util_1.util.objectKeys(shape);
        return this._cached = { shape, keys };
      }
      _parse(input) {
        if (this._getType(input) !== util_1.ZodParsedType.object) {
          let ctx2 = this._getOrReturnCtx(input);
          return parseUtil_1.addIssueToContext(ctx2, {
            code: ZodError_1.ZodIssueCode.invalid_type,
            expected: util_1.ZodParsedType.object,
            received: ctx2.parsedType
          }), parseUtil_1.INVALID;
        }
        let { status, ctx } = this._processInputParams(input), { shape, keys: shapeKeys } = this._getCached(), extraKeys = [];
        if (!(this._def.catchall instanceof ZodNever2 && this._def.unknownKeys === "strip"))
          for (let key in ctx.data)
            shapeKeys.includes(key) || extraKeys.push(key);
        let pairs = [];
        for (let key of shapeKeys) {
          let keyValidator = shape[key], value = ctx.data[key];
          pairs.push({
            key: { status: "valid", value: key },
            value: keyValidator._parse(new ParseInputLazyPath2(ctx, value, ctx.path, key)),
            alwaysSet: key in ctx.data
          });
        }
        if (this._def.catchall instanceof ZodNever2) {
          let unknownKeys = this._def.unknownKeys;
          if (unknownKeys === "passthrough")
            for (let key of extraKeys)
              pairs.push({
                key: { status: "valid", value: key },
                value: { status: "valid", value: ctx.data[key] }
              });
          else if (unknownKeys === "strict")
            extraKeys.length > 0 && (parseUtil_1.addIssueToContext(ctx, {
              code: ZodError_1.ZodIssueCode.unrecognized_keys,
              keys: extraKeys
            }), status.dirty());
          else if (unknownKeys !== "strip")
            throw new Error("Internal ZodObject error: invalid unknownKeys value.");
        } else {
          let catchall = this._def.catchall;
          for (let key of extraKeys) {
            let value = ctx.data[key];
            pairs.push({
              key: { status: "valid", value: key },
              value: catchall._parse(
                new ParseInputLazyPath2(ctx, value, ctx.path, key)
              ),
              alwaysSet: key in ctx.data
            });
          }
        }
        return ctx.common.async ? Promise.resolve().then(async () => {
          let syncPairs = [];
          for (let pair of pairs) {
            let key = await pair.key;
            syncPairs.push({
              key,
              value: await pair.value,
              alwaysSet: pair.alwaysSet
            });
          }
          return syncPairs;
        }).then((syncPairs) => parseUtil_1.ParseStatus.mergeObjectSync(status, syncPairs)) : parseUtil_1.ParseStatus.mergeObjectSync(status, pairs);
      }
      get shape() {
        return this._def.shape();
      }
      strict(message) {
        return errorUtil_1.errorUtil.errToObj, new ZodObject2({
          ...this._def,
          unknownKeys: "strict",
          ...message !== void 0 ? {
            errorMap: (issue, ctx) => {
              var _a, _b, _c, _d;
              let defaultError = (_c = (_b = (_a = this._def).errorMap) === null || _b === void 0 ? void 0 : _b.call(_a, issue, ctx).message) !== null && _c !== void 0 ? _c : ctx.defaultError;
              return issue.code === "unrecognized_keys" ? {
                message: (_d = errorUtil_1.errorUtil.errToObj(message).message) !== null && _d !== void 0 ? _d : defaultError
              } : {
                message: defaultError
              };
            }
          } : {}
        });
      }
      strip() {
        return new ZodObject2({
          ...this._def,
          unknownKeys: "strip"
        });
      }
      passthrough() {
        return new ZodObject2({
          ...this._def,
          unknownKeys: "passthrough"
        });
      }
      setKey(key, schema2) {
        return this.augment({ [key]: schema2 });
      }
      merge(merging) {
        return new ZodObject2({
          unknownKeys: merging._def.unknownKeys,
          catchall: merging._def.catchall,
          shape: () => objectUtil2.mergeShapes(this._def.shape(), merging._def.shape()),
          typeName: ZodFirstPartyTypeKind2.ZodObject
        });
      }
      catchall(index) {
        return new ZodObject2({
          ...this._def,
          catchall: index
        });
      }
      pick(mask) {
        let shape = {};
        return util_1.util.objectKeys(mask).map((key) => {
          this.shape[key] && (shape[key] = this.shape[key]);
        }), new ZodObject2({
          ...this._def,
          shape: () => shape
        });
      }
      omit(mask) {
        let shape = {};
        return util_1.util.objectKeys(this.shape).map((key) => {
          util_1.util.objectKeys(mask).indexOf(key) === -1 && (shape[key] = this.shape[key]);
        }), new ZodObject2({
          ...this._def,
          shape: () => shape
        });
      }
      deepPartial() {
        return deepPartialify2(this);
      }
      partial(mask) {
        let newShape = {};
        if (mask)
          return util_1.util.objectKeys(this.shape).map((key) => {
            util_1.util.objectKeys(mask).indexOf(key) === -1 ? newShape[key] = this.shape[key] : newShape[key] = this.shape[key].optional();
          }), new ZodObject2({
            ...this._def,
            shape: () => newShape
          });
        for (let key in this.shape) {
          let fieldSchema = this.shape[key];
          newShape[key] = fieldSchema.optional();
        }
        return new ZodObject2({
          ...this._def,
          shape: () => newShape
        });
      }
      required() {
        let newShape = {};
        for (let key in this.shape) {
          let newField = this.shape[key];
          for (; newField instanceof ZodOptional2; )
            newField = newField._def.innerType;
          newShape[key] = newField;
        }
        return new ZodObject2({
          ...this._def,
          shape: () => newShape
        });
      }
      keyof() {
        return createZodEnum2(util_1.util.objectKeys(this.shape));
      }
    };
    exports.ZodObject = ZodObject2;
    ZodObject2.create = (shape, params) => new ZodObject2({
      shape: () => shape,
      unknownKeys: "strip",
      catchall: ZodNever2.create(),
      typeName: ZodFirstPartyTypeKind2.ZodObject,
      ...processCreateParams2(params)
    });
    ZodObject2.strictCreate = (shape, params) => new ZodObject2({
      shape: () => shape,
      unknownKeys: "strict",
      catchall: ZodNever2.create(),
      typeName: ZodFirstPartyTypeKind2.ZodObject,
      ...processCreateParams2(params)
    });
    ZodObject2.lazycreate = (shape, params) => new ZodObject2({
      shape,
      unknownKeys: "strip",
      catchall: ZodNever2.create(),
      typeName: ZodFirstPartyTypeKind2.ZodObject,
      ...processCreateParams2(params)
    });
    var ZodUnion2 = class extends ZodType2 {
      _parse(input) {
        let { ctx } = this._processInputParams(input), options = this._def.options;
        function handleResults(results) {
          for (let result of results)
            if (result.result.status === "valid")
              return result.result;
          for (let result of results)
            if (result.result.status === "dirty")
              return ctx.common.issues.push(...result.ctx.common.issues), result.result;
          let unionErrors = results.map((result) => new ZodError_1.ZodError(result.ctx.common.issues));
          return parseUtil_1.addIssueToContext(ctx, {
            code: ZodError_1.ZodIssueCode.invalid_union,
            unionErrors
          }), parseUtil_1.INVALID;
        }
        if (ctx.common.async)
          return Promise.all(options.map(async (option) => {
            let childCtx = {
              ...ctx,
              common: {
                ...ctx.common,
                issues: []
              },
              parent: null
            };
            return {
              result: await option._parseAsync({
                data: ctx.data,
                path: ctx.path,
                parent: childCtx
              }),
              ctx: childCtx
            };
          })).then(handleResults);
        {
          let dirty, issues = [];
          for (let option of options) {
            let childCtx = {
              ...ctx,
              common: {
                ...ctx.common,
                issues: []
              },
              parent: null
            }, result = option._parseSync({
              data: ctx.data,
              path: ctx.path,
              parent: childCtx
            });
            if (result.status === "valid")
              return result;
            result.status === "dirty" && !dirty && (dirty = { result, ctx: childCtx }), childCtx.common.issues.length && issues.push(childCtx.common.issues);
          }
          if (dirty)
            return ctx.common.issues.push(...dirty.ctx.common.issues), dirty.result;
          let unionErrors = issues.map((issues2) => new ZodError_1.ZodError(issues2));
          return parseUtil_1.addIssueToContext(ctx, {
            code: ZodError_1.ZodIssueCode.invalid_union,
            unionErrors
          }), parseUtil_1.INVALID;
        }
      }
      get options() {
        return this._def.options;
      }
    };
    exports.ZodUnion = ZodUnion2;
    ZodUnion2.create = (types, params) => new ZodUnion2({
      options: types,
      typeName: ZodFirstPartyTypeKind2.ZodUnion,
      ...processCreateParams2(params)
    });
    var ZodDiscriminatedUnion2 = class extends ZodType2 {
      _parse(input) {
        let { ctx } = this._processInputParams(input);
        if (ctx.parsedType !== util_1.ZodParsedType.object)
          return parseUtil_1.addIssueToContext(ctx, {
            code: ZodError_1.ZodIssueCode.invalid_type,
            expected: util_1.ZodParsedType.object,
            received: ctx.parsedType
          }), parseUtil_1.INVALID;
        let discriminator = this.discriminator, discriminatorValue = ctx.data[discriminator], option = this.options.get(discriminatorValue);
        return option ? ctx.common.async ? option._parseAsync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        }) : option._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        }) : (parseUtil_1.addIssueToContext(ctx, {
          code: ZodError_1.ZodIssueCode.invalid_union_discriminator,
          options: this.validDiscriminatorValues,
          path: [discriminator]
        }), parseUtil_1.INVALID);
      }
      get discriminator() {
        return this._def.discriminator;
      }
      get validDiscriminatorValues() {
        return Array.from(this.options.keys());
      }
      get options() {
        return this._def.options;
      }
      static create(discriminator, types, params) {
        let options = /* @__PURE__ */ new Map();
        try {
          types.forEach((type) => {
            let discriminatorValue = type.shape[discriminator].value;
            options.set(discriminatorValue, type);
          });
        } catch {
          throw new Error("The discriminator value could not be extracted from all the provided schemas");
        }
        if (options.size !== types.length)
          throw new Error("Some of the discriminator values are not unique");
        return new ZodDiscriminatedUnion2({
          typeName: ZodFirstPartyTypeKind2.ZodDiscriminatedUnion,
          discriminator,
          options,
          ...processCreateParams2(params)
        });
      }
    };
    exports.ZodDiscriminatedUnion = ZodDiscriminatedUnion2;
    function mergeValues2(a, b) {
      let aType = util_1.getParsedType(a), bType = util_1.getParsedType(b);
      if (a === b)
        return { valid: !0, data: a };
      if (aType === util_1.ZodParsedType.object && bType === util_1.ZodParsedType.object) {
        let bKeys = util_1.util.objectKeys(b), sharedKeys = util_1.util.objectKeys(a).filter((key) => bKeys.indexOf(key) !== -1), newObj = { ...a, ...b };
        for (let key of sharedKeys) {
          let sharedValue = mergeValues2(a[key], b[key]);
          if (!sharedValue.valid)
            return { valid: !1 };
          newObj[key] = sharedValue.data;
        }
        return { valid: !0, data: newObj };
      } else if (aType === util_1.ZodParsedType.array && bType === util_1.ZodParsedType.array) {
        if (a.length !== b.length)
          return { valid: !1 };
        let newArray = [];
        for (let index = 0; index < a.length; index++) {
          let itemA = a[index], itemB = b[index], sharedValue = mergeValues2(itemA, itemB);
          if (!sharedValue.valid)
            return { valid: !1 };
          newArray.push(sharedValue.data);
        }
        return { valid: !0, data: newArray };
      } else
        return aType === util_1.ZodParsedType.date && bType === util_1.ZodParsedType.date && +a == +b ? { valid: !0, data: a } : { valid: !1 };
    }
    var ZodIntersection2 = class extends ZodType2 {
      _parse(input) {
        let { status, ctx } = this._processInputParams(input), handleParsed = (parsedLeft, parsedRight) => {
          if (parseUtil_1.isAborted(parsedLeft) || parseUtil_1.isAborted(parsedRight))
            return parseUtil_1.INVALID;
          let merged = mergeValues2(parsedLeft.value, parsedRight.value);
          return merged.valid ? ((parseUtil_1.isDirty(parsedLeft) || parseUtil_1.isDirty(parsedRight)) && status.dirty(), { status: status.value, value: merged.data }) : (parseUtil_1.addIssueToContext(ctx, {
            code: ZodError_1.ZodIssueCode.invalid_intersection_types
          }), parseUtil_1.INVALID);
        };
        return ctx.common.async ? Promise.all([
          this._def.left._parseAsync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
          }),
          this._def.right._parseAsync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
          })
        ]).then(([left, right]) => handleParsed(left, right)) : handleParsed(this._def.left._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        }), this._def.right._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        }));
      }
    };
    exports.ZodIntersection = ZodIntersection2;
    ZodIntersection2.create = (left, right, params) => new ZodIntersection2({
      left,
      right,
      typeName: ZodFirstPartyTypeKind2.ZodIntersection,
      ...processCreateParams2(params)
    });
    var ZodTuple2 = class extends ZodType2 {
      _parse(input) {
        let { status, ctx } = this._processInputParams(input);
        if (ctx.parsedType !== util_1.ZodParsedType.array)
          return parseUtil_1.addIssueToContext(ctx, {
            code: ZodError_1.ZodIssueCode.invalid_type,
            expected: util_1.ZodParsedType.array,
            received: ctx.parsedType
          }), parseUtil_1.INVALID;
        if (ctx.data.length < this._def.items.length)
          return parseUtil_1.addIssueToContext(ctx, {
            code: ZodError_1.ZodIssueCode.too_small,
            minimum: this._def.items.length,
            inclusive: !0,
            type: "array"
          }), parseUtil_1.INVALID;
        !this._def.rest && ctx.data.length > this._def.items.length && (parseUtil_1.addIssueToContext(ctx, {
          code: ZodError_1.ZodIssueCode.too_big,
          maximum: this._def.items.length,
          inclusive: !0,
          type: "array"
        }), status.dirty());
        let items = ctx.data.map((item, itemIndex) => {
          let schema2 = this._def.items[itemIndex] || this._def.rest;
          return schema2 ? schema2._parse(new ParseInputLazyPath2(ctx, item, ctx.path, itemIndex)) : null;
        }).filter((x) => !!x);
        return ctx.common.async ? Promise.all(items).then((results) => parseUtil_1.ParseStatus.mergeArray(status, results)) : parseUtil_1.ParseStatus.mergeArray(status, items);
      }
      get items() {
        return this._def.items;
      }
      rest(rest) {
        return new ZodTuple2({
          ...this._def,
          rest
        });
      }
    };
    exports.ZodTuple = ZodTuple2;
    ZodTuple2.create = (schemas, params) => {
      if (!Array.isArray(schemas))
        throw new Error("You must pass an array of schemas to z.tuple([ ... ])");
      return new ZodTuple2({
        items: schemas,
        typeName: ZodFirstPartyTypeKind2.ZodTuple,
        rest: null,
        ...processCreateParams2(params)
      });
    };
    var ZodRecord2 = class extends ZodType2 {
      get keySchema() {
        return this._def.keyType;
      }
      get valueSchema() {
        return this._def.valueType;
      }
      _parse(input) {
        let { status, ctx } = this._processInputParams(input);
        if (ctx.parsedType !== util_1.ZodParsedType.object)
          return parseUtil_1.addIssueToContext(ctx, {
            code: ZodError_1.ZodIssueCode.invalid_type,
            expected: util_1.ZodParsedType.object,
            received: ctx.parsedType
          }), parseUtil_1.INVALID;
        let pairs = [], keyType = this._def.keyType, valueType = this._def.valueType;
        for (let key in ctx.data)
          pairs.push({
            key: keyType._parse(new ParseInputLazyPath2(ctx, key, ctx.path, key)),
            value: valueType._parse(new ParseInputLazyPath2(ctx, ctx.data[key], ctx.path, key))
          });
        return ctx.common.async ? parseUtil_1.ParseStatus.mergeObjectAsync(status, pairs) : parseUtil_1.ParseStatus.mergeObjectSync(status, pairs);
      }
      get element() {
        return this._def.valueType;
      }
      static create(first, second, third) {
        return second instanceof ZodType2 ? new ZodRecord2({
          keyType: first,
          valueType: second,
          typeName: ZodFirstPartyTypeKind2.ZodRecord,
          ...processCreateParams2(third)
        }) : new ZodRecord2({
          keyType: ZodString2.create(),
          valueType: first,
          typeName: ZodFirstPartyTypeKind2.ZodRecord,
          ...processCreateParams2(second)
        });
      }
    };
    exports.ZodRecord = ZodRecord2;
    var ZodMap2 = class extends ZodType2 {
      _parse(input) {
        let { status, ctx } = this._processInputParams(input);
        if (ctx.parsedType !== util_1.ZodParsedType.map)
          return parseUtil_1.addIssueToContext(ctx, {
            code: ZodError_1.ZodIssueCode.invalid_type,
            expected: util_1.ZodParsedType.map,
            received: ctx.parsedType
          }), parseUtil_1.INVALID;
        let keyType = this._def.keyType, valueType = this._def.valueType, pairs = [...ctx.data.entries()].map(([key, value], index) => ({
          key: keyType._parse(new ParseInputLazyPath2(ctx, key, ctx.path, [index, "key"])),
          value: valueType._parse(new ParseInputLazyPath2(ctx, value, ctx.path, [index, "value"]))
        }));
        if (ctx.common.async) {
          let finalMap = /* @__PURE__ */ new Map();
          return Promise.resolve().then(async () => {
            for (let pair of pairs) {
              let key = await pair.key, value = await pair.value;
              if (key.status === "aborted" || value.status === "aborted")
                return parseUtil_1.INVALID;
              (key.status === "dirty" || value.status === "dirty") && status.dirty(), finalMap.set(key.value, value.value);
            }
            return { status: status.value, value: finalMap };
          });
        } else {
          let finalMap = /* @__PURE__ */ new Map();
          for (let pair of pairs) {
            let key = pair.key, value = pair.value;
            if (key.status === "aborted" || value.status === "aborted")
              return parseUtil_1.INVALID;
            (key.status === "dirty" || value.status === "dirty") && status.dirty(), finalMap.set(key.value, value.value);
          }
          return { status: status.value, value: finalMap };
        }
      }
    };
    exports.ZodMap = ZodMap2;
    ZodMap2.create = (keyType, valueType, params) => new ZodMap2({
      valueType,
      keyType,
      typeName: ZodFirstPartyTypeKind2.ZodMap,
      ...processCreateParams2(params)
    });
    var ZodSet2 = class extends ZodType2 {
      _parse(input) {
        let { status, ctx } = this._processInputParams(input);
        if (ctx.parsedType !== util_1.ZodParsedType.set)
          return parseUtil_1.addIssueToContext(ctx, {
            code: ZodError_1.ZodIssueCode.invalid_type,
            expected: util_1.ZodParsedType.set,
            received: ctx.parsedType
          }), parseUtil_1.INVALID;
        let def = this._def;
        def.minSize !== null && ctx.data.size < def.minSize.value && (parseUtil_1.addIssueToContext(ctx, {
          code: ZodError_1.ZodIssueCode.too_small,
          minimum: def.minSize.value,
          type: "set",
          inclusive: !0,
          message: def.minSize.message
        }), status.dirty()), def.maxSize !== null && ctx.data.size > def.maxSize.value && (parseUtil_1.addIssueToContext(ctx, {
          code: ZodError_1.ZodIssueCode.too_big,
          maximum: def.maxSize.value,
          type: "set",
          inclusive: !0,
          message: def.maxSize.message
        }), status.dirty());
        let valueType = this._def.valueType;
        function finalizeSet(elements2) {
          let parsedSet = /* @__PURE__ */ new Set();
          for (let element of elements2) {
            if (element.status === "aborted")
              return parseUtil_1.INVALID;
            element.status === "dirty" && status.dirty(), parsedSet.add(element.value);
          }
          return { status: status.value, value: parsedSet };
        }
        let elements = [...ctx.data.values()].map((item, i) => valueType._parse(new ParseInputLazyPath2(ctx, item, ctx.path, i)));
        return ctx.common.async ? Promise.all(elements).then((elements2) => finalizeSet(elements2)) : finalizeSet(elements);
      }
      min(minSize, message) {
        return new ZodSet2({
          ...this._def,
          minSize: { value: minSize, message: errorUtil_1.errorUtil.toString(message) }
        });
      }
      max(maxSize, message) {
        return new ZodSet2({
          ...this._def,
          maxSize: { value: maxSize, message: errorUtil_1.errorUtil.toString(message) }
        });
      }
      size(size, message) {
        return this.min(size, message).max(size, message);
      }
      nonempty(message) {
        return this.min(1, message);
      }
    };
    exports.ZodSet = ZodSet2;
    ZodSet2.create = (valueType, params) => new ZodSet2({
      valueType,
      minSize: null,
      maxSize: null,
      typeName: ZodFirstPartyTypeKind2.ZodSet,
      ...processCreateParams2(params)
    });
    var ZodFunction2 = class extends ZodType2 {
      constructor() {
        super(...arguments), this.validate = this.implement;
      }
      _parse(input) {
        let { ctx } = this._processInputParams(input);
        if (ctx.parsedType !== util_1.ZodParsedType.function)
          return parseUtil_1.addIssueToContext(ctx, {
            code: ZodError_1.ZodIssueCode.invalid_type,
            expected: util_1.ZodParsedType.function,
            received: ctx.parsedType
          }), parseUtil_1.INVALID;
        function makeArgsIssue(args, error) {
          return parseUtil_1.makeIssue({
            data: args,
            path: ctx.path,
            errorMaps: [
              ctx.common.contextualErrorMap,
              ctx.schemaErrorMap,
              errors_1.getErrorMap(),
              errors_1.defaultErrorMap
            ].filter((x) => !!x),
            issueData: {
              code: ZodError_1.ZodIssueCode.invalid_arguments,
              argumentsError: error
            }
          });
        }
        function makeReturnsIssue(returns, error) {
          return parseUtil_1.makeIssue({
            data: returns,
            path: ctx.path,
            errorMaps: [
              ctx.common.contextualErrorMap,
              ctx.schemaErrorMap,
              errors_1.getErrorMap(),
              errors_1.defaultErrorMap
            ].filter((x) => !!x),
            issueData: {
              code: ZodError_1.ZodIssueCode.invalid_return_type,
              returnTypeError: error
            }
          });
        }
        let params = { errorMap: ctx.common.contextualErrorMap }, fn = ctx.data;
        return this._def.returns instanceof ZodPromise2 ? parseUtil_1.OK(async (...args) => {
          let error = new ZodError_1.ZodError([]), parsedArgs = await this._def.args.parseAsync(args, params).catch((e) => {
            throw error.addIssue(makeArgsIssue(args, e)), error;
          }), result = await fn(...parsedArgs);
          return await this._def.returns._def.type.parseAsync(result, params).catch((e) => {
            throw error.addIssue(makeReturnsIssue(result, e)), error;
          });
        }) : parseUtil_1.OK((...args) => {
          let parsedArgs = this._def.args.safeParse(args, params);
          if (!parsedArgs.success)
            throw new ZodError_1.ZodError([makeArgsIssue(args, parsedArgs.error)]);
          let result = fn(...parsedArgs.data), parsedReturns = this._def.returns.safeParse(result, params);
          if (!parsedReturns.success)
            throw new ZodError_1.ZodError([makeReturnsIssue(result, parsedReturns.error)]);
          return parsedReturns.data;
        });
      }
      parameters() {
        return this._def.args;
      }
      returnType() {
        return this._def.returns;
      }
      args(...items) {
        return new ZodFunction2({
          ...this._def,
          args: ZodTuple2.create(items).rest(ZodUnknown2.create())
        });
      }
      returns(returnType) {
        return new ZodFunction2({
          ...this._def,
          returns: returnType
        });
      }
      implement(func) {
        return this.parse(func);
      }
      strictImplement(func) {
        return this.parse(func);
      }
      static create(args, returns, params) {
        return new ZodFunction2({
          args: args || ZodTuple2.create([]).rest(ZodUnknown2.create()),
          returns: returns || ZodUnknown2.create(),
          typeName: ZodFirstPartyTypeKind2.ZodFunction,
          ...processCreateParams2(params)
        });
      }
    };
    exports.ZodFunction = ZodFunction2;
    var ZodLazy2 = class extends ZodType2 {
      get schema() {
        return this._def.getter();
      }
      _parse(input) {
        let { ctx } = this._processInputParams(input);
        return this._def.getter()._parse({ data: ctx.data, path: ctx.path, parent: ctx });
      }
    };
    exports.ZodLazy = ZodLazy2;
    ZodLazy2.create = (getter, params) => new ZodLazy2({
      getter,
      typeName: ZodFirstPartyTypeKind2.ZodLazy,
      ...processCreateParams2(params)
    });
    var ZodLiteral2 = class extends ZodType2 {
      _parse(input) {
        if (input.data !== this._def.value) {
          let ctx = this._getOrReturnCtx(input);
          return parseUtil_1.addIssueToContext(ctx, {
            code: ZodError_1.ZodIssueCode.invalid_literal,
            expected: this._def.value
          }), parseUtil_1.INVALID;
        }
        return { status: "valid", value: input.data };
      }
      get value() {
        return this._def.value;
      }
    };
    exports.ZodLiteral = ZodLiteral2;
    ZodLiteral2.create = (value, params) => new ZodLiteral2({
      value,
      typeName: ZodFirstPartyTypeKind2.ZodLiteral,
      ...processCreateParams2(params)
    });
    function createZodEnum2(values, params) {
      return new ZodEnum2({
        values,
        typeName: ZodFirstPartyTypeKind2.ZodEnum,
        ...processCreateParams2(params)
      });
    }
    var ZodEnum2 = class extends ZodType2 {
      _parse(input) {
        if (typeof input.data != "string") {
          let ctx = this._getOrReturnCtx(input), expectedValues = this._def.values;
          return parseUtil_1.addIssueToContext(ctx, {
            expected: util_1.util.joinValues(expectedValues),
            received: ctx.parsedType,
            code: ZodError_1.ZodIssueCode.invalid_type
          }), parseUtil_1.INVALID;
        }
        if (this._def.values.indexOf(input.data) === -1) {
          let ctx = this._getOrReturnCtx(input), expectedValues = this._def.values;
          return parseUtil_1.addIssueToContext(ctx, {
            received: ctx.data,
            code: ZodError_1.ZodIssueCode.invalid_enum_value,
            options: expectedValues
          }), parseUtil_1.INVALID;
        }
        return parseUtil_1.OK(input.data);
      }
      get options() {
        return this._def.values;
      }
      get enum() {
        let enumValues = {};
        for (let val of this._def.values)
          enumValues[val] = val;
        return enumValues;
      }
      get Values() {
        let enumValues = {};
        for (let val of this._def.values)
          enumValues[val] = val;
        return enumValues;
      }
      get Enum() {
        let enumValues = {};
        for (let val of this._def.values)
          enumValues[val] = val;
        return enumValues;
      }
    };
    exports.ZodEnum = ZodEnum2;
    ZodEnum2.create = createZodEnum2;
    var ZodNativeEnum2 = class extends ZodType2 {
      _parse(input) {
        let nativeEnumValues = util_1.util.getValidEnumValues(this._def.values), ctx = this._getOrReturnCtx(input);
        if (ctx.parsedType !== util_1.ZodParsedType.string && ctx.parsedType !== util_1.ZodParsedType.number) {
          let expectedValues = util_1.util.objectValues(nativeEnumValues);
          return parseUtil_1.addIssueToContext(ctx, {
            expected: util_1.util.joinValues(expectedValues),
            received: ctx.parsedType,
            code: ZodError_1.ZodIssueCode.invalid_type
          }), parseUtil_1.INVALID;
        }
        if (nativeEnumValues.indexOf(input.data) === -1) {
          let expectedValues = util_1.util.objectValues(nativeEnumValues);
          return parseUtil_1.addIssueToContext(ctx, {
            received: ctx.data,
            code: ZodError_1.ZodIssueCode.invalid_enum_value,
            options: expectedValues
          }), parseUtil_1.INVALID;
        }
        return parseUtil_1.OK(input.data);
      }
      get enum() {
        return this._def.values;
      }
    };
    exports.ZodNativeEnum = ZodNativeEnum2;
    ZodNativeEnum2.create = (values, params) => new ZodNativeEnum2({
      values,
      typeName: ZodFirstPartyTypeKind2.ZodNativeEnum,
      ...processCreateParams2(params)
    });
    var ZodPromise2 = class extends ZodType2 {
      _parse(input) {
        let { ctx } = this._processInputParams(input);
        if (ctx.parsedType !== util_1.ZodParsedType.promise && ctx.common.async === !1)
          return parseUtil_1.addIssueToContext(ctx, {
            code: ZodError_1.ZodIssueCode.invalid_type,
            expected: util_1.ZodParsedType.promise,
            received: ctx.parsedType
          }), parseUtil_1.INVALID;
        let promisified = ctx.parsedType === util_1.ZodParsedType.promise ? ctx.data : Promise.resolve(ctx.data);
        return parseUtil_1.OK(promisified.then((data) => this._def.type.parseAsync(data, {
          path: ctx.path,
          errorMap: ctx.common.contextualErrorMap
        })));
      }
    };
    exports.ZodPromise = ZodPromise2;
    ZodPromise2.create = (schema2, params) => new ZodPromise2({
      type: schema2,
      typeName: ZodFirstPartyTypeKind2.ZodPromise,
      ...processCreateParams2(params)
    });
    var ZodEffects2 = class extends ZodType2 {
      innerType() {
        return this._def.schema;
      }
      _parse(input) {
        let { status, ctx } = this._processInputParams(input), effect = this._def.effect || null;
        if (effect.type === "preprocess") {
          let processed = effect.transform(ctx.data);
          return ctx.common.async ? Promise.resolve(processed).then((processed2) => this._def.schema._parseAsync({
            data: processed2,
            path: ctx.path,
            parent: ctx
          })) : this._def.schema._parseSync({
            data: processed,
            path: ctx.path,
            parent: ctx
          });
        }
        let checkCtx = {
          addIssue: (arg) => {
            parseUtil_1.addIssueToContext(ctx, arg), arg.fatal ? status.abort() : status.dirty();
          },
          get path() {
            return ctx.path;
          }
        };
        if (checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx), effect.type === "refinement") {
          let executeRefinement = (acc) => {
            let result = effect.refinement(acc, checkCtx);
            if (ctx.common.async)
              return Promise.resolve(result);
            if (result instanceof Promise)
              throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");
            return acc;
          };
          if (ctx.common.async === !1) {
            let inner = this._def.schema._parseSync({
              data: ctx.data,
              path: ctx.path,
              parent: ctx
            });
            return inner.status === "aborted" ? parseUtil_1.INVALID : (inner.status === "dirty" && status.dirty(), executeRefinement(inner.value), { status: status.value, value: inner.value });
          } else
            return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((inner) => inner.status === "aborted" ? parseUtil_1.INVALID : (inner.status === "dirty" && status.dirty(), executeRefinement(inner.value).then(() => ({ status: status.value, value: inner.value }))));
        }
        if (effect.type === "transform")
          if (ctx.common.async === !1) {
            let base = this._def.schema._parseSync({
              data: ctx.data,
              path: ctx.path,
              parent: ctx
            });
            if (!parseUtil_1.isValid(base))
              return base;
            let result = effect.transform(base.value, checkCtx);
            if (result instanceof Promise)
              throw new Error("Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.");
            return { status: status.value, value: result };
          } else
            return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((base) => parseUtil_1.isValid(base) ? Promise.resolve(effect.transform(base.value, checkCtx)).then((result) => ({ status: status.value, value: result })) : base);
        util_1.util.assertNever(effect);
      }
    };
    exports.ZodEffects = ZodEffects2;
    exports.ZodTransformer = ZodEffects2;
    ZodEffects2.create = (schema2, effect, params) => new ZodEffects2({
      schema: schema2,
      typeName: ZodFirstPartyTypeKind2.ZodEffects,
      effect,
      ...processCreateParams2(params)
    });
    ZodEffects2.createWithPreprocess = (preprocess, schema2, params) => new ZodEffects2({
      schema: schema2,
      effect: { type: "preprocess", transform: preprocess },
      typeName: ZodFirstPartyTypeKind2.ZodEffects,
      ...processCreateParams2(params)
    });
    var ZodOptional2 = class extends ZodType2 {
      _parse(input) {
        return this._getType(input) === util_1.ZodParsedType.undefined ? parseUtil_1.OK(void 0) : this._def.innerType._parse(input);
      }
      unwrap() {
        return this._def.innerType;
      }
    };
    exports.ZodOptional = ZodOptional2;
    ZodOptional2.create = (type, params) => new ZodOptional2({
      innerType: type,
      typeName: ZodFirstPartyTypeKind2.ZodOptional,
      ...processCreateParams2(params)
    });
    var ZodNullable2 = class extends ZodType2 {
      _parse(input) {
        return this._getType(input) === util_1.ZodParsedType.null ? parseUtil_1.OK(null) : this._def.innerType._parse(input);
      }
      unwrap() {
        return this._def.innerType;
      }
    };
    exports.ZodNullable = ZodNullable2;
    ZodNullable2.create = (type, params) => new ZodNullable2({
      innerType: type,
      typeName: ZodFirstPartyTypeKind2.ZodNullable,
      ...processCreateParams2(params)
    });
    var ZodDefault2 = class extends ZodType2 {
      _parse(input) {
        let { ctx } = this._processInputParams(input), data = ctx.data;
        return ctx.parsedType === util_1.ZodParsedType.undefined && (data = this._def.defaultValue()), this._def.innerType._parse({
          data,
          path: ctx.path,
          parent: ctx
        });
      }
      removeDefault() {
        return this._def.innerType;
      }
    };
    exports.ZodDefault = ZodDefault2;
    ZodDefault2.create = (type, params) => new ZodOptional2({
      innerType: type,
      typeName: ZodFirstPartyTypeKind2.ZodOptional,
      ...processCreateParams2(params)
    });
    var ZodNaN2 = class extends ZodType2 {
      _parse(input) {
        if (this._getType(input) !== util_1.ZodParsedType.nan) {
          let ctx = this._getOrReturnCtx(input);
          return parseUtil_1.addIssueToContext(ctx, {
            code: ZodError_1.ZodIssueCode.invalid_type,
            expected: util_1.ZodParsedType.nan,
            received: ctx.parsedType
          }), parseUtil_1.INVALID;
        }
        return { status: "valid", value: input.data };
      }
    };
    exports.ZodNaN = ZodNaN2;
    ZodNaN2.create = (params) => new ZodNaN2({
      typeName: ZodFirstPartyTypeKind2.ZodNaN,
      ...processCreateParams2(params)
    });
    exports.BRAND = Symbol("zod_brand");
    var ZodBranded2 = class extends ZodType2 {
      _parse(input) {
        let { ctx } = this._processInputParams(input), data = ctx.data;
        return this._def.type._parse({
          data,
          path: ctx.path,
          parent: ctx
        });
      }
      unwrap() {
        return this._def.type;
      }
    };
    exports.ZodBranded = ZodBranded2;
    var custom2 = (check, params = {}, fatal) => check ? ZodAny2.create().superRefine((data, ctx) => {
      if (!check(data)) {
        let p = typeof params == "function" ? params(data) : params, p2 = typeof p == "string" ? { message: p } : p;
        ctx.addIssue({ code: "custom", ...p2, fatal });
      }
    }) : ZodAny2.create();
    exports.custom = custom2;
    exports.late = {
      object: ZodObject2.lazycreate
    };
    var ZodFirstPartyTypeKind2;
    (function(ZodFirstPartyTypeKind3) {
      ZodFirstPartyTypeKind3.ZodString = "ZodString", ZodFirstPartyTypeKind3.ZodNumber = "ZodNumber", ZodFirstPartyTypeKind3.ZodNaN = "ZodNaN", ZodFirstPartyTypeKind3.ZodBigInt = "ZodBigInt", ZodFirstPartyTypeKind3.ZodBoolean = "ZodBoolean", ZodFirstPartyTypeKind3.ZodDate = "ZodDate", ZodFirstPartyTypeKind3.ZodUndefined = "ZodUndefined", ZodFirstPartyTypeKind3.ZodNull = "ZodNull", ZodFirstPartyTypeKind3.ZodAny = "ZodAny", ZodFirstPartyTypeKind3.ZodUnknown = "ZodUnknown", ZodFirstPartyTypeKind3.ZodNever = "ZodNever", ZodFirstPartyTypeKind3.ZodVoid = "ZodVoid", ZodFirstPartyTypeKind3.ZodArray = "ZodArray", ZodFirstPartyTypeKind3.ZodObject = "ZodObject", ZodFirstPartyTypeKind3.ZodUnion = "ZodUnion", ZodFirstPartyTypeKind3.ZodDiscriminatedUnion = "ZodDiscriminatedUnion", ZodFirstPartyTypeKind3.ZodIntersection = "ZodIntersection", ZodFirstPartyTypeKind3.ZodTuple = "ZodTuple", ZodFirstPartyTypeKind3.ZodRecord = "ZodRecord", ZodFirstPartyTypeKind3.ZodMap = "ZodMap", ZodFirstPartyTypeKind3.ZodSet = "ZodSet", ZodFirstPartyTypeKind3.ZodFunction = "ZodFunction", ZodFirstPartyTypeKind3.ZodLazy = "ZodLazy", ZodFirstPartyTypeKind3.ZodLiteral = "ZodLiteral", ZodFirstPartyTypeKind3.ZodEnum = "ZodEnum", ZodFirstPartyTypeKind3.ZodEffects = "ZodEffects", ZodFirstPartyTypeKind3.ZodNativeEnum = "ZodNativeEnum", ZodFirstPartyTypeKind3.ZodOptional = "ZodOptional", ZodFirstPartyTypeKind3.ZodNullable = "ZodNullable", ZodFirstPartyTypeKind3.ZodDefault = "ZodDefault", ZodFirstPartyTypeKind3.ZodPromise = "ZodPromise", ZodFirstPartyTypeKind3.ZodBranded = "ZodBranded";
    })(ZodFirstPartyTypeKind2 = exports.ZodFirstPartyTypeKind || (exports.ZodFirstPartyTypeKind = {}));
    var instanceOfType2 = (cls, params = {
      message: `Input not instance of ${cls.name}`
    }) => exports.custom((data) => data instanceof cls, params, !0);
    exports.instanceof = instanceOfType2;
    var stringType2 = ZodString2.create;
    exports.string = stringType2;
    var numberType2 = ZodNumber2.create;
    exports.number = numberType2;
    var nanType2 = ZodNaN2.create;
    exports.nan = nanType2;
    var bigIntType2 = ZodBigInt2.create;
    exports.bigint = bigIntType2;
    var booleanType2 = ZodBoolean2.create;
    exports.boolean = booleanType2;
    var dateType2 = ZodDate2.create;
    exports.date = dateType2;
    var undefinedType2 = ZodUndefined2.create;
    exports.undefined = undefinedType2;
    var nullType2 = ZodNull2.create;
    exports.null = nullType2;
    var anyType2 = ZodAny2.create;
    exports.any = anyType2;
    var unknownType2 = ZodUnknown2.create;
    exports.unknown = unknownType2;
    var neverType2 = ZodNever2.create;
    exports.never = neverType2;
    var voidType2 = ZodVoid2.create;
    exports.void = voidType2;
    var arrayType2 = ZodArray2.create;
    exports.array = arrayType2;
    var objectType2 = ZodObject2.create;
    exports.object = objectType2;
    var strictObjectType2 = ZodObject2.strictCreate;
    exports.strictObject = strictObjectType2;
    var unionType2 = ZodUnion2.create;
    exports.union = unionType2;
    var discriminatedUnionType2 = ZodDiscriminatedUnion2.create;
    exports.discriminatedUnion = discriminatedUnionType2;
    var intersectionType2 = ZodIntersection2.create;
    exports.intersection = intersectionType2;
    var tupleType2 = ZodTuple2.create;
    exports.tuple = tupleType2;
    var recordType2 = ZodRecord2.create;
    exports.record = recordType2;
    var mapType2 = ZodMap2.create;
    exports.map = mapType2;
    var setType2 = ZodSet2.create;
    exports.set = setType2;
    var functionType2 = ZodFunction2.create;
    exports.function = functionType2;
    var lazyType2 = ZodLazy2.create;
    exports.lazy = lazyType2;
    var literalType2 = ZodLiteral2.create;
    exports.literal = literalType2;
    var enumType2 = ZodEnum2.create;
    exports.enum = enumType2;
    var nativeEnumType2 = ZodNativeEnum2.create;
    exports.nativeEnum = nativeEnumType2;
    var promiseType2 = ZodPromise2.create;
    exports.promise = promiseType2;
    var effectsType2 = ZodEffects2.create;
    exports.effect = effectsType2;
    exports.transformer = effectsType2;
    var optionalType2 = ZodOptional2.create;
    exports.optional = optionalType2;
    var nullableType2 = ZodNullable2.create;
    exports.nullable = nullableType2;
    var preprocessType2 = ZodEffects2.createWithPreprocess;
    exports.preprocess = preprocessType2;
    var ostring2 = () => stringType2().optional();
    exports.ostring = ostring2;
    var onumber2 = () => numberType2().optional();
    exports.onumber = onumber2;
    var oboolean2 = () => booleanType2().optional();
    exports.oboolean = oboolean2;
    exports.NEVER = parseUtil_1.INVALID;
  }
});

// ../../node_modules/.pnpm/zod@3.19.1/node_modules/zod/lib/external.js
var require_external = __commonJS({
  "../../node_modules/.pnpm/zod@3.19.1/node_modules/zod/lib/external.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      k2 === void 0 && (k2 = k), Object.defineProperty(o, k2, { enumerable: !0, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      k2 === void 0 && (k2 = k), o[k2] = m[k];
    }), __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p) && __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: !0 });
    exports.ZodParsedType = exports.getParsedType = void 0;
    __exportStar(require_errors(), exports);
    __exportStar(require_parseUtil(), exports);
    __exportStar(require_typeAliases(), exports);
    var util_1 = require_util();
    Object.defineProperty(exports, "getParsedType", { enumerable: !0, get: function() {
      return util_1.getParsedType;
    } });
    Object.defineProperty(exports, "ZodParsedType", { enumerable: !0, get: function() {
      return util_1.ZodParsedType;
    } });
    __exportStar(require_types(), exports);
    __exportStar(require_ZodError(), exports);
  }
});

// ../../node_modules/.pnpm/zod@3.19.1/node_modules/zod/lib/index.js
var require_lib = __commonJS({
  "../../node_modules/.pnpm/zod@3.19.1/node_modules/zod/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      k2 === void 0 && (k2 = k), Object.defineProperty(o, k2, { enumerable: !0, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      k2 === void 0 && (k2 = k), o[k2] = m[k];
    }), __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: !0, value: v });
    } : function(o, v) {
      o.default = v;
    }), __importStar = exports && exports.__importStar || function(mod3) {
      if (mod3 && mod3.__esModule)
        return mod3;
      var result = {};
      if (mod3 != null)
        for (var k in mod3)
          k !== "default" && Object.prototype.hasOwnProperty.call(mod3, k) && __createBinding(result, mod3, k);
      return __setModuleDefault(result, mod3), result;
    }, __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p) && __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: !0 });
    exports.z = void 0;
    var mod2 = __importStar(require_external());
    exports.z = mod2;
    __exportStar(require_external(), exports);
    exports.default = mod2;
  }
});

// ../../node_modules/.pnpm/zod-form-data@1.2.2_zod@3.19.1/node_modules/zod-form-data/dist/zod-form-data.cjs.js
var require_zod_form_data_cjs = __commonJS({
  "../../node_modules/.pnpm/zod-form-data@1.2.2_zod@3.19.1/node_modules/zod-form-data/dist/zod-form-data.cjs.js"(exports) {
    "use strict";
    Object.defineProperties(exports, { __esModule: { value: !0 }, [Symbol.toStringTag]: { value: "Module" } });
    var n = require_lib(), _ = typeof globalThis < "u" ? globalThis : typeof window < "u" ? window : typeof globalThis < "u" ? globalThis : typeof self < "u" ? self : {}, te = typeof _ == "object" && _ && _.Object === Object && _, ae = te, ne = ae, oe = typeof self == "object" && self && self.Object === Object && self, se = ne || oe || Function("return this")(), C = se, ie = C, ce = ie.Symbol, S = ce, D = S, V = Object.prototype, ue = V.hasOwnProperty, fe = V.toString, l = D ? D.toStringTag : void 0;
    function pe(e) {
      var r2 = ue.call(e, l), t = e[l];
      try {
        e[l] = void 0;
        var a = !0;
      } catch {
      }
      var o = fe.call(e);
      return a && (r2 ? e[l] = t : delete e[l]), o;
    }
    var le = pe, he = Object.prototype, ve = he.toString;
    function _e(e) {
      return ve.call(e);
    }
    var de = _e, M = S, ge = le, ye = de, be = "[object Null]", $e = "[object Undefined]", N = M ? M.toStringTag : void 0;
    function me(e) {
      return e == null ? e === void 0 ? $e : be : N && N in Object(e) ? ge(e) : ye(e);
    }
    var q = me;
    function Ce(e) {
      var r2 = typeof e;
      return e != null && (r2 == "object" || r2 == "function");
    }
    var O = Ce, Se = q, Oe = O, ze = "[object AsyncFunction]", Te = "[object Function]", Pe = "[object GeneratorFunction]", je = "[object Proxy]";
    function Ie(e) {
      if (!Oe(e))
        return !1;
      var r2 = Se(e);
      return r2 == Te || r2 == Pe || r2 == ze || r2 == je;
    }
    var we = Ie, xe = C, De = xe["__core-js_shared__"], Me = De, m = Me, A = function() {
      var e = /[^.]+$/.exec(m && m.keys && m.keys.IE_PROTO || "");
      return e ? "Symbol(src)_1." + e : "";
    }();
    function Ne(e) {
      return !!A && A in e;
    }
    var Ae = Ne, Fe = Function.prototype, Ee = Fe.toString;
    function Ge(e) {
      if (e != null) {
        try {
          return Ee.call(e);
        } catch {
        }
        try {
          return e + "";
        } catch {
        }
      }
      return "";
    }
    var He = Ge, Ke = we, Re = Ae, Le = O, Ve = He, qe = /[\\^$.*+?()[\]{}|]/g, Je = /^\[object .+?Constructor\]$/, Ue = Function.prototype, Xe = Object.prototype, Ze = Ue.toString, Ye = Xe.hasOwnProperty, Be = RegExp("^" + Ze.call(Ye).replace(qe, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
    function Qe(e) {
      if (!Le(e) || Re(e))
        return !1;
      var r2 = Ke(e) ? Be : Je;
      return r2.test(Ve(e));
    }
    var We = Qe;
    function ke(e, r2) {
      return e == null ? void 0 : e[r2];
    }
    var er = ke, rr = We, tr = er;
    function ar(e, r2) {
      var t = tr(e, r2);
      return rr(t) ? t : void 0;
    }
    var z = ar, nr = z, or = function() {
      try {
        var e = nr(Object, "defineProperty");
        return e({}, "", {}), e;
      } catch {
      }
    }(), sr = or, F = sr;
    function ir(e, r2, t) {
      r2 == "__proto__" && F ? F(e, r2, { configurable: !0, enumerable: !0, value: t, writable: !0 }) : e[r2] = t;
    }
    var cr = ir;
    function ur(e, r2) {
      return e === r2 || e !== e && r2 !== r2;
    }
    var J = ur, fr = cr, pr = J, lr = Object.prototype, hr = lr.hasOwnProperty;
    function vr(e, r2, t) {
      var a = e[r2];
      (!(hr.call(e, r2) && pr(a, t)) || t === void 0 && !(r2 in e)) && fr(e, r2, t);
    }
    var _r = vr, dr = Array.isArray, T = dr;
    function gr(e) {
      return e != null && typeof e == "object";
    }
    var yr = gr, br = q, $r = yr, mr = "[object Symbol]";
    function Cr(e) {
      return typeof e == "symbol" || $r(e) && br(e) == mr;
    }
    var P = Cr, Sr = T, Or = P, zr = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, Tr = /^\w*$/;
    function Pr(e, r2) {
      if (Sr(e))
        return !1;
      var t = typeof e;
      return t == "number" || t == "symbol" || t == "boolean" || e == null || Or(e) ? !0 : Tr.test(e) || !zr.test(e) || r2 != null && e in Object(r2);
    }
    var jr = Pr, Ir = z, wr = Ir(Object, "create"), d = wr, E = d;
    function xr() {
      this.__data__ = E ? E(null) : {}, this.size = 0;
    }
    var Dr = xr;
    function Mr(e) {
      var r2 = this.has(e) && delete this.__data__[e];
      return this.size -= r2 ? 1 : 0, r2;
    }
    var Nr = Mr, Ar = d, Fr = "__lodash_hash_undefined__", Er = Object.prototype, Gr = Er.hasOwnProperty;
    function Hr(e) {
      var r2 = this.__data__;
      if (Ar) {
        var t = r2[e];
        return t === Fr ? void 0 : t;
      }
      return Gr.call(r2, e) ? r2[e] : void 0;
    }
    var Kr = Hr, Rr = d, Lr = Object.prototype, Vr = Lr.hasOwnProperty;
    function qr(e) {
      var r2 = this.__data__;
      return Rr ? r2[e] !== void 0 : Vr.call(r2, e);
    }
    var Jr = qr, Ur = d, Xr = "__lodash_hash_undefined__";
    function Zr(e, r2) {
      var t = this.__data__;
      return this.size += this.has(e) ? 0 : 1, t[e] = Ur && r2 === void 0 ? Xr : r2, this;
    }
    var Yr = Zr, Br = Dr, Qr = Nr, Wr = Kr, kr = Jr, et = Yr;
    function u(e) {
      var r2 = -1, t = e == null ? 0 : e.length;
      for (this.clear(); ++r2 < t; ) {
        var a = e[r2];
        this.set(a[0], a[1]);
      }
    }
    u.prototype.clear = Br;
    u.prototype.delete = Qr;
    u.prototype.get = Wr;
    u.prototype.has = kr;
    u.prototype.set = et;
    var rt = u;
    function tt() {
      this.__data__ = [], this.size = 0;
    }
    var at = tt, nt = J;
    function ot(e, r2) {
      for (var t = e.length; t--; )
        if (nt(e[t][0], r2))
          return t;
      return -1;
    }
    var g = ot, st = g, it = Array.prototype, ct = it.splice;
    function ut(e) {
      var r2 = this.__data__, t = st(r2, e);
      if (t < 0)
        return !1;
      var a = r2.length - 1;
      return t == a ? r2.pop() : ct.call(r2, t, 1), --this.size, !0;
    }
    var ft = ut, pt = g;
    function lt(e) {
      var r2 = this.__data__, t = pt(r2, e);
      return t < 0 ? void 0 : r2[t][1];
    }
    var ht = lt, vt = g;
    function _t(e) {
      return vt(this.__data__, e) > -1;
    }
    var dt = _t, gt = g;
    function yt(e, r2) {
      var t = this.__data__, a = gt(t, e);
      return a < 0 ? (++this.size, t.push([e, r2])) : t[a][1] = r2, this;
    }
    var bt = yt, $t = at, mt = ft, Ct = ht, St = dt, Ot = bt;
    function f2(e) {
      var r2 = -1, t = e == null ? 0 : e.length;
      for (this.clear(); ++r2 < t; ) {
        var a = e[r2];
        this.set(a[0], a[1]);
      }
    }
    f2.prototype.clear = $t;
    f2.prototype.delete = mt;
    f2.prototype.get = Ct;
    f2.prototype.has = St;
    f2.prototype.set = Ot;
    var zt = f2, Tt = z, Pt = C, jt = Tt(Pt, "Map"), It = jt, G = rt, wt = zt, xt = It;
    function Dt() {
      this.size = 0, this.__data__ = { hash: new G(), map: new (xt || wt)(), string: new G() };
    }
    var Mt = Dt;
    function Nt(e) {
      var r2 = typeof e;
      return r2 == "string" || r2 == "number" || r2 == "symbol" || r2 == "boolean" ? e !== "__proto__" : e === null;
    }
    var At = Nt, Ft = At;
    function Et(e, r2) {
      var t = e.__data__;
      return Ft(r2) ? t[typeof r2 == "string" ? "string" : "hash"] : t.map;
    }
    var y = Et, Gt = y;
    function Ht(e) {
      var r2 = Gt(this, e).delete(e);
      return this.size -= r2 ? 1 : 0, r2;
    }
    var Kt = Ht, Rt = y;
    function Lt(e) {
      return Rt(this, e).get(e);
    }
    var Vt = Lt, qt = y;
    function Jt(e) {
      return qt(this, e).has(e);
    }
    var Ut = Jt, Xt = y;
    function Zt(e, r2) {
      var t = Xt(this, e), a = t.size;
      return t.set(e, r2), this.size += t.size == a ? 0 : 1, this;
    }
    var Yt = Zt, Bt = Mt, Qt = Kt, Wt = Vt, kt = Ut, ea = Yt;
    function p(e) {
      var r2 = -1, t = e == null ? 0 : e.length;
      for (this.clear(); ++r2 < t; ) {
        var a = e[r2];
        this.set(a[0], a[1]);
      }
    }
    p.prototype.clear = Bt;
    p.prototype.delete = Qt;
    p.prototype.get = Wt;
    p.prototype.has = kt;
    p.prototype.set = ea;
    var ra = p, U = ra, ta = "Expected a function";
    function j(e, r2) {
      if (typeof e != "function" || r2 != null && typeof r2 != "function")
        throw new TypeError(ta);
      var t = function() {
        var a = arguments, o = r2 ? r2.apply(this, a) : a[0], s = t.cache;
        if (s.has(o))
          return s.get(o);
        var h = e.apply(this, a);
        return t.cache = s.set(o, h) || s, h;
      };
      return t.cache = new (j.Cache || U)(), t;
    }
    j.Cache = U;
    var aa = j, na = aa, oa = 500;
    function sa(e) {
      var r2 = na(e, function(a) {
        return t.size === oa && t.clear(), a;
      }), t = r2.cache;
      return r2;
    }
    var ia = sa, ca = ia, ua = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g, fa = /\\(\\)?/g, pa = ca(function(e) {
      var r2 = [];
      return e.charCodeAt(0) === 46 && r2.push(""), e.replace(ua, function(t, a, o, s) {
        r2.push(o ? s.replace(fa, "$1") : a || t);
      }), r2;
    }), la = pa;
    function ha(e, r2) {
      for (var t = -1, a = e == null ? 0 : e.length, o = Array(a); ++t < a; )
        o[t] = r2(e[t], t, e);
      return o;
    }
    var va = ha, H = S, _a = va, da = T, ga = P, ya = 1 / 0, K = H ? H.prototype : void 0, R = K ? K.toString : void 0;
    function X(e) {
      if (typeof e == "string")
        return e;
      if (da(e))
        return _a(e, X) + "";
      if (ga(e))
        return R ? R.call(e) : "";
      var r2 = e + "";
      return r2 == "0" && 1 / e == -ya ? "-0" : r2;
    }
    var ba = X, $a = ba;
    function ma(e) {
      return e == null ? "" : $a(e);
    }
    var Ca = ma, Sa = T, Oa = jr, za = la, Ta = Ca;
    function Pa(e, r2) {
      return Sa(e) ? e : Oa(e, r2) ? [e] : za(Ta(e));
    }
    var ja = Pa, Ia = 9007199254740991, wa = /^(?:0|[1-9]\d*)$/;
    function xa(e, r2) {
      var t = typeof e;
      return r2 = r2 ?? Ia, !!r2 && (t == "number" || t != "symbol" && wa.test(e)) && e > -1 && e % 1 == 0 && e < r2;
    }
    var Da = xa, Ma = P, Na = 1 / 0;
    function Aa(e) {
      if (typeof e == "string" || Ma(e))
        return e;
      var r2 = e + "";
      return r2 == "0" && 1 / e == -Na ? "-0" : r2;
    }
    var Fa = Aa, Ea = _r, Ga = ja, Ha = Da, L = O, Ka = Fa;
    function Ra(e, r2, t, a) {
      if (!L(e))
        return e;
      r2 = Ga(r2, e);
      for (var o = -1, s = r2.length, h = s - 1, c = e; c != null && ++o < s; ) {
        var i = Ka(r2[o]), v = t;
        if (i === "__proto__" || i === "constructor" || i === "prototype")
          return e;
        if (o != h) {
          var $ = c[i];
          v = a ? a($, i, c) : void 0, v === void 0 && (v = L($) ? $ : Ha(r2[o + 1]) ? [] : {});
        }
        Ea(c, i, v), c = c[i];
      }
      return e;
    }
    var La = Ra, Va = La;
    function qa(e, r2, t) {
      return e == null ? e : Va(e, r2, t);
    }
    var Ja = qa, I = n.z.literal("").transform(() => {
    }), b = (e) => (r2) => {
      let t = e.safeParse(r2);
      return t.success ? t.data : r2;
    }, w = (e = n.z.string()) => n.z.preprocess(b(I), e), Z = (e = n.z.number()) => n.z.preprocess(b(n.z.union([I, n.z.string().transform((r2) => Number(r2)).refine((r2) => !Number.isNaN(r2))])), e), Y = ({ trueValue: e = "on" } = {}) => n.z.union([n.z.literal(e).transform(() => !0), n.z.literal(void 0).transform(() => !1)]), B = (e = n.z.instanceof(File)) => n.z.preprocess((r2) => r2 instanceof File && r2.size === 0 ? void 0 : r2, e), x = (e = n.z.array(w())) => n.z.preprocess((r2) => Array.isArray(r2) ? r2 : r2 === void 0 ? [] : [r2], e), Q = (e) => x(n.z.array(e)), Ua = n.z.array(n.z.tuple([n.z.string(), n.z.any()])), Xa = (e) => {
      try {
        return JSON.parse(e);
      } catch {
        return e;
      }
    }, W = (e) => n.z.preprocess(b(n.z.union([I, n.z.string().transform((r2) => Xa(r2))])), e), k = b(n.z.any().refine((e) => Symbol.iterator in e).transform((e) => [...e]).refine((e) => Ua.safeParse(e).success).transform((e) => {
      let r2 = /* @__PURE__ */ new Map();
      for (let [t, a] of e)
        r2.has(t) ? r2.get(t).push(a) : r2.set(t, [a]);
      return [...r2.entries()].reduce((t, [a, o]) => Ja(t, a, o.length === 1 ? o[0] : o), {});
    })), ee = k, re = (e) => n.z.preprocess(k, e instanceof n.ZodType ? e : n.z.object(e)), Za = Object.freeze(Object.defineProperty({ __proto__: null, text: w, numeric: Z, checkbox: Y, file: B, repeatable: x, repeatableOfType: Q, json: W, preprocessFormData: ee, formData: re }, Symbol.toStringTag, { value: "Module" }));
    exports.checkbox = Y;
    exports.file = B;
    exports.formData = re;
    exports.json = W;
    exports.numeric = Z;
    exports.preprocessFormData = ee;
    exports.repeatable = x;
    exports.repeatableOfType = Q;
    exports.text = w;
    exports.zfd = Za;
  }
});

// ../../node_modules/.pnpm/@remix-validated-form+with-zod@2.0.2_zqefv57a6vsd5fza3rne7rz5ku/node_modules/@remix-validated-form/with-zod/dist/remix-validated-form__with-zod.cjs.js
var require_remix_validated_form_with_zod_cjs = __commonJS({
  "../../node_modules/.pnpm/@remix-validated-form+with-zod@2.0.2_zqefv57a6vsd5fza3rne7rz5ku/node_modules/@remix-validated-form/with-zod/dist/remix-validated-form__with-zod.cjs.js"(exports) {
    "use strict";
    Object.defineProperties(exports, { __esModule: { value: !0 }, [Symbol.toStringTag]: { value: "Module" } });
    var Xr = require_remix_validated_form_cjs(), D = typeof globalThis < "u" ? globalThis : typeof window < "u" ? window : typeof globalThis < "u" ? globalThis : typeof self < "u" ? self : {};
    function Jr() {
      this.__data__ = [], this.size = 0;
    }
    var Yr = Jr;
    function Vr(r2, e) {
      return r2 === e || r2 !== r2 && e !== e;
    }
    var xr = Vr, Qr = xr;
    function kr(r2, e) {
      for (var t = r2.length; t--; )
        if (Qr(r2[t][0], e))
          return t;
      return -1;
    }
    var F = kr, re = F, ee = Array.prototype, te = ee.splice;
    function ae(r2) {
      var e = this.__data__, t = re(e, r2);
      if (t < 0)
        return !1;
      var a = e.length - 1;
      return t == a ? e.pop() : te.call(e, t, 1), --this.size, !0;
    }
    var ne = ae, ie = F;
    function se(r2) {
      var e = this.__data__, t = ie(e, r2);
      return t < 0 ? void 0 : e[t][1];
    }
    var oe = se, ce = F;
    function ue(r2) {
      return ce(this.__data__, r2) > -1;
    }
    var fe = ue, ve = F;
    function le(r2, e) {
      var t = this.__data__, a = ve(t, r2);
      return a < 0 ? (++this.size, t.push([r2, e])) : t[a][1] = e, this;
    }
    var pe = le, _e = Yr, ge = ne, he = oe, ye = fe, $e = pe;
    function A(r2) {
      var e = -1, t = r2 == null ? 0 : r2.length;
      for (this.clear(); ++e < t; ) {
        var a = r2[e];
        this.set(a[0], a[1]);
      }
    }
    A.prototype.clear = _e;
    A.prototype.delete = ge;
    A.prototype.get = he;
    A.prototype.has = ye;
    A.prototype.set = $e;
    var R = A, de = R;
    function be() {
      this.__data__ = new de(), this.size = 0;
    }
    var Te = be;
    function Ae(r2) {
      var e = this.__data__, t = e.delete(r2);
      return this.size = e.size, t;
    }
    var Se = Ae;
    function me(r2) {
      return this.__data__.get(r2);
    }
    var Ce = me;
    function Oe(r2) {
      return this.__data__.has(r2);
    }
    var we = Oe, je = typeof D == "object" && D && D.Object === Object && D, Dr = je, Pe = Dr, Ee = typeof self == "object" && self && self.Object === Object && self, Ie = Pe || Ee || Function("return this")(), y = Ie, Me = y, xe = Me.Symbol, H = xe, nr = H, Lr = Object.prototype, De = Lr.hasOwnProperty, Le = Lr.toString, j = nr ? nr.toStringTag : void 0;
    function Ge(r2) {
      var e = De.call(r2, j), t = r2[j];
      try {
        r2[j] = void 0;
        var a = !0;
      } catch {
      }
      var i = Le.call(r2);
      return a && (e ? r2[j] = t : delete r2[j]), i;
    }
    var Ne = Ge, Fe = Object.prototype, Re = Fe.toString;
    function He(r2) {
      return Re.call(r2);
    }
    var ze = He, ir = H, Ke = Ne, Ue = ze, qe = "[object Null]", Be = "[object Undefined]", sr = ir ? ir.toStringTag : void 0;
    function Ze(r2) {
      return r2 == null ? r2 === void 0 ? Be : qe : sr && sr in Object(r2) ? Ke(r2) : Ue(r2);
    }
    var P = Ze;
    function We(r2) {
      var e = typeof r2;
      return r2 != null && (e == "object" || e == "function");
    }
    var Gr = We, Xe = P, Je = Gr, Ye = "[object AsyncFunction]", Ve = "[object Function]", Qe = "[object GeneratorFunction]", ke = "[object Proxy]";
    function rt(r2) {
      if (!Je(r2))
        return !1;
      var e = Xe(r2);
      return e == Ve || e == Qe || e == Ye || e == ke;
    }
    var Nr = rt, et = y, tt = et["__core-js_shared__"], at = tt, U = at, or = function() {
      var r2 = /[^.]+$/.exec(U && U.keys && U.keys.IE_PROTO || "");
      return r2 ? "Symbol(src)_1." + r2 : "";
    }();
    function nt(r2) {
      return !!or && or in r2;
    }
    var it = nt, st = Function.prototype, ot = st.toString;
    function ct(r2) {
      if (r2 != null) {
        try {
          return ot.call(r2);
        } catch {
        }
        try {
          return r2 + "";
        } catch {
        }
      }
      return "";
    }
    var Fr = ct, ut = Nr, ft = it, vt = Gr, lt = Fr, pt = /[\\^$.*+?()[\]{}|]/g, _t = /^\[object .+?Constructor\]$/, gt = Function.prototype, ht = Object.prototype, yt = gt.toString, $t = ht.hasOwnProperty, dt = RegExp("^" + yt.call($t).replace(pt, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
    function bt(r2) {
      if (!vt(r2) || ft(r2))
        return !1;
      var e = ut(r2) ? dt : _t;
      return e.test(lt(r2));
    }
    var Tt = bt;
    function At(r2, e) {
      return r2 == null ? void 0 : r2[e];
    }
    var St = At, mt = Tt, Ct = St;
    function Ot(r2, e) {
      var t = Ct(r2, e);
      return mt(t) ? t : void 0;
    }
    var S = Ot, wt = S, jt = y, Pt = wt(jt, "Map"), k = Pt, Et = S, It = Et(Object, "create"), z = It, cr = z;
    function Mt() {
      this.__data__ = cr ? cr(null) : {}, this.size = 0;
    }
    var xt = Mt;
    function Dt(r2) {
      var e = this.has(r2) && delete this.__data__[r2];
      return this.size -= e ? 1 : 0, e;
    }
    var Lt = Dt, Gt = z, Nt = "__lodash_hash_undefined__", Ft = Object.prototype, Rt = Ft.hasOwnProperty;
    function Ht(r2) {
      var e = this.__data__;
      if (Gt) {
        var t = e[r2];
        return t === Nt ? void 0 : t;
      }
      return Rt.call(e, r2) ? e[r2] : void 0;
    }
    var zt = Ht, Kt = z, Ut = Object.prototype, qt = Ut.hasOwnProperty;
    function Bt(r2) {
      var e = this.__data__;
      return Kt ? e[r2] !== void 0 : qt.call(e, r2);
    }
    var Zt = Bt, Wt = z, Xt = "__lodash_hash_undefined__";
    function Jt(r2, e) {
      var t = this.__data__;
      return this.size += this.has(r2) ? 0 : 1, t[r2] = Wt && e === void 0 ? Xt : e, this;
    }
    var Yt = Jt, Vt = xt, Qt = Lt, kt = zt, ra = Zt, ea = Yt;
    function m(r2) {
      var e = -1, t = r2 == null ? 0 : r2.length;
      for (this.clear(); ++e < t; ) {
        var a = r2[e];
        this.set(a[0], a[1]);
      }
    }
    m.prototype.clear = Vt;
    m.prototype.delete = Qt;
    m.prototype.get = kt;
    m.prototype.has = ra;
    m.prototype.set = ea;
    var ta = m, ur = ta, aa = R, na = k;
    function ia() {
      this.size = 0, this.__data__ = { hash: new ur(), map: new (na || aa)(), string: new ur() };
    }
    var sa = ia;
    function oa(r2) {
      var e = typeof r2;
      return e == "string" || e == "number" || e == "symbol" || e == "boolean" ? r2 !== "__proto__" : r2 === null;
    }
    var ca = oa, ua = ca;
    function fa(r2, e) {
      var t = r2.__data__;
      return ua(e) ? t[typeof e == "string" ? "string" : "hash"] : t.map;
    }
    var K = fa, va = K;
    function la(r2) {
      var e = va(this, r2).delete(r2);
      return this.size -= e ? 1 : 0, e;
    }
    var pa = la, _a = K;
    function ga(r2) {
      return _a(this, r2).get(r2);
    }
    var ha = ga, ya = K;
    function $a(r2) {
      return ya(this, r2).has(r2);
    }
    var da = $a, ba = K;
    function Ta(r2, e) {
      var t = ba(this, r2), a = t.size;
      return t.set(r2, e), this.size += t.size == a ? 0 : 1, this;
    }
    var Aa = Ta, Sa = sa, ma = pa, Ca = ha, Oa = da, wa = Aa;
    function C(r2) {
      var e = -1, t = r2 == null ? 0 : r2.length;
      for (this.clear(); ++e < t; ) {
        var a = r2[e];
        this.set(a[0], a[1]);
      }
    }
    C.prototype.clear = Sa;
    C.prototype.delete = ma;
    C.prototype.get = Ca;
    C.prototype.has = Oa;
    C.prototype.set = wa;
    var rr = C, ja = R, Pa = k, Ea = rr, Ia = 200;
    function Ma(r2, e) {
      var t = this.__data__;
      if (t instanceof ja) {
        var a = t.__data__;
        if (!Pa || a.length < Ia - 1)
          return a.push([r2, e]), this.size = ++t.size, this;
        t = this.__data__ = new Ea(a);
      }
      return t.set(r2, e), this.size = t.size, this;
    }
    var xa = Ma, Da = R, La = Te, Ga = Se, Na = Ce, Fa = we, Ra = xa;
    function O(r2) {
      var e = this.__data__ = new Da(r2);
      this.size = e.size;
    }
    O.prototype.clear = La;
    O.prototype.delete = Ga;
    O.prototype.get = Na;
    O.prototype.has = Fa;
    O.prototype.set = Ra;
    var Ha = O, za = "__lodash_hash_undefined__";
    function Ka(r2) {
      return this.__data__.set(r2, za), this;
    }
    var Ua = Ka;
    function qa(r2) {
      return this.__data__.has(r2);
    }
    var Ba = qa, Za = rr, Wa = Ua, Xa = Ba;
    function G(r2) {
      var e = -1, t = r2 == null ? 0 : r2.length;
      for (this.__data__ = new Za(); ++e < t; )
        this.add(r2[e]);
    }
    G.prototype.add = G.prototype.push = Wa;
    G.prototype.has = Xa;
    var Ja = G;
    function Ya(r2, e) {
      for (var t = -1, a = r2 == null ? 0 : r2.length; ++t < a; )
        if (e(r2[t], t, r2))
          return !0;
      return !1;
    }
    var Va = Ya;
    function Qa(r2, e) {
      return r2.has(e);
    }
    var ka = Qa, rn = Ja, en = Va, tn = ka, an = 1, nn = 2;
    function sn(r2, e, t, a, i, n) {
      var s = t & an, c = r2.length, f2 = e.length;
      if (c != f2 && !(s && f2 > c))
        return !1;
      var o = n.get(r2), g = n.get(e);
      if (o && g)
        return o == e && g == r2;
      var l = -1, v = !0, h = t & nn ? new rn() : void 0;
      for (n.set(r2, e), n.set(e, r2); ++l < c; ) {
        var p = r2[l], _ = e[l];
        if (a)
          var $ = s ? a(_, p, l, e, r2, n) : a(p, _, l, r2, e, n);
        if ($ !== void 0) {
          if ($)
            continue;
          v = !1;
          break;
        }
        if (h) {
          if (!en(e, function(d, b) {
            if (!tn(h, b) && (p === d || i(p, d, t, a, n)))
              return h.push(b);
          })) {
            v = !1;
            break;
          }
        } else if (!(p === _ || i(p, _, t, a, n))) {
          v = !1;
          break;
        }
      }
      return n.delete(r2), n.delete(e), v;
    }
    var Rr = sn, on = y, cn = on.Uint8Array, un = cn;
    function fn(r2) {
      var e = -1, t = Array(r2.size);
      return r2.forEach(function(a, i) {
        t[++e] = [i, a];
      }), t;
    }
    var vn = fn;
    function ln(r2) {
      var e = -1, t = Array(r2.size);
      return r2.forEach(function(a) {
        t[++e] = a;
      }), t;
    }
    var pn = ln, fr = H, vr = un, _n = xr, gn = Rr, hn = vn, yn = pn, $n = 1, dn = 2, bn = "[object Boolean]", Tn = "[object Date]", An = "[object Error]", Sn = "[object Map]", mn = "[object Number]", Cn = "[object RegExp]", On = "[object Set]", wn = "[object String]", jn = "[object Symbol]", Pn = "[object ArrayBuffer]", En = "[object DataView]", lr = fr ? fr.prototype : void 0, q = lr ? lr.valueOf : void 0;
    function In(r2, e, t, a, i, n, s) {
      switch (t) {
        case En:
          if (r2.byteLength != e.byteLength || r2.byteOffset != e.byteOffset)
            return !1;
          r2 = r2.buffer, e = e.buffer;
        case Pn:
          return !(r2.byteLength != e.byteLength || !n(new vr(r2), new vr(e)));
        case bn:
        case Tn:
        case mn:
          return _n(+r2, +e);
        case An:
          return r2.name == e.name && r2.message == e.message;
        case Cn:
        case wn:
          return r2 == e + "";
        case Sn:
          var c = hn;
        case On:
          var f2 = a & $n;
          if (c || (c = yn), r2.size != e.size && !f2)
            return !1;
          var o = s.get(r2);
          if (o)
            return o == e;
          a |= dn, s.set(r2, e);
          var g = gn(c(r2), c(e), a, i, n, s);
          return s.delete(r2), g;
        case jn:
          if (q)
            return q.call(r2) == q.call(e);
      }
      return !1;
    }
    var Mn = In;
    function xn(r2, e) {
      for (var t = -1, a = e.length, i = r2.length; ++t < a; )
        r2[i + t] = e[t];
      return r2;
    }
    var Dn = xn, Ln = Array.isArray, E = Ln, Gn = Dn, Nn = E;
    function Fn(r2, e, t) {
      var a = e(r2);
      return Nn(r2) ? a : Gn(a, t(r2));
    }
    var Rn = Fn;
    function Hn(r2, e) {
      for (var t = -1, a = r2 == null ? 0 : r2.length, i = 0, n = []; ++t < a; ) {
        var s = r2[t];
        e(s, t, r2) && (n[i++] = s);
      }
      return n;
    }
    var zn = Hn;
    function Kn() {
      return [];
    }
    var Un = Kn, qn = zn, Bn = Un, Zn = Object.prototype, Wn = Zn.propertyIsEnumerable, pr = Object.getOwnPropertySymbols, Xn = pr ? function(r2) {
      return r2 == null ? [] : (r2 = Object(r2), qn(pr(r2), function(e) {
        return Wn.call(r2, e);
      }));
    } : Bn, Jn = Xn;
    function Yn(r2, e) {
      for (var t = -1, a = Array(r2); ++t < r2; )
        a[t] = e(t);
      return a;
    }
    var Vn = Yn;
    function Qn(r2) {
      return r2 != null && typeof r2 == "object";
    }
    var I = Qn, kn = P, ri = I, ei = "[object Arguments]";
    function ti(r2) {
      return ri(r2) && kn(r2) == ei;
    }
    var ai = ti, _r = ai, ni = I, Hr = Object.prototype, ii = Hr.hasOwnProperty, si = Hr.propertyIsEnumerable, oi = _r(function() {
      return arguments;
    }()) ? _r : function(r2) {
      return ni(r2) && ii.call(r2, "callee") && !si.call(r2, "callee");
    }, ci = oi, N = { exports: {} };
    function ui() {
      return !1;
    }
    var fi = ui;
    (function(r2, e) {
      var t = y, a = fi, i = e && !e.nodeType && e, n = i && !0 && r2 && !r2.nodeType && r2, s = n && n.exports === i, c = s ? t.Buffer : void 0, f2 = c ? c.isBuffer : void 0, o = f2 || a;
      r2.exports = o;
    })(N, N.exports);
    var vi = 9007199254740991, li = /^(?:0|[1-9]\d*)$/;
    function pi(r2, e) {
      var t = typeof r2;
      return e = e ?? vi, !!e && (t == "number" || t != "symbol" && li.test(r2)) && r2 > -1 && r2 % 1 == 0 && r2 < e;
    }
    var _i = pi, gi = 9007199254740991;
    function hi(r2) {
      return typeof r2 == "number" && r2 > -1 && r2 % 1 == 0 && r2 <= gi;
    }
    var zr = hi, yi = P, $i = zr, di = I, bi = "[object Arguments]", Ti = "[object Array]", Ai = "[object Boolean]", Si = "[object Date]", mi = "[object Error]", Ci = "[object Function]", Oi = "[object Map]", wi = "[object Number]", ji = "[object Object]", Pi = "[object RegExp]", Ei = "[object Set]", Ii = "[object String]", Mi = "[object WeakMap]", xi = "[object ArrayBuffer]", Di = "[object DataView]", Li = "[object Float32Array]", Gi = "[object Float64Array]", Ni = "[object Int8Array]", Fi = "[object Int16Array]", Ri = "[object Int32Array]", Hi = "[object Uint8Array]", zi = "[object Uint8ClampedArray]", Ki = "[object Uint16Array]", Ui = "[object Uint32Array]", u = {};
    u[Li] = u[Gi] = u[Ni] = u[Fi] = u[Ri] = u[Hi] = u[zi] = u[Ki] = u[Ui] = !0;
    u[bi] = u[Ti] = u[xi] = u[Ai] = u[Di] = u[Si] = u[mi] = u[Ci] = u[Oi] = u[wi] = u[ji] = u[Pi] = u[Ei] = u[Ii] = u[Mi] = !1;
    function qi(r2) {
      return di(r2) && $i(r2.length) && !!u[yi(r2)];
    }
    var Bi = qi;
    function Zi(r2) {
      return function(e) {
        return r2(e);
      };
    }
    var Wi = Zi, Z = { exports: {} };
    (function(r2, e) {
      var t = Dr, a = e && !e.nodeType && e, i = a && !0 && r2 && !r2.nodeType && r2, n = i && i.exports === a, s = n && t.process, c = function() {
        try {
          var f2 = i && i.require && i.require("util").types;
          return f2 || s && s.binding && s.binding("util");
        } catch {
        }
      }();
      r2.exports = c;
    })(Z, Z.exports);
    var Xi = Bi, Ji = Wi, gr = Z.exports, hr = gr && gr.isTypedArray, Yi = hr ? Ji(hr) : Xi, Kr = Yi, Vi = Vn, Qi = ci, ki = E, rs = N.exports, es = _i, ts = Kr, as = Object.prototype, ns = as.hasOwnProperty;
    function is(r2, e) {
      var t = ki(r2), a = !t && Qi(r2), i = !t && !a && rs(r2), n = !t && !a && !i && ts(r2), s = t || a || i || n, c = s ? Vi(r2.length, String) : [], f2 = c.length;
      for (var o in r2)
        (e || ns.call(r2, o)) && !(s && (o == "length" || i && (o == "offset" || o == "parent") || n && (o == "buffer" || o == "byteLength" || o == "byteOffset") || es(o, f2))) && c.push(o);
      return c;
    }
    var ss = is, os = Object.prototype;
    function cs(r2) {
      var e = r2 && r2.constructor, t = typeof e == "function" && e.prototype || os;
      return r2 === t;
    }
    var us = cs;
    function fs(r2, e) {
      return function(t) {
        return r2(e(t));
      };
    }
    var vs = fs, ls = vs, ps = ls(Object.keys, Object), _s = ps, gs = us, hs = _s, ys = Object.prototype, $s = ys.hasOwnProperty;
    function ds(r2) {
      if (!gs(r2))
        return hs(r2);
      var e = [];
      for (var t in Object(r2))
        $s.call(r2, t) && t != "constructor" && e.push(t);
      return e;
    }
    var bs = ds, Ts = Nr, As = zr;
    function Ss(r2) {
      return r2 != null && As(r2.length) && !Ts(r2);
    }
    var ms = Ss, Cs = ss, Os = bs, ws = ms;
    function js(r2) {
      return ws(r2) ? Cs(r2) : Os(r2);
    }
    var Ps = js, Es = Rn, Is = Jn, Ms = Ps;
    function xs(r2) {
      return Es(r2, Ms, Is);
    }
    var Ds = xs, yr = Ds, Ls = 1, Gs = Object.prototype, Ns = Gs.hasOwnProperty;
    function Fs(r2, e, t, a, i, n) {
      var s = t & Ls, c = yr(r2), f2 = c.length, o = yr(e), g = o.length;
      if (f2 != g && !s)
        return !1;
      for (var l = f2; l--; ) {
        var v = c[l];
        if (!(s ? v in e : Ns.call(e, v)))
          return !1;
      }
      var h = n.get(r2), p = n.get(e);
      if (h && p)
        return h == e && p == r2;
      var _ = !0;
      n.set(r2, e), n.set(e, r2);
      for (var $ = s; ++l < f2; ) {
        v = c[l];
        var d = r2[v], b = e[v];
        if (a)
          var ar = s ? a(b, d, v, e, r2, n) : a(d, b, v, r2, e, n);
        if (!(ar === void 0 ? d === b || i(d, b, t, a, n) : ar)) {
          _ = !1;
          break;
        }
        $ || ($ = v == "constructor");
      }
      if (_ && !$) {
        var M = r2.constructor, x = e.constructor;
        M != x && "constructor" in r2 && "constructor" in e && !(typeof M == "function" && M instanceof M && typeof x == "function" && x instanceof x) && (_ = !1);
      }
      return n.delete(r2), n.delete(e), _;
    }
    var Rs = Fs, Hs = S, zs = y, Ks = Hs(zs, "DataView"), Us = Ks, qs = S, Bs = y, Zs = qs(Bs, "Promise"), Ws = Zs, Xs = S, Js = y, Ys = Xs(Js, "Set"), Vs = Ys, Qs = S, ks = y, ro = Qs(ks, "WeakMap"), eo = ro, W = Us, X = k, J = Ws, Y = Vs, V = eo, Ur = P, w = Fr, $r = "[object Map]", to = "[object Object]", dr = "[object Promise]", br = "[object Set]", Tr = "[object WeakMap]", Ar = "[object DataView]", ao = w(W), no = w(X), io = w(J), so = w(Y), oo = w(V), T = Ur;
    (W && T(new W(new ArrayBuffer(1))) != Ar || X && T(new X()) != $r || J && T(J.resolve()) != dr || Y && T(new Y()) != br || V && T(new V()) != Tr) && (T = function(r2) {
      var e = Ur(r2), t = e == to ? r2.constructor : void 0, a = t ? w(t) : "";
      if (a)
        switch (a) {
          case ao:
            return Ar;
          case no:
            return $r;
          case io:
            return dr;
          case so:
            return br;
          case oo:
            return Tr;
        }
      return e;
    });
    var co = T, B = Ha, uo = Rr, fo = Mn, vo = Rs, Sr = co, mr = E, Cr = N.exports, lo = Kr, po = 1, Or = "[object Arguments]", wr = "[object Array]", L = "[object Object]", _o = Object.prototype, jr = _o.hasOwnProperty;
    function go(r2, e, t, a, i, n) {
      var s = mr(r2), c = mr(e), f2 = s ? wr : Sr(r2), o = c ? wr : Sr(e);
      f2 = f2 == Or ? L : f2, o = o == Or ? L : o;
      var g = f2 == L, l = o == L, v = f2 == o;
      if (v && Cr(r2)) {
        if (!Cr(e))
          return !1;
        s = !0, g = !1;
      }
      if (v && !g)
        return n || (n = new B()), s || lo(r2) ? uo(r2, e, t, a, i, n) : fo(r2, e, f2, t, a, i, n);
      if (!(t & po)) {
        var h = g && jr.call(r2, "__wrapped__"), p = l && jr.call(e, "__wrapped__");
        if (h || p) {
          var _ = h ? r2.value() : r2, $ = p ? e.value() : e;
          return n || (n = new B()), i(_, $, t, a, n);
        }
      }
      return v ? (n || (n = new B()), vo(r2, e, t, a, i, n)) : !1;
    }
    var ho = go, yo = ho, Pr = I;
    function qr(r2, e, t, a, i) {
      return r2 === e ? !0 : r2 == null || e == null || !Pr(r2) && !Pr(e) ? r2 !== r2 && e !== e : yo(r2, e, t, a, qr, i);
    }
    var $o = qr, bo = $o;
    function To(r2, e) {
      return bo(r2, e);
    }
    var Ao = To;
    function So(r2, e) {
      for (var t = -1, a = r2 == null ? 0 : r2.length, i = Array(a); ++t < a; )
        i[t] = e(r2[t], t, r2);
      return i;
    }
    var Br = So;
    function mo(r2, e) {
      var t = -1, a = r2.length;
      for (e || (e = Array(a)); ++t < a; )
        e[t] = r2[t];
      return e;
    }
    var Co = mo, Oo = P, wo = I, jo = "[object Symbol]";
    function Po(r2) {
      return typeof r2 == "symbol" || wo(r2) && Oo(r2) == jo;
    }
    var er = Po, Zr = rr, Eo = "Expected a function";
    function tr(r2, e) {
      if (typeof r2 != "function" || e != null && typeof e != "function")
        throw new TypeError(Eo);
      var t = function() {
        var a = arguments, i = e ? e.apply(this, a) : a[0], n = t.cache;
        if (n.has(i))
          return n.get(i);
        var s = r2.apply(this, a);
        return t.cache = n.set(i, s) || n, s;
      };
      return t.cache = new (tr.Cache || Zr)(), t;
    }
    tr.Cache = Zr;
    var Io = tr, Mo = Io, xo = 500;
    function Do(r2) {
      var e = Mo(r2, function(a) {
        return t.size === xo && t.clear(), a;
      }), t = e.cache;
      return e;
    }
    var Lo = Do, Go = Lo, No = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g, Fo = /\\(\\)?/g, Ro = Go(function(r2) {
      var e = [];
      return r2.charCodeAt(0) === 46 && e.push(""), r2.replace(No, function(t, a, i, n) {
        e.push(i ? n.replace(Fo, "$1") : a || t);
      }), e;
    }), Ho = Ro, zo = er, Ko = 1 / 0;
    function Uo(r2) {
      if (typeof r2 == "string" || zo(r2))
        return r2;
      var e = r2 + "";
      return e == "0" && 1 / r2 == -Ko ? "-0" : e;
    }
    var qo = Uo, Er = H, Bo = Br, Zo = E, Wo = er, Xo = 1 / 0, Ir = Er ? Er.prototype : void 0, Mr = Ir ? Ir.toString : void 0;
    function Wr(r2) {
      if (typeof r2 == "string")
        return r2;
      if (Zo(r2))
        return Bo(r2, Wr) + "";
      if (Wo(r2))
        return Mr ? Mr.call(r2) : "";
      var e = r2 + "";
      return e == "0" && 1 / r2 == -Xo ? "-0" : e;
    }
    var Jo = Wr, Yo = Jo;
    function Vo(r2) {
      return r2 == null ? "" : Yo(r2);
    }
    var Qo = Vo, ko = Br, rc = Co, ec = E, tc = er, ac = Ho, nc = qo, ic = Qo;
    function sc(r2) {
      return ec(r2) ? ko(r2, nc) : tc(r2) ? [r2] : rc(ac(ic(r2)));
    }
    var oc = sc, Q = (r2) => r2.issues.flatMap((e) => "unionErrors" in e ? e.unionErrors.flatMap((t) => Q(t)) : [e]);
    function cc(r2) {
      return r2.reduce(function(e, t) {
        var a = e === "" ? "" : ".";
        return e + (isNaN(Number(t)) ? a + t : "[" + t + "]");
      }, "");
    }
    function uc(r2, e) {
      return Xr.createValidator({ validate: async (t) => {
        let a = await r2.safeParseAsync(t, e);
        if (a.success)
          return { data: a.data, error: void 0 };
        let i = {};
        return Q(a.error).forEach((n) => {
          let s = cc(n.path);
          i[s] || (i[s] = n.message);
        }), { error: i, data: void 0 };
      }, validateField: async (t, a) => {
        var n;
        let i = await r2.safeParseAsync(t, e);
        return i.success ? { error: void 0 } : { error: (n = Q(i.error).find((s) => {
          let c = s.path.map((f2) => `${f2}`);
          return Ao(c, oc(a));
        })) == null ? void 0 : n.message };
      } });
    }
    exports.withZod = uc;
  }
});

// ../../node_modules/.pnpm/@iconify+icons-heroicons@1.2.5/node_modules/@iconify/icons-heroicons/swatch.js
var require_swatch = __commonJS({
  "../../node_modules/.pnpm/@iconify+icons-heroicons@1.2.5/node_modules/@iconify/icons-heroicons/swatch.js"(exports) {
    var data = {
      width: 24,
      height: 24,
      body: '<path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M4.098 19.902a3.75 3.75 0 0 0 5.304 0l6.401-6.402M6.75 21A3.75 3.75 0 0 1 3 17.25V4.125C3 3.504 3.504 3 4.125 3h5.25c.621 0 1.125.504 1.125 1.125v4.072M6.75 21a3.75 3.75 0 0 0 3.75-3.75V8.197M6.75 21h13.125c.621 0 1.125-.504 1.125-1.125v-5.25c0-.621-.504-1.125-1.125-1.125h-4.072M10.5 8.197l2.88-2.88a1.124 1.124 0 0 1 1.59 0l3.712 3.713c.44.44.44 1.152 0 1.59l-2.879 2.88M6.75 17.25h.008v.008H6.75v-.008Z"/>'
    };
    exports.__esModule = !0;
    exports.default = data;
  }
});

// ../../node_modules/.pnpm/@iconify+icons-heroicons@1.2.5/node_modules/@iconify/icons-heroicons/chevron-down.js
var require_chevron_down = __commonJS({
  "../../node_modules/.pnpm/@iconify+icons-heroicons@1.2.5/node_modules/@iconify/icons-heroicons/chevron-down.js"(exports) {
    var data = {
      width: 24,
      height: 24,
      body: '<path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="m19.5 8.25l-7.5 7.5l-7.5-7.5"/>'
    };
    exports.__esModule = !0;
    exports.default = data;
  }
});

// ../../node_modules/.pnpm/theme-change@2.2.0/node_modules/theme-change/index.js
var require_theme_change = __commonJS({
  "../../node_modules/.pnpm/theme-change@2.2.0/node_modules/theme-change/index.js"(exports, module) {
    function themeToggle() {
      var toggleEl = document.querySelector("[data-toggle-theme]");
      (function(theme = localStorage.getItem("theme")) {
        localStorage.getItem("theme") && (document.documentElement.setAttribute("data-theme", theme), toggleEl && [...document.querySelectorAll("[data-toggle-theme]")].forEach((el) => {
          el.classList.add(toggleEl.getAttribute("data-act-class"));
        }));
      })(), toggleEl && [...document.querySelectorAll("[data-toggle-theme]")].forEach((el) => {
        el.addEventListener("click", function() {
          var themesList = el.getAttribute("data-toggle-theme");
          if (themesList) {
            var themesArray = themesList.split(",");
            document.documentElement.getAttribute("data-theme") == themesArray[0] ? themesArray.length == 1 ? (document.documentElement.removeAttribute("data-theme"), localStorage.removeItem("theme")) : (document.documentElement.setAttribute("data-theme", themesArray[1]), localStorage.setItem("theme", themesArray[1])) : (document.documentElement.setAttribute("data-theme", themesArray[0]), localStorage.setItem("theme", themesArray[0]));
          }
          [...document.querySelectorAll("[data-toggle-theme]")].forEach((el2) => {
            el2.classList.toggle(this.getAttribute("data-act-class"));
          });
        });
      });
    }
    function themeBtn() {
      (function(theme = localStorage.getItem("theme")) {
        if (theme != null && theme != "")
          if (localStorage.getItem("theme") && localStorage.getItem("theme") != "") {
            document.documentElement.setAttribute("data-theme", theme);
            var btnEl = document.querySelector("[data-set-theme='" + theme.toString() + "']");
            btnEl && ([...document.querySelectorAll("[data-set-theme]")].forEach((el) => {
              el.classList.remove(el.getAttribute("data-act-class"));
            }), btnEl.getAttribute("data-act-class") && btnEl.classList.add(btnEl.getAttribute("data-act-class")));
          } else {
            var btnEl = document.querySelector("[data-set-theme='']");
            btnEl.getAttribute("data-act-class") && btnEl.classList.add(btnEl.getAttribute("data-act-class"));
          }
      })(), [...document.querySelectorAll("[data-set-theme]")].forEach((el) => {
        el.addEventListener("click", function() {
          document.documentElement.setAttribute("data-theme", this.getAttribute("data-set-theme")), localStorage.setItem("theme", document.documentElement.getAttribute("data-theme")), [...document.querySelectorAll("[data-set-theme]")].forEach((el2) => {
            el2.classList.remove(el2.getAttribute("data-act-class"));
          }), el.getAttribute("data-act-class") && el.classList.add(el.getAttribute("data-act-class"));
        });
      });
    }
    function themeSelect() {
      (function(theme = localStorage.getItem("theme")) {
        if (localStorage.getItem("theme")) {
          document.documentElement.setAttribute("data-theme", theme);
          var optionToggler = document.querySelector("select[data-choose-theme] [value='" + theme.toString() + "']");
          optionToggler && [...document.querySelectorAll("select[data-choose-theme] [value='" + theme.toString() + "']")].forEach((el) => {
            el.selected = !0;
          });
        }
      })(), document.querySelector("select[data-choose-theme]") && [...document.querySelectorAll("select[data-choose-theme]")].forEach((el) => {
        el.addEventListener("change", function() {
          document.documentElement.setAttribute("data-theme", this.value), localStorage.setItem("theme", document.documentElement.getAttribute("data-theme")), [...document.querySelectorAll("select[data-choose-theme] [value='" + localStorage.getItem("theme") + "']")].forEach((el2) => {
            el2.selected = !0;
          });
        });
      });
    }
    function themeChange2(attach = !0) {
      attach === !0 ? document.addEventListener("DOMContentLoaded", function(event) {
        themeToggle(), themeSelect(), themeBtn();
      }) : (themeToggle(), themeSelect(), themeBtn());
    }
    typeof exports < "u" ? module.exports = { themeChange: themeChange2 } : themeChange2();
  }
});

// ../../node_modules/.pnpm/remix-auth@3.3.0_6kxk6kwultkcl4p64ujxabvc7i/node_modules/remix-auth/build/authenticator.js
var require_authenticator = __commonJS({
  "../../node_modules/.pnpm/remix-auth@3.3.0_6kxk6kwultkcl4p64ujxabvc7i/node_modules/remix-auth/build/authenticator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    exports.Authenticator = void 0;
    var server_runtime_1 = (init_esm(), __toCommonJS(esm_exports)), Authenticator2 = class {
      constructor(sessionStorage2, options = {}) {
        var _a;
        this.sessionStorage = sessionStorage2, this.strategies = /* @__PURE__ */ new Map(), this.sessionKey = options.sessionKey || "user", this.sessionErrorKey = options.sessionErrorKey || "auth:error", this.sessionStrategyKey = options.sessionStrategyKey || "strategy", this.throwOnError = (_a = options.throwOnError) !== null && _a !== void 0 ? _a : !1;
      }
      use(strategy, name) {
        return this.strategies.set(name ?? strategy.name, strategy), this;
      }
      unuse(name) {
        return this.strategies.delete(name), this;
      }
      authenticate(strategy, request, options = {}) {
        let strategyObj = this.strategies.get(strategy);
        if (!strategyObj)
          throw new Error(`Strategy ${strategy} not found.`);
        return strategyObj.authenticate(new Request(request.url, request), this.sessionStorage, {
          throwOnError: this.throwOnError,
          ...options,
          name: strategy,
          sessionKey: this.sessionKey,
          sessionErrorKey: this.sessionErrorKey,
          sessionStrategyKey: this.sessionStrategyKey
        });
      }
      async isAuthenticated(request, options = {}) {
        var _a;
        let user = (_a = (server_runtime_1.isSession(request) ? request : await this.sessionStorage.getSession(request.headers.get("Cookie"))).get(this.sessionKey)) !== null && _a !== void 0 ? _a : null;
        if (user) {
          if (options.successRedirect)
            throw server_runtime_1.redirect(options.successRedirect);
          return user;
        }
        if (options.failureRedirect)
          throw server_runtime_1.redirect(options.failureRedirect);
        return null;
      }
      async logout(request, options) {
        let session = server_runtime_1.isSession(request) ? request : await this.sessionStorage.getSession(request.headers.get("Cookie"));
        throw server_runtime_1.redirect(options.redirectTo, {
          headers: {
            "Set-Cookie": await this.sessionStorage.destroySession(session)
          }
        });
      }
    };
    exports.Authenticator = Authenticator2;
  }
});

// ../../node_modules/.pnpm/remix-auth@3.3.0_6kxk6kwultkcl4p64ujxabvc7i/node_modules/remix-auth/build/authorizer.js
var require_authorizer = __commonJS({
  "../../node_modules/.pnpm/remix-auth@3.3.0_6kxk6kwultkcl4p64ujxabvc7i/node_modules/remix-auth/build/authorizer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    exports.Authorizer = void 0;
    var server_runtime_1 = (init_esm(), __toCommonJS(esm_exports)), Authorizer = class {
      constructor(authenticator, rules = []) {
        this.authenticator = authenticator, this.rules = rules;
      }
      async authorize(args, { failureRedirect, raise = "response", rules = [] } = {}) {
        let user = await this.authenticator.isAuthenticated(args.request);
        if (!user)
          throw raise === "response" ? server_runtime_1.json({ message: "Not authenticated." }, { status: 401 }) : raise === "redirect" ? server_runtime_1.redirect(failureRedirect) : new Error("Not authenticated.");
        for (let rule of [...this.rules, ...rules])
          if (!await rule({ user, ...args }))
            throw raise === "redirect" ? server_runtime_1.redirect(failureRedirect) : raise === "response" ? rule.name ? server_runtime_1.json({ message: `Forbidden by policy ${rule.name}` }, { status: 403 }) : server_runtime_1.json({ message: "Forbidden" }, { status: 403 }) : rule.name ? new Error(`Forbidden by policy ${rule.name}`) : new Error("Forbidden.");
        return user;
      }
    };
    exports.Authorizer = Authorizer;
  }
});

// ../../node_modules/.pnpm/remix-auth@3.3.0_6kxk6kwultkcl4p64ujxabvc7i/node_modules/remix-auth/build/error.js
var require_error = __commonJS({
  "../../node_modules/.pnpm/remix-auth@3.3.0_6kxk6kwultkcl4p64ujxabvc7i/node_modules/remix-auth/build/error.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    exports.AuthorizationError = void 0;
    var AuthorizationError = class extends Error {
    };
    exports.AuthorizationError = AuthorizationError;
  }
});

// ../../node_modules/.pnpm/remix-auth@3.3.0_6kxk6kwultkcl4p64ujxabvc7i/node_modules/remix-auth/build/strategy.js
var require_strategy = __commonJS({
  "../../node_modules/.pnpm/remix-auth@3.3.0_6kxk6kwultkcl4p64ujxabvc7i/node_modules/remix-auth/build/strategy.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    exports.Strategy = void 0;
    var server_runtime_1 = (init_esm(), __toCommonJS(esm_exports)), error_1 = require_error(), Strategy = class {
      constructor(verify) {
        this.verify = verify;
      }
      async failure(message, request, sessionStorage2, options) {
        if (!options.failureRedirect)
          throw options.throwOnError ? new error_1.AuthorizationError(message) : server_runtime_1.json({ message }, 401);
        let session = await sessionStorage2.getSession(request.headers.get("Cookie"));
        throw session.flash(options.sessionErrorKey, { message }), server_runtime_1.redirect(options.failureRedirect, {
          headers: { "Set-Cookie": await sessionStorage2.commitSession(session) }
        });
      }
      async success(user, request, sessionStorage2, options) {
        var _a;
        if (!options.successRedirect)
          return user;
        let session = await sessionStorage2.getSession(request.headers.get("Cookie"));
        throw session.set(options.sessionKey, user), session.set(options.sessionStrategyKey, (_a = options.name) !== null && _a !== void 0 ? _a : this.name), server_runtime_1.redirect(options.successRedirect, {
          headers: { "Set-Cookie": await sessionStorage2.commitSession(session) }
        });
      }
    };
    exports.Strategy = Strategy;
  }
});

// ../../node_modules/.pnpm/remix-auth@3.3.0_6kxk6kwultkcl4p64ujxabvc7i/node_modules/remix-auth/build/index.js
var require_build = __commonJS({
  "../../node_modules/.pnpm/remix-auth@3.3.0_6kxk6kwultkcl4p64ujxabvc7i/node_modules/remix-auth/build/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      k2 === void 0 && (k2 = k), Object.defineProperty(o, k2, { enumerable: !0, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      k2 === void 0 && (k2 = k), o[k2] = m[k];
    }), __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p) && __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: !0 });
    __exportStar(require_authenticator(), exports);
    __exportStar(require_authorizer(), exports);
    __exportStar(require_error(), exports);
    __exportStar(require_strategy(), exports);
  }
});

// ../../node_modules/.pnpm/ms@2.1.2/node_modules/ms/index.js
var require_ms = __commonJS({
  "../../node_modules/.pnpm/ms@2.1.2/node_modules/ms/index.js"(exports, module) {
    var s = 1e3, m = s * 60, h = m * 60, d = h * 24, w = d * 7, y = d * 365.25;
    module.exports = function(val, options) {
      options = options || {};
      var type = typeof val;
      if (type === "string" && val.length > 0)
        return parse3(val);
      if (type === "number" && isFinite(val))
        return options.long ? fmtLong(val) : fmtShort(val);
      throw new Error(
        "val is not a non-empty string or a valid number. val=" + JSON.stringify(val)
      );
    };
    function parse3(str) {
      if (str = String(str), !(str.length > 100)) {
        var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
          str
        );
        if (!!match) {
          var n = parseFloat(match[1]), type = (match[2] || "ms").toLowerCase();
          switch (type) {
            case "years":
            case "year":
            case "yrs":
            case "yr":
            case "y":
              return n * y;
            case "weeks":
            case "week":
            case "w":
              return n * w;
            case "days":
            case "day":
            case "d":
              return n * d;
            case "hours":
            case "hour":
            case "hrs":
            case "hr":
            case "h":
              return n * h;
            case "minutes":
            case "minute":
            case "mins":
            case "min":
            case "m":
              return n * m;
            case "seconds":
            case "second":
            case "secs":
            case "sec":
            case "s":
              return n * s;
            case "milliseconds":
            case "millisecond":
            case "msecs":
            case "msec":
            case "ms":
              return n;
            default:
              return;
          }
        }
      }
    }
    function fmtShort(ms) {
      var msAbs = Math.abs(ms);
      return msAbs >= d ? Math.round(ms / d) + "d" : msAbs >= h ? Math.round(ms / h) + "h" : msAbs >= m ? Math.round(ms / m) + "m" : msAbs >= s ? Math.round(ms / s) + "s" : ms + "ms";
    }
    function fmtLong(ms) {
      var msAbs = Math.abs(ms);
      return msAbs >= d ? plural(ms, msAbs, d, "day") : msAbs >= h ? plural(ms, msAbs, h, "hour") : msAbs >= m ? plural(ms, msAbs, m, "minute") : msAbs >= s ? plural(ms, msAbs, s, "second") : ms + " ms";
    }
    function plural(ms, msAbs, n, name) {
      var isPlural = msAbs >= n * 1.5;
      return Math.round(ms / n) + " " + name + (isPlural ? "s" : "");
    }
  }
});

// ../../node_modules/.pnpm/debug@4.3.4/node_modules/debug/src/common.js
var require_common = __commonJS({
  "../../node_modules/.pnpm/debug@4.3.4/node_modules/debug/src/common.js"(exports, module) {
    function setup(env) {
      createDebug.debug = createDebug, createDebug.default = createDebug, createDebug.coerce = coerce2, createDebug.disable = disable, createDebug.enable = enable, createDebug.enabled = enabled, createDebug.humanize = require_ms(), createDebug.destroy = destroy, Object.keys(env).forEach((key) => {
        createDebug[key] = env[key];
      }), createDebug.names = [], createDebug.skips = [], createDebug.formatters = {};
      function selectColor(namespace) {
        let hash = 0;
        for (let i = 0; i < namespace.length; i++)
          hash = (hash << 5) - hash + namespace.charCodeAt(i), hash |= 0;
        return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
      }
      createDebug.selectColor = selectColor;
      function createDebug(namespace) {
        let prevTime, enableOverride = null, namespacesCache, enabledCache;
        function debug(...args) {
          if (!debug.enabled)
            return;
          let self2 = debug, curr = Number(new Date()), ms = curr - (prevTime || curr);
          self2.diff = ms, self2.prev = prevTime, self2.curr = curr, prevTime = curr, args[0] = createDebug.coerce(args[0]), typeof args[0] != "string" && args.unshift("%O");
          let index = 0;
          args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
            if (match === "%%")
              return "%";
            index++;
            let formatter = createDebug.formatters[format];
            if (typeof formatter == "function") {
              let val = args[index];
              match = formatter.call(self2, val), args.splice(index, 1), index--;
            }
            return match;
          }), createDebug.formatArgs.call(self2, args), (self2.log || createDebug.log).apply(self2, args);
        }
        return debug.namespace = namespace, debug.useColors = createDebug.useColors(), debug.color = createDebug.selectColor(namespace), debug.extend = extend, debug.destroy = createDebug.destroy, Object.defineProperty(debug, "enabled", {
          enumerable: !0,
          configurable: !1,
          get: () => enableOverride !== null ? enableOverride : (namespacesCache !== createDebug.namespaces && (namespacesCache = createDebug.namespaces, enabledCache = createDebug.enabled(namespace)), enabledCache),
          set: (v) => {
            enableOverride = v;
          }
        }), typeof createDebug.init == "function" && createDebug.init(debug), debug;
      }
      function extend(namespace, delimiter) {
        let newDebug = createDebug(this.namespace + (typeof delimiter > "u" ? ":" : delimiter) + namespace);
        return newDebug.log = this.log, newDebug;
      }
      function enable(namespaces) {
        createDebug.save(namespaces), createDebug.namespaces = namespaces, createDebug.names = [], createDebug.skips = [];
        let i, split = (typeof namespaces == "string" ? namespaces : "").split(/[\s,]+/), len = split.length;
        for (i = 0; i < len; i++)
          !split[i] || (namespaces = split[i].replace(/\*/g, ".*?"), namespaces[0] === "-" ? createDebug.skips.push(new RegExp("^" + namespaces.slice(1) + "$")) : createDebug.names.push(new RegExp("^" + namespaces + "$")));
      }
      function disable() {
        let namespaces = [
          ...createDebug.names.map(toNamespace),
          ...createDebug.skips.map(toNamespace).map((namespace) => "-" + namespace)
        ].join(",");
        return createDebug.enable(""), namespaces;
      }
      function enabled(name) {
        if (name[name.length - 1] === "*")
          return !0;
        let i, len;
        for (i = 0, len = createDebug.skips.length; i < len; i++)
          if (createDebug.skips[i].test(name))
            return !1;
        for (i = 0, len = createDebug.names.length; i < len; i++)
          if (createDebug.names[i].test(name))
            return !0;
        return !1;
      }
      function toNamespace(regexp) {
        return regexp.toString().substring(2, regexp.toString().length - 2).replace(/\.\*\?$/, "*");
      }
      function coerce2(val) {
        return val instanceof Error ? val.stack || val.message : val;
      }
      function destroy() {
        console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
      }
      return createDebug.enable(createDebug.load()), createDebug;
    }
    module.exports = setup;
  }
});

// ../../node_modules/.pnpm/debug@4.3.4/node_modules/debug/src/browser.js
var require_browser = __commonJS({
  "../../node_modules/.pnpm/debug@4.3.4/node_modules/debug/src/browser.js"(exports, module) {
    exports.formatArgs = formatArgs;
    exports.save = save;
    exports.load = load;
    exports.useColors = useColors;
    exports.storage = localstorage();
    exports.destroy = (() => {
      let warned = !1;
      return () => {
        warned || (warned = !0, console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."));
      };
    })();
    exports.colors = [
      "#0000CC",
      "#0000FF",
      "#0033CC",
      "#0033FF",
      "#0066CC",
      "#0066FF",
      "#0099CC",
      "#0099FF",
      "#00CC00",
      "#00CC33",
      "#00CC66",
      "#00CC99",
      "#00CCCC",
      "#00CCFF",
      "#3300CC",
      "#3300FF",
      "#3333CC",
      "#3333FF",
      "#3366CC",
      "#3366FF",
      "#3399CC",
      "#3399FF",
      "#33CC00",
      "#33CC33",
      "#33CC66",
      "#33CC99",
      "#33CCCC",
      "#33CCFF",
      "#6600CC",
      "#6600FF",
      "#6633CC",
      "#6633FF",
      "#66CC00",
      "#66CC33",
      "#9900CC",
      "#9900FF",
      "#9933CC",
      "#9933FF",
      "#99CC00",
      "#99CC33",
      "#CC0000",
      "#CC0033",
      "#CC0066",
      "#CC0099",
      "#CC00CC",
      "#CC00FF",
      "#CC3300",
      "#CC3333",
      "#CC3366",
      "#CC3399",
      "#CC33CC",
      "#CC33FF",
      "#CC6600",
      "#CC6633",
      "#CC9900",
      "#CC9933",
      "#CCCC00",
      "#CCCC33",
      "#FF0000",
      "#FF0033",
      "#FF0066",
      "#FF0099",
      "#FF00CC",
      "#FF00FF",
      "#FF3300",
      "#FF3333",
      "#FF3366",
      "#FF3399",
      "#FF33CC",
      "#FF33FF",
      "#FF6600",
      "#FF6633",
      "#FF9900",
      "#FF9933",
      "#FFCC00",
      "#FFCC33"
    ];
    function useColors() {
      return typeof window < "u" && window.process && (window.process.type === "renderer" || window.process.__nwjs) ? !0 : typeof navigator < "u" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/) ? !1 : typeof document < "u" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || typeof window < "u" && window.console && (window.console.firebug || window.console.exception && window.console.table) || typeof navigator < "u" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || typeof navigator < "u" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
    }
    function formatArgs(args) {
      if (args[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + args[0] + (this.useColors ? "%c " : " ") + "+" + module.exports.humanize(this.diff), !this.useColors)
        return;
      let c = "color: " + this.color;
      args.splice(1, 0, c, "color: inherit");
      let index = 0, lastC = 0;
      args[0].replace(/%[a-zA-Z%]/g, (match) => {
        match !== "%%" && (index++, match === "%c" && (lastC = index));
      }), args.splice(lastC, 0, c);
    }
    exports.log = console.debug || console.log || (() => {
    });
    function save(namespaces) {
      try {
        namespaces ? exports.storage.setItem("debug", namespaces) : exports.storage.removeItem("debug");
      } catch {
      }
    }
    function load() {
      let r2;
      try {
        r2 = exports.storage.getItem("debug");
      } catch {
      }
      return !r2 && typeof process < "u" && "env" in process && (r2 = process.env.DEBUG), r2;
    }
    function localstorage() {
      try {
        return localStorage;
      } catch {
      }
    }
    module.exports = require_common()(exports);
    var { formatters } = module.exports;
    formatters.j = function(v) {
      try {
        return JSON.stringify(v);
      } catch (error) {
        return "[UnexpectedJSONParseError]: " + error.message;
      }
    };
  }
});

// ../../node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-browser/rng.js
function rng() {
  if (!getRandomValues && (getRandomValues = typeof crypto < "u" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto < "u" && typeof msCrypto.getRandomValues == "function" && msCrypto.getRandomValues.bind(msCrypto), !getRandomValues))
    throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
  return getRandomValues(rnds8);
}
var getRandomValues, rnds8, init_rng = __esm({
  "../../node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-browser/rng.js"() {
    rnds8 = new Uint8Array(16);
  }
});

// ../../node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-browser/regex.js
var regex_default, init_regex = __esm({
  "../../node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-browser/regex.js"() {
    regex_default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
  }
});

// ../../node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-browser/validate.js
function validate(uuid) {
  return typeof uuid == "string" && regex_default.test(uuid);
}
var validate_default, init_validate = __esm({
  "../../node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-browser/validate.js"() {
    init_regex();
    validate_default = validate;
  }
});

// ../../node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-browser/stringify.js
function stringify(arr) {
  var offset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0, uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
  if (!validate_default(uuid))
    throw TypeError("Stringified UUID is invalid");
  return uuid;
}
var byteToHex, i, stringify_default, init_stringify = __esm({
  "../../node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-browser/stringify.js"() {
    init_validate();
    byteToHex = [];
    for (i = 0; i < 256; ++i)
      byteToHex.push((i + 256).toString(16).substr(1));
    stringify_default = stringify;
  }
});

// ../../node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-browser/v1.js
function v1(options, buf, offset) {
  var i = buf && offset || 0, b = buf || new Array(16);
  options = options || {};
  var node = options.node || _nodeId, clockseq = options.clockseq !== void 0 ? options.clockseq : _clockseq;
  if (node == null || clockseq == null) {
    var seedBytes = options.random || (options.rng || rng)();
    node == null && (node = _nodeId = [seedBytes[0] | 1, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]]), clockseq == null && (clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 16383);
  }
  var msecs = options.msecs !== void 0 ? options.msecs : Date.now(), nsecs = options.nsecs !== void 0 ? options.nsecs : _lastNSecs + 1, dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 1e4;
  if (dt < 0 && options.clockseq === void 0 && (clockseq = clockseq + 1 & 16383), (dt < 0 || msecs > _lastMSecs) && options.nsecs === void 0 && (nsecs = 0), nsecs >= 1e4)
    throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
  _lastMSecs = msecs, _lastNSecs = nsecs, _clockseq = clockseq, msecs += 122192928e5;
  var tl = ((msecs & 268435455) * 1e4 + nsecs) % 4294967296;
  b[i++] = tl >>> 24 & 255, b[i++] = tl >>> 16 & 255, b[i++] = tl >>> 8 & 255, b[i++] = tl & 255;
  var tmh = msecs / 4294967296 * 1e4 & 268435455;
  b[i++] = tmh >>> 8 & 255, b[i++] = tmh & 255, b[i++] = tmh >>> 24 & 15 | 16, b[i++] = tmh >>> 16 & 255, b[i++] = clockseq >>> 8 | 128, b[i++] = clockseq & 255;
  for (var n = 0; n < 6; ++n)
    b[i + n] = node[n];
  return buf || stringify_default(b);
}
var _nodeId, _clockseq, _lastMSecs, _lastNSecs, v1_default, init_v1 = __esm({
  "../../node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-browser/v1.js"() {
    init_rng();
    init_stringify();
    _lastMSecs = 0, _lastNSecs = 0;
    v1_default = v1;
  }
});

// ../../node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-browser/parse.js
function parse2(uuid) {
  if (!validate_default(uuid))
    throw TypeError("Invalid UUID");
  var v, arr = new Uint8Array(16);
  return arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24, arr[1] = v >>> 16 & 255, arr[2] = v >>> 8 & 255, arr[3] = v & 255, arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8, arr[5] = v & 255, arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8, arr[7] = v & 255, arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8, arr[9] = v & 255, arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 1099511627776 & 255, arr[11] = v / 4294967296 & 255, arr[12] = v >>> 24 & 255, arr[13] = v >>> 16 & 255, arr[14] = v >>> 8 & 255, arr[15] = v & 255, arr;
}
var parse_default, init_parse = __esm({
  "../../node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-browser/parse.js"() {
    init_validate();
    parse_default = parse2;
  }
});

// ../../node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-browser/v35.js
function stringToBytes(str) {
  str = unescape(encodeURIComponent(str));
  for (var bytes = [], i = 0; i < str.length; ++i)
    bytes.push(str.charCodeAt(i));
  return bytes;
}
function v35_default(name, version2, hashfunc) {
  function generateUUID(value, namespace, buf, offset) {
    if (typeof value == "string" && (value = stringToBytes(value)), typeof namespace == "string" && (namespace = parse_default(namespace)), namespace.length !== 16)
      throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");
    var bytes = new Uint8Array(16 + value.length);
    if (bytes.set(namespace), bytes.set(value, namespace.length), bytes = hashfunc(bytes), bytes[6] = bytes[6] & 15 | version2, bytes[8] = bytes[8] & 63 | 128, buf) {
      offset = offset || 0;
      for (var i = 0; i < 16; ++i)
        buf[offset + i] = bytes[i];
      return buf;
    }
    return stringify_default(bytes);
  }
  try {
    generateUUID.name = name;
  } catch {
  }
  return generateUUID.DNS = DNS, generateUUID.URL = URL2, generateUUID;
}
var DNS, URL2, init_v35 = __esm({
  "../../node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-browser/v35.js"() {
    init_stringify();
    init_parse();
    DNS = "6ba7b810-9dad-11d1-80b4-00c04fd430c8", URL2 = "6ba7b811-9dad-11d1-80b4-00c04fd430c8";
  }
});

// ../../node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-browser/md5.js
function md5(bytes) {
  if (typeof bytes == "string") {
    var msg = unescape(encodeURIComponent(bytes));
    bytes = new Uint8Array(msg.length);
    for (var i = 0; i < msg.length; ++i)
      bytes[i] = msg.charCodeAt(i);
  }
  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));
}
function md5ToHexEncodedArray(input) {
  for (var output = [], length32 = input.length * 32, hexTab = "0123456789abcdef", i = 0; i < length32; i += 8) {
    var x = input[i >> 5] >>> i % 32 & 255, hex2 = parseInt(hexTab.charAt(x >>> 4 & 15) + hexTab.charAt(x & 15), 16);
    output.push(hex2);
  }
  return output;
}
function getOutputLength(inputLength8) {
  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;
}
function wordsToMd5(x, len) {
  x[len >> 5] |= 128 << len % 32, x[getOutputLength(len) - 1] = len;
  for (var a = 1732584193, b = -271733879, c = -1732584194, d = 271733878, i = 0; i < x.length; i += 16) {
    var olda = a, oldb = b, oldc = c, oldd = d;
    a = md5ff(a, b, c, d, x[i], 7, -680876936), d = md5ff(d, a, b, c, x[i + 1], 12, -389564586), c = md5ff(c, d, a, b, x[i + 2], 17, 606105819), b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330), a = md5ff(a, b, c, d, x[i + 4], 7, -176418897), d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426), c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341), b = md5ff(b, c, d, a, x[i + 7], 22, -45705983), a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416), d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417), c = md5ff(c, d, a, b, x[i + 10], 17, -42063), b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162), a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682), d = md5ff(d, a, b, c, x[i + 13], 12, -40341101), c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290), b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329), a = md5gg(a, b, c, d, x[i + 1], 5, -165796510), d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632), c = md5gg(c, d, a, b, x[i + 11], 14, 643717713), b = md5gg(b, c, d, a, x[i], 20, -373897302), a = md5gg(a, b, c, d, x[i + 5], 5, -701558691), d = md5gg(d, a, b, c, x[i + 10], 9, 38016083), c = md5gg(c, d, a, b, x[i + 15], 14, -660478335), b = md5gg(b, c, d, a, x[i + 4], 20, -405537848), a = md5gg(a, b, c, d, x[i + 9], 5, 568446438), d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690), c = md5gg(c, d, a, b, x[i + 3], 14, -187363961), b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501), a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467), d = md5gg(d, a, b, c, x[i + 2], 9, -51403784), c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473), b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734), a = md5hh(a, b, c, d, x[i + 5], 4, -378558), d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463), c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562), b = md5hh(b, c, d, a, x[i + 14], 23, -35309556), a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060), d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353), c = md5hh(c, d, a, b, x[i + 7], 16, -155497632), b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640), a = md5hh(a, b, c, d, x[i + 13], 4, 681279174), d = md5hh(d, a, b, c, x[i], 11, -358537222), c = md5hh(c, d, a, b, x[i + 3], 16, -722521979), b = md5hh(b, c, d, a, x[i + 6], 23, 76029189), a = md5hh(a, b, c, d, x[i + 9], 4, -640364487), d = md5hh(d, a, b, c, x[i + 12], 11, -421815835), c = md5hh(c, d, a, b, x[i + 15], 16, 530742520), b = md5hh(b, c, d, a, x[i + 2], 23, -995338651), a = md5ii(a, b, c, d, x[i], 6, -198630844), d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415), c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905), b = md5ii(b, c, d, a, x[i + 5], 21, -57434055), a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571), d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606), c = md5ii(c, d, a, b, x[i + 10], 15, -1051523), b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799), a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359), d = md5ii(d, a, b, c, x[i + 15], 10, -30611744), c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380), b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649), a = md5ii(a, b, c, d, x[i + 4], 6, -145523070), d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379), c = md5ii(c, d, a, b, x[i + 2], 15, 718787259), b = md5ii(b, c, d, a, x[i + 9], 21, -343485551), a = safeAdd(a, olda), b = safeAdd(b, oldb), c = safeAdd(c, oldc), d = safeAdd(d, oldd);
  }
  return [a, b, c, d];
}
function bytesToWords(input) {
  if (input.length === 0)
    return [];
  for (var length8 = input.length * 8, output = new Uint32Array(getOutputLength(length8)), i = 0; i < length8; i += 8)
    output[i >> 5] |= (input[i / 8] & 255) << i % 32;
  return output;
}
function safeAdd(x, y) {
  var lsw = (x & 65535) + (y & 65535), msw = (x >> 16) + (y >> 16) + (lsw >> 16);
  return msw << 16 | lsw & 65535;
}
function bitRotateLeft(num, cnt) {
  return num << cnt | num >>> 32 - cnt;
}
function md5cmn(q, a, b, x, s, t) {
  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);
}
function md5ff(a, b, c, d, x, s, t) {
  return md5cmn(b & c | ~b & d, a, b, x, s, t);
}
function md5gg(a, b, c, d, x, s, t) {
  return md5cmn(b & d | c & ~d, a, b, x, s, t);
}
function md5hh(a, b, c, d, x, s, t) {
  return md5cmn(b ^ c ^ d, a, b, x, s, t);
}
function md5ii(a, b, c, d, x, s, t) {
  return md5cmn(c ^ (b | ~d), a, b, x, s, t);
}
var md5_default, init_md5 = __esm({
  "../../node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-browser/md5.js"() {
    md5_default = md5;
  }
});

// ../../node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-browser/v3.js
var v3, v3_default, init_v3 = __esm({
  "../../node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-browser/v3.js"() {
    init_v35();
    init_md5();
    v3 = v35_default("v3", 48, md5_default), v3_default = v3;
  }
});

// ../../node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-browser/v4.js
function v4(options, buf, offset) {
  options = options || {};
  var rnds = options.random || (options.rng || rng)();
  if (rnds[6] = rnds[6] & 15 | 64, rnds[8] = rnds[8] & 63 | 128, buf) {
    offset = offset || 0;
    for (var i = 0; i < 16; ++i)
      buf[offset + i] = rnds[i];
    return buf;
  }
  return stringify_default(rnds);
}
var v4_default, init_v4 = __esm({
  "../../node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-browser/v4.js"() {
    init_rng();
    init_stringify();
    v4_default = v4;
  }
});

// ../../node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-browser/sha1.js
function f(s, x, y, z) {
  switch (s) {
    case 0:
      return x & y ^ ~x & z;
    case 1:
      return x ^ y ^ z;
    case 2:
      return x & y ^ x & z ^ y & z;
    case 3:
      return x ^ y ^ z;
  }
}
function ROTL(x, n) {
  return x << n | x >>> 32 - n;
}
function sha1(bytes) {
  var K = [1518500249, 1859775393, 2400959708, 3395469782], H = [1732584193, 4023233417, 2562383102, 271733878, 3285377520];
  if (typeof bytes == "string") {
    var msg = unescape(encodeURIComponent(bytes));
    bytes = [];
    for (var i = 0; i < msg.length; ++i)
      bytes.push(msg.charCodeAt(i));
  } else
    Array.isArray(bytes) || (bytes = Array.prototype.slice.call(bytes));
  bytes.push(128);
  for (var l = bytes.length / 4 + 2, N = Math.ceil(l / 16), M = new Array(N), _i = 0; _i < N; ++_i) {
    for (var arr = new Uint32Array(16), j = 0; j < 16; ++j)
      arr[j] = bytes[_i * 64 + j * 4] << 24 | bytes[_i * 64 + j * 4 + 1] << 16 | bytes[_i * 64 + j * 4 + 2] << 8 | bytes[_i * 64 + j * 4 + 3];
    M[_i] = arr;
  }
  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32), M[N - 1][14] = Math.floor(M[N - 1][14]), M[N - 1][15] = (bytes.length - 1) * 8 & 4294967295;
  for (var _i2 = 0; _i2 < N; ++_i2) {
    for (var W = new Uint32Array(80), t = 0; t < 16; ++t)
      W[t] = M[_i2][t];
    for (var _t = 16; _t < 80; ++_t)
      W[_t] = ROTL(W[_t - 3] ^ W[_t - 8] ^ W[_t - 14] ^ W[_t - 16], 1);
    for (var a = H[0], b = H[1], c = H[2], d = H[3], e = H[4], _t2 = 0; _t2 < 80; ++_t2) {
      var s = Math.floor(_t2 / 20), T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[_t2] >>> 0;
      e = d, d = c, c = ROTL(b, 30) >>> 0, b = a, a = T;
    }
    H[0] = H[0] + a >>> 0, H[1] = H[1] + b >>> 0, H[2] = H[2] + c >>> 0, H[3] = H[3] + d >>> 0, H[4] = H[4] + e >>> 0;
  }
  return [H[0] >> 24 & 255, H[0] >> 16 & 255, H[0] >> 8 & 255, H[0] & 255, H[1] >> 24 & 255, H[1] >> 16 & 255, H[1] >> 8 & 255, H[1] & 255, H[2] >> 24 & 255, H[2] >> 16 & 255, H[2] >> 8 & 255, H[2] & 255, H[3] >> 24 & 255, H[3] >> 16 & 255, H[3] >> 8 & 255, H[3] & 255, H[4] >> 24 & 255, H[4] >> 16 & 255, H[4] >> 8 & 255, H[4] & 255];
}
var sha1_default, init_sha1 = __esm({
  "../../node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-browser/sha1.js"() {
    sha1_default = sha1;
  }
});

// ../../node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-browser/v5.js
var v5, v5_default, init_v5 = __esm({
  "../../node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-browser/v5.js"() {
    init_v35();
    init_sha1();
    v5 = v35_default("v5", 80, sha1_default), v5_default = v5;
  }
});

// ../../node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-browser/nil.js
var nil_default, init_nil = __esm({
  "../../node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-browser/nil.js"() {
    nil_default = "00000000-0000-0000-0000-000000000000";
  }
});

// ../../node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-browser/version.js
function version(uuid) {
  if (!validate_default(uuid))
    throw TypeError("Invalid UUID");
  return parseInt(uuid.substr(14, 1), 16);
}
var version_default, init_version = __esm({
  "../../node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-browser/version.js"() {
    init_validate();
    version_default = version;
  }
});

// ../../node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-browser/index.js
var esm_browser_exports = {};
__export(esm_browser_exports, {
  NIL: () => nil_default,
  parse: () => parse_default,
  stringify: () => stringify_default,
  v1: () => v1_default,
  v3: () => v3_default,
  v4: () => v4_default,
  v5: () => v5_default,
  validate: () => validate_default,
  version: () => version_default
});
var init_esm_browser = __esm({
  "../../node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-browser/index.js"() {
    init_v1();
    init_v3();
    init_v4();
    init_v5();
    init_nil();
    init_version();
    init_validate();
    init_stringify();
    init_parse();
  }
});

// ../../node_modules/.pnpm/remix-auth-oauth2@1.3.0_6kxk6kwultkcl4p64ujxabvc7i/node_modules/remix-auth-oauth2/build/index.js
var require_build2 = __commonJS({
  "../../node_modules/.pnpm/remix-auth-oauth2@1.3.0_6kxk6kwultkcl4p64ujxabvc7i/node_modules/remix-auth-oauth2/build/index.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { default: mod2 };
    };
    Object.defineProperty(exports, "__esModule", { value: !0 });
    exports.OAuth2Strategy = void 0;
    var server_runtime_1 = (init_esm(), __toCommonJS(esm_exports)), debug_1 = __importDefault(require_browser()), remix_auth_1 = require_build(), uuid_1 = (init_esm_browser(), __toCommonJS(esm_browser_exports)), debug = (0, debug_1.default)("OAuth2Strategy"), OAuth2Strategy = class extends remix_auth_1.Strategy {
      constructor(options, verify) {
        var _a;
        super(verify), this.name = "oauth2", this.sessionStateKey = "oauth2:state", this.authorizationURL = options.authorizationURL, this.tokenURL = options.tokenURL, this.clientID = options.clientID, this.clientSecret = options.clientSecret, this.callbackURL = options.callbackURL, this.responseType = (_a = options.responseType) !== null && _a !== void 0 ? _a : "code";
      }
      async authenticate(request, sessionStorage2, options) {
        var _a;
        debug("Request URL", request.url);
        let url = new URL(request.url), session = await sessionStorage2.getSession(request.headers.get("Cookie")), user = (_a = session.get(options.sessionKey)) !== null && _a !== void 0 ? _a : null;
        if (user)
          return debug("User is authenticated"), this.success(user, request, sessionStorage2, options);
        let callbackURL = this.getCallbackURL(url);
        if (debug("Callback URL", callbackURL), url.pathname !== callbackURL.pathname) {
          debug("Redirecting to callback URL");
          let state = this.generateState();
          throw debug("State", state), session.set(this.sessionStateKey, state), (0, server_runtime_1.redirect)(this.getAuthorizationURL(request, state).toString(), {
            headers: { "Set-Cookie": await sessionStorage2.commitSession(session) }
          });
        }
        let stateUrl = url.searchParams.get("state");
        if (debug("State from URL", stateUrl), !stateUrl)
          throw (0, server_runtime_1.json)({ message: "Missing state on URL." }, { status: 400 });
        let stateSession = session.get(this.sessionStateKey);
        if (debug("State from session", stateSession), !stateSession)
          throw (0, server_runtime_1.json)({ message: "Missing state on session." }, { status: 400 });
        if (stateSession === stateUrl)
          debug("State is valid"), session.unset(this.sessionStateKey);
        else
          throw (0, server_runtime_1.json)({ message: "State doesn't match." }, { status: 400 });
        let code = url.searchParams.get("code");
        if (!code)
          throw (0, server_runtime_1.json)({ message: "Missing code." }, { status: 400 });
        let params = new URLSearchParams(this.tokenParams());
        params.set("grant_type", "authorization_code"), params.set("redirect_uri", callbackURL.toString());
        let { accessToken, refreshToken, extraParams } = await this.fetchAccessToken(code, params), profile = await this.userProfile(accessToken, extraParams);
        try {
          user = await this.verify({
            accessToken,
            refreshToken,
            extraParams,
            profile,
            context: options.context
          });
        } catch (error) {
          debug("Failed to verify user", error);
          let message = error.message;
          return await this.failure(message, request, sessionStorage2, options);
        }
        return debug("User authenticated"), await this.success(user, request, sessionStorage2, options);
      }
      async userProfile(accessToken, params) {
        return { provider: "oauth2" };
      }
      authorizationParams(params) {
        return new URLSearchParams(params);
      }
      tokenParams() {
        return new URLSearchParams();
      }
      async getAccessToken(response) {
        let { access_token, refresh_token, ...extraParams } = await response.json();
        return {
          accessToken: access_token,
          refreshToken: refresh_token,
          extraParams
        };
      }
      getCallbackURL(url) {
        return this.callbackURL.startsWith("http:") || this.callbackURL.startsWith("https:") ? new URL(this.callbackURL) : this.callbackURL.startsWith("/") ? new URL(this.callbackURL, url) : new URL(`${url.protocol}//${this.callbackURL}`);
      }
      getAuthorizationURL(request, state) {
        let params = new URLSearchParams(this.authorizationParams(new URL(request.url).searchParams));
        params.set("response_type", this.responseType), params.set("client_id", this.clientID), params.set("redirect_uri", this.getCallbackURL(new URL(request.url)).toString()), params.set("state", state);
        let url = new URL(this.authorizationURL);
        return url.search = params.toString(), url;
      }
      generateState() {
        return (0, uuid_1.v4)();
      }
      async fetchAccessToken(code, params) {
        params.set("client_id", this.clientID), params.set("client_secret", this.clientSecret), params.get("grant_type") === "refresh_token" ? params.set("refresh_token", code) : params.set("code", code);
        let response = await fetch(this.tokenURL, {
          method: "POST",
          headers: { "Content-Type": "application/x-www-form-urlencoded" },
          body: params
        });
        if (!response.ok)
          try {
            let body = await response.text();
            throw new Response(body, { status: 401 });
          } catch (error) {
            throw new Response(error.message, { status: 401 });
          }
        return await this.getAccessToken(response.clone());
      }
    };
    exports.OAuth2Strategy = OAuth2Strategy;
  }
});

// ../../node_modules/.pnpm/remix-auth-auth0@1.4.1_hg7tr3sn5tj6tvpgnoblnfrcv4/node_modules/remix-auth-auth0/build/index.js
var require_build3 = __commonJS({
  "../../node_modules/.pnpm/remix-auth-auth0@1.4.1_hg7tr3sn5tj6tvpgnoblnfrcv4/node_modules/remix-auth-auth0/build/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    exports.Auth0Strategy = void 0;
    var remix_auth_oauth2_1 = require_build2(), Auth0Strategy2 = class extends remix_auth_oauth2_1.OAuth2Strategy {
      constructor(options, verify) {
        super({
          authorizationURL: `https://${options.domain}/authorize`,
          tokenURL: `https://${options.domain}/oauth/token`,
          clientID: options.clientID,
          clientSecret: options.clientSecret,
          callbackURL: options.callbackURL
        }, verify), this.name = "auth0", this.userInfoURL = `https://${options.domain}/userinfo`, this.scope = options.scope || "openid profile email", this.audience = options.audience, this.organization = options.organization;
      }
      authorizationParams(params) {
        return params.set("scope", this.scope), this.audience && params.set("audience", this.audience), this.organization && params.set("organization", this.organization), params;
      }
      async userProfile(accessToken) {
        let data = await (await fetch(this.userInfoURL, {
          headers: { Authorization: `Bearer ${accessToken}` }
        })).json();
        return {
          provider: "auth0",
          displayName: data.name,
          id: data.sub,
          name: {
            familyName: data.family_name,
            givenName: data.given_name,
            middleName: data.middle_name
          },
          emails: [{ value: data.email }],
          photos: [{ value: data.picture }],
          _json: data
        };
      }
    };
    exports.Auth0Strategy = Auth0Strategy2;
  }
});

// ../../node_modules/.pnpm/@tanstack+react-table@8.5.22_biqbaboplfbrettd7655fr4n2y/node_modules/@tanstack/react-table/build/umd/index.production.js
var require_index_production = __commonJS({
  "../../node_modules/.pnpm/@tanstack+react-table@8.5.22_biqbaboplfbrettd7655fr4n2y/node_modules/@tanstack/react-table/build/umd/index.production.js"(exports, module) {
    (function(e, t) {
      typeof exports == "object" && typeof module < "u" ? t(exports, require_react()) : typeof define == "function" && define.amd ? define(["exports", "react"], t) : t((e = typeof globalThis < "u" ? globalThis : e || self).ReactTable = {}, e.React);
    })(exports, function(e, t) {
      "use strict";
      function n(e2) {
        if (e2 && e2.__esModule)
          return e2;
        var t2 = /* @__PURE__ */ Object.create(null);
        return e2 && Object.keys(e2).forEach(function(n2) {
          if (n2 !== "default") {
            var o2 = Object.getOwnPropertyDescriptor(e2, n2);
            Object.defineProperty(t2, n2, o2.get ? o2 : { enumerable: !0, get: function() {
              return e2[n2];
            } });
          }
        }), t2.default = e2, Object.freeze(t2);
      }
      var o = n(t);
      function l(e2, t2) {
        return typeof e2 == "function" ? e2(t2) : e2;
      }
      function i(e2, t2) {
        return (n2) => {
          t2.setState((t3) => ({ ...t3, [e2]: l(n2, t3[e2]) }));
        };
      }
      function r2(e2) {
        return e2 instanceof Function;
      }
      function a(e2, t2) {
        let n2 = [], o2 = (e3) => {
          e3.forEach((e4) => {
            n2.push(e4);
            let l2 = t2(e4);
            l2 != null && l2.length && o2(l2);
          });
        };
        return o2(e2), n2;
      }
      function s(e2, t2, n2) {
        let o2, l2 = [];
        return () => {
          let i2;
          n2.key && n2.debug && (i2 = Date.now());
          let r3 = e2();
          if (!(r3.length !== l2.length || r3.some((e3, t3) => l2[t3] !== e3)))
            return o2;
          let a2;
          if (l2 = r3, n2.key && n2.debug && (a2 = Date.now()), o2 = t2(...r3), n2 == null || n2.onChange == null || n2.onChange(o2), n2.key && n2.debug && n2 != null && n2.debug()) {
            let e3 = Math.round(100 * (Date.now() - i2)) / 100, t3 = Math.round(100 * (Date.now() - a2)) / 100, o3 = t3 / 16, l3 = (e4, t4) => {
              for (e4 = String(e4); e4.length < t4; )
                e4 = " " + e4;
              return e4;
            };
            console.info(`%c\u23F1 ${l3(t3, 5)} /${l3(e3, 5)} ms`, `
            font-size: .6rem;
            font-weight: bold;
            color: hsl(${Math.max(0, Math.min(120 - 120 * o3, 120))}deg 100% 31%);`, n2 == null ? void 0 : n2.key);
          }
          return o2;
        };
      }
      function u(e2, t2, n2, o2) {
        let l2 = { ...e2._getDefaultColumnDef(), ...t2 }, i2 = l2.accessorKey, r3, a2 = l2.id ?? (i2 ? i2.replace(".", "_") : void 0) ?? (typeof l2.header == "string" ? l2.header : void 0);
        if (l2.accessorFn ? r3 = l2.accessorFn : i2 && (r3 = i2.includes(".") ? (e3) => {
          let t3 = e3;
          for (let e4 of i2.split("."))
            t3 = t3[e4];
          return t3;
        } : (e3) => e3[l2.accessorKey]), !a2)
          throw new Error();
        let u2 = { id: `${String(a2)}`, accessorFn: r3, parent: o2, depth: n2, columnDef: l2, columns: [], getFlatColumns: s(() => [!0], () => {
          var e3;
          return [u2, ...(e3 = u2.columns) == null ? void 0 : e3.flatMap((e4) => e4.getFlatColumns())];
        }, { key: "column.getFlatColumns", debug: () => e2.options.debugAll ?? e2.options.debugColumns }), getLeafColumns: s(() => [e2._getOrderColumnsFn()], (e3) => {
          var t3;
          if ((t3 = u2.columns) != null && t3.length) {
            let t4 = u2.columns.flatMap((e4) => e4.getLeafColumns());
            return e3(t4);
          }
          return [u2];
        }, { key: "column.getLeafColumns", debug: () => e2.options.debugAll ?? e2.options.debugColumns }) };
        return u2 = e2._features.reduce((t3, n3) => Object.assign(t3, n3.createColumn == null ? void 0 : n3.createColumn(u2, e2)), u2), u2;
      }
      function g(e2, t2, n2) {
        let o2 = { id: n2.id ?? t2.id, column: t2, index: n2.index, isPlaceholder: !!n2.isPlaceholder, placeholderId: n2.placeholderId, depth: n2.depth, subHeaders: [], colSpan: 0, rowSpan: 0, headerGroup: null, getLeafHeaders: () => {
          let e3 = [], t3 = (n3) => {
            n3.subHeaders && n3.subHeaders.length && n3.subHeaders.map(t3), e3.push(n3);
          };
          return t3(o2), e3;
        }, getContext: () => ({ table: e2, header: o2, column: t2 }) };
        return e2._features.forEach((t3) => {
          Object.assign(o2, t3.createHeader == null ? void 0 : t3.createHeader(o2, e2));
        }), o2;
      }
      let d = { createTable: (e2) => ({ getHeaderGroups: s(() => [e2.getAllColumns(), e2.getVisibleLeafColumns(), e2.getState().columnPinning.left, e2.getState().columnPinning.right], (t2, n2, o2, l2) => {
        let i2 = (o2 == null ? void 0 : o2.map((e3) => n2.find((t3) => t3.id === e3)).filter(Boolean)) ?? [], r3 = (l2 == null ? void 0 : l2.map((e3) => n2.find((t3) => t3.id === e3)).filter(Boolean)) ?? [];
        return c(t2, [...i2, ...n2.filter((e3) => !(o2 != null && o2.includes(e3.id) || l2 != null && l2.includes(e3.id))), ...r3], e2);
      }, { key: !1, debug: () => e2.options.debugAll ?? e2.options.debugHeaders }), getCenterHeaderGroups: s(() => [e2.getAllColumns(), e2.getVisibleLeafColumns(), e2.getState().columnPinning.left, e2.getState().columnPinning.right], (t2, n2, o2, l2) => c(t2, n2 = n2.filter((e3) => !(o2 != null && o2.includes(e3.id) || l2 != null && l2.includes(e3.id))), e2, "center"), { key: !1, debug: () => e2.options.debugAll ?? e2.options.debugHeaders }), getLeftHeaderGroups: s(() => [e2.getAllColumns(), e2.getVisibleLeafColumns(), e2.getState().columnPinning.left], (t2, n2, o2) => c(t2, (o2 == null ? void 0 : o2.map((e3) => n2.find((t3) => t3.id === e3)).filter(Boolean)) ?? [], e2, "left"), { key: !1, debug: () => e2.options.debugAll ?? e2.options.debugHeaders }), getRightHeaderGroups: s(() => [e2.getAllColumns(), e2.getVisibleLeafColumns(), e2.getState().columnPinning.right], (t2, n2, o2) => c(t2, (o2 == null ? void 0 : o2.map((e3) => n2.find((t3) => t3.id === e3)).filter(Boolean)) ?? [], e2, "right"), { key: !1, debug: () => e2.options.debugAll ?? e2.options.debugHeaders }), getFooterGroups: s(() => [e2.getHeaderGroups()], (e3) => [...e3].reverse(), { key: !1, debug: () => e2.options.debugAll ?? e2.options.debugHeaders }), getLeftFooterGroups: s(() => [e2.getLeftHeaderGroups()], (e3) => [...e3].reverse(), { key: !1, debug: () => e2.options.debugAll ?? e2.options.debugHeaders }), getCenterFooterGroups: s(() => [e2.getCenterHeaderGroups()], (e3) => [...e3].reverse(), { key: !1, debug: () => e2.options.debugAll ?? e2.options.debugHeaders }), getRightFooterGroups: s(() => [e2.getRightHeaderGroups()], (e3) => [...e3].reverse(), { key: !1, debug: () => e2.options.debugAll ?? e2.options.debugHeaders }), getFlatHeaders: s(() => [e2.getHeaderGroups()], (e3) => e3.map((e4) => e4.headers).flat(), { key: !1, debug: () => e2.options.debugAll ?? e2.options.debugHeaders }), getLeftFlatHeaders: s(() => [e2.getLeftHeaderGroups()], (e3) => e3.map((e4) => e4.headers).flat(), { key: !1, debug: () => e2.options.debugAll ?? e2.options.debugHeaders }), getCenterFlatHeaders: s(() => [e2.getCenterHeaderGroups()], (e3) => e3.map((e4) => e4.headers).flat(), { key: !1, debug: () => e2.options.debugAll ?? e2.options.debugHeaders }), getRightFlatHeaders: s(() => [e2.getRightHeaderGroups()], (e3) => e3.map((e4) => e4.headers).flat(), { key: !1, debug: () => e2.options.debugAll ?? e2.options.debugHeaders }), getCenterLeafHeaders: s(() => [e2.getCenterFlatHeaders()], (e3) => e3.filter((e4) => {
        var t2;
        return !((t2 = e4.subHeaders) != null && t2.length);
      }), { key: !1, debug: () => e2.options.debugAll ?? e2.options.debugHeaders }), getLeftLeafHeaders: s(() => [e2.getLeftFlatHeaders()], (e3) => e3.filter((e4) => {
        var t2;
        return !((t2 = e4.subHeaders) != null && t2.length);
      }), { key: !1, debug: () => e2.options.debugAll ?? e2.options.debugHeaders }), getRightLeafHeaders: s(() => [e2.getRightFlatHeaders()], (e3) => e3.filter((e4) => {
        var t2;
        return !((t2 = e4.subHeaders) != null && t2.length);
      }), { key: !1, debug: () => e2.options.debugAll ?? e2.options.debugHeaders }), getLeafHeaders: s(() => [e2.getLeftHeaderGroups(), e2.getCenterHeaderGroups(), e2.getRightHeaderGroups()], (e3, t2, n2) => {
        var o2, l2, i2;
        return [...((o2 = e3[0]) == null ? void 0 : o2.headers) ?? [], ...((l2 = t2[0]) == null ? void 0 : l2.headers) ?? [], ...((i2 = n2[0]) == null ? void 0 : i2.headers) ?? []].map((e4) => e4.getLeafHeaders()).flat();
      }, { key: !1, debug: () => e2.options.debugAll ?? e2.options.debugHeaders }) }) };
      function c(e2, t2, n2, o2) {
        var l2;
        let i2 = 0, r3 = function(e3, t3) {
          t3 === void 0 && (t3 = 1), i2 = Math.max(i2, t3), e3.filter((e4) => e4.getIsVisible()).forEach((e4) => {
            var n3;
            (n3 = e4.columns) != null && n3.length && r3(e4.columns, t3 + 1);
          }, 0);
        };
        r3(e2);
        let a2 = [], s2 = (e3, t3) => {
          let l3 = { depth: t3, id: [o2, `${t3}`].filter(Boolean).join("_"), headers: [] }, i3 = [];
          e3.forEach((e4) => {
            let r4 = [...i3].reverse()[0], a3, s3 = !1;
            if (e4.column.depth === l3.depth && e4.column.parent ? a3 = e4.column.parent : (a3 = e4.column, s3 = !0), r4 && (r4 == null ? void 0 : r4.column) === a3)
              r4.subHeaders.push(e4);
            else {
              let l4 = g(n2, a3, { id: [o2, t3, a3.id, e4 == null ? void 0 : e4.id].filter(Boolean).join("_"), isPlaceholder: s3, placeholderId: s3 ? `${i3.filter((e5) => e5.column === a3).length}` : void 0, depth: t3, index: i3.length });
              l4.subHeaders.push(e4), i3.push(l4);
            }
            l3.headers.push(e4), e4.headerGroup = l3;
          }), a2.push(l3), t3 > 0 && s2(i3, t3 - 1);
        }, u2 = t2.map((e3, t3) => g(n2, e3, { depth: i2, index: t3 }));
        s2(u2, i2 - 1), a2.reverse();
        let d2 = (e3) => e3.filter((e4) => e4.column.getIsVisible()).map((e4) => {
          let t3 = 0, n3 = 0, o3 = [0];
          return e4.subHeaders && e4.subHeaders.length ? (o3 = [], d2(e4.subHeaders).forEach((e5) => {
            let { colSpan: n4, rowSpan: l3 } = e5;
            t3 += n4, o3.push(l3);
          })) : t3 = 1, n3 += Math.min(...o3), e4.colSpan = t3, e4.rowSpan = n3, { colSpan: t3, rowSpan: n3 };
        });
        return d2(((l2 = a2[0]) == null ? void 0 : l2.headers) ?? []), a2;
      }
      let p = { size: 150, minSize: 20, maxSize: Number.MAX_SAFE_INTEGER }, f2 = { getDefaultColumnDef: () => p, getInitialState: (e2) => ({ columnSizing: {}, columnSizingInfo: { startOffset: null, startSize: null, deltaOffset: null, deltaPercentage: null, isResizingColumn: !1, columnSizingStart: [] }, ...e2 }), getDefaultOptions: (e2) => ({ columnResizeMode: "onEnd", onColumnSizingChange: i("columnSizing", e2), onColumnSizingInfoChange: i("columnSizingInfo", e2) }), createColumn: (e2, t2) => ({ getSize: () => {
        let n2 = t2.getState().columnSizing[e2.id];
        return Math.min(Math.max(e2.columnDef.minSize ?? p.minSize, n2 ?? e2.columnDef.size ?? p.size), e2.columnDef.maxSize ?? p.maxSize);
      }, getStart: (n2) => {
        let o2 = n2 ? n2 === "left" ? t2.getLeftVisibleLeafColumns() : t2.getRightVisibleLeafColumns() : t2.getVisibleLeafColumns(), l2 = o2.findIndex((t3) => t3.id === e2.id);
        if (l2 > 0) {
          let e3 = o2[l2 - 1];
          return e3.getStart(n2) + e3.getSize();
        }
        return 0;
      }, resetSize: () => {
        t2.setColumnSizing((t3) => {
          let { [e2.id]: n2, ...o2 } = t3;
          return o2;
        });
      }, getCanResize: () => (e2.columnDef.enableResizing ?? !0) && (t2.options.enableColumnResizing ?? !0), getIsResizing: () => t2.getState().columnSizingInfo.isResizingColumn === e2.id }), createHeader: (e2, t2) => ({ getSize: () => {
        let t3 = 0, n2 = (e3) => {
          e3.subHeaders.length ? e3.subHeaders.forEach(n2) : t3 += e3.column.getSize() ?? 0;
        };
        return n2(e2), t3;
      }, getStart: () => {
        if (e2.index > 0) {
          let t3 = e2.headerGroup.headers[e2.index - 1];
          return t3.getStart() + t3.getSize();
        }
        return 0;
      }, getResizeHandler: () => {
        let n2 = t2.getColumn(e2.column.id), o2 = n2.getCanResize();
        return (l2) => {
          if (!o2 || (l2.persist == null || l2.persist(), w(l2) && l2.touches && l2.touches.length > 1))
            return;
          let i2 = e2.getSize(), r3 = e2 ? e2.getLeafHeaders().map((e3) => [e3.column.id, e3.column.getSize()]) : [[n2.id, n2.getSize()]], a2 = w(l2) ? Math.round(l2.touches[0].clientX) : l2.clientX, s2 = (e3, n3) => {
            if (typeof n3 != "number")
              return;
            let o3 = {};
            t2.setColumnSizingInfo((e4) => {
              let t3 = n3 - ((e4 == null ? void 0 : e4.startOffset) ?? 0), l3 = Math.max(t3 / ((e4 == null ? void 0 : e4.startSize) ?? 0), -0.999999);
              return e4.columnSizingStart.forEach((e5) => {
                let [t4, n4] = e5;
                o3[t4] = Math.round(100 * Math.max(n4 + n4 * l3, 0)) / 100;
              }), { ...e4, deltaOffset: t3, deltaPercentage: l3 };
            }), t2.options.columnResizeMode !== "onChange" && e3 !== "end" || t2.setColumnSizing((e4) => ({ ...e4, ...o3 }));
          }, u2 = (e3) => s2("move", e3), g2 = (e3) => {
            s2("end", e3), t2.setColumnSizingInfo((e4) => ({ ...e4, isResizingColumn: !1, startOffset: null, startSize: null, deltaOffset: null, deltaPercentage: null, columnSizingStart: [] }));
          }, d2 = { moveHandler: (e3) => u2(e3.clientX), upHandler: (e3) => {
            document.removeEventListener("mousemove", d2.moveHandler), document.removeEventListener("mouseup", d2.upHandler), g2(e3.clientX);
          } }, c2 = { moveHandler: (e3) => (e3.cancelable && (e3.preventDefault(), e3.stopPropagation()), u2(e3.touches[0].clientX), !1), upHandler: (e3) => {
            var t3;
            document.removeEventListener("touchmove", c2.moveHandler), document.removeEventListener("touchend", c2.upHandler), e3.cancelable && (e3.preventDefault(), e3.stopPropagation()), g2((t3 = e3.touches[0]) == null ? void 0 : t3.clientX);
          } }, p2 = !!b() && { passive: !1 };
          w(l2) ? (document.addEventListener("touchmove", c2.moveHandler, p2), document.addEventListener("touchend", c2.upHandler, p2)) : (document.addEventListener("mousemove", d2.moveHandler, p2), document.addEventListener("mouseup", d2.upHandler, p2)), t2.setColumnSizingInfo((e3) => ({ ...e3, startOffset: a2, startSize: i2, deltaOffset: 0, deltaPercentage: 0, columnSizingStart: r3, isResizingColumn: n2.id }));
        };
      } }), createTable: (e2) => ({ setColumnSizing: (t2) => e2.options.onColumnSizingChange == null ? void 0 : e2.options.onColumnSizingChange(t2), setColumnSizingInfo: (t2) => e2.options.onColumnSizingInfoChange == null ? void 0 : e2.options.onColumnSizingInfoChange(t2), resetColumnSizing: (t2) => {
        e2.setColumnSizing(t2 ? {} : e2.initialState.columnSizing ?? {});
      }, resetHeaderSizeInfo: (t2) => {
        e2.setColumnSizingInfo(t2 ? { startOffset: null, startSize: null, deltaOffset: null, deltaPercentage: null, isResizingColumn: !1, columnSizingStart: [] } : e2.initialState.columnSizingInfo ?? { startOffset: null, startSize: null, deltaOffset: null, deltaPercentage: null, isResizingColumn: !1, columnSizingStart: [] });
      }, getTotalSize: () => {
        var t2;
        return ((t2 = e2.getHeaderGroups()[0]) == null ? void 0 : t2.headers.reduce((e3, t3) => e3 + t3.getSize(), 0)) ?? 0;
      }, getLeftTotalSize: () => {
        var t2;
        return ((t2 = e2.getLeftHeaderGroups()[0]) == null ? void 0 : t2.headers.reduce((e3, t3) => e3 + t3.getSize(), 0)) ?? 0;
      }, getCenterTotalSize: () => {
        var t2;
        return ((t2 = e2.getCenterHeaderGroups()[0]) == null ? void 0 : t2.headers.reduce((e3, t3) => e3 + t3.getSize(), 0)) ?? 0;
      }, getRightTotalSize: () => {
        var t2;
        return ((t2 = e2.getRightHeaderGroups()[0]) == null ? void 0 : t2.headers.reduce((e3, t3) => e3 + t3.getSize(), 0)) ?? 0;
      } }) }, m = null;
      function b() {
        if (typeof m == "boolean")
          return m;
        let e2 = !1;
        try {
          let t2 = { get passive() {
            return e2 = !0, !1;
          } }, n2 = () => {
          };
          window.addEventListener("test", n2, t2), window.removeEventListener("test", n2);
        } catch {
          e2 = !1;
        }
        return m = e2, m;
      }
      function w(e2) {
        return e2.type === "touchstart";
      }
      let h = { getInitialState: (e2) => ({ expanded: {}, ...e2 }), getDefaultOptions: (e2) => ({ onExpandedChange: i("expanded", e2), paginateExpandedRows: !0 }), createTable: (e2) => {
        let t2 = !1, n2 = !1;
        return { _autoResetExpanded: () => {
          if (t2) {
            if (e2.options.autoResetAll ?? e2.options.autoResetExpanded ?? !e2.options.manualExpanding) {
              if (n2)
                return;
              n2 = !0, e2._queue(() => {
                e2.resetExpanded(), n2 = !1;
              });
            }
          } else
            e2._queue(() => {
              t2 = !0;
            });
        }, setExpanded: (t3) => e2.options.onExpandedChange == null ? void 0 : e2.options.onExpandedChange(t3), toggleAllRowsExpanded: (t3) => {
          t3 ?? !e2.getIsAllRowsExpanded() ? e2.setExpanded(!0) : e2.setExpanded({});
        }, resetExpanded: (t3) => {
          var n3;
          e2.setExpanded(t3 ? {} : ((n3 = e2.initialState) == null ? void 0 : n3.expanded) ?? {});
        }, getCanSomeRowsExpand: () => e2.getRowModel().flatRows.some((e3) => e3.getCanExpand()), getToggleAllRowsExpandedHandler: () => (t3) => {
          t3.persist == null || t3.persist(), e2.toggleAllRowsExpanded();
        }, getIsSomeRowsExpanded: () => {
          let t3 = e2.getState().expanded;
          return t3 === !0 || Object.values(t3).some(Boolean);
        }, getIsAllRowsExpanded: () => {
          let t3 = e2.getState().expanded;
          return typeof t3 == "boolean" ? t3 === !0 : !!Object.keys(t3).length && !e2.getRowModel().flatRows.some((e3) => !e3.getIsExpanded());
        }, getExpandedDepth: () => {
          let t3 = 0;
          return (e2.getState().expanded === !0 ? Object.keys(e2.getRowModel().rowsById) : Object.keys(e2.getState().expanded)).forEach((e3) => {
            let n3 = e3.split(".");
            t3 = Math.max(t3, n3.length);
          }), t3;
        }, getPreExpandedRowModel: () => e2.getSortedRowModel(), getExpandedRowModel: () => (!e2._getExpandedRowModel && e2.options.getExpandedRowModel && (e2._getExpandedRowModel = e2.options.getExpandedRowModel(e2)), e2.options.manualExpanding || !e2._getExpandedRowModel ? e2.getPreExpandedRowModel() : e2._getExpandedRowModel()) };
      }, createRow: (e2, t2) => ({ toggleExpanded: (n2) => {
        t2.setExpanded((o2) => {
          let l2 = o2 === !0 || !(o2 == null || !o2[e2.id]), i2 = {};
          if (o2 === !0 ? Object.keys(t2.getRowModel().rowsById).forEach((e3) => {
            i2[e3] = !0;
          }) : i2 = o2, n2 = n2 ?? !l2, !l2 && n2)
            return { ...i2, [e2.id]: !0 };
          if (l2 && !n2) {
            let { [e2.id]: t3, ...n3 } = i2;
            return n3;
          }
          return o2;
        });
      }, getIsExpanded: () => {
        let n2 = t2.getState().expanded;
        return !!((t2.options.getIsRowExpanded == null ? void 0 : t2.options.getIsRowExpanded(e2)) ?? (n2 === !0 || n2 != null && n2[e2.id]));
      }, getCanExpand: () => {
        var n2;
        return (t2.options.getRowCanExpand == null ? void 0 : t2.options.getRowCanExpand(e2)) ?? ((t2.options.enableExpanding ?? !0) && !((n2 = e2.subRows) == null || !n2.length));
      }, getToggleExpandedHandler: () => {
        let t3 = e2.getCanExpand();
        return () => {
          t3 && e2.toggleExpanded();
        };
      } }) }, S = (e2, t2, n2) => {
        var o2;
        let l2 = n2.toLowerCase();
        return (o2 = e2.getValue(t2)) == null ? void 0 : o2.toLowerCase().includes(l2);
      };
      S.autoRemove = (e2) => _(e2);
      let C = (e2, t2, n2) => {
        var o2;
        return (o2 = e2.getValue(t2)) == null ? void 0 : o2.includes(n2);
      };
      C.autoRemove = (e2) => _(e2);
      let R = (e2, t2, n2) => {
        var o2;
        return ((o2 = e2.getValue(t2)) == null ? void 0 : o2.toLowerCase()) === n2.toLowerCase();
      };
      R.autoRemove = (e2) => _(e2);
      let v = (e2, t2, n2) => {
        var o2;
        return (o2 = e2.getValue(t2)) == null ? void 0 : o2.includes(n2);
      };
      v.autoRemove = (e2) => _(e2) || !(e2 != null && e2.length);
      let F = (e2, t2, n2) => !n2.some((n3) => {
        var o2;
        return !((o2 = e2.getValue(t2)) != null && o2.includes(n3));
      });
      F.autoRemove = (e2) => _(e2) || !(e2 != null && e2.length);
      let M = (e2, t2, n2) => n2.some((n3) => {
        var o2;
        return (o2 = e2.getValue(t2)) == null ? void 0 : o2.includes(n3);
      });
      M.autoRemove = (e2) => _(e2) || !(e2 != null && e2.length);
      let V = (e2, t2, n2) => e2.getValue(t2) === n2;
      V.autoRemove = (e2) => _(e2);
      let y = (e2, t2, n2) => e2.getValue(t2) == n2;
      y.autoRemove = (e2) => _(e2);
      let I = (e2, t2, n2) => {
        let [o2, l2] = n2, i2 = e2.getValue(t2);
        return i2 >= o2 && i2 <= l2;
      };
      I.resolveFilterValue = (e2) => {
        let [t2, n2] = e2, o2 = typeof t2 != "number" ? parseFloat(t2) : t2, l2 = typeof n2 != "number" ? parseFloat(n2) : n2, i2 = t2 === null || Number.isNaN(o2) ? -1 / 0 : o2, r3 = n2 === null || Number.isNaN(l2) ? 1 / 0 : l2;
        if (i2 > r3) {
          let e3 = i2;
          i2 = r3, r3 = e3;
        }
        return [i2, r3];
      }, I.autoRemove = (e2) => _(e2) || _(e2[0]) && _(e2[1]);
      let x = { includesString: S, includesStringSensitive: C, equalsString: R, arrIncludes: v, arrIncludesAll: F, arrIncludesSome: M, equals: V, weakEquals: y, inNumberRange: I };
      function _(e2) {
        return e2 == null || e2 === "";
      }
      let P = { getDefaultColumnDef: () => ({ filterFn: "auto" }), getInitialState: (e2) => ({ columnFilters: [], globalFilter: void 0, ...e2 }), getDefaultOptions: (e2) => ({ onColumnFiltersChange: i("columnFilters", e2), onGlobalFilterChange: i("globalFilter", e2), filterFromLeafRows: !1, globalFilterFn: "auto", getColumnCanGlobalFilter: (t2) => {
        var n2, o2;
        let l2 = (n2 = e2.getCoreRowModel().flatRows[0]) == null || (o2 = n2._getAllCellsByColumnId()[t2.id]) == null ? void 0 : o2.getValue();
        return typeof l2 == "string" || typeof l2 == "number";
      } }), createColumn: (e2, t2) => ({ getAutoFilterFn: () => {
        let n2 = t2.getCoreRowModel().flatRows[0], o2 = n2 == null ? void 0 : n2.getValue(e2.id);
        return typeof o2 == "string" ? x.includesString : typeof o2 == "number" ? x.inNumberRange : typeof o2 == "boolean" || o2 !== null && typeof o2 == "object" ? x.equals : Array.isArray(o2) ? x.arrIncludes : x.weakEquals;
      }, getFilterFn: () => {
        var n2;
        return r2(e2.columnDef.filterFn) ? e2.columnDef.filterFn : e2.columnDef.filterFn === "auto" ? e2.getAutoFilterFn() : ((n2 = t2.options.filterFns) == null ? void 0 : n2[e2.columnDef.filterFn]) ?? x[e2.columnDef.filterFn];
      }, getCanFilter: () => (e2.columnDef.enableColumnFilter ?? !0) && (t2.options.enableColumnFilters ?? !0) && (t2.options.enableFilters ?? !0) && !!e2.accessorFn, getCanGlobalFilter: () => (e2.columnDef.enableGlobalFilter ?? !0) && (t2.options.enableGlobalFilter ?? !0) && (t2.options.enableFilters ?? !0) && ((t2.options.getColumnCanGlobalFilter == null ? void 0 : t2.options.getColumnCanGlobalFilter(e2)) ?? !0) && !!e2.accessorFn, getIsFiltered: () => e2.getFilterIndex() > -1, getFilterValue: () => {
        var n2, o2;
        return (n2 = t2.getState().columnFilters) == null || (o2 = n2.find((t3) => t3.id === e2.id)) == null ? void 0 : o2.value;
      }, getFilterIndex: () => {
        var n2;
        return ((n2 = t2.getState().columnFilters) == null ? void 0 : n2.findIndex((t3) => t3.id === e2.id)) ?? -1;
      }, setFilterValue: (n2) => {
        t2.setColumnFilters((t3) => {
          let o2 = e2.getFilterFn(), i2 = t3 == null ? void 0 : t3.find((t4) => t4.id === e2.id), r3 = l(n2, i2 ? i2.value : void 0);
          if (A(o2, r3, e2))
            return (t3 == null ? void 0 : t3.filter((t4) => t4.id !== e2.id)) ?? [];
          let a2 = { id: e2.id, value: r3 };
          return i2 ? (t3 == null ? void 0 : t3.map((t4) => t4.id === e2.id ? a2 : t4)) ?? [] : t3 != null && t3.length ? [...t3, a2] : [a2];
        });
      }, _getFacetedRowModel: t2.options.getFacetedRowModel && t2.options.getFacetedRowModel(t2, e2.id), getFacetedRowModel: () => e2._getFacetedRowModel ? e2._getFacetedRowModel() : t2.getPreFilteredRowModel(), _getFacetedUniqueValues: t2.options.getFacetedUniqueValues && t2.options.getFacetedUniqueValues(t2, e2.id), getFacetedUniqueValues: () => e2._getFacetedUniqueValues ? e2._getFacetedUniqueValues() : /* @__PURE__ */ new Map(), _getFacetedMinMaxValues: t2.options.getFacetedMinMaxValues && t2.options.getFacetedMinMaxValues(t2, e2.id), getFacetedMinMaxValues: () => {
        if (e2._getFacetedMinMaxValues)
          return e2._getFacetedMinMaxValues();
      } }), createRow: (e2, t2) => ({ columnFilters: {}, columnFiltersMeta: {} }), createTable: (e2) => ({ getGlobalAutoFilterFn: () => x.includesString, getGlobalFilterFn: () => {
        var t2;
        let { globalFilterFn: n2 } = e2.options;
        return r2(n2) ? n2 : n2 === "auto" ? e2.getGlobalAutoFilterFn() : ((t2 = e2.options.filterFns) == null ? void 0 : t2[n2]) ?? x[n2];
      }, setColumnFilters: (t2) => {
        let n2 = e2.getAllLeafColumns();
        e2.options.onColumnFiltersChange == null || e2.options.onColumnFiltersChange((e3) => {
          var o2;
          return (o2 = l(t2, e3)) == null ? void 0 : o2.filter((e4) => {
            let t3 = n2.find((t4) => t4.id === e4.id);
            return !(t3 && A(t3.getFilterFn(), e4.value, t3));
          });
        });
      }, setGlobalFilter: (t2) => {
        e2.options.onGlobalFilterChange == null || e2.options.onGlobalFilterChange(t2);
      }, resetGlobalFilter: (t2) => {
        e2.setGlobalFilter(t2 ? void 0 : e2.initialState.globalFilter);
      }, resetColumnFilters: (t2) => {
        var n2;
        e2.setColumnFilters(t2 ? [] : ((n2 = e2.initialState) == null ? void 0 : n2.columnFilters) ?? []);
      }, getPreFilteredRowModel: () => e2.getCoreRowModel(), getFilteredRowModel: () => (!e2._getFilteredRowModel && e2.options.getFilteredRowModel && (e2._getFilteredRowModel = e2.options.getFilteredRowModel(e2)), e2.options.manualFiltering || !e2._getFilteredRowModel ? e2.getPreFilteredRowModel() : e2._getFilteredRowModel()), _getGlobalFacetedRowModel: e2.options.getFacetedRowModel && e2.options.getFacetedRowModel(e2, "__global__"), getGlobalFacetedRowModel: () => e2.options.manualFiltering || !e2._getGlobalFacetedRowModel ? e2.getPreFilteredRowModel() : e2._getGlobalFacetedRowModel(), _getGlobalFacetedUniqueValues: e2.options.getFacetedUniqueValues && e2.options.getFacetedUniqueValues(e2, "__global__"), getGlobalFacetedUniqueValues: () => e2._getGlobalFacetedUniqueValues ? e2._getGlobalFacetedUniqueValues() : /* @__PURE__ */ new Map(), _getGlobalFacetedMinMaxValues: e2.options.getFacetedMinMaxValues && e2.options.getFacetedMinMaxValues(e2, "__global__"), getGlobalFacetedMinMaxValues: () => {
        if (e2._getGlobalFacetedMinMaxValues)
          return e2._getGlobalFacetedMinMaxValues();
      } }) };
      function A(e2, t2, n2) {
        return !(!e2 || !e2.autoRemove) && e2.autoRemove(t2, n2) || t2 === void 0 || typeof t2 == "string" && !t2;
      }
      let E = { sum: (e2, t2, n2) => n2.reduce((t3, n3) => {
        let o2 = n3.getValue(e2);
        return t3 + (typeof o2 == "number" ? o2 : 0);
      }, 0), min: (e2, t2, n2) => {
        let o2;
        return n2.forEach((t3) => {
          let n3 = t3.getValue(e2);
          n3 != null && (o2 > n3 || o2 === void 0 && n3 >= n3) && (o2 = n3);
        }), o2;
      }, max: (e2, t2, n2) => {
        let o2;
        return n2.forEach((t3) => {
          let n3 = t3.getValue(e2);
          n3 != null && (o2 < n3 || o2 === void 0 && n3 >= n3) && (o2 = n3);
        }), o2;
      }, extent: (e2, t2, n2) => {
        let o2, l2;
        return n2.forEach((t3) => {
          let n3 = t3.getValue(e2);
          n3 != null && (o2 === void 0 ? n3 >= n3 && (o2 = l2 = n3) : (o2 > n3 && (o2 = n3), l2 < n3 && (l2 = n3)));
        }), [o2, l2];
      }, mean: (e2, t2) => {
        let n2 = 0, o2 = 0;
        if (t2.forEach((t3) => {
          let l2 = t3.getValue(e2);
          l2 != null && (l2 = +l2) >= l2 && (++n2, o2 += l2);
        }), n2)
          return o2 / n2;
      }, median: (e2, t2) => {
        if (!t2.length)
          return;
        let n2 = 0, o2 = 0;
        return t2.forEach((t3) => {
          let l2 = t3.getValue(e2);
          typeof l2 == "number" && (n2 = Math.min(n2, l2), o2 = Math.max(o2, l2));
        }), (n2 + o2) / 2;
      }, unique: (e2, t2) => Array.from(new Set(t2.map((t3) => t3.getValue(e2))).values()), uniqueCount: (e2, t2) => new Set(t2.map((t3) => t3.getValue(e2))).size, count: (e2, t2) => t2.length }, G = { getDefaultColumnDef: () => ({ aggregatedCell: (e2) => {
        var t2;
        return ((t2 = e2.getValue()) == null || t2.toString == null ? void 0 : t2.toString()) ?? null;
      }, aggregationFn: "auto" }), getInitialState: (e2) => ({ grouping: [], ...e2 }), getDefaultOptions: (e2) => ({ onGroupingChange: i("grouping", e2), groupedColumnMode: "reorder" }), createColumn: (e2, t2) => ({ toggleGrouping: () => {
        t2.setGrouping((t3) => t3 != null && t3.includes(e2.id) ? t3.filter((t4) => t4 !== e2.id) : [...t3 ?? [], e2.id]);
      }, getCanGroup: () => e2.columnDef.enableGrouping ?? !0 ?? t2.options.enableGrouping ?? !0 ?? !!e2.accessorFn, getIsGrouped: () => {
        var n2;
        return (n2 = t2.getState().grouping) == null ? void 0 : n2.includes(e2.id);
      }, getGroupedIndex: () => {
        var n2;
        return (n2 = t2.getState().grouping) == null ? void 0 : n2.indexOf(e2.id);
      }, getToggleGroupingHandler: () => {
        let t3 = e2.getCanGroup();
        return () => {
          t3 && e2.toggleGrouping();
        };
      }, getAutoAggregationFn: () => {
        let n2 = t2.getCoreRowModel().flatRows[0], o2 = n2 == null ? void 0 : n2.getValue(e2.id);
        return typeof o2 == "number" ? E.sum : Object.prototype.toString.call(o2) === "[object Date]" ? E.extent : void 0;
      }, getAggregationFn: () => {
        var n2;
        if (!e2)
          throw new Error();
        return r2(e2.columnDef.aggregationFn) ? e2.columnDef.aggregationFn : e2.columnDef.aggregationFn === "auto" ? e2.getAutoAggregationFn() : ((n2 = t2.options.aggregationFns) == null ? void 0 : n2[e2.columnDef.aggregationFn]) ?? E[e2.columnDef.aggregationFn];
      } }), createTable: (e2) => ({ setGrouping: (t2) => e2.options.onGroupingChange == null ? void 0 : e2.options.onGroupingChange(t2), resetGrouping: (t2) => {
        var n2;
        e2.setGrouping(t2 ? [] : ((n2 = e2.initialState) == null ? void 0 : n2.grouping) ?? []);
      }, getPreGroupedRowModel: () => e2.getFilteredRowModel(), getGroupedRowModel: () => (!e2._getGroupedRowModel && e2.options.getGroupedRowModel && (e2._getGroupedRowModel = e2.options.getGroupedRowModel(e2)), e2.options.manualGrouping || !e2._getGroupedRowModel ? e2.getPreGroupedRowModel() : e2._getGroupedRowModel()) }), createRow: (e2) => ({ getIsGrouped: () => !!e2.groupingColumnId, _groupingValuesCache: {} }), createCell: (e2, t2, n2, o2) => ({ getIsGrouped: () => t2.getIsGrouped() && t2.id === n2.groupingColumnId, getIsPlaceholder: () => !e2.getIsGrouped() && t2.getIsGrouped(), getIsAggregated: () => {
        var t3;
        return !e2.getIsGrouped() && !e2.getIsPlaceholder() && !((t3 = n2.subRows) == null || !t3.length);
      } }) };
      function H(e2, t2, n2) {
        if (t2 == null || !t2.length || !n2)
          return e2;
        let o2 = e2.filter((e3) => !t2.includes(e3.id));
        return n2 === "remove" ? o2 : [...t2.map((t3) => e2.find((e3) => e3.id === t3)).filter(Boolean), ...o2];
      }
      let z = { getInitialState: (e2) => ({ columnOrder: [], ...e2 }), getDefaultOptions: (e2) => ({ onColumnOrderChange: i("columnOrder", e2) }), createTable: (e2) => ({ setColumnOrder: (t2) => e2.options.onColumnOrderChange == null ? void 0 : e2.options.onColumnOrderChange(t2), resetColumnOrder: (t2) => {
        e2.setColumnOrder(t2 ? [] : e2.initialState.columnOrder ?? []);
      }, _getOrderColumnsFn: s(() => [e2.getState().columnOrder, e2.getState().grouping, e2.options.groupedColumnMode], (e3, t2, n2) => (o2) => {
        let l2 = [];
        if (e3 != null && e3.length) {
          let t3 = [...e3], n3 = [...o2];
          for (; n3.length && t3.length; ) {
            let e4 = t3.shift(), o3 = n3.findIndex((t4) => t4.id === e4);
            o3 > -1 && l2.push(n3.splice(o3, 1)[0]);
          }
          l2 = [...l2, ...n3];
        } else
          l2 = o2;
        return H(l2, t2, n2);
      }, { key: !1 }) }) }, L = { getInitialState: (e2) => ({ ...e2, pagination: { pageIndex: 0, pageSize: 10, ...e2 == null ? void 0 : e2.pagination } }), getDefaultOptions: (e2) => ({ onPaginationChange: i("pagination", e2) }), createTable: (e2) => {
        let t2 = !1, n2 = !1;
        return { _autoResetPageIndex: () => {
          if (t2) {
            if (e2.options.autoResetAll ?? e2.options.autoResetPageIndex ?? !e2.options.manualPagination) {
              if (n2)
                return;
              n2 = !0, e2._queue(() => {
                e2.resetPageIndex(), n2 = !1;
              });
            }
          } else
            e2._queue(() => {
              t2 = !0;
            });
        }, setPagination: (t3) => e2.options.onPaginationChange == null ? void 0 : e2.options.onPaginationChange((e3) => l(t3, e3)), resetPagination: (t3) => {
          e2.setPagination(t3 ? { pageIndex: 0, pageSize: 10 } : e2.initialState.pagination ?? { pageIndex: 0, pageSize: 10 });
        }, setPageIndex: (t3) => {
          e2.setPagination((n3) => {
            let o2 = l(t3, n3.pageIndex), i2 = e2.options.pageCount === void 0 || e2.options.pageCount === -1 ? Number.MAX_SAFE_INTEGER : e2.options.pageCount - 1;
            return o2 = Math.min(Math.max(0, o2), i2), { ...n3, pageIndex: o2 };
          });
        }, resetPageIndex: (t3) => {
          var n3, o2;
          e2.setPageIndex(t3 ? 0 : ((n3 = e2.initialState) == null || (o2 = n3.pagination) == null ? void 0 : o2.pageIndex) ?? 0);
        }, resetPageSize: (t3) => {
          var n3, o2;
          e2.setPageSize(t3 ? 10 : ((n3 = e2.initialState) == null || (o2 = n3.pagination) == null ? void 0 : o2.pageSize) ?? 10);
        }, setPageSize: (t3) => {
          e2.setPagination((e3) => {
            let n3 = Math.max(1, l(t3, e3.pageSize)), o2 = e3.pageSize * e3.pageIndex, i2 = Math.floor(o2 / n3);
            return { ...e3, pageIndex: i2, pageSize: n3 };
          });
        }, setPageCount: (t3) => e2.setPagination((n3) => {
          let o2 = l(t3, e2.options.pageCount ?? -1);
          return typeof o2 == "number" && (o2 = Math.max(-1, o2)), { ...n3, pageCount: o2 };
        }), getPageOptions: s(() => [e2.getPageCount()], (e3) => {
          let t3 = [];
          return e3 && e3 > 0 && (t3 = [...new Array(e3)].fill(null).map((e4, t4) => t4)), t3;
        }, { key: !1, debug: () => e2.options.debugAll ?? e2.options.debugTable }), getCanPreviousPage: () => e2.getState().pagination.pageIndex > 0, getCanNextPage: () => {
          let { pageIndex: t3 } = e2.getState().pagination, n3 = e2.getPageCount();
          return n3 === -1 || n3 !== 0 && t3 < n3 - 1;
        }, previousPage: () => e2.setPageIndex((e3) => e3 - 1), nextPage: () => e2.setPageIndex((e3) => e3 + 1), getPrePaginationRowModel: () => e2.getExpandedRowModel(), getPaginationRowModel: () => (!e2._getPaginationRowModel && e2.options.getPaginationRowModel && (e2._getPaginationRowModel = e2.options.getPaginationRowModel(e2)), e2.options.manualPagination || !e2._getPaginationRowModel ? e2.getPrePaginationRowModel() : e2._getPaginationRowModel()), getPageCount: () => e2.options.pageCount ?? Math.ceil(e2.getPrePaginationRowModel().rows.length / e2.getState().pagination.pageSize) };
      } }, O = { getInitialState: (e2) => ({ columnPinning: { left: [], right: [] }, ...e2 }), getDefaultOptions: (e2) => ({ onColumnPinningChange: i("columnPinning", e2) }), createColumn: (e2, t2) => ({ pin: (n2) => {
        let o2 = e2.getLeafColumns().map((e3) => e3.id).filter(Boolean);
        t2.setColumnPinning((e3) => n2 === "right" ? { left: ((e3 == null ? void 0 : e3.left) ?? []).filter((e4) => !(o2 != null && o2.includes(e4))), right: [...((e3 == null ? void 0 : e3.right) ?? []).filter((e4) => !(o2 != null && o2.includes(e4))), ...o2] } : n2 === "left" ? { left: [...((e3 == null ? void 0 : e3.left) ?? []).filter((e4) => !(o2 != null && o2.includes(e4))), ...o2], right: ((e3 == null ? void 0 : e3.right) ?? []).filter((e4) => !(o2 != null && o2.includes(e4))) } : { left: ((e3 == null ? void 0 : e3.left) ?? []).filter((e4) => !(o2 != null && o2.includes(e4))), right: ((e3 == null ? void 0 : e3.right) ?? []).filter((e4) => !(o2 != null && o2.includes(e4))) });
      }, getCanPin: () => e2.getLeafColumns().some((e3) => (e3.columnDef.enablePinning ?? !0) && (t2.options.enablePinning ?? !0)), getIsPinned: () => {
        let n2 = e2.getLeafColumns().map((e3) => e3.id), { left: o2, right: l2 } = t2.getState().columnPinning, i2 = n2.some((e3) => o2 == null ? void 0 : o2.includes(e3)), r3 = n2.some((e3) => l2 == null ? void 0 : l2.includes(e3));
        return i2 ? "left" : !!r3 && "right";
      }, getPinnedIndex: () => {
        var n2, o2;
        let l2 = e2.getIsPinned();
        return l2 ? ((n2 = t2.getState().columnPinning) == null || (o2 = n2[l2]) == null ? void 0 : o2.indexOf(e2.id)) ?? -1 : 0;
      } }), createRow: (e2, t2) => ({ getCenterVisibleCells: s(() => [e2._getAllVisibleCells(), t2.getState().columnPinning.left, t2.getState().columnPinning.right], (e3, t3, n2) => {
        let o2 = [...t3 ?? [], ...n2 ?? []];
        return e3.filter((e4) => !o2.includes(e4.column.id));
      }, { key: "row.getCenterVisibleCells", debug: () => t2.options.debugAll ?? t2.options.debugRows }), getLeftVisibleCells: s(() => [e2._getAllVisibleCells(), t2.getState().columnPinning.left, ,], (e3, t3) => (t3 ?? []).map((t4) => e3.find((e4) => e4.column.id === t4)).filter(Boolean).map((e4) => ({ ...e4, position: "left" })), { key: "row.getLeftVisibleCells", debug: () => t2.options.debugAll ?? t2.options.debugRows }), getRightVisibleCells: s(() => [e2._getAllVisibleCells(), t2.getState().columnPinning.right], (e3, t3) => (t3 ?? []).map((t4) => e3.find((e4) => e4.column.id === t4)).filter(Boolean).map((e4) => ({ ...e4, position: "right" })), { key: "row.getRightVisibleCells", debug: () => t2.options.debugAll ?? t2.options.debugRows }) }), createTable: (e2) => ({ setColumnPinning: (t2) => e2.options.onColumnPinningChange == null ? void 0 : e2.options.onColumnPinningChange(t2), resetColumnPinning: (t2) => {
        var n2;
        return e2.setColumnPinning(t2 ? { left: [], right: [] } : ((n2 = e2.initialState) == null ? void 0 : n2.columnPinning) ?? { left: [], right: [] });
      }, getIsSomeColumnsPinned: (t2) => {
        var n2;
        let o2 = e2.getState().columnPinning;
        var l2, i2;
        return Boolean(t2 ? (n2 = o2[t2]) == null ? void 0 : n2.length : ((l2 = o2.left) == null ? void 0 : l2.length) || ((i2 = o2.right) == null ? void 0 : i2.length));
      }, getLeftLeafColumns: s(() => [e2.getAllLeafColumns(), e2.getState().columnPinning.left], (e3, t2) => (t2 ?? []).map((t3) => e3.find((e4) => e4.id === t3)).filter(Boolean), { key: !1, debug: () => e2.options.debugAll ?? e2.options.debugColumns }), getRightLeafColumns: s(() => [e2.getAllLeafColumns(), e2.getState().columnPinning.right], (e3, t2) => (t2 ?? []).map((t3) => e3.find((e4) => e4.id === t3)).filter(Boolean), { key: !1, debug: () => e2.options.debugAll ?? e2.options.debugColumns }), getCenterLeafColumns: s(() => [e2.getAllLeafColumns(), e2.getState().columnPinning.left, e2.getState().columnPinning.right], (e3, t2, n2) => {
        let o2 = [...t2 ?? [], ...n2 ?? []];
        return e3.filter((e4) => !o2.includes(e4.id));
      }, { key: !1, debug: () => e2.options.debugAll ?? e2.options.debugColumns }) }) }, D = { getInitialState: (e2) => ({ rowSelection: {}, ...e2 }), getDefaultOptions: (e2) => ({ onRowSelectionChange: i("rowSelection", e2), enableRowSelection: !0, enableMultiRowSelection: !0, enableSubRowSelection: !0 }), createTable: (e2) => ({ setRowSelection: (t2) => e2.options.onRowSelectionChange == null ? void 0 : e2.options.onRowSelectionChange(t2), resetRowSelection: (t2) => e2.setRowSelection(t2 ? {} : e2.initialState.rowSelection ?? {}), toggleAllRowsSelected: (t2) => {
        e2.setRowSelection((n2) => {
          t2 = t2 !== void 0 ? t2 : !e2.getIsAllRowsSelected();
          let o2 = { ...n2 }, l2 = e2.getPreGroupedRowModel().flatRows;
          return t2 ? l2.forEach((e3) => {
            e3.getCanSelect() && (o2[e3.id] = !0);
          }) : l2.forEach((e3) => {
            delete o2[e3.id];
          }), o2;
        });
      }, toggleAllPageRowsSelected: (t2) => e2.setRowSelection((n2) => {
        let o2 = t2 !== void 0 ? t2 : !e2.getIsAllPageRowsSelected(), l2 = { ...n2 };
        return e2.getRowModel().rows.forEach((t3) => {
          k(l2, t3.id, o2, e2);
        }), l2;
      }), getPreSelectedRowModel: () => e2.getCoreRowModel(), getSelectedRowModel: s(() => [e2.getState().rowSelection, e2.getCoreRowModel()], (t2, n2) => Object.keys(t2).length ? T(e2, n2) : { rows: [], flatRows: [], rowsById: {} }, { key: !1, debug: () => e2.options.debugAll ?? e2.options.debugTable }), getFilteredSelectedRowModel: s(() => [e2.getState().rowSelection, e2.getFilteredRowModel()], (t2, n2) => Object.keys(t2).length ? T(e2, n2) : { rows: [], flatRows: [], rowsById: {} }, { key: "getFilteredSelectedRowModel", debug: () => e2.options.debugAll ?? e2.options.debugTable }), getGroupedSelectedRowModel: s(() => [e2.getState().rowSelection, e2.getSortedRowModel()], (t2, n2) => Object.keys(t2).length ? T(e2, n2) : { rows: [], flatRows: [], rowsById: {} }, { key: "getGroupedSelectedRowModel", debug: () => e2.options.debugAll ?? e2.options.debugTable }), getIsAllRowsSelected: () => {
        let t2 = e2.getFilteredRowModel().flatRows, { rowSelection: n2 } = e2.getState(), o2 = Boolean(t2.length && Object.keys(n2).length);
        return o2 && t2.some((e3) => e3.getCanSelect() && !n2[e3.id]) && (o2 = !1), o2;
      }, getIsAllPageRowsSelected: () => {
        let t2 = e2.getPaginationRowModel().flatRows, { rowSelection: n2 } = e2.getState(), o2 = !!t2.length;
        return o2 && t2.some((e3) => !n2[e3.id]) && (o2 = !1), o2;
      }, getIsSomeRowsSelected: () => {
        let t2 = Object.keys(e2.getState().rowSelection ?? {}).length;
        return t2 > 0 && t2 < e2.getFilteredRowModel().flatRows.length;
      }, getIsSomePageRowsSelected: () => {
        let t2 = e2.getPaginationRowModel().flatRows;
        return !e2.getIsAllPageRowsSelected() && t2.some((e3) => e3.getIsSelected() || e3.getIsSomeSelected());
      }, getToggleAllRowsSelectedHandler: () => (t2) => {
        e2.toggleAllRowsSelected(t2.target.checked);
      }, getToggleAllPageRowsSelectedHandler: () => (t2) => {
        e2.toggleAllPageRowsSelected(t2.target.checked);
      } }), createRow: (e2, t2) => ({ toggleSelected: (n2) => {
        let o2 = e2.getIsSelected();
        t2.setRowSelection((l2) => {
          if (o2 === (n2 = n2 !== void 0 ? n2 : !o2))
            return l2;
          let i2 = { ...l2 };
          return k(i2, e2.id, n2, t2), i2;
        });
      }, getIsSelected: () => {
        let { rowSelection: n2 } = t2.getState();
        return B(e2, n2);
      }, getIsSomeSelected: () => {
        let { rowSelection: n2 } = t2.getState();
        return q(e2, n2) === "some";
      }, getIsAllSubRowsSelected: () => {
        let { rowSelection: n2 } = t2.getState();
        return q(e2, n2) === "all";
      }, getCanSelect: () => typeof t2.options.enableRowSelection == "function" ? t2.options.enableRowSelection(e2) : t2.options.enableRowSelection ?? !0, getCanSelectSubRows: () => typeof t2.options.enableSubRowSelection == "function" ? t2.options.enableSubRowSelection(e2) : t2.options.enableSubRowSelection ?? !0, getCanMultiSelect: () => typeof t2.options.enableMultiRowSelection == "function" ? t2.options.enableMultiRowSelection(e2) : t2.options.enableMultiRowSelection ?? !0, getToggleSelectedHandler: () => {
        let t3 = e2.getCanSelect();
        return (n2) => {
          var o2;
          t3 && e2.toggleSelected((o2 = n2.target) == null ? void 0 : o2.checked);
        };
      } }) }, k = (e2, t2, n2, o2) => {
        var l2;
        let i2 = o2.getRow(t2);
        n2 ? (i2.getCanMultiSelect() || Object.keys(e2).forEach((t3) => delete e2[t3]), i2.getCanSelect() && (e2[t2] = !0)) : delete e2[t2], (l2 = i2.subRows) != null && l2.length && i2.getCanSelectSubRows() && i2.subRows.forEach((t3) => k(e2, t3.id, n2, o2));
      };
      function T(e2, t2) {
        let n2 = e2.getState().rowSelection, o2 = [], l2 = {}, i2 = function(e3, t3) {
          return e3.map((e4) => {
            var t4;
            let r3 = B(e4, n2);
            if (r3 && (o2.push(e4), l2[e4.id] = e4), (t4 = e4.subRows) != null && t4.length && (e4 = { ...e4, subRows: i2(e4.subRows) }), r3)
              return e4;
          }).filter(Boolean);
        };
        return { rows: i2(t2.rows), flatRows: o2, rowsById: l2 };
      }
      function B(e2, t2) {
        return t2[e2.id] ?? !1;
      }
      function q(e2, t2, n2) {
        if (e2.subRows && e2.subRows.length) {
          let n3 = !0, o2 = !1;
          return e2.subRows.forEach((e3) => {
            o2 && !n3 || (B(e3, t2) ? o2 = !0 : n3 = !1);
          }), n3 ? "all" : !!o2 && "some";
        }
        return !1;
      }
      let j = /([0-9]+)/gm;
      function N(e2, t2) {
        return e2 === t2 ? 0 : e2 > t2 ? 1 : -1;
      }
      function U(e2) {
        return typeof e2 == "number" ? isNaN(e2) || e2 === 1 / 0 || e2 === -1 / 0 ? "" : String(e2) : typeof e2 == "string" ? e2 : "";
      }
      function $(e2, t2) {
        let n2 = e2.split(j).filter(Boolean), o2 = t2.split(j).filter(Boolean);
        for (; n2.length && o2.length; ) {
          let e3 = n2.shift(), t3 = o2.shift(), l2 = parseInt(e3, 10), i2 = parseInt(t3, 10), r3 = [l2, i2].sort();
          if (isNaN(r3[0])) {
            if (e3 > t3)
              return 1;
            if (t3 > e3)
              return -1;
          } else {
            if (isNaN(r3[1]))
              return isNaN(l2) ? -1 : 1;
            if (l2 > i2)
              return 1;
            if (i2 > l2)
              return -1;
          }
        }
        return n2.length - o2.length;
      }
      let X = { alphanumeric: (e2, t2, n2) => $(U(e2.getValue(n2)).toLowerCase(), U(t2.getValue(n2)).toLowerCase()), alphanumericCaseSensitive: (e2, t2, n2) => $(U(e2.getValue(n2)), U(t2.getValue(n2))), text: (e2, t2, n2) => N(U(e2.getValue(n2)).toLowerCase(), U(t2.getValue(n2)).toLowerCase()), textCaseSensitive: (e2, t2, n2) => N(U(e2.getValue(n2)), U(t2.getValue(n2))), datetime: (e2, t2, n2) => {
        let o2 = e2.getValue(n2), l2 = t2.getValue(n2);
        return o2 > l2 ? 1 : o2 < l2 ? -1 : 0;
      }, basic: (e2, t2, n2) => N(e2.getValue(n2), t2.getValue(n2)) }, K = { getInitialState: (e2) => ({ sorting: [], ...e2 }), getDefaultColumnDef: () => ({ sortingFn: "auto" }), getDefaultOptions: (e2) => ({ onSortingChange: i("sorting", e2), isMultiSortEvent: (e3) => e3.shiftKey }), createColumn: (e2, t2) => ({ getAutoSortingFn: () => {
        let n2 = t2.getFilteredRowModel().flatRows.slice(10), o2 = !1;
        for (let t3 of n2) {
          let n3 = t3 == null ? void 0 : t3.getValue(e2.id);
          if (Object.prototype.toString.call(n3) === "[object Date]")
            return X.datetime;
          if (typeof n3 == "string" && (o2 = !0, n3.split(j).length > 1))
            return X.alphanumeric;
        }
        return o2 ? X.text : X.basic;
      }, getAutoSortDir: () => {
        let n2 = t2.getFilteredRowModel().flatRows[0];
        return typeof (n2 == null ? void 0 : n2.getValue(e2.id)) == "string" ? "asc" : "desc";
      }, getSortingFn: () => {
        var n2;
        if (!e2)
          throw new Error();
        return r2(e2.columnDef.sortingFn) ? e2.columnDef.sortingFn : e2.columnDef.sortingFn === "auto" ? e2.getAutoSortingFn() : ((n2 = t2.options.sortingFns) == null ? void 0 : n2[e2.columnDef.sortingFn]) ?? X[e2.columnDef.sortingFn];
      }, toggleSorting: (n2, o2) => {
        let l2 = e2.getNextSortingOrder(), i2 = n2 != null;
        t2.setSorting((r3) => {
          let a2 = r3 == null ? void 0 : r3.find((t3) => t3.id === e2.id), s2 = r3 == null ? void 0 : r3.findIndex((t3) => t3.id === e2.id), u2, g2 = [], d2 = i2 ? n2 : l2 === "desc";
          return u2 = r3 != null && r3.length && e2.getCanMultiSort() && o2 ? a2 ? "toggle" : "add" : r3 != null && r3.length && s2 !== r3.length - 1 ? "replace" : a2 ? "toggle" : "replace", u2 === "toggle" && (i2 || l2 || (u2 = "remove")), u2 === "add" ? (g2 = [...r3, { id: e2.id, desc: d2 }], g2.splice(0, g2.length - (t2.options.maxMultiSortColCount ?? Number.MAX_SAFE_INTEGER))) : g2 = u2 === "toggle" ? r3.map((t3) => t3.id === e2.id ? { ...t3, desc: d2 } : t3) : u2 === "remove" ? r3.filter((t3) => t3.id !== e2.id) : [{ id: e2.id, desc: d2 }], g2;
        });
      }, getFirstSortDir: () => e2.columnDef.sortDescFirst ?? t2.options.sortDescFirst ?? e2.getAutoSortDir() === "desc" ? "desc" : "asc", getNextSortingOrder: (n2) => {
        let o2 = e2.getFirstSortDir(), l2 = e2.getIsSorted();
        return l2 ? !(l2 !== o2 && (t2.options.enableSortingRemoval ?? 1) && (!n2 || (t2.options.enableMultiRemove ?? 1))) && (l2 === "desc" ? "asc" : "desc") : o2;
      }, getCanSort: () => (e2.columnDef.enableSorting ?? !0) && (t2.options.enableSorting ?? !0) && !!e2.accessorFn, getCanMultiSort: () => e2.columnDef.enableMultiSort ?? t2.options.enableMultiSort ?? !!e2.accessorFn, getIsSorted: () => {
        var n2;
        let o2 = (n2 = t2.getState().sorting) == null ? void 0 : n2.find((t3) => t3.id === e2.id);
        return !!o2 && (o2.desc ? "desc" : "asc");
      }, getSortIndex: () => {
        var n2;
        return ((n2 = t2.getState().sorting) == null ? void 0 : n2.findIndex((t3) => t3.id === e2.id)) ?? -1;
      }, clearSorting: () => {
        t2.setSorting((t3) => t3 != null && t3.length ? t3.filter((t4) => t4.id !== e2.id) : []);
      }, getToggleSortingHandler: () => {
        let n2 = e2.getCanSort();
        return (o2) => {
          n2 && (o2.persist == null || o2.persist(), e2.toggleSorting == null || e2.toggleSorting(void 0, !!e2.getCanMultiSort() && (t2.options.isMultiSortEvent == null ? void 0 : t2.options.isMultiSortEvent(o2))));
        };
      } }), createTable: (e2) => ({ setSorting: (t2) => e2.options.onSortingChange == null ? void 0 : e2.options.onSortingChange(t2), resetSorting: (t2) => {
        var n2;
        e2.setSorting(t2 ? [] : ((n2 = e2.initialState) == null ? void 0 : n2.sorting) ?? []);
      }, getPreSortedRowModel: () => e2.getGroupedRowModel(), getSortedRowModel: () => (!e2._getSortedRowModel && e2.options.getSortedRowModel && (e2._getSortedRowModel = e2.options.getSortedRowModel(e2)), e2.options.manualSorting || !e2._getSortedRowModel ? e2.getPreSortedRowModel() : e2._getSortedRowModel()) }) }, J = { getInitialState: (e2) => ({ columnVisibility: {}, ...e2 }), getDefaultOptions: (e2) => ({ onColumnVisibilityChange: i("columnVisibility", e2) }), createColumn: (e2, t2) => ({ toggleVisibility: (n2) => {
        e2.getCanHide() && t2.setColumnVisibility((t3) => ({ ...t3, [e2.id]: n2 ?? !e2.getIsVisible() }));
      }, getIsVisible: () => {
        var n2;
        return ((n2 = t2.getState().columnVisibility) == null ? void 0 : n2[e2.id]) ?? !0;
      }, getCanHide: () => (e2.columnDef.enableHiding ?? !0) && (t2.options.enableHiding ?? !0), getToggleVisibilityHandler: () => (t3) => {
        e2.toggleVisibility == null || e2.toggleVisibility(t3.target.checked);
      } }), createRow: (e2, t2) => ({ _getAllVisibleCells: s(() => [e2.getAllCells(), t2.getState().columnVisibility], (e3) => e3.filter((e4) => e4.column.getIsVisible()), { key: "row._getAllVisibleCells", debug: () => t2.options.debugAll ?? t2.options.debugRows }), getVisibleCells: s(() => [e2.getLeftVisibleCells(), e2.getCenterVisibleCells(), e2.getRightVisibleCells()], (e3, t3, n2) => [...e3, ...t3, ...n2], { key: !1, debug: () => t2.options.debugAll ?? t2.options.debugRows }) }), createTable: (e2) => {
        let t2 = (t3, n2) => s(() => [n2(), n2().filter((e3) => e3.getIsVisible()).map((e3) => e3.id).join("_")], (e3) => e3.filter((e4) => e4.getIsVisible == null ? void 0 : e4.getIsVisible()), { key: t3, debug: () => e2.options.debugAll ?? e2.options.debugColumns });
        return { getVisibleFlatColumns: t2("getVisibleFlatColumns", () => e2.getAllFlatColumns()), getVisibleLeafColumns: t2("getVisibleLeafColumns", () => e2.getAllLeafColumns()), getLeftVisibleLeafColumns: t2("getLeftVisibleLeafColumns", () => e2.getLeftLeafColumns()), getRightVisibleLeafColumns: t2("getRightVisibleLeafColumns", () => e2.getRightLeafColumns()), getCenterVisibleLeafColumns: t2("getCenterVisibleLeafColumns", () => e2.getCenterLeafColumns()), setColumnVisibility: (t3) => e2.options.onColumnVisibilityChange == null ? void 0 : e2.options.onColumnVisibilityChange(t3), resetColumnVisibility: (t3) => {
          e2.setColumnVisibility(t3 ? {} : e2.initialState.columnVisibility ?? {});
        }, toggleAllColumnsVisible: (t3) => {
          t3 = t3 ?? !e2.getIsAllColumnsVisible(), e2.setColumnVisibility(e2.getAllLeafColumns().reduce((e3, n2) => ({ ...e3, [n2.id]: t3 || !(n2.getCanHide != null && n2.getCanHide()) }), {}));
        }, getIsAllColumnsVisible: () => !e2.getAllLeafColumns().some((e3) => !(e3.getIsVisible != null && e3.getIsVisible())), getIsSomeColumnsVisible: () => e2.getAllLeafColumns().some((e3) => e3.getIsVisible == null ? void 0 : e3.getIsVisible()), getToggleAllColumnsVisibilityHandler: () => (t3) => {
          var n2;
          e2.toggleAllColumnsVisible((n2 = t3.target) == null ? void 0 : n2.checked);
        } };
      } }, Q = [d, J, z, O, P, K, G, h, L, D, f2];
      function W(e2) {
        (e2.debugAll || e2.debugTable) && console.info("Creating Table Instance...");
        let t2 = { _features: Q }, n2 = t2._features.reduce((e3, n3) => Object.assign(e3, n3.getDefaultOptions == null ? void 0 : n3.getDefaultOptions(t2)), {}), o2 = { ...e2.initialState ?? {} };
        t2._features.forEach((e3) => {
          o2 = (e3.getInitialState == null ? void 0 : e3.getInitialState(o2)) ?? o2;
        });
        let i2 = [], r3 = !1, a2 = { _features: Q, options: { ...n2, ...e2 }, initialState: o2, _queue: (e3) => {
          i2.push(e3), r3 || (r3 = !0, Promise.resolve().then(() => {
            for (; i2.length; )
              i2.shift()();
            r3 = !1;
          }).catch((e4) => setTimeout(() => {
            throw e4;
          })));
        }, reset: () => {
          t2.setState(t2.initialState);
        }, setOptions: (e3) => {
          let o3 = l(e3, t2.options);
          t2.options = ((e4) => t2.options.mergeOptions ? t2.options.mergeOptions(n2, e4) : { ...n2, ...e4 })(o3);
        }, getState: () => t2.options.state, setState: (e3) => {
          t2.options.onStateChange == null || t2.options.onStateChange(e3);
        }, _getRowId: (e3, n3, o3) => (t2.options.getRowId == null ? void 0 : t2.options.getRowId(e3, n3, o3)) ?? `${o3 ? [o3.id, n3].join(".") : n3}`, getCoreRowModel: () => (t2._getCoreRowModel || (t2._getCoreRowModel = t2.options.getCoreRowModel(t2)), t2._getCoreRowModel()), getRowModel: () => t2.getPaginationRowModel(), getRow: (e3) => {
          let n3 = t2.getRowModel().rowsById[e3];
          if (!n3)
            throw new Error();
          return n3;
        }, _getDefaultColumnDef: s(() => [t2.options.defaultColumn], (e3) => (e3 = e3 ?? {}, { header: (e4) => {
          let t3 = e4.header.column.columnDef;
          return t3.accessorKey ? t3.accessorKey : t3.accessorFn ? t3.id : null;
        }, cell: (e4) => {
          var t3;
          return ((t3 = e4.renderValue()) == null || t3.toString == null ? void 0 : t3.toString()) ?? null;
        }, ...t2._features.reduce((e4, t3) => Object.assign(e4, t3.getDefaultColumnDef == null ? void 0 : t3.getDefaultColumnDef()), {}), ...e3 }), { debug: () => t2.options.debugAll ?? t2.options.debugColumns, key: !1 }), _getColumnDefs: () => t2.options.columns, getAllColumns: s(() => [t2._getColumnDefs()], (e3) => {
          let n3 = function(e4, o3, l2) {
            return l2 === void 0 && (l2 = 0), e4.map((e5) => {
              let i3 = u(t2, e5, l2, o3), r4 = e5;
              return i3.columns = r4.columns ? n3(r4.columns, i3, l2 + 1) : [], i3;
            });
          };
          return n3(e3);
        }, { key: !1, debug: () => t2.options.debugAll ?? t2.options.debugColumns }), getAllFlatColumns: s(() => [t2.getAllColumns()], (e3) => e3.flatMap((e4) => e4.getFlatColumns()), { key: !1, debug: () => t2.options.debugAll ?? t2.options.debugColumns }), _getAllFlatColumnsById: s(() => [t2.getAllFlatColumns()], (e3) => e3.reduce((e4, t3) => (e4[t3.id] = t3, e4), {}), { key: !1, debug: () => t2.options.debugAll ?? t2.options.debugColumns }), getAllLeafColumns: s(() => [t2.getAllColumns(), t2._getOrderColumnsFn()], (e3, t3) => t3(e3.flatMap((e4) => e4.getLeafColumns())), { key: !1, debug: () => t2.options.debugAll ?? t2.options.debugColumns }), getColumn: (e3) => {
          let n3 = t2._getAllFlatColumnsById()[e3];
          if (!n3)
            throw new Error();
          return n3;
        } };
        return Object.assign(t2, a2), t2._features.forEach((e3) => Object.assign(t2, e3.createTable == null ? void 0 : e3.createTable(t2))), t2;
      }
      function Y(e2, t2, n2, o2) {
        let l2 = { id: `${t2.id}_${n2.id}`, row: t2, column: n2, getValue: () => t2.getValue(o2), renderValue: () => l2.getValue() ?? e2.options.renderFallbackValue, getContext: s(() => [e2, n2, t2, l2], (e3, t3, n3, o3) => ({ table: e3, column: t3, row: n3, cell: o3, getValue: o3.getValue, renderValue: o3.renderValue }), { key: !1, debug: () => e2.options.debugAll }) };
        return e2._features.forEach((o3) => {
          Object.assign(l2, o3.createCell == null ? void 0 : o3.createCell(l2, n2, t2, e2));
        }, {}), l2;
      }
      let Z = (e2, t2, n2, o2, l2, i2) => {
        let r3 = { id: t2, index: o2, original: n2, depth: l2, _valuesCache: {}, _uniqueValuesCache: {}, getValue: (t3) => {
          if (r3._valuesCache.hasOwnProperty(t3))
            return r3._valuesCache[t3];
          let n3 = e2.getColumn(t3);
          return n3.accessorFn ? (r3._valuesCache[t3] = n3.accessorFn(r3.original, o2), r3._valuesCache[t3]) : void 0;
        }, getUniqueValues: (t3) => {
          if (r3._uniqueValuesCache.hasOwnProperty(t3))
            return r3._uniqueValuesCache[t3];
          let n3 = e2.getColumn(t3);
          return n3.accessorFn ? n3.columnDef.getUniqueValues ? (r3._uniqueValuesCache[t3] = n3.columnDef.getUniqueValues(r3.original, o2), r3._uniqueValuesCache[t3]) : (r3._uniqueValuesCache[t3] = [r3.getValue(t3)], r3._uniqueValuesCache[t3]) : void 0;
        }, renderValue: (t3) => r3.getValue(t3) ?? e2.options.renderFallbackValue, subRows: i2 ?? [], getLeafRows: () => a(r3.subRows, (e3) => e3.subRows), getAllCells: s(() => [e2.getAllLeafColumns()], (t3) => t3.map((t4) => Y(e2, r3, t4, t4.id)), { key: !1, debug: () => e2.options.debugAll ?? e2.options.debugRows }), _getAllCellsByColumnId: s(() => [r3.getAllCells()], (e3) => e3.reduce((e4, t3) => (e4[t3.column.id] = t3, e4), {}), { key: "row.getAllCellsByColumnId", debug: () => e2.options.debugAll ?? e2.options.debugRows }) };
        for (let t3 = 0; t3 < e2._features.length; t3++) {
          let n3 = e2._features[t3];
          Object.assign(r3, n3 == null || n3.createRow == null ? void 0 : n3.createRow(r3, e2));
        }
        return r3;
      };
      function ee(e2, t2, n2) {
        return n2.options.filterFromLeafRows ? function(e3, t3, n3) {
          let o2 = [], l2 = {}, i2 = function(e4, o3) {
            let r3 = [];
            for (let o4 = 0; o4 < e4.length; o4++) {
              var a2;
              let s2 = e4[o4];
              if ((a2 = s2.subRows) != null && a2.length) {
                let e5 = Z(n3, s2.id, s2.original, s2.index, s2.depth);
                if (e5.columnFilters = s2.columnFilters, e5.subRows = i2(s2.subRows), !e5.subRows.length)
                  continue;
                s2 = e5;
              }
              t3(s2) && (r3.push(s2), l2[s2.id] = s2, l2[o4] = s2);
            }
            return r3;
          };
          return { rows: i2(e3), flatRows: o2, rowsById: l2 };
        }(e2, t2, n2) : function(e3, t3, n3) {
          let o2 = [], l2 = {}, i2 = function(e4, r3) {
            let a2 = [];
            for (let r4 = 0; r4 < e4.length; r4++) {
              let u2 = e4[r4];
              if (t3(u2)) {
                var s2;
                if ((s2 = u2.subRows) != null && s2.length) {
                  let e5 = Z(n3, u2.id, u2.original, u2.index, u2.depth);
                  e5.subRows = i2(u2.subRows), u2 = e5;
                }
                a2.push(u2), o2.push(u2), l2[u2.id] = u2;
              }
            }
            return a2;
          };
          return { rows: i2(e3), flatRows: o2, rowsById: l2 };
        }(e2, t2, n2);
      }
      function te(e2) {
        let t2 = [], n2 = (e3) => {
          var o2;
          t2.push(e3), (o2 = e3.subRows) != null && o2.length && e3.getIsExpanded() && e3.subRows.forEach(n2);
        };
        return e2.rows.forEach(n2), { rows: t2, flatRows: e2.flatRows, rowsById: e2.rowsById };
      }
      e.ColumnSizing = f2, e.Expanding = h, e.Filters = P, e.Grouping = G, e.Headers = d, e.Ordering = z, e.Pagination = L, e.Pinning = O, e.RowSelection = D, e.Sorting = K, e.Visibility = J, e.aggregationFns = E, e.buildHeaderGroups = c, e.createCell = Y, e.createColumn = u, e.createColumnHelper = function() {
        return { accessor: (e2, t2) => typeof e2 == "function" ? { ...t2, accessorFn: e2 } : { ...t2, accessorKey: e2 }, display: (e2) => e2, group: (e2) => e2 };
      }, e.createRow = Z, e.createTable = W, e.defaultColumnSizing = p, e.expandRows = te, e.filterFns = x, e.flattenBy = a, e.flexRender = function(e2, t2) {
        return e2 ? function(e3) {
          return typeof e3 == "function" && (() => {
            let t3 = Object.getPrototypeOf(e3);
            return t3.prototype && t3.prototype.isReactComponent;
          })();
        }(n2 = e2) || typeof n2 == "function" || function(e3) {
          return typeof e3 == "object" && typeof e3.$$typeof == "symbol" && ["react.memo", "react.forward_ref"].includes(e3.$$typeof.description);
        }(n2) ? o.createElement(e2, t2) : e2 : null;
        var n2;
      }, e.functionalUpdate = l, e.getCoreRowModel = function() {
        return (e2) => s(() => [e2.options.data], (t2) => {
          let n2 = { rows: [], flatRows: [], rowsById: {} }, o2 = function(t3, l2, i2) {
            l2 === void 0 && (l2 = 0);
            let r3 = [];
            for (let s2 = 0; s2 < t3.length; s2++) {
              let u2 = Z(e2, e2._getRowId(t3[s2], s2, i2), t3[s2], s2, l2);
              var a2;
              n2.flatRows.push(u2), n2.rowsById[u2.id] = u2, r3.push(u2), e2.options.getSubRows && (u2.originalSubRows = e2.options.getSubRows(t3[s2], s2), (a2 = u2.originalSubRows) != null && a2.length && (u2.subRows = o2(u2.originalSubRows, l2 + 1, u2)));
            }
            return r3;
          };
          return n2.rows = o2(t2), n2;
        }, { key: !1, debug: () => e2.options.debugAll ?? e2.options.debugTable, onChange: () => {
          e2._autoResetPageIndex();
        } });
      }, e.getExpandedRowModel = function() {
        return (e2) => s(() => [e2.getState().expanded, e2.getPreExpandedRowModel(), e2.options.paginateExpandedRows], (e3, t2, n2) => !t2.rows.length || e3 !== !0 && !Object.keys(e3 ?? {}).length ? t2 : n2 ? te(t2) : t2, { key: !1, debug: () => e2.options.debugAll ?? e2.options.debugTable });
      }, e.getFacetedMinMaxValues = function() {
        return (e2, t2) => s(() => [e2.getColumn(t2).getFacetedRowModel()], (e3) => {
          var n2;
          let o2 = (n2 = e3.flatRows[0]) == null ? void 0 : n2.getUniqueValues(t2);
          if (o2 === void 0)
            return;
          let l2 = [o2, o2];
          for (let n3 = 0; n3 < e3.flatRows.length; n3++) {
            let o3 = e3.flatRows[n3].getUniqueValues(t2);
            for (let e4 = 0; e4 < o3.length; e4++) {
              let t3 = o3[e4];
              t3 < l2[0] ? l2[0] = t3 : t3 > l2[1] && (l2[1] = t3);
            }
          }
          return l2;
        }, { key: !1, debug: () => e2.options.debugAll ?? e2.options.debugTable, onChange: () => {
        } });
      }, e.getFacetedRowModel = function() {
        return (e2, t2) => s(() => [e2.getPreFilteredRowModel(), e2.getState().columnFilters, e2.getState().globalFilter, e2.getFilteredRowModel()], (n2, o2, l2) => {
          if (!n2.rows.length || (o2 == null || !o2.length) && !l2)
            return n2;
          let i2 = [...o2.map((e3) => e3.id).filter((e3) => e3 !== t2), l2 ? "__global__" : void 0].filter(Boolean);
          return ee(n2.rows, (e3) => {
            for (let t3 = 0; t3 < i2.length; t3++)
              if (e3.columnFilters[i2[t3]] === !1)
                return !1;
            return !0;
          }, e2);
        }, { key: !1, debug: () => e2.options.debugAll ?? e2.options.debugTable, onChange: () => {
        } });
      }, e.getFacetedUniqueValues = function() {
        return (e2, t2) => s(() => [e2.getColumn(t2).getFacetedRowModel()], (e3) => {
          let n2 = /* @__PURE__ */ new Map();
          for (let o2 = 0; o2 < e3.flatRows.length; o2++) {
            let l2 = e3.flatRows[o2].getUniqueValues(t2);
            for (let e4 = 0; e4 < l2.length; e4++) {
              let t3 = l2[e4];
              n2.has(t3) ? n2.set(t3, (n2.get(t3) ?? 0) + 1) : n2.set(t3, 1);
            }
          }
          return n2;
        }, { key: !1, debug: () => e2.options.debugAll ?? e2.options.debugTable, onChange: () => {
        } });
      }, e.getFilteredRowModel = function() {
        return (e2) => s(() => [e2.getPreFilteredRowModel(), e2.getState().columnFilters, e2.getState().globalFilter], (t2, n2, o2) => {
          if (!t2.rows.length || (n2 == null || !n2.length) && !o2) {
            for (let e3 = 0; e3 < t2.flatRows.length; e3++)
              t2.flatRows[e3].columnFilters = {}, t2.flatRows[e3].columnFiltersMeta = {};
            return t2;
          }
          let l2 = [], i2 = [];
          (n2 ?? []).forEach((t3) => {
            let n3 = e2.getColumn(t3.id).getFilterFn();
            n3 && l2.push({ id: t3.id, filterFn: n3, resolvedValue: (n3.resolveFilterValue == null ? void 0 : n3.resolveFilterValue(t3.value)) ?? t3.value });
          });
          let r3 = n2.map((e3) => e3.id), a2 = e2.getGlobalFilterFn(), s2 = e2.getAllLeafColumns().filter((e3) => e3.getCanGlobalFilter()), u2, g2;
          o2 && a2 && s2.length && (r3.push("__global__"), s2.forEach((e3) => {
            i2.push({ id: e3.id, filterFn: a2, resolvedValue: (a2.resolveFilterValue == null ? void 0 : a2.resolveFilterValue(o2)) ?? o2 });
          }));
          for (let e3 = 0; e3 < t2.flatRows.length; e3++) {
            let n3 = t2.flatRows[e3];
            if (n3.columnFilters = {}, l2.length)
              for (let e4 = 0; e4 < l2.length; e4++) {
                u2 = l2[e4];
                let t3 = u2.id;
                n3.columnFilters[t3] = u2.filterFn(n3, t3, u2.resolvedValue, (e5) => {
                  n3.columnFiltersMeta[t3] = e5;
                });
              }
            if (i2.length) {
              for (let e4 = 0; e4 < i2.length; e4++) {
                g2 = i2[e4];
                let t3 = g2.id;
                if (g2.filterFn(n3, t3, g2.resolvedValue, (e5) => {
                  n3.columnFiltersMeta[t3] = e5;
                })) {
                  n3.columnFilters.__global__ = !0;
                  break;
                }
              }
              n3.columnFilters.__global__ !== !0 && (n3.columnFilters.__global__ = !1);
            }
          }
          return ee(t2.rows, (e3) => {
            for (let t3 = 0; t3 < r3.length; t3++)
              if (e3.columnFilters[r3[t3]] === !1)
                return !1;
            return !0;
          }, e2);
        }, { key: !1, debug: () => e2.options.debugAll ?? e2.options.debugTable, onChange: () => {
          e2._autoResetPageIndex();
        } });
      }, e.getGroupedRowModel = function() {
        return (e2) => s(() => [e2.getState().grouping, e2.getPreGroupedRowModel()], (t2, n2) => {
          if (!n2.rows.length || !t2.length)
            return n2;
          let o2 = t2.filter((t3) => e2.getColumn(t3)), l2 = [], i2 = {}, r3 = function(t3, n3, s3) {
            if (n3 === void 0 && (n3 = 0), n3 >= o2.length)
              return t3.map((e3) => (e3.depth = n3, l2.push(e3), i2[e3.id] = e3, e3.subRows && (e3.subRows = r3(e3.subRows, n3 + 1)), e3));
            let u2 = o2[n3], g2 = function(e3, t4) {
              let n4 = /* @__PURE__ */ new Map();
              return e3.reduce((e4, n5) => {
                let o3 = `${n5.getValue(t4)}`, l3 = e4.get(o3);
                return l3 ? l3.push(n5) : e4.set(o3, [n5]), e4;
              }, n4);
            }(t3, u2);
            return Array.from(g2.entries()).map((t4, g3) => {
              let [d3, c2] = t4, p2 = `${u2}:${d3}`;
              p2 = s3 ? `${s3}>${p2}` : p2;
              let f3 = r3(c2, n3 + 1, p2), m2 = n3 ? a(c2, (e3) => e3.subRows) : c2, b2 = Z(e2, p2, m2[0].original, g3, n3);
              return Object.assign(b2, { groupingColumnId: u2, groupingValue: d3, subRows: f3, leafRows: m2, getValue: (t5) => {
                if (o2.includes(t5))
                  return b2._valuesCache.hasOwnProperty(t5) || c2[0] && (b2._valuesCache[t5] = c2[0].getValue(t5) ?? void 0), b2._valuesCache[t5];
                if (b2._groupingValuesCache.hasOwnProperty(t5))
                  return b2._groupingValuesCache[t5];
                let n4 = e2.getColumn(t5).getAggregationFn();
                return n4 ? (b2._groupingValuesCache[t5] = n4(t5, m2, c2), b2._groupingValuesCache[t5]) : void 0;
              } }), f3.forEach((e3) => {
                l2.push(e3), i2[e3.id] = e3;
              }), b2;
            });
          }, s2 = r3(n2.rows, 0, "");
          return s2.forEach((e3) => {
            l2.push(e3), i2[e3.id] = e3;
          }), { rows: s2, flatRows: l2, rowsById: i2 };
        }, { key: !1, debug: () => e2.options.debugAll ?? e2.options.debugTable, onChange: () => {
          e2._queue(() => {
            e2._autoResetExpanded(), e2._autoResetPageIndex();
          });
        } });
      }, e.getPaginationRowModel = function(e2) {
        return (e3) => s(() => [e3.getState().pagination, e3.getPrePaginationRowModel(), e3.options.paginateExpandedRows ? void 0 : e3.getState().expanded], (t2, n2) => {
          if (!n2.rows.length)
            return n2;
          let { pageSize: o2, pageIndex: l2 } = t2, { rows: i2, flatRows: r3, rowsById: a2 } = n2, s2 = o2 * l2, u2 = s2 + o2, g2;
          i2 = i2.slice(s2, u2), g2 = e3.options.paginateExpandedRows ? { rows: i2, flatRows: r3, rowsById: a2 } : te({ rows: i2, flatRows: r3, rowsById: a2 }), g2.flatRows = [];
          let d2 = (e4) => {
            g2.flatRows.push(e4), e4.subRows.length && e4.subRows.forEach(d2);
          };
          return g2.rows.forEach(d2), g2;
        }, { key: !1, debug: () => e3.options.debugAll ?? e3.options.debugTable });
      }, e.getSortedRowModel = function() {
        return (e2) => s(() => [e2.getState().sorting, e2.getPreSortedRowModel()], (t2, n2) => {
          if (!n2.rows.length || t2 == null || !t2.length)
            return n2;
          let o2 = e2.getState().sorting, l2 = [], i2 = o2.filter((t3) => e2.getColumn(t3.id).getCanSort()), r3 = {};
          i2.forEach((t3) => {
            let n3 = e2.getColumn(t3.id);
            r3[t3.id] = { sortUndefined: n3.columnDef.sortUndefined, invertSorting: n3.columnDef.invertSorting, sortingFn: n3.getSortingFn() };
          });
          let a2 = (e3) => {
            let t3 = [...e3];
            return t3.sort((e4, t4) => {
              for (let n3 = 0; n3 < i2.length; n3 += 1) {
                let o3 = i2[n3], l3 = r3[o3.id], a3 = (o3 == null ? void 0 : o3.desc) ?? !1;
                if (l3.sortUndefined) {
                  let n4 = e4.getValue(o3.id) === void 0, i3 = t4.getValue(o3.id) === void 0;
                  if (n4 || i3)
                    return n4 && i3 ? 0 : n4 ? l3.sortUndefined : -l3.sortUndefined;
                }
                let s2 = l3.sortingFn(e4, t4, o3.id);
                if (s2 !== 0)
                  return a3 && (s2 *= -1), l3.invertSorting && (s2 *= -1), s2;
              }
              return e4.index - t4.index;
            }), t3.forEach((e4) => {
              l2.push(e4), !e4.subRows || e4.subRows.length <= 1 || (e4.subRows = a2(e4.subRows));
            }), t3;
          };
          return { rows: a2(n2.rows), flatRows: l2, rowsById: n2.rowsById };
        }, { key: !1, debug: () => e2.options.debugAll ?? e2.options.debugTable, onChange: () => {
          e2._autoResetPageIndex();
        } });
      }, e.isFunction = r2, e.isRowSelected = B, e.isSubRowSelected = q, e.makeStateUpdater = i, e.memo = s, e.noop = function() {
      }, e.orderColumns = H, e.passiveEventSupported = b, e.reSplitAlphaNumeric = j, e.selectRowsFn = T, e.shouldAutoRemoveFilter = A, e.sortingFns = X, e.useReactTable = function(e2) {
        let t2 = { state: {}, onStateChange: () => {
        }, renderFallbackValue: null, ...e2 }, [n2] = o.useState(() => ({ current: W(t2) })), [l2, i2] = o.useState(() => n2.current.initialState);
        return n2.current.setOptions((t3) => ({ ...t3, ...e2, state: { ...l2, ...e2.state }, onStateChange: (t4) => {
          i2(t4), e2.onStateChange == null || e2.onStateChange(t4);
        } })), n2.current;
      }, Object.defineProperty(e, "__esModule", { value: !0 });
    });
  }
});

// ../../node_modules/.pnpm/@iconify+icons-carbon@1.2.11/node_modules/@iconify/icons-carbon/intent-request-active.js
var require_intent_request_active = __commonJS({
  "../../node_modules/.pnpm/@iconify+icons-carbon@1.2.11/node_modules/@iconify/icons-carbon/intent-request-active.js"(exports) {
    var data = {
      width: 32,
      height: 32,
      body: '<path fill="currentColor" d="m23 27.2l-2.6-2.6L19 26l4 4l8-8l-1.4-1.4z"/><path fill="currentColor" d="M15.4 30L5 23.8c-.6-.4-1-1-1-1.7V9.9c0-.7.4-1.4 1-1.7l10-5.9c.3-.2.6-.3 1-.3s.7.1 1 .3l10 5.9c.6.4 1 1 1 1.7V16h-2V9.9L16 4L6 9.9v12.2l10.5 6.2l-1.1 1.7z"/>'
    };
    exports.__esModule = !0;
    exports.default = data;
  }
});

// ../../node_modules/.pnpm/@iconify+icons-carbon@1.2.11/node_modules/@iconify/icons-carbon/intent-request-inactive.js
var require_intent_request_inactive = __commonJS({
  "../../node_modules/.pnpm/@iconify+icons-carbon@1.2.11/node_modules/@iconify/icons-carbon/intent-request-inactive.js"(exports) {
    var data = {
      width: 32,
      height: 32,
      body: '<circle cx="18.5" cy="22.5" r="1.5" fill="currentColor"/><circle cx="23.5" cy="22.5" r="1.5" fill="currentColor"/><circle cx="28.5" cy="22.5" r="1.5" fill="currentColor"/><path fill="currentColor" d="M15.4 30L5 23.8c-.6-.4-1-1-1-1.7V9.9c0-.7.4-1.4 1-1.7l10-5.9c.3-.2.6-.3 1-.3s.7.1 1 .3l10 5.9c.6.4 1 1 1 1.7V16h-2V9.9L16 4L6 9.9v12.2l10.5 6.2l-1.1 1.7z"/>'
    };
    exports.__esModule = !0;
    exports.default = data;
  }
});

// ../../node_modules/.pnpm/@remix-run+cloudflare-pages@1.7.4_dp7lsxfcjoxmh2gy56a7syibgu/node_modules/@remix-run/cloudflare-pages/dist/esm/worker.js
var import_cloudflare = __toESM(require_dist());
function createRequestHandler2({
  build,
  getLoadContext,
  mode
}) {
  let handleRequest3 = (0, import_cloudflare.createRequestHandler)(build, mode);
  return (context) => {
    let loadContext = getLoadContext == null ? void 0 : getLoadContext(context);
    return handleRequest3(context.request, loadContext);
  };
}
function createPagesFunctionHandler({
  build,
  getLoadContext,
  mode
}) {
  let handleRequest3 = createRequestHandler2({
    build,
    getLoadContext,
    mode
  }), handleFetch = async (context) => {
    let response;
    context.request.headers.delete("if-none-match");
    try {
      response = await context.env.ASSETS.fetch(context.request.url, context.request.clone()), response = response && response.status >= 200 && response.status < 400 ? new Response(response.body, response) : void 0;
    } catch {
    }
    return response || (response = await handleRequest3(context)), response;
  };
  return async (context) => {
    try {
      return await handleFetch(context);
    } catch (e) {
      return e instanceof Error ? (console.error(e), new Response(e.message || e.toString(), {
        status: 500
      })) : new Response("Internal Error", {
        status: 500
      });
    }
  };
}

// server-entry-module:@remix-run/dev/server-build
var server_build_exports = {};
__export(server_build_exports, {
  assets: () => assets_manifest_default,
  assetsBuildDirectory: () => assetsBuildDirectory,
  entry: () => entry,
  publicPath: () => publicPath,
  routes: () => routes
});

// app/entry.server.tsx
var entry_server_exports = {};
__export(entry_server_exports, {
  default: () => handleRequest
});
init_esm2();
var import_server3 = __toESM(require_server_browser());

// app/@core/store/global/global.provider.tsx
var import_react4 = __toESM(require_react()), import_jsx_dev_runtime = __toESM(require_jsx_dev_runtime()), GLOBAL_STATE = {
  isLoggedIn: !1,
  showNewNodeMdl: !1,
  showNewLocationMdl: !1,
  showNewTunnelMdl: !1
}, GlobalContext = (0, import_react4.createContext)(void 0), globalReducer = (state, action3) => {
  switch (action3.type) {
    case "OPEN_NEWNODE_MDL":
      return {
        ...state,
        showNewNodeMdl: !0
      };
    case "CLOSE_NEWNODE_MDL":
      return {
        ...state,
        showNewNodeMdl: !1
      };
    case "OPEN_NEWTUNNEL_MDL":
      return {
        ...state,
        showNewTunnelMdl: !0
      };
    case "CLOSE_NEWTUNNEL_MDL":
      return {
        ...state,
        showNewTunnelMdl: !1
      };
    case "OPEN_NEWLOCATION_MDL":
      return {
        ...state,
        showNewLocationMdl: !0
      };
    case "CLOSE_NEWLOCATION_MDL":
      return {
        ...state,
        showNewLocationMdl: !1
      };
    default:
      return state;
  }
};
function GlobalStateProvider({ children }) {
  let [state, dispatch] = (0, import_react4.useReducer)(globalReducer, GLOBAL_STATE), value = (0, import_react4.useMemo)(() => ({ state, dispatch }), [state, dispatch]);
  return /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(import_jsx_dev_runtime.Fragment, {
    children: /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(GlobalContext.Provider, {
      value,
      children
    }, void 0, !1, {
      fileName: "app/@core/store/global/global.provider.tsx",
      lineNumber: 66,
      columnNumber: 7
    }, this)
  }, void 0, !1, {
    fileName: "app/@core/store/global/global.provider.tsx",
    lineNumber: 65,
    columnNumber: 5
  }, this);
}
function useGlobalState() {
  let context = (0, import_react4.useContext)(GlobalContext);
  if (context === void 0)
    throw new Error("useGlobalState must be used within a GlobalSateProvider");
  return context;
}

// app/entry.server.tsx
var import_jsx_dev_runtime = __toESM(require_jsx_dev_runtime());
function handleRequest(request, responseStatusCode, responseHeaders, remixContext) {
  let view = (0, import_server3.renderToString)(
    /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(GlobalStateProvider, {
      children: /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(RemixServer, {
        context: remixContext,
        url: request.url
      }, void 0, !1, {
        fileName: "app/entry.server.tsx",
        lineNumber: 14,
        columnNumber: 7
      }, this)
    }, void 0, !1, {
      fileName: "app/entry.server.tsx",
      lineNumber: 13,
      columnNumber: 5
    }, this)
  );
  return responseHeaders.set("Content-Type", "text/html"), new Response("<!DOCTYPE html>" + view, {
    status: responseStatusCode,
    headers: responseHeaders
  });
}

// app/root.tsx
var root_exports = {};
__export(root_exports, {
  CatchBoundary: () => CatchBoundary,
  default: () => App,
  links: () => links,
  loader: () => loader,
  meta: () => meta
});

// app/styles/tailwind.css
var tailwind_default = "/build/_assets/tailwind-X7S5ILKW.css";

// ../../node_modules/.pnpm/remix-typedjson@0.1.3_6yjjdt4n4win4ui7gmjmrevsue/node_modules/remix-typedjson/dist/esm/remix.js
init_esm2();

// ../../node_modules/.pnpm/remix-typedjson@0.1.3_6yjjdt4n4win4ui7gmjmrevsue/node_modules/remix-typedjson/dist/esm/typedjson.js
function serialize2(data) {
  if (data === null)
    return { json: "null" };
  if (data === void 0)
    return { json: void 0 };
  let stack = [], keys = [""], meta2 = /* @__PURE__ */ new Map();
  function replacer(key, value) {
    function unwindStack() {
      for (; stack.length > 0; ) {
        let top = stack[stack.length - 1];
        if (top.iteration < top.count)
          return top.iteration++, top;
        top.type === "object" && keys.pop(), stack.pop();
      }
    }
    let entry2 = unwindStack();
    entry2 && (value = entry2.value[key]);
    let metaKey = `${keys[keys.length - 1]}${key}`, valueType = typeof value;
    if (valueType === "object" && value !== null) {
      let count2 = 0, t = "undefined";
      if (value instanceof Date ? (t = "date", value = value.toISOString()) : value instanceof Set ? (value = Array.from(value), count2 = value.length, t = "set") : value instanceof Map ? (value = Object.fromEntries(value), count2 = Object.keys(value).length, t = "map") : value instanceof Array ? (t = "object", count2 = value.length) : value instanceof RegExp ? (t = "regexp", value = String(value)) : value instanceof Error ? (t = "error", value = { name: value.name, message: value.message, stack: value.stack }, stack.push({ type: "object", value, count: 3, iteration: 0 })) : (count2 = Object.keys(value).length, t = "object"), t !== "object" && meta2.set(metaKey, t), count2 !== 0)
        return stack.push({ type: t, value, count: count2, iteration: 0 }), key && t === "object" && keys.push(`${metaKey}.`), value;
    }
    if (valueType === "bigint")
      return meta2.set(metaKey, "bigint"), String(value);
    if (valueType === "number") {
      if (value === Number.POSITIVE_INFINITY)
        return meta2.set(metaKey, "infinity"), "Infinity";
      if (value === Number.NEGATIVE_INFINITY)
        return meta2.set(metaKey, "-infinity"), "-Infinity";
      if (Number.isNaN(value))
        return meta2.set(metaKey, "nan"), "NaN";
    }
    return typeof value > "u" ? (meta2.set(metaKey, "undefined"), null) : value;
  }
  return {
    json: JSON.stringify(data, replacer),
    meta: meta2.size === 0 ? void 0 : Object.fromEntries(meta2.entries())
  };
}
function applyMeta(data, meta2) {
  for (let key of Object.keys(meta2))
    applyConversion(data, key.split("."), meta2[key]);
  return data;
  function applyConversion(data2, keys, type, depth = 0) {
    let key = keys[depth];
    if (depth < keys.length - 1) {
      applyConversion(data2[key], keys, type, depth + 1);
      return;
    }
    let value = data2[key];
    switch (type) {
      case "date":
        data2[key] = new Date(value);
        break;
      case "set":
        data2[key] = new Set(value);
        break;
      case "map":
        data2[key] = new Map(Object.entries(value));
        break;
      case "regexp":
        let match = /^\/(.*)\/([dgimsuy]*)$/.exec(value);
        if (match)
          data2[key] = new RegExp(match[1], match[2]);
        else
          throw new Error(`Invalid regexp: ${value}`);
        break;
      case "bigint":
        data2[key] = BigInt(value);
        break;
      case "undefined":
        data2[key] = void 0;
        break;
      case "infinity":
        data2[key] = Number.POSITIVE_INFINITY;
        break;
      case "-infinity":
        data2[key] = Number.NEGATIVE_INFINITY;
        break;
      case "nan":
        data2[key] = NaN;
        break;
      case "error":
        let err = new Error(value.message);
        err.name = value.name, err.stack = value.stack, data2[key] = err;
        break;
    }
  }
}

// ../../node_modules/.pnpm/remix-typedjson@0.1.3_6yjjdt4n4win4ui7gmjmrevsue/node_modules/remix-typedjson/dist/esm/remix.js
var typedjson = (data, init = {}) => {
  let responseInit = typeof init == "number" ? { status: init } : init, headers = new Headers(responseInit.headers);
  return headers.has("Content-Type") || headers.set("Content-Type", "application/json; charset=utf-8"), new Response(stringifyRemix(data), {
    ...responseInit,
    headers
  });
};
function useTypedLoaderData() {
  let data = useLoaderData();
  return deserializeRemix(data);
}
function useTypedActionData() {
  let data = useActionData();
  return deserializeRemix(data);
}
function stringifyRemix(data) {
  let { json: json2, meta: meta2 } = serialize2(data);
  return json2 && meta2 && (json2.startsWith("{") ? json2 = `${json2.substring(0, json2.length - 1)},"__meta__":${JSON.stringify(meta2)}}` : json2.startsWith("[") && (json2 = `{"__obj__":${json2},"__meta__":${JSON.stringify(meta2)}}`)), json2;
}
function deserializeRemix(data) {
  if (!data)
    return data;
  if (data.__obj__)
    return data.__meta__ ? applyMeta(data.__obj__, data.__meta__) : data.__obj__;
  if (data.__meta__) {
    let meta2 = data.__meta__;
    return delete data.__meta__, applyMeta(data, meta2);
  }
  return data;
}
var redirect2 = (url, init = 302) => {
  let responseInit = init;
  typeof responseInit == "number" ? responseInit = { status: responseInit } : typeof responseInit.status > "u" && (responseInit.status = 302);
  let headers = new Headers(responseInit.headers);
  return headers.set("Location", url), new Response(null, {
    ...responseInit,
    headers
  });
};

// app/remix.ts
var import_cloudflare2 = __toESM(require_dist());
init_esm2();

// ../../node_modules/.pnpm/react-daisyui@2.4.4_gywmh5iamy5j63wr4jy7mn64be/node_modules/react-daisyui/dist/react-daisyui.modern.js
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1), import_react8 = __toESM(require_react(), 1);
function _extends$1() {
  return _extends$1 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source)
        Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);
    }
    return target;
  }, _extends$1.apply(this, arguments);
}
function _objectWithoutPropertiesLoose2(source, excluded) {
  if (source == null)
    return {};
  var target = {}, sourceKeys = Object.keys(source), key, i;
  for (i = 0; i < sourceKeys.length; i++)
    key = sourceKeys[i], !(excluded.indexOf(key) >= 0) && (target[key] = source[key]);
  return target;
}
function toVal(mix) {
  var k, y, str = "";
  if (typeof mix == "string" || typeof mix == "number")
    str += mix;
  else if (typeof mix == "object")
    if (Array.isArray(mix))
      for (k = 0; k < mix.length; k++)
        mix[k] && (y = toVal(mix[k])) && (str && (str += " "), str += y);
    else
      for (k in mix)
        mix[k] && (str && (str += " "), str += k);
  return str;
}
function clsx() {
  for (var i = 0, tmp, x, str = ""; i < arguments.length; )
    (tmp = arguments[i++]) && (x = toVal(tmp)) && (str && (str += " "), str += x);
  return str;
}
function _extends4() {
  return _extends4 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source)
        Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);
    }
    return target;
  }, _extends4.apply(this, arguments);
}
var hashlru = function(max) {
  if (!max)
    throw Error("hashlru must have a max value, of type number, greater than 0");
  var size = 0, cache2 = /* @__PURE__ */ Object.create(null), _cache = /* @__PURE__ */ Object.create(null);
  function update(key, value) {
    cache2[key] = value, size++, size >= max && (size = 0, _cache = cache2, cache2 = /* @__PURE__ */ Object.create(null));
  }
  return {
    has: function(key) {
      return cache2[key] !== void 0 || _cache[key] !== void 0;
    },
    remove: function(key) {
      cache2[key] !== void 0 && (cache2[key] = void 0), _cache[key] !== void 0 && (_cache[key] = void 0);
    },
    get: function(key) {
      var v = cache2[key];
      if (v !== void 0)
        return v;
      if ((v = _cache[key]) !== void 0)
        return update(key, v), v;
    },
    set: function(key, value) {
      cache2[key] !== void 0 ? cache2[key] = value : update(key, value);
    },
    clear: function() {
      cache2 = /* @__PURE__ */ Object.create(null), _cache = /* @__PURE__ */ Object.create(null);
    }
  };
}, HLRU = hashlru;
function getLruCache(cacheSize) {
  return cacheSize >= 1 ? HLRU(cacheSize) : {
    get: function() {
    },
    set: function() {
    }
  };
}
var CLASS_PART_SEPARATOR = "-";
function createClassUtils(config2) {
  var classMap = createClassMap(config2);
  function getClassGroupId(className) {
    var classParts = className.split(CLASS_PART_SEPARATOR);
    return classParts[0] === "" && classParts.length !== 1 && classParts.shift(), getGroupRecursive(classParts, classMap) || getGroupIdForArbitraryProperty(className);
  }
  function getConflictingClassGroupIds(classGroupId) {
    return config2.conflictingClassGroups[classGroupId] || [];
  }
  return {
    getClassGroupId,
    getConflictingClassGroupIds
  };
}
function getGroupRecursive(classParts, classPartObject) {
  var _classPartObject$vali;
  if (classParts.length === 0)
    return classPartObject.classGroupId;
  var currentClassPart = classParts[0], nextClassPartObject = classPartObject.nextPart[currentClassPart], classGroupFromNextClassPart = nextClassPartObject ? getGroupRecursive(classParts.slice(1), nextClassPartObject) : void 0;
  if (classGroupFromNextClassPart)
    return classGroupFromNextClassPart;
  if (classPartObject.validators.length !== 0) {
    var classRest = classParts.join(CLASS_PART_SEPARATOR);
    return (_classPartObject$vali = classPartObject.validators.find(function(_ref) {
      var validator = _ref.validator;
      return validator(classRest);
    })) == null ? void 0 : _classPartObject$vali.classGroupId;
  }
}
var arbitraryPropertyRegex = /^\[(.+)\]$/;
function getGroupIdForArbitraryProperty(className) {
  if (arbitraryPropertyRegex.test(className)) {
    var arbitraryPropertyClassName = arbitraryPropertyRegex.exec(className)[1], property = arbitraryPropertyClassName == null ? void 0 : arbitraryPropertyClassName.substring(0, arbitraryPropertyClassName.indexOf(":"));
    if (property)
      return "arbitrary.." + property;
  }
}
function createClassMap(config2) {
  var theme = config2.theme, prefix2 = config2.prefix, classMap = {
    nextPart: {},
    validators: []
  }, prefixedClassGroupEntries = getPrefixedClassGroupEntries(Object.entries(config2.classGroups), prefix2);
  return prefixedClassGroupEntries.forEach(function(_ref2) {
    var classGroupId = _ref2[0], classGroup = _ref2[1];
    processClassesRecursively(classGroup, classMap, classGroupId, theme);
  }), classMap;
}
function processClassesRecursively(classGroup, classPartObject, classGroupId, theme) {
  classGroup.forEach(function(classDefinition) {
    if (typeof classDefinition == "string") {
      var classPartObjectToEdit = classDefinition === "" ? classPartObject : getPart(classPartObject, classDefinition);
      classPartObjectToEdit.classGroupId = classGroupId;
      return;
    }
    if (typeof classDefinition == "function") {
      if (isThemeGetter(classDefinition)) {
        processClassesRecursively(classDefinition(theme), classPartObject, classGroupId, theme);
        return;
      }
      classPartObject.validators.push({
        validator: classDefinition,
        classGroupId
      });
      return;
    }
    Object.entries(classDefinition).forEach(function(_ref3) {
      var key = _ref3[0], classGroup2 = _ref3[1];
      processClassesRecursively(classGroup2, getPart(classPartObject, key), classGroupId, theme);
    });
  });
}
function getPart(classPartObject, path) {
  var currentClassPartObject = classPartObject;
  return path.split(CLASS_PART_SEPARATOR).forEach(function(pathPart) {
    currentClassPartObject.nextPart[pathPart] === void 0 && (currentClassPartObject.nextPart[pathPart] = {
      nextPart: {},
      validators: []
    }), currentClassPartObject = currentClassPartObject.nextPart[pathPart];
  }), currentClassPartObject;
}
function isThemeGetter(func) {
  return func.isThemeGetter;
}
function getPrefixedClassGroupEntries(classGroupEntries, prefix2) {
  return prefix2 ? classGroupEntries.map(function(_ref4) {
    var classGroupId = _ref4[0], classGroup = _ref4[1], prefixedClassGroup = classGroup.map(function(classDefinition) {
      return typeof classDefinition == "string" ? prefix2 + classDefinition : typeof classDefinition == "object" ? Object.fromEntries(Object.entries(classDefinition).map(function(_ref5) {
        var key = _ref5[0], value = _ref5[1];
        return [prefix2 + key, value];
      })) : classDefinition;
    });
    return [classGroupId, prefixedClassGroup];
  }) : classGroupEntries;
}
function createConfigUtils(config2) {
  return _extends4({
    cache: getLruCache(config2.cacheSize)
  }, createClassUtils(config2));
}
var SPLIT_CLASSES_REGEX = /\s+/, IMPORTANT_MODIFIER = "!", MODIFIER_SEPARATOR_REGEX = /:(?![^[]*\])/, MODIFIER_SEPARATOR = ":";
function mergeClassList(classList, configUtils) {
  var getClassGroupId = configUtils.getClassGroupId, getConflictingClassGroupIds = configUtils.getConflictingClassGroupIds, classGroupsInConflict = /* @__PURE__ */ new Set();
  return classList.trim().split(SPLIT_CLASSES_REGEX).map(function(originalClassName) {
    var modifiers = originalClassName.split(MODIFIER_SEPARATOR_REGEX), classNameWithImportantModifier = modifiers.pop(), hasImportantModifier = classNameWithImportantModifier.startsWith(IMPORTANT_MODIFIER), className = hasImportantModifier ? classNameWithImportantModifier.substring(1) : classNameWithImportantModifier, classGroupId = getClassGroupId(className);
    if (!classGroupId)
      return {
        isTailwindClass: !1,
        originalClassName
      };
    var variantModifier = modifiers.length === 0 ? "" : modifiers.sort().concat("").join(MODIFIER_SEPARATOR), fullModifier = hasImportantModifier ? IMPORTANT_MODIFIER + variantModifier : variantModifier;
    return {
      isTailwindClass: !0,
      modifier: fullModifier,
      classGroupId,
      originalClassName
    };
  }).reverse().filter(function(parsed) {
    if (!parsed.isTailwindClass)
      return !0;
    var modifier = parsed.modifier, classGroupId = parsed.classGroupId, classId = modifier + ":" + classGroupId;
    return classGroupsInConflict.has(classId) ? !1 : (classGroupsInConflict.add(classId), getConflictingClassGroupIds(classGroupId).forEach(function(group) {
      return classGroupsInConflict.add(modifier + ":" + group);
    }), !0);
  }).reverse().map(function(parsed) {
    return parsed.originalClassName;
  }).join(" ");
}
function createTailwindMerge() {
  for (var _len = arguments.length, createConfig = new Array(_len), _key = 0; _key < _len; _key++)
    createConfig[_key] = arguments[_key];
  var configUtils, cacheGet, cacheSet, functionToCall = initTailwindMerge;
  function initTailwindMerge(classList) {
    var firstCreateConfig = createConfig[0], restCreateConfig = createConfig.slice(1), config2 = restCreateConfig.reduce(function(previousConfig, createConfigCurrent) {
      return createConfigCurrent(previousConfig);
    }, firstCreateConfig());
    return configUtils = createConfigUtils(config2), cacheGet = configUtils.cache.get, cacheSet = configUtils.cache.set, functionToCall = tailwindMerge, tailwindMerge(classList);
  }
  function tailwindMerge(classList) {
    var cachedResult = cacheGet(classList);
    if (cachedResult)
      return cachedResult;
    var result = mergeClassList(classList, configUtils);
    return cacheSet(classList, result), result;
  }
  return function() {
    for (var classList = "", temp, index = 0; index < arguments.length; index += 1)
      (temp = arguments[index]) && (classList && (classList += " "), classList += temp);
    return functionToCall(classList);
  };
}
function fromTheme(key) {
  var themeGetter = function(theme) {
    return theme[key] || [];
  };
  return themeGetter.isThemeGetter = !0, themeGetter;
}
var arbitraryValueRegex = /^\[(.+)\]$/, fractionRegex = /^\d+\/\d+$/, stringLengths = /* @__PURE__ */ new Set(["px", "full", "screen"]), tshirtUnitRegex = /^(\d+)?(xs|sm|md|lg|xl)$/, lengthUnitRegex = /\d+(%|px|em|rem|vh|vw|pt|pc|in|cm|mm|cap|ch|ex|lh|rlh|vi|vb|vmin|vmax)/, shadowRegex = /^-?((\d+)?\.?(\d+)[a-z]+|0)_-?((\d+)?\.?(\d+)[a-z]+|0)/;
function isLength(classPart) {
  return !Number.isNaN(Number(classPart)) || stringLengths.has(classPart) || fractionRegex.test(classPart) || isArbitraryLength(classPart);
}
function isArbitraryLength(classPart) {
  var _arbitraryValueRegex$, arbitraryValue = (_arbitraryValueRegex$ = arbitraryValueRegex.exec(classPart)) == null ? void 0 : _arbitraryValueRegex$[1];
  return arbitraryValue ? arbitraryValue.startsWith("length:") || lengthUnitRegex.test(arbitraryValue) : !1;
}
function isArbitrarySize(classPart) {
  var _arbitraryValueRegex$2, arbitraryValue = (_arbitraryValueRegex$2 = arbitraryValueRegex.exec(classPart)) == null ? void 0 : _arbitraryValueRegex$2[1];
  return arbitraryValue ? arbitraryValue.startsWith("size:") : !1;
}
function isArbitraryPosition(classPart) {
  var _arbitraryValueRegex$3, arbitraryValue = (_arbitraryValueRegex$3 = arbitraryValueRegex.exec(classPart)) == null ? void 0 : _arbitraryValueRegex$3[1];
  return arbitraryValue ? arbitraryValue.startsWith("position:") : !1;
}
function isArbitraryUrl(classPart) {
  var _arbitraryValueRegex$4, arbitraryValue = (_arbitraryValueRegex$4 = arbitraryValueRegex.exec(classPart)) == null ? void 0 : _arbitraryValueRegex$4[1];
  return arbitraryValue ? arbitraryValue.startsWith("url(") || arbitraryValue.startsWith("url:") : !1;
}
function isArbitraryWeight(classPart) {
  var _arbitraryValueRegex$5, arbitraryValue = (_arbitraryValueRegex$5 = arbitraryValueRegex.exec(classPart)) == null ? void 0 : _arbitraryValueRegex$5[1];
  return arbitraryValue ? !Number.isNaN(Number(arbitraryValue)) || arbitraryValue.startsWith("weight:") : !1;
}
function isInteger(classPart) {
  var _arbitraryValueRegex$6, arbitraryValue = (_arbitraryValueRegex$6 = arbitraryValueRegex.exec(classPart)) == null ? void 0 : _arbitraryValueRegex$6[1];
  return arbitraryValue ? Number.isInteger(Number(arbitraryValue)) : Number.isInteger(Number(classPart));
}
function isArbitraryValue(classPart) {
  return arbitraryValueRegex.test(classPart);
}
function isAny() {
  return !0;
}
function isTshirtSize(classPart) {
  return tshirtUnitRegex.test(classPart);
}
function isArbitraryShadow(classPart) {
  var _arbitraryValueRegex$7, arbitraryValue = (_arbitraryValueRegex$7 = arbitraryValueRegex.exec(classPart)) == null ? void 0 : _arbitraryValueRegex$7[1];
  return arbitraryValue ? shadowRegex.test(arbitraryValue) : !1;
}
function getDefaultConfig() {
  var colors = fromTheme("colors"), spacing = fromTheme("spacing"), blur = fromTheme("blur"), brightness = fromTheme("brightness"), borderColor = fromTheme("borderColor"), borderRadius = fromTheme("borderRadius"), borderWidth = fromTheme("borderWidth"), contrast = fromTheme("contrast"), grayscale = fromTheme("grayscale"), hueRotate = fromTheme("hueRotate"), invert = fromTheme("invert"), gap = fromTheme("gap"), gradientColorStops = fromTheme("gradientColorStops"), inset = fromTheme("inset"), margin = fromTheme("margin"), opacity = fromTheme("opacity"), padding = fromTheme("padding"), saturate = fromTheme("saturate"), scale = fromTheme("scale"), sepia = fromTheme("sepia"), skew = fromTheme("skew"), space = fromTheme("space"), translate = fromTheme("translate"), getOverscroll = function() {
    return ["auto", "contain", "none"];
  }, getOverflow = function() {
    return ["auto", "hidden", "clip", "visible", "scroll"];
  }, getSpacingWithAuto = function() {
    return ["auto", spacing];
  }, getLengthWithEmpty = function() {
    return ["", isLength];
  }, getIntegerWithAuto = function() {
    return ["auto", isInteger];
  }, getPositions = function() {
    return ["bottom", "center", "left", "left-bottom", "left-top", "right", "right-bottom", "right-top", "top"];
  }, getLineStyles = function() {
    return ["solid", "dashed", "dotted", "double", "none"];
  }, getBlendModes = function() {
    return ["normal", "multiply", "screen", "overlay", "darken", "lighten", "color-dodge", "color-burn", "hard-light", "soft-light", "difference", "exclusion", "hue", "saturation", "color", "luminosity"];
  }, getAlign = function() {
    return ["start", "end", "center", "between", "around", "evenly"];
  }, getZeroAndEmpty = function() {
    return ["", "0", isArbitraryValue];
  }, getBreaks = function() {
    return ["auto", "avoid", "all", "avoid-page", "page", "left", "right", "column"];
  };
  return {
    cacheSize: 500,
    theme: {
      colors: [isAny],
      spacing: [isLength],
      blur: ["none", "", isTshirtSize, isArbitraryLength],
      brightness: [isInteger],
      borderColor: [colors],
      borderRadius: ["none", "", "full", isTshirtSize, isArbitraryLength],
      borderWidth: getLengthWithEmpty(),
      contrast: [isInteger],
      grayscale: getZeroAndEmpty(),
      hueRotate: [isInteger],
      invert: getZeroAndEmpty(),
      gap: [spacing],
      gradientColorStops: [colors],
      inset: getSpacingWithAuto(),
      margin: getSpacingWithAuto(),
      opacity: [isInteger],
      padding: [spacing],
      saturate: [isInteger],
      scale: [isInteger],
      sepia: getZeroAndEmpty(),
      skew: [isInteger, isArbitraryValue],
      space: [spacing],
      translate: [spacing]
    },
    classGroups: {
      aspect: [{
        aspect: ["auto", "square", "video", isArbitraryValue]
      }],
      container: ["container"],
      columns: [{
        columns: [isTshirtSize]
      }],
      "break-after": [{
        "break-after": getBreaks()
      }],
      "break-before": [{
        "break-before": getBreaks()
      }],
      "break-inside": [{
        "break-inside": ["auto", "avoid", "avoid-page", "avoid-column"]
      }],
      "box-decoration": [{
        "box-decoration": ["slice", "clone"]
      }],
      box: [{
        box: ["border", "content"]
      }],
      display: ["block", "inline-block", "inline", "flex", "inline-flex", "table", "inline-table", "table-caption", "table-cell", "table-column", "table-column-group", "table-footer-group", "table-header-group", "table-row-group", "table-row", "flow-root", "grid", "inline-grid", "contents", "list-item", "hidden"],
      float: [{
        float: ["right", "left", "none"]
      }],
      clear: [{
        clear: ["left", "right", "both", "none"]
      }],
      isolation: ["isolate", "isolation-auto"],
      "object-fit": [{
        object: ["contain", "cover", "fill", "none", "scale-down"]
      }],
      "object-position": [{
        object: [].concat(getPositions(), [isArbitraryValue])
      }],
      overflow: [{
        overflow: getOverflow()
      }],
      "overflow-x": [{
        "overflow-x": getOverflow()
      }],
      "overflow-y": [{
        "overflow-y": getOverflow()
      }],
      overscroll: [{
        overscroll: getOverscroll()
      }],
      "overscroll-x": [{
        "overscroll-x": getOverscroll()
      }],
      "overscroll-y": [{
        "overscroll-y": getOverscroll()
      }],
      position: ["static", "fixed", "absolute", "relative", "sticky"],
      inset: [{
        inset: [inset]
      }],
      "inset-x": [{
        "inset-x": [inset]
      }],
      "inset-y": [{
        "inset-y": [inset]
      }],
      top: [{
        top: [inset]
      }],
      right: [{
        right: [inset]
      }],
      bottom: [{
        bottom: [inset]
      }],
      left: [{
        left: [inset]
      }],
      visibility: ["visible", "invisible"],
      z: [{
        z: [isLength]
      }],
      basis: [{
        basis: [spacing]
      }],
      "flex-direction": [{
        flex: ["row", "row-reverse", "col", "col-reverse"]
      }],
      "flex-wrap": [{
        flex: ["wrap", "wrap-reverse", "nowrap"]
      }],
      flex: [{
        flex: ["1", "auto", "initial", "none", isArbitraryValue]
      }],
      grow: [{
        grow: getZeroAndEmpty()
      }],
      shrink: [{
        shrink: getZeroAndEmpty()
      }],
      order: [{
        order: ["first", "last", "none", isInteger]
      }],
      "grid-cols": [{
        "grid-cols": [isAny]
      }],
      "col-start-end": [{
        col: ["auto", {
          span: [isInteger]
        }]
      }],
      "col-start": [{
        "col-start": getIntegerWithAuto()
      }],
      "col-end": [{
        "col-end": getIntegerWithAuto()
      }],
      "grid-rows": [{
        "grid-rows": [isAny]
      }],
      "row-start-end": [{
        row: ["auto", {
          span: [isInteger]
        }]
      }],
      "row-start": [{
        "row-start": getIntegerWithAuto()
      }],
      "row-end": [{
        "row-end": getIntegerWithAuto()
      }],
      "grid-flow": [{
        "grid-flow": ["row", "col", "row-dense", "col-dense"]
      }],
      "auto-cols": [{
        "auto-cols": ["auto", "min", "max", "fr", isArbitraryValue]
      }],
      "auto-rows": [{
        "auto-rows": ["auto", "min", "max", "fr", isArbitraryValue]
      }],
      gap: [{
        gap: [gap]
      }],
      "gap-x": [{
        "gap-x": [gap]
      }],
      "gap-y": [{
        "gap-y": [gap]
      }],
      "justify-content": [{
        justify: getAlign()
      }],
      "justify-items": [{
        "justify-items": ["start", "end", "center", "stretch"]
      }],
      "justify-self": [{
        "justify-self": ["auto", "start", "end", "center", "stretch"]
      }],
      "align-content": [{
        content: getAlign()
      }],
      "align-items": [{
        items: ["start", "end", "center", "baseline", "stretch"]
      }],
      "align-self": [{
        self: ["auto", "start", "end", "center", "stretch", "baseline"]
      }],
      "place-content": [{
        "place-content": [].concat(getAlign(), ["stretch"])
      }],
      "place-items": [{
        "place-items": ["start", "end", "center", "stretch"]
      }],
      "place-self": [{
        "place-self": ["auto", "start", "end", "center", "stretch"]
      }],
      p: [{
        p: [padding]
      }],
      px: [{
        px: [padding]
      }],
      py: [{
        py: [padding]
      }],
      pt: [{
        pt: [padding]
      }],
      pr: [{
        pr: [padding]
      }],
      pb: [{
        pb: [padding]
      }],
      pl: [{
        pl: [padding]
      }],
      m: [{
        m: [margin]
      }],
      mx: [{
        mx: [margin]
      }],
      my: [{
        my: [margin]
      }],
      mt: [{
        mt: [margin]
      }],
      mr: [{
        mr: [margin]
      }],
      mb: [{
        mb: [margin]
      }],
      ml: [{
        ml: [margin]
      }],
      "space-x": [{
        "space-x": [space]
      }],
      "space-x-reverse": ["space-x-reverse"],
      "space-y": [{
        "space-y": [space]
      }],
      "space-y-reverse": ["space-y-reverse"],
      w: [{
        w: ["auto", "min", "max", spacing]
      }],
      "min-w": [{
        "min-w": ["min", "max", "fit", isLength]
      }],
      "max-w": [{
        "max-w": ["0", "none", "full", "min", "max", "fit", "prose", {
          screen: [isTshirtSize]
        }, isTshirtSize, isArbitraryLength]
      }],
      h: [{
        h: getSpacingWithAuto()
      }],
      "min-h": [{
        "min-h": ["min", "max", "fit", isLength]
      }],
      "max-h": [{
        "max-h": [spacing, "min", "max", "fit"]
      }],
      "font-size": [{
        text: ["base", isTshirtSize, isArbitraryLength]
      }],
      "font-smoothing": ["antialiased", "subpixel-antialiased"],
      "font-style": ["italic", "not-italic"],
      "font-weight": [{
        font: ["thin", "extralight", "light", "normal", "medium", "semibold", "bold", "extrabold", "black", isArbitraryWeight]
      }],
      "font-family": [{
        font: [isAny]
      }],
      "fvn-normal": ["normal-nums"],
      "fvn-ordinal": ["ordinal"],
      "fvn-slashed-zero": ["slashed-zero"],
      "fvn-figure": ["lining-nums", "oldstyle-nums"],
      "fvn-spacing": ["proportional-nums", "tabular-nums"],
      "fvn-fraction": ["diagonal-fractions", "stacked-fractons"],
      tracking: [{
        tracking: ["tighter", "tight", "normal", "wide", "wider", "widest", isArbitraryLength]
      }],
      leading: [{
        leading: ["none", "tight", "snug", "normal", "relaxed", "loose", isLength]
      }],
      "list-style-type": [{
        list: ["none", "disc", "decimal", isArbitraryValue]
      }],
      "list-style-position": [{
        list: ["inside", "outside"]
      }],
      "placeholder-color": [{
        placeholder: [colors]
      }],
      "placeholder-opacity": [{
        "placeholder-opacity": [opacity]
      }],
      "text-alignment": [{
        text: ["left", "center", "right", "justify"]
      }],
      "text-color": [{
        text: [colors]
      }],
      "text-opacity": [{
        "text-opacity": [opacity]
      }],
      "text-decoration": ["underline", "overline", "line-through", "no-underline"],
      "text-decoration-style": [{
        decoration: [].concat(getLineStyles(), ["wavy"])
      }],
      "text-decoration-thickness": [{
        decoration: ["auto", "from-font", isLength]
      }],
      "underline-offset": [{
        "underline-offset": ["auto", isLength]
      }],
      "text-decoration-color": [{
        decoration: [colors]
      }],
      "text-transform": ["uppercase", "lowercase", "capitalize", "normal-case"],
      "text-overflow": ["truncate", "text-ellipsis", "text-clip"],
      indent: [{
        indent: [spacing]
      }],
      "vertical-align": [{
        align: ["baseline", "top", "middle", "bottom", "text-top", "text-bottom", "sub", "super", isArbitraryLength]
      }],
      whitespace: [{
        whitespace: ["normal", "nowrap", "pre", "pre-line", "pre-wrap"]
      }],
      break: [{
        break: ["normal", "words", "all"]
      }],
      content: [{
        content: ["none", isArbitraryValue]
      }],
      "bg-attachment": [{
        bg: ["fixed", "local", "scroll"]
      }],
      "bg-clip": [{
        "bg-clip": ["border", "padding", "content", "text"]
      }],
      "bg-opacity": [{
        "bg-opacity": [opacity]
      }],
      "bg-origin": [{
        "bg-origin": ["border", "padding", "content"]
      }],
      "bg-position": [{
        bg: [].concat(getPositions(), [isArbitraryPosition])
      }],
      "bg-repeat": [{
        bg: ["no-repeat", {
          repeat: ["", "x", "y", "round", "space"]
        }]
      }],
      "bg-size": [{
        bg: ["auto", "cover", "contain", isArbitrarySize]
      }],
      "bg-image": [{
        bg: ["none", {
          "gradient-to": ["t", "tr", "r", "br", "b", "bl", "l", "tl"]
        }, isArbitraryUrl]
      }],
      "bg-color": [{
        bg: [colors]
      }],
      "gradient-from": [{
        from: [gradientColorStops]
      }],
      "gradient-via": [{
        via: [gradientColorStops]
      }],
      "gradient-to": [{
        to: [gradientColorStops]
      }],
      rounded: [{
        rounded: [borderRadius]
      }],
      "rounded-t": [{
        "rounded-t": [borderRadius]
      }],
      "rounded-r": [{
        "rounded-r": [borderRadius]
      }],
      "rounded-b": [{
        "rounded-b": [borderRadius]
      }],
      "rounded-l": [{
        "rounded-l": [borderRadius]
      }],
      "rounded-tl": [{
        "rounded-tl": [borderRadius]
      }],
      "rounded-tr": [{
        "rounded-tr": [borderRadius]
      }],
      "rounded-br": [{
        "rounded-br": [borderRadius]
      }],
      "rounded-bl": [{
        "rounded-bl": [borderRadius]
      }],
      "border-w": [{
        border: [borderWidth]
      }],
      "border-w-x": [{
        "border-x": [borderWidth]
      }],
      "border-w-y": [{
        "border-y": [borderWidth]
      }],
      "border-w-t": [{
        "border-t": [borderWidth]
      }],
      "border-w-r": [{
        "border-r": [borderWidth]
      }],
      "border-w-b": [{
        "border-b": [borderWidth]
      }],
      "border-w-l": [{
        "border-l": [borderWidth]
      }],
      "border-opacity": [{
        "border-opacity": [opacity]
      }],
      "border-style": [{
        border: [].concat(getLineStyles(), ["hidden"])
      }],
      "divide-x": [{
        "divide-x": [borderWidth]
      }],
      "divide-x-reverse": ["divide-x-reverse"],
      "divide-y": [{
        "divide-y": [borderWidth]
      }],
      "divide-y-reverse": ["divide-y-reverse"],
      "divide-opacity": [{
        "divide-opacity": [opacity]
      }],
      "divide-style": [{
        divide: getLineStyles()
      }],
      "border-color": [{
        border: [borderColor]
      }],
      "border-color-x": [{
        "border-x": [borderColor]
      }],
      "border-color-y": [{
        "border-y": [borderColor]
      }],
      "border-color-t": [{
        "border-t": [borderColor]
      }],
      "border-color-r": [{
        "border-r": [borderColor]
      }],
      "border-color-b": [{
        "border-b": [borderColor]
      }],
      "border-color-l": [{
        "border-l": [borderColor]
      }],
      "divide-color": [{
        divide: [borderColor]
      }],
      "outline-style": [{
        outline: [""].concat(getLineStyles(), ["hidden"])
      }],
      "outline-offset": [{
        "outline-offset": [isLength]
      }],
      "outline-w": [{
        outline: [isLength]
      }],
      "outline-color": [{
        outline: [colors]
      }],
      "ring-w": [{
        ring: getLengthWithEmpty()
      }],
      "ring-w-inset": ["ring-inset"],
      "ring-color": [{
        ring: [colors]
      }],
      "ring-opacity": [{
        "ring-opacity": [opacity]
      }],
      "ring-offset-w": [{
        "ring-offset": [isLength]
      }],
      "ring-offset-color": [{
        "ring-offset": [colors]
      }],
      shadow: [{
        shadow: ["", "inner", "none", isTshirtSize, isArbitraryShadow]
      }],
      "shadow-color": [{
        shadow: [isAny]
      }],
      opacity: [{
        opacity: [opacity]
      }],
      "mix-blend": [{
        "mix-blend": getBlendModes()
      }],
      "bg-blend": [{
        "bg-blend": getBlendModes()
      }],
      filter: [{
        filter: ["", "none"]
      }],
      blur: [{
        blur: [blur]
      }],
      brightness: [{
        brightness: [brightness]
      }],
      contrast: [{
        contrast: [contrast]
      }],
      "drop-shadow": [{
        "drop-shadow": ["", "none", isTshirtSize, isArbitraryValue]
      }],
      grayscale: [{
        grayscale: [grayscale]
      }],
      "hue-rotate": [{
        "hue-rotate": [hueRotate]
      }],
      invert: [{
        invert: [invert]
      }],
      saturate: [{
        saturate: [saturate]
      }],
      sepia: [{
        sepia: [sepia]
      }],
      "backdrop-filter": [{
        "backdrop-filter": ["", "none"]
      }],
      "backdrop-blur": [{
        "backdrop-blur": [blur]
      }],
      "backdrop-brightness": [{
        "backdrop-brightness": [brightness]
      }],
      "backdrop-contrast": [{
        "backdrop-contrast": [contrast]
      }],
      "backdrop-grayscale": [{
        "backdrop-grayscale": [grayscale]
      }],
      "backdrop-hue-rotate": [{
        "backdrop-hue-rotate": [hueRotate]
      }],
      "backdrop-invert": [{
        "backdrop-invert": [invert]
      }],
      "backdrop-opacity": [{
        "backdrop-opacity": [opacity]
      }],
      "backdrop-saturate": [{
        "backdrop-saturate": [saturate]
      }],
      "backdrop-sepia": [{
        "backdrop-sepia": [sepia]
      }],
      "border-collapse": [{
        border: ["collapse", "separate"]
      }],
      "table-layout": [{
        table: ["auto", "fixed"]
      }],
      transition: [{
        transition: ["none", "all", "", "colors", "opacity", "shadow", "transform", isArbitraryValue]
      }],
      duration: [{
        duration: [isInteger]
      }],
      ease: [{
        ease: ["linear", "in", "out", "in-out", isArbitraryValue]
      }],
      delay: [{
        delay: [isInteger]
      }],
      animate: [{
        animate: ["none", "spin", "ping", "pulse", "bounce", isArbitraryValue]
      }],
      transform: [{
        transform: ["", "gpu", "none"]
      }],
      scale: [{
        scale: [scale]
      }],
      "scale-x": [{
        "scale-x": [scale]
      }],
      "scale-y": [{
        "scale-y": [scale]
      }],
      rotate: [{
        rotate: [isInteger, isArbitraryValue]
      }],
      "translate-x": [{
        "translate-x": [translate]
      }],
      "translate-y": [{
        "translate-y": [translate]
      }],
      "skew-x": [{
        "skew-x": [skew]
      }],
      "skew-y": [{
        "skew-y": [skew]
      }],
      "transform-origin": [{
        origin: ["center", "top", "top-right", "right", "bottom-right", "bottom", "bottom-left", "left", "top-left", isArbitraryValue]
      }],
      accent: [{
        accent: ["auto", colors]
      }],
      appearance: ["appearance-none"],
      cursor: [{
        cursor: ["auto", "default", "pointer", "wait", "text", "move", "help", "not-allowed", "none", "context-menu", "progress", "cell", "crosshair", "vertical-text", "alias", "copy", "no-drop", "grab", "grabbing", "all-scroll", "col-resize", "row-resize", "n-resize", "e-resize", "s-resize", "w-resize", "ne-resize", "nw-resize", "se-resize", "sw-resize", "ew-resize", "ns-resize", "nesw-resize", "nwse-resize", "zoom-in", "zoom-out", isArbitraryValue]
      }],
      "caret-color": [{
        caret: [colors]
      }],
      "pointer-events": [{
        "pointer-events": ["none", "auto"]
      }],
      resize: [{
        resize: ["none", "y", "x", ""]
      }],
      "scroll-behavior": [{
        scroll: ["auto", "smooth"]
      }],
      "scroll-m": [{
        "scroll-m": [spacing]
      }],
      "scroll-mx": [{
        "scroll-mx": [spacing]
      }],
      "scroll-my": [{
        "scroll-my": [spacing]
      }],
      "scroll-mt": [{
        "scroll-mt": [spacing]
      }],
      "scroll-mr": [{
        "scroll-mr": [spacing]
      }],
      "scroll-mb": [{
        "scroll-mb": [spacing]
      }],
      "scroll-ml": [{
        "scroll-ml": [spacing]
      }],
      "scroll-p": [{
        "scroll-p": [spacing]
      }],
      "scroll-px": [{
        "scroll-px": [spacing]
      }],
      "scroll-py": [{
        "scroll-py": [spacing]
      }],
      "scroll-pt": [{
        "scroll-pt": [spacing]
      }],
      "scroll-pr": [{
        "scroll-pr": [spacing]
      }],
      "scroll-pb": [{
        "scroll-pb": [spacing]
      }],
      "scroll-pl": [{
        "scroll-pl": [spacing]
      }],
      "snap-align": [{
        snap: ["start", "end", "center", "align-none"]
      }],
      "snap-stop": [{
        snap: ["normal", "always"]
      }],
      "snap-type": [{
        snap: ["none", "x", "y", "both"]
      }],
      "snap-strictness": [{
        snap: ["mandatory", "proximity"]
      }],
      touch: [{
        touch: ["auto", "none", "pinch-zoom", "manipulation", {
          pan: ["x", "left", "right", "y", "up", "down"]
        }]
      }],
      select: [{
        select: ["none", "text", "all", "auto"]
      }],
      "will-change": [{
        "will-change": ["auto", "scroll", "contents", "transform", isArbitraryValue]
      }],
      fill: [{
        fill: [colors]
      }],
      "stroke-w": [{
        stroke: [isLength]
      }],
      stroke: [{
        stroke: [colors]
      }],
      sr: ["sr-only", "not-sr-only"]
    },
    conflictingClassGroups: {
      overflow: ["overflow-x", "overflow-y"],
      overscroll: ["overscroll-x", "overscroll-y"],
      inset: ["inset-x", "inset-y", "top", "right", "bottom", "left"],
      "inset-x": ["right", "left"],
      "inset-y": ["top", "bottom"],
      flex: ["basis", "grow", "shrink"],
      "col-start-end": ["col-start", "col-end"],
      "row-start-end": ["row-start", "row-end"],
      gap: ["gap-x", "gap-y"],
      p: ["px", "py", "pt", "pr", "pb", "pl"],
      px: ["pr", "pl"],
      py: ["pt", "pb"],
      m: ["mx", "my", "mt", "mr", "mb", "ml"],
      mx: ["mr", "ml"],
      my: ["mt", "mb"],
      "font-size": ["leading"],
      "fvn-normal": ["fvn-ordinal", "fvn-slashed-zero", "fvn-figure", "fvn-spacing", "fvn-fraction"],
      "fvn-ordinal": ["fvn-normal"],
      "fvn-slashed-zero": ["fvn-normal"],
      "fvn-figure": ["fvn-normal"],
      "fvn-spacing": ["fvn-normal"],
      "fvn-fraction": ["fvn-normal"],
      rounded: ["rounded-t", "rounded-r", "rounded-b", "rounded-l", "rounded-tl", "rounded-tr", "rounded-br", "rounded-bl"],
      "rounded-t": ["rounded-tl", "rounded-tr"],
      "rounded-r": ["rounded-tr", "rounded-br"],
      "rounded-b": ["rounded-br", "rounded-bl"],
      "rounded-l": ["rounded-tl", "rounded-bl"],
      "border-w": ["border-w-t", "border-w-r", "border-w-b", "border-w-l"],
      "border-w-x": ["border-w-r", "border-w-l"],
      "border-w-y": ["border-w-t", "border-w-b"],
      "border-color": ["border-color-t", "border-color-r", "border-color-b", "border-color-l"],
      "border-color-x": ["border-color-r", "border-color-l"],
      "border-color-y": ["border-color-t", "border-color-b"],
      "scroll-m": ["scroll-mx", "scroll-my", "scroll-mt", "scroll-mr", "scroll-mb", "scroll-ml"],
      "scroll-mx": ["scroll-mr", "scroll-ml"],
      "scroll-my": ["scroll-mt", "scroll-mb"],
      "scroll-p": ["scroll-px", "scroll-py", "scroll-pt", "scroll-pr", "scroll-pb", "scroll-pl"],
      "scroll-px": ["scroll-pr", "scroll-pl"],
      "scroll-py": ["scroll-pt", "scroll-pb"]
    }
  };
}
var twMerge = /* @__PURE__ */ createTailwindMerge(getDefaultConfig), _excluded$1e = ["children", "href", "shape", "size", "variant", "color", "startIcon", "endIcon", "fullWidth", "responsive", "animation", "loading", "active", "disabled", "dataTheme", "className", "style"], Button = /* @__PURE__ */ (0, import_react8.forwardRef)((_ref, ref) => {
  let {
    children,
    href,
    shape,
    size,
    variant,
    color,
    startIcon,
    endIcon,
    fullWidth,
    responsive,
    animation = !0,
    loading,
    active,
    disabled,
    dataTheme,
    className,
    style
  } = _ref, props = _objectWithoutPropertiesLoose2(_ref, _excluded$1e), classes = twMerge("btn", className, clsx((startIcon && !loading || endIcon) && "gap-2", {
    [`btn-${size}`]: size,
    [`btn-${shape}`]: shape,
    [`btn-${variant}`]: variant,
    [`btn-${color}`]: color,
    "btn-block": fullWidth,
    "btn-xs md:btn-sm lg:btn-md xl:btn-lg": responsive,
    "no-animation": !animation,
    "btn-active": active,
    "btn-disabled": disabled,
    loading
  }));
  return href ? (0, import_jsx_runtime.jsxs)("a", {
    className: classes,
    style,
    href,
    children: [startIcon && startIcon, children, endIcon && endIcon]
  }) : (0, import_jsx_runtime.jsxs)("button", _extends$1({}, props, {
    ref,
    "data-theme": dataTheme,
    className: classes,
    style,
    disabled,
    children: [startIcon && !loading && startIcon, children, endIcon && endIcon]
  }));
});
Button.displayName = "Button";
var _excluded$1d = ["dataTheme", "className"], DropdownMenu = (_ref) => {
  let {
    dataTheme,
    className
  } = _ref, props = _objectWithoutPropertiesLoose2(_ref, _excluded$1d), classes = twMerge("dropdown-content menu p-2 shadow bg-base-100 rounded-box", className);
  return (0, import_jsx_runtime.jsx)("ul", _extends$1({}, props, {
    tabIndex: 0,
    "data-theme": dataTheme,
    className: classes
  }));
}, _excluded$1c = ["className"], DropdownItem = /* @__PURE__ */ import_react8.default.forwardRef((_ref, ref) => {
  let {
    className
  } = _ref, props = _objectWithoutPropertiesLoose2(_ref, _excluded$1c);
  return (0, import_jsx_runtime.jsx)("li", {
    className,
    children: (0, import_jsx_runtime.jsx)("a", _extends$1({
      ref
    }, props))
  });
}), _excluded$1b = ["children", "color", "size", "button", "dataTheme", "className", "disabled"], DropdownToggle = (_ref) => {
  let {
    children,
    color,
    size,
    button = !0,
    dataTheme,
    className,
    disabled
  } = _ref, props = _objectWithoutPropertiesLoose2(_ref, _excluded$1b);
  return (0, import_jsx_runtime.jsx)("label", _extends$1({
    tabIndex: 0,
    className
  }, props, {
    children: button ? (0, import_jsx_runtime.jsx)(Button, {
      dataTheme,
      color,
      size,
      disabled,
      children
    }) : children
  }));
}, _excluded$1a = ["children", "className", "item", "horizontal", "vertical", "hover", "open", "dataTheme"], Dropdown = /* @__PURE__ */ import_react8.default.forwardRef((_ref, ref) => {
  let {
    children,
    className,
    item,
    horizontal,
    vertical,
    hover,
    open,
    dataTheme
  } = _ref, props = _objectWithoutPropertiesLoose2(_ref, _excluded$1a), classes = twMerge("dropdown", className, clsx({
    [`dropdown-${horizontal}`]: horizontal,
    [`dropdown-${vertical}`]: vertical,
    "dropdown-hover": hover,
    "dropdown-open": open
  }));
  return (0, import_jsx_runtime.jsxs)("div", _extends$1({
    role: "listbox"
  }, props, {
    ref,
    "data-theme": dataTheme,
    className: classes,
    children: [(0, import_jsx_runtime.jsx)("label", {
      tabIndex: 0,
      children
    }), (0, import_jsx_runtime.jsx)("ul", {
      className: "dropdown-content",
      children: item
    })]
  }));
}), Dropdown$1 = Object.assign(Dropdown, {
  Toggle: DropdownToggle,
  Menu: DropdownMenu,
  Item: DropdownItem
}), _excluded$19 = ["children", "className"], ModalActions = /* @__PURE__ */ import_react8.default.forwardRef((_ref, ref) => {
  let {
    children,
    className
  } = _ref, props = _objectWithoutPropertiesLoose2(_ref, _excluded$19), classes = twMerge("modal-action", className);
  return (0, import_jsx_runtime.jsx)("div", _extends$1({}, props, {
    className: classes,
    ref,
    children
  }));
});
ModalActions.displayName = "ModalActions";
var _excluded$18 = ["children", "className"], ModalBody = /* @__PURE__ */ import_react8.default.forwardRef((_ref, ref) => {
  let {
    children,
    className
  } = _ref, props = _objectWithoutPropertiesLoose2(_ref, _excluded$18);
  return (0, import_jsx_runtime.jsx)("div", _extends$1({}, props, {
    className,
    ref,
    children
  }));
});
ModalBody.displayName = "ModalBody";
var _excluded$17 = ["children", "className"], ModalHeader = /* @__PURE__ */ import_react8.default.forwardRef((_ref, ref) => {
  let {
    children,
    className
  } = _ref, props = _objectWithoutPropertiesLoose2(_ref, _excluded$17), classes = twMerge("w-full mb-8 text-xl", className);
  return (0, import_jsx_runtime.jsx)("div", _extends$1({}, props, {
    className: classes,
    ref,
    children
  }));
});
ModalHeader.displayName = "ModalHeader";
var _excluded$16 = ["children", "open", "responsive", "onClickBackdrop", "dataTheme", "className"], Modal = /* @__PURE__ */ (0, import_react8.forwardRef)((_ref, ref) => {
  let {
    children,
    open,
    responsive,
    onClickBackdrop,
    dataTheme,
    className
  } = _ref, props = _objectWithoutPropertiesLoose2(_ref, _excluded$16), containerClasses = twMerge("modal", clsx({
    "modal-open": open,
    "modal-bottom sm:modal-middle": responsive
  })), bodyClasses = twMerge("modal-box", className);
  return (0, import_jsx_runtime.jsx)("div", {
    "aria-label": "Modal",
    "aria-hidden": !open,
    "aria-modal": open,
    "data-theme": dataTheme,
    className: containerClasses,
    onClick: (e) => {
      e.stopPropagation(), e.target === e.currentTarget && (e.stopPropagation(), onClickBackdrop && onClickBackdrop());
    },
    children: (0, import_jsx_runtime.jsx)("div", _extends$1({}, props, {
      "data-theme": dataTheme,
      className: bodyClasses,
      ref,
      children
    }))
  });
});
Modal.displayName = "Modal";
var Modal$1 = Object.assign(Modal, {
  Header: ModalHeader,
  Body: ModalBody,
  Actions: ModalActions
});
var isSingleStringChild = (children) => children && import_react8.default.Children.count(children) === 1 && /* @__PURE__ */ import_react8.default.isValidElement(children) && typeof children.props.children == "string";
var _excluded$14 = ["children", "icon", "status", "dataTheme", "className", "innerClassName"], Alert = /* @__PURE__ */ (0, import_react8.forwardRef)((_ref, ref) => {
  let {
    children,
    icon,
    status,
    dataTheme,
    className,
    innerClassName
  } = _ref, props = _objectWithoutPropertiesLoose2(_ref, _excluded$14), classes = twMerge("alert", className, clsx({
    [`alert-${status}`]: status
  }));
  return (0, import_jsx_runtime.jsx)("div", _extends$1({
    role: "alert"
  }, props, {
    ref,
    "data-theme": dataTheme,
    className: classes,
    children: (0, import_jsx_runtime.jsxs)("div", {
      className: twMerge("flex-1", innerClassName),
      children: [icon, children]
    })
  }));
});
Alert.displayName = "Alert";
var _excluded$13 = ["children", "space", "className"], AvatarGroup = /* @__PURE__ */ import_react8.default.forwardRef((_ref, ref) => {
  let {
    children,
    space = -6,
    className
  } = _ref, props = _objectWithoutPropertiesLoose2(_ref, _excluded$13), spacingClassName = `${space < 0 ? "-" : ""}space-x-${Math.abs(space)}`, classes = clsx("avatar-group", spacingClassName, className);
  return (0, import_jsx_runtime.jsx)("div", _extends$1({
    "aria-label": `Group of ${children.length} avatar photos`
  }, props, {
    className: classes,
    ref,
    children
  }));
}), _excluded$12 = ["size", "src", "letters", "shape", "color", "border", "borderColor", "online", "offline", "dataTheme", "className", "children"], Avatar = /* @__PURE__ */ import_react8.default.forwardRef((_ref, ref) => {
  let {
    size = "md",
    src,
    letters,
    shape,
    color,
    border,
    borderColor,
    online,
    offline,
    dataTheme,
    className,
    children
  } = _ref, props = _objectWithoutPropertiesLoose2(_ref, _excluded$12), containerClasses = twMerge("avatar", className, clsx({
    online,
    offline,
    placeholder: !src
  })), imgClasses = clsx({
    "ring ring-offset-base-100 ring-offset-2": border,
    [`ring-${borderColor}`]: borderColor,
    "rounded-btn": shape === "square",
    "rounded-full": shape === "circle",
    "w-32 h-32": size === "lg",
    "w-24 h-24": size === "md",
    "w-14 h-14": size === "sm",
    "w-10 h-10": size === "xs"
  }), placeholderClasses = clsx({
    "bg-neutral-focus": !color,
    "text-neutral-content": !color,
    [`bg-${color}`]: color,
    [`text-${color}-content`]: color,
    "ring ring-offset-base-100 ring-offset-2": border,
    [`ring-${borderColor}`]: borderColor,
    "rounded-btn": shape === "square",
    "rounded-full": shape === "circle",
    "w-32 h-32 text-3xl": size === "lg",
    "w-24 h-24 text-xl": size === "md",
    "w-14 h-14": size === "sm",
    "w-10 h-10": size === "xs"
  }), customImgDimension = typeof size == "number" ? {
    width: size,
    height: size
  } : {};
  return (0, import_jsx_runtime.jsx)("div", _extends$1({
    "aria-label": "Avatar photo"
  }, props, {
    "data-theme": dataTheme,
    className: containerClasses,
    ref,
    children: (() => {
      if (src)
        return (0, import_jsx_runtime.jsx)("div", {
          className: imgClasses,
          style: customImgDimension,
          children: (0, import_jsx_runtime.jsx)("img", {
            src
          })
        });
      if (letters || isSingleStringChild(children))
        return (0, import_jsx_runtime.jsx)("div", {
          className: placeholderClasses,
          style: customImgDimension,
          children: (0, import_jsx_runtime.jsx)("span", {
            children: letters || children
          })
        });
      if (import_react8.default.Children.count(children) === 1) {
        let firstChild = import_react8.default.Children.only(children);
        return /* @__PURE__ */ import_react8.default.cloneElement(firstChild, {
          className: twMerge(imgClasses, firstChild.props.className),
          style: _extends$1({}, customImgDimension, firstChild.props.style)
        });
      } else
        return (0, import_jsx_runtime.jsx)("div", {
          className: imgClasses,
          style: customImgDimension,
          children
        });
    })()
  }));
}), Avatar$1 = Object.assign(Avatar, {
  Group: AvatarGroup
}), _excluded$11 = ["children", "variant", "size", "color", "responsive", "dataTheme", "className"], Badge = /* @__PURE__ */ (0, import_react8.forwardRef)((_ref, ref) => {
  let {
    children,
    variant,
    size,
    color,
    responsive,
    dataTheme,
    className
  } = _ref, props = _objectWithoutPropertiesLoose2(_ref, _excluded$11), classes = twMerge("badge", className, clsx({
    [`badge-${size}`]: size,
    [`badge-${variant}`]: variant,
    [`badge-${color}`]: color,
    "badge-xs md:badge-sm lg:badge-md xl:badge-lg": responsive
  }));
  return (0, import_jsx_runtime.jsx)("div", _extends$1({
    "aria-label": "Badge"
  }, props, {
    "data-theme": dataTheme,
    className: classes,
    ref,
    children
  }));
});
Badge.displayName = "Badge";
var _excluded$10 = ["className"], CardActions = /* @__PURE__ */ import_react8.default.forwardRef((_ref, ref) => {
  let {
    className
  } = _ref, props = _objectWithoutPropertiesLoose2(_ref, _excluded$10);
  return (0, import_jsx_runtime.jsx)("div", _extends$1({}, props, {
    className: twMerge("card-actions", className),
    ref
  }));
}), _excluded$$ = ["className"], CardBody = /* @__PURE__ */ import_react8.default.forwardRef((_ref, ref) => {
  let {
    className
  } = _ref, props = _objectWithoutPropertiesLoose2(_ref, _excluded$$);
  return (0, import_jsx_runtime.jsx)("div", _extends$1({}, props, {
    className: twMerge("card-body", className),
    ref
  }));
}), _excluded$_ = ["className", "tag"], CardTitle = /* @__PURE__ */ import_react8.default.forwardRef((_ref, ref) => {
  let {
    className,
    tag = "div"
  } = _ref, props = _objectWithoutPropertiesLoose2(_ref, _excluded$_);
  return (0, import_jsx_runtime.jsx)(tag, _extends$1({}, props, {
    className: twMerge("card-title", className),
    ref
  }));
}), CardImage = /* @__PURE__ */ import_react8.default.forwardRef((_ref, ref) => {
  let props = _extends$1({}, _ref);
  return (0, import_jsx_runtime.jsx)("figure", {
    ref,
    children: (0, import_jsx_runtime.jsx)("img", _extends$1({}, props))
  });
}), _excluded$Z = ["bordered", "imageFull", "normal", "compact", "side", "className"], DYNAMIC_MODIFIERS$1 = {
  compact: {
    true: "card-compact",
    xs: "xs:card-compact",
    sm: "sm:card-compact",
    md: "md:card-compact",
    lg: "lg:card-compact"
  },
  normal: {
    true: "card-normal",
    xs: "xs:card-normal",
    sm: "sm:card-normal",
    md: "md:card-normal",
    lg: "lg:card-normal"
  },
  side: {
    true: "card-side",
    xs: "xs:card-side",
    sm: "sm:card-side",
    md: "md:card-side",
    lg: "lg:card-side"
  }
}, Card = /* @__PURE__ */ import_react8.default.forwardRef((_ref, ref) => {
  let {
    bordered = !0,
    imageFull,
    normal,
    compact,
    side,
    className
  } = _ref, props = _objectWithoutPropertiesLoose2(_ref, _excluded$Z), classes = twMerge("card", className, clsx({
    "card-bordered": bordered,
    "image-full": imageFull,
    [compact && DYNAMIC_MODIFIERS$1.compact[compact.toString()] || ""]: compact,
    [normal && DYNAMIC_MODIFIERS$1.normal[normal.toString()] || ""]: normal,
    [side && DYNAMIC_MODIFIERS$1.side[side.toString()] || ""]: side
  }));
  return (0, import_jsx_runtime.jsx)("div", _extends$1({
    "aria-label": "Card"
  }, props, {
    className: classes,
    ref
  }));
}), Card$1 = Object.assign(Card, {
  Actions: CardActions,
  Body: CardBody,
  Title: CardTitle,
  Image: CardImage
}), _excluded$Y = ["children", "innerRef", "src", "alt", "index", "width", "hasButtons", "buttonStyle", "onPrev", "onNext", "className"], CarouselItem = (_ref) => {
  let {
    children,
    innerRef,
    src,
    alt,
    index = 0,
    width,
    hasButtons,
    buttonStyle,
    onPrev,
    onNext,
    className
  } = _ref, props = _objectWithoutPropertiesLoose2(_ref, _excluded$Y), classes = twMerge("carousel-item relative", className, clsx({
    "w-full": width === "full",
    "w-1/2": width === "half",
    "h-full": !0
  })), imageClasses = clsx({
    "w-full": width === "full"
  }), renderButtons = () => buttonStyle != null ? (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, {
    children: [/* @__PURE__ */ (0, import_react8.cloneElement)(buttonStyle("\u276E"), {
      onClick: onPrev
    }), /* @__PURE__ */ (0, import_react8.cloneElement)(buttonStyle("\u276F"), {
      onClick: onNext
    })]
  }) : (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, {
    children: [(0, import_jsx_runtime.jsx)(Button, {
      onClick: onPrev,
      shape: "circle",
      children: "\u276E"
    }), (0, import_jsx_runtime.jsx)(Button, {
      onClick: onNext,
      shape: "circle",
      children: "\u276F"
    })]
  });
  return (0, import_jsx_runtime.jsxs)("div", _extends$1({}, props, {
    id: `item${index}`,
    ref: innerRef,
    className: classes,
    children: [src ? (0, import_jsx_runtime.jsx)("img", {
      src,
      alt,
      className: imageClasses
    }) : children, hasButtons && (0, import_jsx_runtime.jsx)("div", {
      className: "absolute flex justify-between transform -translate-y-1/2 left-5 right-5 top-1/2",
      children: renderButtons()
    })]
  }));
}, _excluded$X = ["children", "display", "snap", "vertical", "width", "buttonStyle", "dataTheme", "className"], Carousel = /* @__PURE__ */ (0, import_react8.forwardRef)((_ref, ref) => {
  let {
    children,
    display = "slider",
    snap,
    vertical,
    width,
    buttonStyle,
    dataTheme,
    className
  } = _ref, props = _objectWithoutPropertiesLoose2(_ref, _excluded$X), classes = twMerge("carousel", className, clsx({
    [`carousel-${snap}`]: snap,
    "carousel-vertical": vertical,
    "w-full": display !== "slider"
  })), [itemRefs, setItemRefs] = (0, import_react8.useState)([]), [activeIndex, setActiveIndex] = (0, import_react8.useState)(0);
  (0, import_react8.useEffect)(() => {
    let newRefs = [];
    children.map((_) => {
      newRefs.push(/* @__PURE__ */ (0, import_react8.createRef)());
    }), setItemRefs(newRefs);
  }, [children]);
  let scrollToIndex = (index) => {
    var _itemRefs$index$curre;
    (_itemRefs$index$curre = itemRefs[index].current) == null || _itemRefs$index$curre.scrollIntoView({
      behavior: "smooth",
      block: "nearest",
      inline: snap
    }), setActiveIndex(index);
  };
  return (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, {
    children: [(0, import_jsx_runtime.jsx)("div", _extends$1({
      role: "listbox",
      "aria-label": "Image carousel"
    }, props, {
      ref,
      "data-theme": dataTheme,
      className: classes,
      children: children.map((child, i) => /* @__PURE__ */ (0, import_react8.cloneElement)(child, _extends$1({
        key: i,
        innerRef: itemRefs[i],
        index: i + 1,
        children: child.props.children,
        src: child.props.src,
        alt: child.props.alt,
        width: display !== "slider" ? "full" : width,
        hasButtons: display === "sequential",
        buttonStyle,
        onPrev: () => scrollToIndex(i - 1 < 0 ? children.length - 1 : i - 1),
        onNext: () => scrollToIndex(i + 1 > children.length - 1 ? 0 : i + 1)
      }, child.props)))
    })), display === "numbered" && (0, import_jsx_runtime.jsx)("div", {
      className: "flex justify-center w-full py-2 gap-2",
      children: children.map((_, i) => buttonStyle != null ? /* @__PURE__ */ (0, import_react8.cloneElement)(buttonStyle((i + 1).toString()), {
        key: i,
        onClick: () => scrollToIndex(i)
      }) : (0, import_jsx_runtime.jsx)(Button, {
        active: i === activeIndex,
        onClick: () => scrollToIndex(i),
        children: i + 1
      }, i))
    })]
  });
}), Carousel$1 = Object.assign(Carousel, {
  Item: CarouselItem
}), _excluded$W = ["children", "className"], CollapseTitle = (_ref) => {
  let {
    children,
    className
  } = _ref, props = _objectWithoutPropertiesLoose2(_ref, _excluded$W), classes = twMerge("collapse-title", className);
  return (0, import_jsx_runtime.jsx)("div", _extends$1({}, props, {
    className: classes,
    children
  }));
}, _excluded$V = ["children", "className"], CollapseContent = (_ref) => {
  let {
    children,
    className
  } = _ref, props = _objectWithoutPropertiesLoose2(_ref, _excluded$V), classes = twMerge("collapse-content", className);
  return (0, import_jsx_runtime.jsx)("div", _extends$1({}, props, {
    className: classes,
    children
  }));
}, _excluded$U = ["children", "checkbox", "icon", "open", "dataTheme", "className", "onOpen", "onClose", "onToggle"], Collapse = /* @__PURE__ */ import_react8.default.forwardRef((_ref, ref) => {
  let {
    children,
    checkbox,
    icon,
    open,
    dataTheme,
    className,
    onOpen,
    onClose,
    onToggle
  } = _ref, props = _objectWithoutPropertiesLoose2(_ref, _excluded$U), classes = twMerge("collapse", className, clsx({
    [`collapse-${icon}`]: icon,
    "collapse-open": open === !0,
    "collapse-close": open === !1
  })), [isChecked, setIsChecked] = (0, import_react8.useState)(open), checkboxRef = (0, import_react8.useRef)(null);
  return (0, import_jsx_runtime.jsxs)("div", _extends$1({
    "aria-expanded": open
  }, props, {
    ref,
    tabIndex: isChecked === !0 ? void 0 : 0,
    "data-theme": dataTheme,
    className: classes,
    onBlur: (event) => {
      !checkbox && onToggle && onToggle(), !checkbox && onClose && onClose(), props.onBlur && props.onBlur(event);
    },
    onFocus: (event) => {
      !checkbox && onToggle && onToggle(), !checkbox && onOpen && onOpen(), props.onFocus && props.onFocus(event);
    },
    children: [checkbox && (0, import_jsx_runtime.jsx)("input", {
      type: "checkbox",
      tabIndex: isChecked === !0 ? 0 : void 0,
      className: "peer",
      ref: checkboxRef,
      onChange: () => {
        var _checkboxRef$current, _checkboxRef$current2, _checkboxRef$current3;
        onToggle && onToggle(), onOpen && (_checkboxRef$current = checkboxRef.current) != null && _checkboxRef$current.checked ? onOpen() : onClose && !((_checkboxRef$current2 = checkboxRef.current) != null && _checkboxRef$current2.checked) && onClose(), setIsChecked((_checkboxRef$current3 = checkboxRef.current) == null ? void 0 : _checkboxRef$current3.checked);
      }
    }), children]
  }));
}), Collapse$1 = Object.assign(Collapse, {
  Title: CollapseTitle,
  Content: CollapseContent
});
var _excluded$R = ["color", "dataTheme", "className"], Progress = /* @__PURE__ */ (0, import_react8.forwardRef)((_ref, ref) => {
  let {
    color,
    dataTheme,
    className
  } = _ref, props = _objectWithoutPropertiesLoose2(_ref, _excluded$R), classes = twMerge("progress", className, clsx({
    [`progress-${color}`]: color
  }));
  return (0, import_jsx_runtime.jsx)("progress", _extends$1({}, props, {
    ref,
    "data-theme": dataTheme,
    className: classes
  }));
});
Progress.displayName = "Progress";
var _excluded$Q = ["value", "size", "thickness", "color", "dataTheme", "className", "children"], RadialProgress = /* @__PURE__ */ (0, import_react8.forwardRef)((_ref, ref) => {
  let {
    value,
    size = "4rem",
    thickness = "4px",
    color,
    dataTheme,
    className,
    children
  } = _ref, props = _objectWithoutPropertiesLoose2(_ref, _excluded$Q), classes = twMerge("radial-progress", className, clsx({
    [`text-${color}`]: color
  })), displayedValue = Math.min(100, Math.max(0, value));
  return (0, import_jsx_runtime.jsx)("div", _extends$1({
    role: "progressbar",
    "aria-valuenow": displayedValue,
    "aria-valuemin": 0,
    "aria-valuemax": 100
  }, props, {
    ref,
    "data-theme": dataTheme,
    className: classes,
    style: {
      "--value": displayedValue,
      "--size": size,
      "--thickness": thickness
    },
    children
  }));
});
RadialProgress.displayName = "RadialProgress";
var _excluded$P = ["variant", "className"], StatItem = /* @__PURE__ */ import_react8.default.forwardRef((_ref, ref) => {
  let {
    variant,
    className
  } = _ref, props = _objectWithoutPropertiesLoose2(_ref, _excluded$P), classes = twMerge(className, clsx({
    [`stat-${variant}`]: variant
  }));
  return (0, import_jsx_runtime.jsx)("div", _extends$1({}, props, {
    className: classes,
    ref
  }));
}), _excluded$O = ["dataTheme", "className"], Stat = /* @__PURE__ */ (0, import_react8.forwardRef)((_ref, ref) => {
  let {
    dataTheme,
    className
  } = _ref, props = _objectWithoutPropertiesLoose2(_ref, _excluded$O), classes = twMerge("stat", className);
  return (0, import_jsx_runtime.jsx)("div", _extends$1({}, props, {
    "data-theme": dataTheme,
    className: classes,
    ref
  }));
}), Stat$1 = Object.assign(Stat, {
  Item: StatItem
}), _excluded$N = ["horizontal", "vertical", "dataTheme", "className", "children"], Stats = /* @__PURE__ */ import_react8.default.forwardRef((_ref, ref) => {
  let {
    horizontal,
    vertical,
    dataTheme,
    className,
    children
  } = _ref, props = _objectWithoutPropertiesLoose2(_ref, _excluded$N), classes = twMerge("stats", className, clsx({
    "stats-horizontal": horizontal,
    "stats-vertical": vertical
  }));
  return (0, import_jsx_runtime.jsx)("div", _extends$1({}, props, {
    ref,
    "data-theme": dataTheme,
    className: classes,
    children
  }));
}), Stats$1 = Object.assign(Stats, {
  Stat: Stat$1
}), _excluded$M = ["children"], TableHead = /* @__PURE__ */ import_react8.default.forwardRef((_ref, ref) => {
  let {
    children
  } = _ref, props = _objectWithoutPropertiesLoose2(_ref, _excluded$M);
  return (0, import_jsx_runtime.jsx)("thead", _extends$1({}, props, {
    ref,
    children: (0, import_jsx_runtime.jsx)("tr", {
      children: children == null ? void 0 : children.map((child, i) => (0, import_jsx_runtime.jsx)("th", {
        children: child
      }, i))
    })
  }));
}), _excluded$L = ["children"], TableBody = /* @__PURE__ */ import_react8.default.forwardRef((_ref, ref) => {
  let {
    children
  } = _ref, props = _objectWithoutPropertiesLoose2(_ref, _excluded$L);
  return (0, import_jsx_runtime.jsx)("tbody", _extends$1({}, props, {
    ref,
    children
  }));
}), _excluded$K = ["children", "active", "hover", "className"], TableRow = /* @__PURE__ */ import_react8.default.forwardRef((_ref, ref) => {
  let {
    children,
    active,
    hover,
    className
  } = _ref, props = _objectWithoutPropertiesLoose2(_ref, _excluded$K), classes = twMerge(className, clsx({
    active,
    hover
  }));
  return (0, import_jsx_runtime.jsx)("tr", _extends$1({}, props, {
    className: classes,
    ref,
    children: children == null ? void 0 : children.map((child, i) => i < 1 ? (0, import_jsx_runtime.jsx)("th", {
      children: child
    }, i) : (0, import_jsx_runtime.jsx)("td", {
      children: child
    }, i))
  }));
}), _excluded$J = ["children"], TableFooter = /* @__PURE__ */ import_react8.default.forwardRef((_ref, ref) => {
  let {
    children
  } = _ref, props = _objectWithoutPropertiesLoose2(_ref, _excluded$J);
  return (0, import_jsx_runtime.jsx)("tfoot", _extends$1({}, props, {
    ref,
    children: (0, import_jsx_runtime.jsx)("tr", {
      children: children == null ? void 0 : children.map((child, i) => (0, import_jsx_runtime.jsx)("th", {
        children: child
      }, i))
    })
  }));
}), _excluded$I = ["children", "compact", "zebra", "dataTheme", "className"], Table = /* @__PURE__ */ import_react8.default.forwardRef((_ref, ref) => {
  let {
    children,
    compact,
    zebra,
    dataTheme,
    className
  } = _ref, props = _objectWithoutPropertiesLoose2(_ref, _excluded$I), classes = twMerge("table", className, clsx({
    "table-zebra": zebra,
    "table-compact": compact
  }));
  return (0, import_jsx_runtime.jsx)("table", _extends$1({}, props, {
    "data-theme": dataTheme,
    className: classes,
    ref,
    children
  }));
}), Table$1 = Object.assign(Table, {
  Head: TableHead,
  Body: TableBody,
  Row: TableRow,
  Footer: TableFooter
}), _excluded$H = ["message", "children", "open", "color", "position", "dataTheme", "className"], Tooltip = /* @__PURE__ */ (0, import_react8.forwardRef)((_ref, ref) => {
  let {
    message,
    children,
    open,
    color,
    position,
    dataTheme,
    className
  } = _ref, props = _objectWithoutPropertiesLoose2(_ref, _excluded$H), classes = twMerge("tooltip", className, clsx({
    "tooltip-open": open,
    [`tooltip-${color}`]: color,
    [`tooltip-${position}`]: position
  }));
  return (0, import_jsx_runtime.jsx)("div", _extends$1({
    role: "tooltip"
  }, props, {
    ref,
    "data-theme": dataTheme,
    "data-tip": message,
    className: classes,
    children
  }));
});
Tooltip.displayName = "Tooltip";
var _excluded$G = ["children", "title", "dataTheme", "className"], Label = /* @__PURE__ */ import_react8.default.forwardRef((_ref, ref) => {
  let {
    children,
    title,
    className
  } = _ref, props = _objectWithoutPropertiesLoose2(_ref, _excluded$G), classes = twMerge("label", className);
  return (0, import_jsx_runtime.jsxs)("label", _extends$1({}, props, {
    className: classes,
    children: [(0, import_jsx_runtime.jsx)("span", {
      className: "label-text cursor-pointer",
      ref,
      children: title
    }), children]
  }));
}), _excluded$F = ["children", "dataTheme", "className"], Form2 = /* @__PURE__ */ import_react8.default.forwardRef((_ref, ref) => {
  let {
    children,
    dataTheme,
    className
  } = _ref, props = _objectWithoutPropertiesLoose2(_ref, _excluded$F), classes = twMerge("form-control", className);
  return (0, import_jsx_runtime.jsx)("form", _extends$1({
    role: "form"
  }, props, {
    "data-theme": dataTheme,
    className: classes,
    ref,
    children
  }));
}), Form$1 = Object.assign(Form2, {
  Label
}), _excluded$E = ["color", "size", "indeterminate", "dataTheme", "className"], Checkbox = /* @__PURE__ */ (0, import_react8.forwardRef)((_ref, ref) => {
  let {
    color,
    size,
    indeterminate,
    dataTheme,
    className
  } = _ref, props = _objectWithoutPropertiesLoose2(_ref, _excluded$E), classes = twMerge("checkbox", className, clsx({
    [`checkbox-${size}`]: size,
    [`checkbox-${color}`]: color
  })), checkboxRef = (0, import_react8.useRef)(null);
  return (0, import_react8.useImperativeHandle)(ref, () => checkboxRef.current), (0, import_react8.useEffect)(() => {
    !checkboxRef.current || (indeterminate ? checkboxRef.current.indeterminate = !0 : checkboxRef.current.indeterminate = !1);
  }, [indeterminate]), (0, import_jsx_runtime.jsx)("input", _extends$1({}, props, {
    ref: checkboxRef,
    type: "checkbox",
    "data-theme": dataTheme,
    className: classes
  }));
});
Checkbox.displayName = "Checkbox";
var _excluded$D = ["value", "placeholder", "bordered", "borderOffset", "size", "color", "dataTheme", "className", "type"], Input = /* @__PURE__ */ (0, import_react8.forwardRef)((_ref, ref) => {
  let {
    value,
    placeholder,
    bordered = !0,
    borderOffset,
    size,
    color,
    dataTheme,
    className,
    type
  } = _ref, props = _objectWithoutPropertiesLoose2(_ref, _excluded$D), classes = twMerge("input", className, clsx({
    [`input-${size}`]: size,
    [`input-${color}`]: color,
    ["focus:outline-offset-0"]: !borderOffset,
    "input-bordered": bordered
  }));
  return (0, import_jsx_runtime.jsx)("input", _extends$1({}, props, {
    ref,
    type,
    value,
    placeholder,
    "data-theme": dataTheme,
    className: classes
  }));
});
Input.displayName = "Input";
var _excluded$C = ["color", "size", "name", "dataTheme", "className"], Radio = /* @__PURE__ */ (0, import_react8.forwardRef)((_ref, ref) => {
  let {
    color,
    size,
    name,
    dataTheme,
    className
  } = _ref, props = _objectWithoutPropertiesLoose2(_ref, _excluded$C), classes = twMerge("radio", className, clsx({
    [`radio-${size}`]: size,
    [`radio-${color}`]: color
  }));
  return (0, import_jsx_runtime.jsx)("input", _extends$1({}, props, {
    ref,
    type: "radio",
    name,
    "data-theme": dataTheme,
    className: classes
  }));
});
Radio.displayName = "Radio";
var _excluded$B = ["color", "size", "step", "dataTheme", "className"], Range = /* @__PURE__ */ (0, import_react8.forwardRef)((_ref, ref) => {
  let {
    color,
    size,
    step,
    dataTheme,
    className
  } = _ref, props = _objectWithoutPropertiesLoose2(_ref, _excluded$B), classes = twMerge("range", className, clsx({
    [`range-${size}`]: size,
    [`range-${color}`]: color
  })), isNumeric = (n) => !isNaN(parseFloat(n)) && isFinite(n), numSteps = (0, import_react8.useMemo)(() => {
    var _Math$ceil;
    let safeStep = Math.max(1, Number(step));
    return (_Math$ceil = Math.ceil(100 / safeStep)) != null ? _Math$ceil : 1;
  }, [props.max, step]);
  return (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, {
    children: [(0, import_jsx_runtime.jsx)("input", _extends$1({}, props, {
      ref,
      type: "range",
      step,
      "data-theme": dataTheme,
      className: classes
    })), isNumeric(step) && (0, import_jsx_runtime.jsx)("div", {
      className: "w-full flex justify-between text-xs px-2",
      children: [...Array(numSteps + 1)].map((_, i) => (0, import_jsx_runtime.jsx)("span", {
        children: "|"
      }, i))
    })]
  });
});
Range.displayName = "Range";
var RatingItem = (_ref) => {
  let props = _extends$1({}, _ref);
  return (0, import_jsx_runtime.jsx)("input", _extends$1({}, props, {
    type: "checkbox"
  }));
}, _excluded$A = ["children", "size", "half", "hidden", "dataTheme", "className", "value", "onChange"], Rating = /* @__PURE__ */ import_react8.default.forwardRef((_ref, ref) => {
  let {
    children,
    size,
    half,
    hidden,
    dataTheme,
    className,
    value,
    onChange
  } = _ref, props = _objectWithoutPropertiesLoose2(_ref, _excluded$A), [rating, setRating] = (0, import_react8.useState)(value), classes = twMerge("rating", className, clsx({
    [`rating-${size}`]: size,
    "rating-half": half,
    "rating-hidden": hidden || rating === 0
  })), handleOnRatingChange = (newRating) => {
    newRating !== rating && (setRating(newRating), onChange == null || onChange(newRating));
  };
  return (0, import_react8.useEffect)(() => {
    setRating(value);
  }, [value]), (0, import_jsx_runtime.jsxs)("div", _extends$1({
    "aria-label": "Rating"
  }, props, {
    ref,
    "data-theme": dataTheme,
    className: classes,
    children: [rating === 0 && (0, import_jsx_runtime.jsx)(RatingItem, {
      className: clsx(classes, "hidden"),
      checked: !0,
      readOnly: !0
    }), import_react8.default.Children.map(children, (child, index) => {
      let childComponent = child;
      return /* @__PURE__ */ import_react8.default.cloneElement(childComponent, {
        key: index + rating,
        checked: rating === index + 1,
        readOnly: onChange == null,
        onChange: () => handleOnRatingChange(index + 1)
      });
    })]
  }));
}), Rating$1 = Object.assign(Rating, {
  Item: RatingItem
}), _excluded$z = ["value", "children"], SelectOption = (_ref) => {
  let {
    value,
    children
  } = _ref, props = _objectWithoutPropertiesLoose2(_ref, _excluded$z);
  return (0, import_jsx_runtime.jsx)("option", _extends$1({}, props, {
    value,
    children
  }));
}, _excluded$y = ["children", "value", "onChange", "size", "color", "bordered", "borderOffset", "dataTheme", "className"], SelectInner = (props, ref) => {
  let {
    children,
    value,
    onChange,
    size,
    color,
    bordered = !0,
    borderOffset,
    dataTheme,
    className
  } = props, rest = _objectWithoutPropertiesLoose2(props, _excluded$y), classes = twMerge("select", className, clsx({
    [`select-${size}`]: size,
    [`select-${color}`]: color,
    ["focus:outline-offset-0"]: !borderOffset,
    "select-bordered": bordered
  }));
  return (0, import_jsx_runtime.jsx)("select", _extends$1({}, rest, {
    ref,
    "data-theme": dataTheme,
    className: classes,
    onChange: (e) => onChange == null ? void 0 : onChange(e.currentTarget.value),
    value,
    children
  }));
}, Select = /* @__PURE__ */ import_react8.default.forwardRef(SelectInner), Select$1 = Object.assign(Select, {
  Option: SelectOption
}), _excluded$x = ["color", "size", "dataTheme", "className"], Toggle = /* @__PURE__ */ (0, import_react8.forwardRef)((_ref, ref) => {
  let {
    color,
    size,
    dataTheme,
    className
  } = _ref, props = _objectWithoutPropertiesLoose2(_ref, _excluded$x), classes = twMerge("toggle", className, clsx({
    [`toggle-${size}`]: size,
    [`toggle-${color}`]: color
  }));
  return (0, import_jsx_runtime.jsx)("input", _extends$1({}, props, {
    ref,
    type: "checkbox",
    "data-theme": dataTheme,
    className: classes
  }));
});
Toggle.displayName = "Toggle";
var _excluded$v = ["children", "size", "horizontal", "dataTheme", "className"], Artboard = /* @__PURE__ */ (0, import_react8.forwardRef)((_ref, ref) => {
  let {
    children,
    size,
    horizontal,
    dataTheme,
    className
  } = _ref, props = _objectWithoutPropertiesLoose2(_ref, _excluded$v), classes = twMerge("artboard", "artboard-demo", className, clsx({
    [`phone-${size}`]: size,
    horizontal
  }));
  return (0, import_jsx_runtime.jsx)("div", _extends$1({
    "aria-label": "Artboard"
  }, props, {
    ref,
    "data-theme": dataTheme,
    className: classes,
    children
  }));
});
Artboard.displayName = "Artboard";
var _excluded$u = ["vertical", "children", "dataTheme", "className"], ButtonGroup = /* @__PURE__ */ import_react8.default.forwardRef((_ref, ref) => {
  let {
    vertical,
    children,
    dataTheme,
    className
  } = _ref, props = _objectWithoutPropertiesLoose2(_ref, _excluded$u), classes = twMerge("btn-group", className, clsx({
    "btn-group-vertical": vertical
  }));
  return (0, import_jsx_runtime.jsx)("div", _extends$1({
    "aria-label": `Group of ${children.length} buttons`
  }, props, {
    "data-theme": dataTheme,
    className: classes,
    ref,
    children
  }));
}), _excluded$t = ["children", "vertical", "dataTheme", "className"], Divider = (_ref) => {
  let {
    children,
    vertical,
    dataTheme,
    className
  } = _ref, props = _objectWithoutPropertiesLoose2(_ref, _excluded$t), classes = twMerge("divider", className, clsx({
    "divider-vertical": vertical
  }));
  return (0, import_jsx_runtime.jsx)("div", _extends$1({
    role: "separator"
  }, props, {
    "data-theme": dataTheme,
    className: classes,
    children
  }));
}, _excluded$s = ["children", "side", "open", "mobile", "end", "dataTheme", "className", "toggleClassName", "contentClassName", "sideClassName", "overlayClassName", "onClickOverlay"], Drawer = (_ref) => {
  let {
    children,
    side,
    open,
    mobile,
    end,
    dataTheme,
    className,
    toggleClassName,
    contentClassName,
    sideClassName,
    overlayClassName,
    onClickOverlay
  } = _ref, props = _objectWithoutPropertiesLoose2(_ref, _excluded$s), classes = twMerge("drawer", className, clsx({
    "drawer-mobile": mobile,
    "drawer-end": end
  }));
  return (0, import_jsx_runtime.jsxs)("div", _extends$1({
    "aria-expanded": open
  }, props, {
    "data-theme": dataTheme,
    className: classes,
    children: [(0, import_jsx_runtime.jsx)("input", {
      type: "checkbox",
      className: clsx("drawer-toggle", toggleClassName),
      checked: open,
      readOnly: !0
    }), (0, import_jsx_runtime.jsx)("div", {
      className: clsx("drawer-content", contentClassName),
      children
    }), (0, import_jsx_runtime.jsxs)("div", {
      className: clsx("drawer-side", sideClassName),
      children: [(0, import_jsx_runtime.jsx)("label", {
        className: clsx("drawer-overlay", overlayClassName),
        onClick: onClickOverlay
      }), side]
    })]
  }));
}, _excluded$r = ["className"], FooterTitle = /* @__PURE__ */ import_react8.default.forwardRef((_ref, ref) => {
  let {
    className
  } = _ref, props = _objectWithoutPropertiesLoose2(_ref, _excluded$r), classes = twMerge("footer-title", className);
  return (0, import_jsx_runtime.jsx)("span", _extends$1({}, props, {
    className: classes,
    ref
  }));
}), _excluded$q = ["center", "dataTheme", "className"], Footer = /* @__PURE__ */ import_react8.default.forwardRef((_ref, ref) => {
  let {
    center,
    dataTheme,
    className
  } = _ref, props = _objectWithoutPropertiesLoose2(_ref, _excluded$q), classes = twMerge("footer", className, clsx({
    "footer-center": center
  }));
  return (0, import_jsx_runtime.jsx)("div", _extends$1({
    role: "contentinfo"
  }, props, {
    "data-theme": dataTheme,
    className: classes,
    ref
  }));
}), Footer$1 = Object.assign(Footer, {
  Title: FooterTitle
}), _excluded$p = ["dataTheme", "className", "children"], HeroContent = /* @__PURE__ */ import_react8.default.forwardRef((_ref, ref) => {
  let {
    dataTheme,
    className,
    children
  } = _ref, props = _objectWithoutPropertiesLoose2(_ref, _excluded$p), classes = twMerge("hero-content", className);
  return (0, import_jsx_runtime.jsx)("div", _extends$1({}, props, {
    "data-theme": dataTheme,
    className: classes,
    ref,
    children
  }));
}), _excluded$o = ["dataTheme", "className", "children"], HeroOverlay = /* @__PURE__ */ import_react8.default.forwardRef((_ref, ref) => {
  let {
    dataTheme,
    className,
    children
  } = _ref, props = _objectWithoutPropertiesLoose2(_ref, _excluded$o), classes = twMerge("hero-overlay", className);
  return (0, import_jsx_runtime.jsx)("div", _extends$1({}, props, {
    "data-theme": dataTheme,
    className: classes,
    ref,
    children
  }));
}), _excluded$n = ["dataTheme", "className", "children"], Hero = /* @__PURE__ */ import_react8.default.forwardRef((_ref, ref) => {
  let {
    dataTheme,
    className,
    children
  } = _ref, props = _objectWithoutPropertiesLoose2(_ref, _excluded$n), classes = twMerge("hero", className);
  return (0, import_jsx_runtime.jsx)("div", _extends$1({
    role: "banner"
  }, props, {
    "data-theme": dataTheme,
    className: classes,
    ref,
    children
  }));
}), Hero$1 = Object.assign(Hero, {
  Content: HeroContent,
  Overlay: HeroOverlay
});
var _excluded$l = ["children", "size", "vertical", "dataTheme", "className"], InputGroup = /* @__PURE__ */ (0, import_react8.forwardRef)((_ref, ref) => {
  let {
    children,
    size,
    vertical,
    dataTheme,
    className
  } = _ref, props = _objectWithoutPropertiesLoose2(_ref, _excluded$l), classes = twMerge("input-group", className, clsx({
    [`input-group-${size}`]: size,
    "input-group-vertical": vertical
  }));
  return (0, import_jsx_runtime.jsx)("label", _extends$1({}, props, {
    "data-theme": dataTheme,
    className: classes,
    ref,
    children
  }));
});
InputGroup.displayName = "InputGroup";
var _excluded$j = ["dataTheme", "className", "children"], Stack = /* @__PURE__ */ (0, import_react8.forwardRef)((_ref, ref) => {
  let {
    dataTheme,
    className,
    children
  } = _ref, props = _objectWithoutPropertiesLoose2(_ref, _excluded$j), classes = twMerge("stack", className);
  return (0, import_jsx_runtime.jsx)("div", _extends$1({
    "aria-label": "Stack"
  }, props, {
    ref,
    "data-theme": dataTheme,
    className: classes,
    children
  }));
});
Stack.displayName = "Stack";
var _excluded$i = ["horizontal", "vertical", "className", "children"], horizontalOptions = {
  start: "toast-start",
  center: "toast-center",
  end: "toast-end"
}, verticalOptions = {
  top: "toast-top",
  middle: "toast-middle",
  bottom: "toast-bottom"
}, Toast = /* @__PURE__ */ (0, import_react8.forwardRef)((_ref, ref) => {
  let {
    horizontal = "end",
    vertical = "bottom",
    className,
    children
  } = _ref, props = _objectWithoutPropertiesLoose2(_ref, _excluded$i);
  return (0, import_jsx_runtime.jsx)("div", _extends$1({}, props, {
    className: twMerge("toast", horizontalOptions[horizontal], verticalOptions[vertical], className),
    ref,
    children
  }));
});
Toast.displayName = "Toast";
var _excluded$h = ["children", "href"], BreadcrumbsItem = /* @__PURE__ */ import_react8.default.forwardRef((_ref, ref) => {
  let {
    children,
    href
  } = _ref, props = _objectWithoutPropertiesLoose2(_ref, _excluded$h);
  return (0, import_jsx_runtime.jsx)("li", _extends$1({
    role: "link"
  }, props, {
    ref,
    children: href ? (0, import_jsx_runtime.jsx)("a", {
      href,
      children
    }) : (0, import_jsx_runtime.jsx)(import_jsx_runtime.Fragment, {
      children
    })
  }));
}), _excluded$g = ["children", "dataTheme", "className", "innerProps", "innerRef"], Breadcrumbs = /* @__PURE__ */ import_react8.default.forwardRef((_ref, ref) => {
  let {
    children,
    dataTheme,
    className,
    innerProps,
    innerRef
  } = _ref, props = _objectWithoutPropertiesLoose2(_ref, _excluded$g), classes = twMerge("breadcrumbs", "text-sm", className);
  return (0, import_jsx_runtime.jsx)("div", _extends$1({
    role: "navigation",
    "aria-label": "Breadcrumbs"
  }, props, {
    "data-theme": dataTheme,
    className: classes,
    ref,
    children: (0, import_jsx_runtime.jsx)("ul", _extends$1({}, innerProps, {
      ref: innerRef,
      children
    }))
  }));
}), Breadcrumbs$1 = Object.assign(Breadcrumbs, {
  Item: BreadcrumbsItem
}), _excluded$f = ["children", "className"], BottomNavigationLabel = /* @__PURE__ */ (0, import_react8.forwardRef)((_ref, ref) => {
  let {
    children,
    className
  } = _ref, props = _objectWithoutPropertiesLoose2(_ref, _excluded$f), classes = twMerge("btm-nav-label", className);
  return (0, import_jsx_runtime.jsx)("span", _extends$1({}, props, {
    className: classes,
    ref,
    children
  }));
}), _excluded$e = ["size", "dataTheme", "className", "children"], BottomNavigation = /* @__PURE__ */ (0, import_react8.forwardRef)((_ref, ref) => {
  let {
    size,
    dataTheme,
    className,
    children
  } = _ref, props = _objectWithoutPropertiesLoose2(_ref, _excluded$e), classes = twMerge("btm-nav", clsx({
    [`btm-nav-${size}`]: size
  }), className);
  return (0, import_jsx_runtime.jsx)("div", _extends$1({}, props, {
    "data-theme": dataTheme,
    className: classes,
    ref,
    children
  }));
});
BottomNavigation.displayName = "BottomNavigation";
var BottomNavigation$1 = Object.assign(BottomNavigation, {
  Label: BottomNavigationLabel
}), _excluded$d = ["children", "href", "color", "hover", "dataTheme", "className"], Link3 = /* @__PURE__ */ (0, import_react8.forwardRef)((_ref, ref) => {
  let {
    children,
    href,
    color,
    hover = !0,
    dataTheme,
    className
  } = _ref, props = _objectWithoutPropertiesLoose2(_ref, _excluded$d), classes = twMerge("link", className, clsx({
    [`link-${color}`]: color,
    "link-hover": hover
  }));
  return (0, import_jsx_runtime.jsx)("a", _extends$1({
    rel: "noopener noreferrer"
  }, props, {
    href,
    "data-theme": dataTheme,
    className: classes,
    ref,
    children
  }));
});
Link3.displayName = "Link";
var _excluded$c = ["className"], MenuTitle = /* @__PURE__ */ import_react8.default.forwardRef((_ref, ref) => {
  let {
    className
  } = _ref, props = _objectWithoutPropertiesLoose2(_ref, _excluded$c), classes = twMerge("menu-title", className);
  return (0, import_jsx_runtime.jsx)("li", _extends$1({}, props, {
    className: classes,
    ref
  }));
}), _excluded$b = ["className", "disabled"], MenuItem = /* @__PURE__ */ import_react8.default.forwardRef((_ref, ref) => {
  let {
    className,
    disabled
  } = _ref, props = _objectWithoutPropertiesLoose2(_ref, _excluded$b), classes = twMerge(className, clsx({
    disabled
  }));
  return (0, import_jsx_runtime.jsx)("li", _extends$1({
    role: "menuitem",
    className: classes
  }, props, {
    ref
  }));
}), _excluded$a = ["normal", "compact", "horizontal", "vertical", "dataTheme", "className"], DYNAMIC_MODIFIERS = {
  compact: {
    true: "menu-compact",
    xs: "xs:menu-compact",
    sm: "sm:menu-compact",
    md: "md:menu-compact",
    lg: "lg:menu-compact"
  },
  normal: {
    true: "menu-normal",
    xs: "xs:menu-normal",
    sm: "sm:menu-normal",
    md: "md:menu-normal",
    lg: "lg:menu-normal"
  },
  horizontal: {
    true: "menu-horizontal",
    xs: "xs:menu-horizontal",
    sm: "sm:menu-horizontal",
    md: "md:menu-horizontal",
    lg: "lg:menu-horizontal"
  },
  vertical: {
    true: "menu-vertical",
    xs: "xs:menu-vertical",
    sm: "sm:menu-vertical",
    md: "md:menu-vertical",
    lg: "lg:menu-vertical"
  }
}, Menu = /* @__PURE__ */ import_react8.default.forwardRef((_ref, ref) => {
  let {
    normal,
    compact,
    horizontal,
    vertical,
    dataTheme,
    className
  } = _ref, props = _objectWithoutPropertiesLoose2(_ref, _excluded$a), classes = twMerge("menu", className, clsx({
    [compact && DYNAMIC_MODIFIERS.compact[compact.toString()] || ""]: compact,
    [normal && DYNAMIC_MODIFIERS.normal[normal.toString()] || ""]: normal,
    [horizontal && DYNAMIC_MODIFIERS.horizontal[horizontal.toString()] || ""]: horizontal,
    [vertical && DYNAMIC_MODIFIERS.vertical[vertical.toString()] || ""]: vertical
  }));
  return (0, import_jsx_runtime.jsx)("ul", _extends$1({
    role: "menu",
    "data-theme": dataTheme,
    className: classes
  }, props, {
    ref
  }));
}), Menu$1 = Object.assign(Menu, {
  Title: MenuTitle,
  Item: MenuItem
}), NavbarSection = /* @__PURE__ */ import_react8.default.forwardRef(({
  children,
  section,
  dataTheme,
  className,
  style
}, ref) => {
  let classes = twMerge(className, clsx({
    ["flex-1"]: section !== "center",
    [`navbar-${section}`]: section
  }));
  return (0, import_jsx_runtime.jsx)("div", {
    "data-theme": dataTheme,
    className: classes,
    style,
    ref,
    children
  });
}), _excluded$9 = ["children", "dataTheme", "className"], Navbar = /* @__PURE__ */ import_react8.default.forwardRef((_ref, ref) => {
  let {
    children,
    dataTheme,
    className
  } = _ref, props = _objectWithoutPropertiesLoose2(_ref, _excluded$9), classes = twMerge("navbar", className);
  return (0, import_jsx_runtime.jsx)("div", _extends$1({
    role: "navigation",
    "aria-label": "Navbar"
  }, props, {
    "data-theme": dataTheme,
    className: classes,
    ref,
    children
  }));
}), NavbarStart = /* @__PURE__ */ import_react8.default.forwardRef((props, ref) => (0, import_jsx_runtime.jsx)(NavbarSection, _extends$1({}, props, {
  section: "start",
  ref
}))), NavbarCenter = /* @__PURE__ */ import_react8.default.forwardRef((props, ref) => (0, import_jsx_runtime.jsx)(NavbarSection, _extends$1({}, props, {
  section: "center",
  ref
}))), NavbarEnd = /* @__PURE__ */ import_react8.default.forwardRef((props, ref) => (0, import_jsx_runtime.jsx)(NavbarSection, _extends$1({}, props, {
  section: "end",
  ref
}))), Navbar$1 = Object.assign(Navbar, {
  Start: NavbarStart,
  Center: NavbarCenter,
  End: NavbarEnd
}), Pagination = ButtonGroup, _excluded$8 = ["children", "value", "color", "dataTheme", "className"], Step = /* @__PURE__ */ import_react8.default.forwardRef((_ref, ref) => {
  let {
    children,
    value,
    color,
    dataTheme,
    className
  } = _ref, props = _objectWithoutPropertiesLoose2(_ref, _excluded$8), classes = twMerge("step", className, clsx({
    [`step-${color}`]: color
  }));
  return (0, import_jsx_runtime.jsx)("li", _extends$1({
    "aria-label": "Step"
  }, props, {
    "data-theme": dataTheme,
    "data-content": value,
    className: classes,
    ref,
    children
  }));
}), _excluded$7 = ["children", "dataTheme", "className", "vertical", "horizontal"], Steps = /* @__PURE__ */ import_react8.default.forwardRef((_ref, ref) => {
  let {
    children,
    dataTheme,
    className,
    vertical,
    horizontal
  } = _ref, props = _objectWithoutPropertiesLoose2(_ref, _excluded$7), classes = twMerge("steps", className, clsx({
    ["steps-vertical"]: vertical,
    ["steps-horizontal"]: horizontal
  }));
  return (0, import_jsx_runtime.jsx)("ul", _extends$1({
    "aria-label": "Steps",
    role: "group"
  }, props, {
    "data-theme": dataTheme,
    className: classes,
    ref,
    children
  }));
}), Steps$1 = Object.assign(Steps, {
  Step
}), _excluded$6 = ["children", "value", "activeValue", "onClick", "size", "variant", "className", "style"], TabInner = (_ref, ref) => {
  let {
    children,
    value,
    activeValue,
    onClick,
    size,
    variant,
    className,
    style
  } = _ref, props = _objectWithoutPropertiesLoose2(_ref, _excluded$6), classes = twMerge("tab", className, clsx({
    "tab-active": value != null && value === activeValue,
    [`tab-${size}`]: size,
    [`tab-${variant}`]: variant
  }));
  return (0, import_jsx_runtime.jsx)("a", _extends$1({
    role: "tab"
  }, props, {
    className: classes,
    style,
    onClick: () => onClick && onClick(value),
    children
  }));
}, Tab = /* @__PURE__ */ import_react8.default.forwardRef(TabInner), _excluded$5 = ["children", "value", "onChange", "variant", "size", "boxed", "dataTheme", "className"], TabsInner = (_ref, ref) => {
  let {
    children,
    value,
    onChange,
    variant,
    size,
    boxed,
    dataTheme,
    className
  } = _ref, props = _objectWithoutPropertiesLoose2(_ref, _excluded$5), classes = twMerge("tabs", className, clsx({
    "tabs-boxed": boxed
  }));
  return (0, import_jsx_runtime.jsx)("div", _extends$1({
    ref,
    role: "tablist"
  }, props, {
    "data-theme": dataTheme,
    className: classes,
    children: children.map((child, index) => /* @__PURE__ */ (0, import_react8.cloneElement)(child, {
      key: child.props.value,
      variant,
      size,
      activeValue: value,
      onClick: (value2) => {
        onChange && onChange(value2);
      }
    }))
  }));
}, Tabs = /* @__PURE__ */ import_react8.default.forwardRef(TabsInner), Tabs$1 = Object.assign(Tabs, {
  Tab
}), _excluded$4 = ["dataPrefix", "dataTheme", "status", "className", "children", "innerProps", "innerRef"], CodeMockupLine = /* @__PURE__ */ (0, import_react8.forwardRef)((_ref, ref) => {
  let {
    dataPrefix,
    dataTheme,
    status,
    className,
    children,
    innerProps,
    innerRef
  } = _ref, props = _objectWithoutPropertiesLoose2(_ref, _excluded$4), classes = twMerge(clsx({
    [`bg-${status}`]: status,
    [`text-${status}-content`]: status
  }), className), allProps = _extends$1({}, props, {
    className: classes
  }, dataPrefix !== !1 && {
    "data-prefix": dataPrefix || ">"
  });
  return (0, import_jsx_runtime.jsx)("pre", _extends$1({}, allProps, {
    "data-theme": dataTheme,
    className: classes,
    ref,
    children: (0, import_jsx_runtime.jsx)("code", _extends$1({}, innerProps, {
      ref: innerRef,
      children
    }))
  }));
});
CodeMockupLine.displayName = "CodeMockup.Line";
var _excluded$3 = ["dataTheme", "className", "children"], CodeMockup = /* @__PURE__ */ (0, import_react8.forwardRef)((_ref, ref) => {
  let {
    dataTheme,
    className,
    children
  } = _ref, props = _objectWithoutPropertiesLoose2(_ref, _excluded$3), classes = twMerge("mockup-code", className);
  return (0, import_jsx_runtime.jsx)("div", _extends$1({
    "aria-label": "Code mockup"
  }, props, {
    "data-theme": dataTheme,
    className: classes,
    ref,
    children: import_react8.default.Children.map(children, (child, index) => {
      let childComponent = child;
      return /* @__PURE__ */ import_react8.default.cloneElement(childComponent, {
        key: index
      });
    })
  }));
});
CodeMockup.displayName = "CodeMockup";
var CodeMockupNamespace = Object.assign(CodeMockup, {
  Line: CodeMockupLine
}), _excluded$2 = ["color", "dataTheme", "className", "children", "innerRef", "innerProps"], PhoneMockup = /* @__PURE__ */ (0, import_react8.forwardRef)((_ref, ref) => {
  let {
    color,
    dataTheme,
    className,
    children,
    innerRef,
    innerProps
  } = _ref, props = _objectWithoutPropertiesLoose2(_ref, _excluded$2), classes = twMerge("mockup-phone", clsx({
    [`border-${color}`]: color
  }), className);
  return (0, import_jsx_runtime.jsxs)("div", _extends$1({
    "aria-label": "Phone mockup"
  }, props, {
    "data-theme": dataTheme,
    className: classes,
    ref,
    children: [(0, import_jsx_runtime.jsx)("div", {
      className: "camera"
    }), (0, import_jsx_runtime.jsx)("div", {
      className: "display",
      children: (0, import_jsx_runtime.jsx)("div", _extends$1({}, innerProps, {
        className: twMerge("artboard artboard-demo phone-1", innerProps == null ? void 0 : innerProps.className),
        ref: innerRef,
        children
      }))
    })]
  }));
});
PhoneMockup.displayName = "PhoneMockup";
var _excluded$1 = ["border", "borderColor", "backgroundColor", "frameColor", "dataTheme", "className", "children"], WindowMockup = /* @__PURE__ */ (0, import_react8.forwardRef)((_ref, ref) => {
  let {
    border,
    borderColor,
    backgroundColor,
    frameColor,
    dataTheme,
    className,
    children
  } = _ref, props = _objectWithoutPropertiesLoose2(_ref, _excluded$1), borderColorValue = borderColor || frameColor || "base-300", classes = twMerge("mockup-window", border && `border border-${borderColorValue}`, clsx({
    [`border-${borderColorValue}`]: borderColorValue,
    [`bg-${frameColor}`]: frameColor
  }), className), firstChild = import_react8.default.Children.count(children) > 0 && import_react8.default.Children.toArray(children)[0], innerClasses = clsx(backgroundColor && `bg-${backgroundColor}`, border && `border-t border-${borderColorValue}`, "p-4"), innerEl = firstChild && /* @__PURE__ */ import_react8.default.isValidElement(firstChild) ? /* @__PURE__ */ import_react8.default.cloneElement(firstChild, {
    className: twMerge(innerClasses, firstChild.props.className)
  }) : (0, import_jsx_runtime.jsx)("div", {
    className: innerClasses,
    children
  });
  return (0, import_jsx_runtime.jsx)("div", _extends$1({
    "aria-label": "Window mockup"
  }, props, {
    "data-theme": dataTheme,
    className: classes,
    ref,
    children: innerEl
  }));
});
WindowMockup.displayName = "WindowMockup";

// app/root.tsx
var import_jsx_dev_runtime = __toESM(require_jsx_dev_runtime()), meta = () => ({
  charset: "utf-8",
  description: "Helios App",
  title: "heliosUI",
  viewport: "width=device-width,initial-scale=1"
}), links = () => [{ rel: "stylesheet", href: tailwind_default }], loader = async () => null;
function Document({ children }) {
  return /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("html", {
    lang: "en",
    "data-theme": "night",
    children: [
      /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("head", {
        children: [
          /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(Meta, {}, void 0, !1, {
            fileName: "app/root.tsx",
            lineNumber: 33,
            columnNumber: 9
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(Links, {}, void 0, !1, {
            fileName: "app/root.tsx",
            lineNumber: 34,
            columnNumber: 9
          }, this)
        ]
      }, void 0, !0, {
        fileName: "app/root.tsx",
        lineNumber: 32,
        columnNumber: 7
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("body", {
        children: [
          children,
          /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(ScrollRestoration, {}, void 0, !1, {
            fileName: "app/root.tsx",
            lineNumber: 38,
            columnNumber: 9
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(Scripts, {}, void 0, !1, {
            fileName: "app/root.tsx",
            lineNumber: 39,
            columnNumber: 9
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(LiveReload, {}, void 0, !1, {
            fileName: "app/root.tsx",
            lineNumber: 40,
            columnNumber: 9
          }, this)
        ]
      }, void 0, !0, {
        fileName: "app/root.tsx",
        lineNumber: 36,
        columnNumber: 7
      }, this)
    ]
  }, void 0, !0, {
    fileName: "app/root.tsx",
    lineNumber: 31,
    columnNumber: 5
  }, this);
}
function App() {
  return /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(import_jsx_dev_runtime.Fragment, {
    children: /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(Document, {
      children: /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(Outlet, {}, void 0, !1, {
        fileName: "app/root.tsx",
        lineNumber: 50,
        columnNumber: 9
      }, this)
    }, void 0, !1, {
      fileName: "app/root.tsx",
      lineNumber: 49,
      columnNumber: 7
    }, this)
  }, void 0, !1, {
    fileName: "app/root.tsx",
    lineNumber: 48,
    columnNumber: 5
  }, this);
}
function CatchBoundary() {
  let caught = useCatch(), message;
  switch (caught.status) {
    case 401:
      message = "Oops! Looks like you tried to visit a page that you do not have access to.";
      break;
    case 404:
      message = "Oops! Looks like you tried to visit a page that does not exist.";
      break;
    default:
      throw new Error(caught.data || caught.statusText);
  }
  return /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("html", {
    lang: "en",
    "data-theme": "night",
    children: [
      /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("head", {
        children: [
          /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("title", {
            children: caught.status
          }, void 0, !1, {
            fileName: "app/root.tsx",
            lineNumber: 75,
            columnNumber: 9
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(Meta, {}, void 0, !1, {
            fileName: "app/root.tsx",
            lineNumber: 76,
            columnNumber: 9
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(Links, {}, void 0, !1, {
            fileName: "app/root.tsx",
            lineNumber: 77,
            columnNumber: 9
          }, this)
        ]
      }, void 0, !0, {
        fileName: "app/root.tsx",
        lineNumber: 74,
        columnNumber: 7
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("body", {
        className: "h-screen",
        children: [
          /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
            className: "min-h-full px-4 py-16 sm:px-6 sm:py-24 md:grid md:place-items-center lg:px-8",
            children: /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
              className: "mx-auto max-w-max",
              children: /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("main", {
                className: "sm:flex",
                children: [
                  /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("p", {
                    className: "text-4xl font-bold tracking-tight text-red-600 sm:text-5xl",
                    children: caught.status
                  }, void 0, !1, {
                    fileName: "app/root.tsx",
                    lineNumber: 83,
                    columnNumber: 15
                  }, this),
                  /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
                    className: "sm:ml-6",
                    children: [
                      /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
                        className: "sm:border-l sm:border-gray-200 sm:pl-6",
                        children: [
                          /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("h1", {
                            className: "text-primary-900 text-4xl font-bold tracking-tight sm:text-5xl",
                            children: caught.statusText
                          }, void 0, !1, {
                            fileName: "app/root.tsx",
                            lineNumber: 86,
                            columnNumber: 19
                          }, this),
                          /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("p", {
                            className: "mt-1 text-base text-gray-500",
                            children: message
                          }, void 0, !1, {
                            fileName: "app/root.tsx",
                            lineNumber: 89,
                            columnNumber: 19
                          }, this)
                        ]
                      }, void 0, !0, {
                        fileName: "app/root.tsx",
                        lineNumber: 85,
                        columnNumber: 17
                      }, this),
                      /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
                        className: "mt-10 flex space-x-3 sm:border-l sm:border-transparent sm:pl-6",
                        children: [
                          /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(Button, {
                            href: "/",
                            className: "bg-primary-600 hover:bg-primary-700 inline-flex items-center rounded-md border border-transparent px-4 py-2 text-sm font-medium text-white shadow-sm focus:outline-none focus:ring-2 focus:ring-amber-500 focus:ring-offset-2",
                            children: "Go back home"
                          }, void 0, !1, {
                            fileName: "app/root.tsx",
                            lineNumber: 92,
                            columnNumber: 19
                          }, this),
                          /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(Button, {
                            href: "/support",
                            variant: "outline",
                            className: "bg-primary-100 text-primary-700 hover:bg-primary-200 inline-flex items-center rounded-md border border-transparent px-4 py-2 text-sm font-medium focus:outline-none focus:ring-2 focus:ring-amber-500 focus:ring-offset-2",
                            children: "Contact support"
                          }, void 0, !1, {
                            fileName: "app/root.tsx",
                            lineNumber: 98,
                            columnNumber: 19
                          }, this)
                        ]
                      }, void 0, !0, {
                        fileName: "app/root.tsx",
                        lineNumber: 91,
                        columnNumber: 17
                      }, this)
                    ]
                  }, void 0, !0, {
                    fileName: "app/root.tsx",
                    lineNumber: 84,
                    columnNumber: 15
                  }, this)
                ]
              }, void 0, !0, {
                fileName: "app/root.tsx",
                lineNumber: 82,
                columnNumber: 13
              }, this)
            }, void 0, !1, {
              fileName: "app/root.tsx",
              lineNumber: 81,
              columnNumber: 11
            }, this)
          }, void 0, !1, {
            fileName: "app/root.tsx",
            lineNumber: 80,
            columnNumber: 9
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(ScrollRestoration, {}, void 0, !1, {
            fileName: "app/root.tsx",
            lineNumber: 110,
            columnNumber: 9
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(Scripts, {}, void 0, !1, {
            fileName: "app/root.tsx",
            lineNumber: 111,
            columnNumber: 9
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(LiveReload, {}, void 0, !1, {
            fileName: "app/root.tsx",
            lineNumber: 112,
            columnNumber: 9
          }, this)
        ]
      }, void 0, !0, {
        fileName: "app/root.tsx",
        lineNumber: 79,
        columnNumber: 7
      }, this)
    ]
  }, void 0, !0, {
    fileName: "app/root.tsx",
    lineNumber: 73,
    columnNumber: 5
  }, this);
}

// app/routes/__layout.tsx
var layout_exports = {};
__export(layout_exports, {
  CatchBoundary: () => CatchBoundary2,
  ErrorBoundary: () => ErrorBoundary,
  default: () => AppLayout,
  loader: () => loader2
});

// ../../node_modules/.pnpm/clsx@1.2.1/node_modules/clsx/dist/clsx.m.js
function r(e) {
  var t, f2, n = "";
  if (typeof e == "string" || typeof e == "number")
    n += e;
  else if (typeof e == "object")
    if (Array.isArray(e))
      for (t = 0; t < e.length; t++)
        e[t] && (f2 = r(e[t])) && (n && (n += " "), n += f2);
    else
      for (t in e)
        e[t] && (n && (n += " "), n += t);
  return n;
}
function clsx2() {
  for (var e, t, f2 = 0, n = ""; f2 < arguments.length; )
    (e = arguments[f2++]) && (t = r(e)) && (n && (n += " "), n += t);
  return n;
}

// app/@core/components/AppSearch.tsx
var import_jsx_dev_runtime = __toESM(require_jsx_dev_runtime());
function AppSearch() {
  let { pathname } = useLocation();
  return /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(import_jsx_dev_runtime.Fragment, {
    children: /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
      className: clsx2(
        "pointer-events-none absolute right-8 top-2 gap-1 opacity-50",
        { hidden: pathname === "/" },
        { "hidden lg:flex": pathname !== "/" }
      )
    }, void 0, !1, {
      fileName: "app/@core/components/AppSearch.tsx",
      lineNumber: 8,
      columnNumber: 7
    }, this)
  }, void 0, !1, {
    fileName: "app/@core/components/AppSearch.tsx",
    lineNumber: 7,
    columnNumber: 5
  }, this);
}

// ../../node_modules/.pnpm/@iconify+react@3.2.2_react@18.2.0/node_modules/@iconify/react/dist/iconify.mjs
var import_react9 = __toESM(require_react(), 1), matchName = /^[a-z0-9]+(-[a-z0-9]+)*$/, iconDefaults = Object.freeze({
  left: 0,
  top: 0,
  width: 16,
  height: 16,
  rotate: 0,
  vFlip: !1,
  hFlip: !1
});
function fullIcon(data) {
  return { ...iconDefaults, ...data };
}
var stringToIcon = (value, validate2, allowSimpleName, provider = "") => {
  let colonSeparated = value.split(":");
  if (value.slice(0, 1) === "@") {
    if (colonSeparated.length < 2 || colonSeparated.length > 3)
      return null;
    provider = colonSeparated.shift().slice(1);
  }
  if (colonSeparated.length > 3 || !colonSeparated.length)
    return null;
  if (colonSeparated.length > 1) {
    let name2 = colonSeparated.pop(), prefix2 = colonSeparated.pop(), result = {
      provider: colonSeparated.length > 0 ? colonSeparated[0] : provider,
      prefix: prefix2,
      name: name2
    };
    return validate2 && !validateIcon(result) ? null : result;
  }
  let name = colonSeparated[0], dashSeparated = name.split("-");
  if (dashSeparated.length > 1) {
    let result = {
      provider,
      prefix: dashSeparated.shift(),
      name: dashSeparated.join("-")
    };
    return validate2 && !validateIcon(result) ? null : result;
  }
  if (allowSimpleName && provider === "") {
    let result = {
      provider,
      prefix: "",
      name
    };
    return validate2 && !validateIcon(result, allowSimpleName) ? null : result;
  }
  return null;
}, validateIcon = (icon, allowSimpleName) => icon ? !!((icon.provider === "" || icon.provider.match(matchName)) && (allowSimpleName && icon.prefix === "" || icon.prefix.match(matchName)) && icon.name.match(matchName)) : !1;
function mergeIconData(icon, alias) {
  let result = { ...icon };
  for (let key in iconDefaults) {
    let prop = key;
    if (alias[prop] !== void 0) {
      let value = alias[prop];
      if (result[prop] === void 0) {
        result[prop] = value;
        continue;
      }
      switch (prop) {
        case "rotate":
          result[prop] = (result[prop] + value) % 4;
          break;
        case "hFlip":
        case "vFlip":
          result[prop] = value !== result[prop];
          break;
        default:
          result[prop] = value;
      }
    }
  }
  return result;
}
function getIconData$1(data, name, full = !1) {
  function getIcon(name2, iteration) {
    if (data.icons[name2] !== void 0)
      return Object.assign({}, data.icons[name2]);
    if (iteration > 5)
      return null;
    let aliases = data.aliases;
    if (aliases && aliases[name2] !== void 0) {
      let item = aliases[name2], result2 = getIcon(item.parent, iteration + 1);
      return result2 && mergeIconData(result2, item);
    }
    let chars = data.chars;
    return !iteration && chars && chars[name2] !== void 0 ? getIcon(chars[name2], iteration + 1) : null;
  }
  let result = getIcon(name, 0);
  if (result)
    for (let key in iconDefaults)
      result[key] === void 0 && data[key] !== void 0 && (result[key] = data[key]);
  return result && full ? fullIcon(result) : result;
}
function isVariation(item) {
  for (let key in iconDefaults)
    if (item[key] !== void 0)
      return !0;
  return !1;
}
function parseIconSet(data, callback, options) {
  options = options || {};
  let names = [];
  if (typeof data != "object" || typeof data.icons != "object")
    return names;
  data.not_found instanceof Array && data.not_found.forEach((name) => {
    callback(name, null), names.push(name);
  });
  let icons = data.icons;
  Object.keys(icons).forEach((name) => {
    let iconData = getIconData$1(data, name, !0);
    iconData && (callback(name, iconData), names.push(name));
  });
  let parseAliases = options.aliases || "all";
  if (parseAliases !== "none" && typeof data.aliases == "object") {
    let aliases = data.aliases;
    Object.keys(aliases).forEach((name) => {
      if (parseAliases === "variations" && isVariation(aliases[name]))
        return;
      let iconData = getIconData$1(data, name, !0);
      iconData && (callback(name, iconData), names.push(name));
    });
  }
  return names;
}
var optionalProperties = {
  provider: "string",
  aliases: "object",
  not_found: "object"
};
for (let prop in iconDefaults)
  optionalProperties[prop] = typeof iconDefaults[prop];
function quicklyValidateIconSet(obj) {
  if (typeof obj != "object" || obj === null)
    return null;
  let data = obj;
  if (typeof data.prefix != "string" || !obj.icons || typeof obj.icons != "object")
    return null;
  for (let prop in optionalProperties)
    if (obj[prop] !== void 0 && typeof obj[prop] !== optionalProperties[prop])
      return null;
  let icons = data.icons;
  for (let name in icons) {
    let icon = icons[name];
    if (!name.match(matchName) || typeof icon.body != "string")
      return null;
    for (let prop in iconDefaults)
      if (icon[prop] !== void 0 && typeof icon[prop] != typeof iconDefaults[prop])
        return null;
  }
  let aliases = data.aliases;
  if (aliases)
    for (let name in aliases) {
      let icon = aliases[name], parent = icon.parent;
      if (!name.match(matchName) || typeof parent != "string" || !icons[parent] && !aliases[parent])
        return null;
      for (let prop in iconDefaults)
        if (icon[prop] !== void 0 && typeof icon[prop] != typeof iconDefaults[prop])
          return null;
    }
  return data;
}
var storageVersion = 1, storage$1 = /* @__PURE__ */ Object.create(null);
try {
  let w = window || self;
  w && w._iconifyStorage.version === storageVersion && (storage$1 = w._iconifyStorage.storage);
} catch {
}
function newStorage(provider, prefix2) {
  return {
    provider,
    prefix: prefix2,
    icons: /* @__PURE__ */ Object.create(null),
    missing: /* @__PURE__ */ Object.create(null)
  };
}
function getStorage(provider, prefix2) {
  storage$1[provider] === void 0 && (storage$1[provider] = /* @__PURE__ */ Object.create(null));
  let providerStorage = storage$1[provider];
  return providerStorage[prefix2] === void 0 && (providerStorage[prefix2] = newStorage(provider, prefix2)), providerStorage[prefix2];
}
function addIconSet(storage2, data) {
  if (!quicklyValidateIconSet(data))
    return [];
  let t = Date.now();
  return parseIconSet(data, (name, icon) => {
    icon ? storage2.icons[name] = icon : storage2.missing[name] = t;
  });
}
function addIconToStorage(storage2, name, icon) {
  try {
    if (typeof icon.body == "string")
      return storage2.icons[name] = Object.freeze(fullIcon(icon)), !0;
  } catch {
  }
  return !1;
}
function getIconFromStorage(storage2, name) {
  let value = storage2.icons[name];
  return value === void 0 ? null : value;
}
var simpleNames = !1;
function allowSimpleNames(allow) {
  return typeof allow == "boolean" && (simpleNames = allow), simpleNames;
}
function getIconData(name) {
  let icon = typeof name == "string" ? stringToIcon(name, !0, simpleNames) : name;
  return icon ? getIconFromStorage(getStorage(icon.provider, icon.prefix), icon.name) : null;
}
function addIcon(name, data) {
  let icon = stringToIcon(name, !0, simpleNames);
  if (!icon)
    return !1;
  let storage2 = getStorage(icon.provider, icon.prefix);
  return addIconToStorage(storage2, icon.name, data);
}
function addCollection(data, provider) {
  if (typeof data != "object")
    return !1;
  if (typeof provider != "string" && (provider = typeof data.provider == "string" ? data.provider : ""), simpleNames && provider === "" && (typeof data.prefix != "string" || data.prefix === "")) {
    let added = !1;
    return quicklyValidateIconSet(data) && (data.prefix = "", parseIconSet(data, (name, icon) => {
      icon && addIcon(name, icon) && (added = !0);
    })), added;
  }
  if (typeof data.prefix != "string" || !validateIcon({
    provider,
    prefix: data.prefix,
    name: "a"
  }))
    return !1;
  let storage2 = getStorage(provider, data.prefix);
  return !!addIconSet(storage2, data);
}
var defaults = Object.freeze({
  inline: !1,
  width: null,
  height: null,
  hAlign: "center",
  vAlign: "middle",
  slice: !1,
  hFlip: !1,
  vFlip: !1,
  rotate: 0
});
function mergeCustomisations(defaults2, item) {
  let result = {};
  for (let key in defaults2) {
    let attr = key;
    if (result[attr] = defaults2[attr], item[attr] === void 0)
      continue;
    let value = item[attr];
    switch (attr) {
      case "inline":
      case "slice":
        typeof value == "boolean" && (result[attr] = value);
        break;
      case "hFlip":
      case "vFlip":
        value === !0 && (result[attr] = !result[attr]);
        break;
      case "hAlign":
      case "vAlign":
        typeof value == "string" && value !== "" && (result[attr] = value);
        break;
      case "width":
      case "height":
        (typeof value == "string" && value !== "" || typeof value == "number" && value || value === null) && (result[attr] = value);
        break;
      case "rotate":
        typeof value == "number" && (result[attr] += value);
        break;
    }
  }
  return result;
}
var unitsSplit = /(-?[0-9.]*[0-9]+[0-9.]*)/g, unitsTest = /^-?[0-9.]*[0-9]+[0-9.]*$/g;
function calculateSize(size, ratio, precision) {
  if (ratio === 1)
    return size;
  if (precision = precision === void 0 ? 100 : precision, typeof size == "number")
    return Math.ceil(size * ratio * precision) / precision;
  if (typeof size != "string")
    return size;
  let oldParts = size.split(unitsSplit);
  if (oldParts === null || !oldParts.length)
    return size;
  let newParts = [], code = oldParts.shift(), isNumber = unitsTest.test(code);
  for (; ; ) {
    if (isNumber) {
      let num = parseFloat(code);
      isNaN(num) ? newParts.push(code) : newParts.push(Math.ceil(num * ratio * precision) / precision);
    } else
      newParts.push(code);
    if (code = oldParts.shift(), code === void 0)
      return newParts.join("");
    isNumber = !isNumber;
  }
}
function preserveAspectRatio(props) {
  let result = "";
  switch (props.hAlign) {
    case "left":
      result += "xMin";
      break;
    case "right":
      result += "xMax";
      break;
    default:
      result += "xMid";
  }
  switch (props.vAlign) {
    case "top":
      result += "YMin";
      break;
    case "bottom":
      result += "YMax";
      break;
    default:
      result += "YMid";
  }
  return result += props.slice ? " slice" : " meet", result;
}
function iconToSVG(icon, customisations) {
  let box = {
    left: icon.left,
    top: icon.top,
    width: icon.width,
    height: icon.height
  }, body = icon.body;
  [icon, customisations].forEach((props) => {
    let transformations = [], hFlip = props.hFlip, vFlip = props.vFlip, rotation = props.rotate;
    hFlip ? vFlip ? rotation += 2 : (transformations.push("translate(" + (box.width + box.left).toString() + " " + (0 - box.top).toString() + ")"), transformations.push("scale(-1 1)"), box.top = box.left = 0) : vFlip && (transformations.push("translate(" + (0 - box.left).toString() + " " + (box.height + box.top).toString() + ")"), transformations.push("scale(1 -1)"), box.top = box.left = 0);
    let tempValue;
    switch (rotation < 0 && (rotation -= Math.floor(rotation / 4) * 4), rotation = rotation % 4, rotation) {
      case 1:
        tempValue = box.height / 2 + box.top, transformations.unshift("rotate(90 " + tempValue.toString() + " " + tempValue.toString() + ")");
        break;
      case 2:
        transformations.unshift("rotate(180 " + (box.width / 2 + box.left).toString() + " " + (box.height / 2 + box.top).toString() + ")");
        break;
      case 3:
        tempValue = box.width / 2 + box.left, transformations.unshift("rotate(-90 " + tempValue.toString() + " " + tempValue.toString() + ")");
        break;
    }
    rotation % 2 === 1 && ((box.left !== 0 || box.top !== 0) && (tempValue = box.left, box.left = box.top, box.top = tempValue), box.width !== box.height && (tempValue = box.width, box.width = box.height, box.height = tempValue)), transformations.length && (body = '<g transform="' + transformations.join(" ") + '">' + body + "</g>");
  });
  let width, height;
  customisations.width === null && customisations.height === null ? (height = "1em", width = calculateSize(height, box.width / box.height)) : customisations.width !== null && customisations.height !== null ? (width = customisations.width, height = customisations.height) : customisations.height !== null ? (height = customisations.height, width = calculateSize(height, box.width / box.height)) : (width = customisations.width, height = calculateSize(width, box.height / box.width)), width === "auto" && (width = box.width), height === "auto" && (height = box.height), width = typeof width == "string" ? width : width.toString() + "", height = typeof height == "string" ? height : height.toString() + "";
  let result = {
    attributes: {
      width,
      height,
      preserveAspectRatio: preserveAspectRatio(customisations),
      viewBox: box.left.toString() + " " + box.top.toString() + " " + box.width.toString() + " " + box.height.toString()
    },
    body
  };
  return customisations.inline && (result.inline = !0), result;
}
var regex = /\sid="(\S+)"/g, randomPrefix = "IconifyId" + Date.now().toString(16) + (Math.random() * 16777216 | 0).toString(16), counter = 0;
function replaceIDs(body, prefix2 = randomPrefix) {
  let ids = [], match;
  for (; match = regex.exec(body); )
    ids.push(match[1]);
  return ids.length && ids.forEach((id) => {
    let newID = typeof prefix2 == "function" ? prefix2(id) : prefix2 + (counter++).toString(), escapedID = id.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
    body = body.replace(new RegExp('([#;"])(' + escapedID + ')([")]|\\.[a-z])', "g"), "$1" + newID + "$3");
  }), body;
}
var storage = /* @__PURE__ */ Object.create(null);
function setAPIModule(provider, item) {
  storage[provider] = item;
}
function getAPIModule(provider) {
  return storage[provider] || storage[""];
}
function createAPIConfig(source) {
  let resources;
  if (typeof source.resources == "string")
    resources = [source.resources];
  else if (resources = source.resources, !(resources instanceof Array) || !resources.length)
    return null;
  return {
    resources,
    path: source.path === void 0 ? "/" : source.path,
    maxURL: source.maxURL ? source.maxURL : 500,
    rotate: source.rotate ? source.rotate : 750,
    timeout: source.timeout ? source.timeout : 5e3,
    random: source.random === !0,
    index: source.index ? source.index : 0,
    dataAfterTimeout: source.dataAfterTimeout !== !1
  };
}
var configStorage = /* @__PURE__ */ Object.create(null), fallBackAPISources = [
  "https://api.simplesvg.com",
  "https://api.unisvg.com"
], fallBackAPI = [];
for (; fallBackAPISources.length > 0; )
  fallBackAPISources.length === 1 || Math.random() > 0.5 ? fallBackAPI.push(fallBackAPISources.shift()) : fallBackAPI.push(fallBackAPISources.pop());
configStorage[""] = createAPIConfig({
  resources: ["https://api.iconify.design"].concat(fallBackAPI)
});
function addAPIProvider(provider, customConfig) {
  let config2 = createAPIConfig(customConfig);
  return config2 === null ? !1 : (configStorage[provider] = config2, !0);
}
function getAPIConfig(provider) {
  return configStorage[provider];
}
var mergeParams = (base, params) => {
  let result = base, hasParams = result.indexOf("?") !== -1;
  function paramToString(value) {
    switch (typeof value) {
      case "boolean":
        return value ? "true" : "false";
      case "number":
        return encodeURIComponent(value);
      case "string":
        return encodeURIComponent(value);
      default:
        throw new Error("Invalid parameter");
    }
  }
  return Object.keys(params).forEach((key) => {
    let value;
    try {
      value = paramToString(params[key]);
    } catch {
      return;
    }
    result += (hasParams ? "&" : "?") + encodeURIComponent(key) + "=" + value, hasParams = !0;
  }), result;
}, maxLengthCache = {}, pathCache = {}, detectFetch = () => {
  let callback;
  try {
    if (callback = fetch, typeof callback == "function")
      return callback;
  } catch {
  }
  return null;
}, fetchModule = detectFetch();
function calculateMaxLength(provider, prefix2) {
  let config2 = getAPIConfig(provider);
  if (!config2)
    return 0;
  let result;
  if (!config2.maxURL)
    result = 0;
  else {
    let maxHostLength = 0;
    config2.resources.forEach((item) => {
      maxHostLength = Math.max(maxHostLength, item.length);
    });
    let url = mergeParams(prefix2 + ".json", {
      icons: ""
    });
    result = config2.maxURL - maxHostLength - config2.path.length - url.length;
  }
  let cacheKey = provider + ":" + prefix2;
  return pathCache[provider] = config2.path, maxLengthCache[cacheKey] = result, result;
}
function shouldAbort(status) {
  return status === 404;
}
var prepare = (provider, prefix2, icons) => {
  let results = [], maxLength = maxLengthCache[prefix2];
  maxLength === void 0 && (maxLength = calculateMaxLength(provider, prefix2));
  let type = "icons", item = {
    type,
    provider,
    prefix: prefix2,
    icons: []
  }, length = 0;
  return icons.forEach((name, index) => {
    length += name.length + 1, length >= maxLength && index > 0 && (results.push(item), item = {
      type,
      provider,
      prefix: prefix2,
      icons: []
    }, length = name.length), item.icons.push(name);
  }), results.push(item), results;
};
function getPath(provider) {
  if (typeof provider == "string") {
    if (pathCache[provider] === void 0) {
      let config2 = getAPIConfig(provider);
      if (!config2)
        return "/";
      pathCache[provider] = config2.path;
    }
    return pathCache[provider];
  }
  return "/";
}
var send = (host, params, callback) => {
  if (!fetchModule) {
    callback("abort", 424);
    return;
  }
  let path = getPath(params.provider);
  switch (params.type) {
    case "icons": {
      let prefix2 = params.prefix, iconsList = params.icons.join(",");
      path += mergeParams(prefix2 + ".json", {
        icons: iconsList
      });
      break;
    }
    case "custom": {
      let uri = params.uri;
      path += uri.slice(0, 1) === "/" ? uri.slice(1) : uri;
      break;
    }
    default:
      callback("abort", 400);
      return;
  }
  let defaultError = 503;
  fetchModule(host + path).then((response) => {
    let status = response.status;
    if (status !== 200) {
      setTimeout(() => {
        callback(shouldAbort(status) ? "abort" : "next", status);
      });
      return;
    }
    return defaultError = 501, response.json();
  }).then((data) => {
    if (typeof data != "object" || data === null) {
      setTimeout(() => {
        callback("next", defaultError);
      });
      return;
    }
    setTimeout(() => {
      callback("success", data);
    });
  }).catch(() => {
    callback("next", defaultError);
  });
}, fetchAPIModule = {
  prepare,
  send
};
function sortIcons(icons) {
  let result = {
    loaded: [],
    missing: [],
    pending: []
  }, storage2 = /* @__PURE__ */ Object.create(null);
  icons.sort((a, b) => a.provider !== b.provider ? a.provider.localeCompare(b.provider) : a.prefix !== b.prefix ? a.prefix.localeCompare(b.prefix) : a.name.localeCompare(b.name));
  let lastIcon = {
    provider: "",
    prefix: "",
    name: ""
  };
  return icons.forEach((icon) => {
    if (lastIcon.name === icon.name && lastIcon.prefix === icon.prefix && lastIcon.provider === icon.provider)
      return;
    lastIcon = icon;
    let provider = icon.provider, prefix2 = icon.prefix, name = icon.name;
    storage2[provider] === void 0 && (storage2[provider] = /* @__PURE__ */ Object.create(null));
    let providerStorage = storage2[provider];
    providerStorage[prefix2] === void 0 && (providerStorage[prefix2] = getStorage(provider, prefix2));
    let localStorage2 = providerStorage[prefix2], list;
    localStorage2.icons[name] !== void 0 ? list = result.loaded : prefix2 === "" || localStorage2.missing[name] !== void 0 ? list = result.missing : list = result.pending;
    let item = {
      provider,
      prefix: prefix2,
      name
    };
    list.push(item);
  }), result;
}
var callbacks = /* @__PURE__ */ Object.create(null), pendingUpdates = /* @__PURE__ */ Object.create(null);
function removeCallback(sources, id) {
  sources.forEach((source) => {
    let provider = source.provider;
    if (callbacks[provider] === void 0)
      return;
    let providerCallbacks = callbacks[provider], prefix2 = source.prefix, items = providerCallbacks[prefix2];
    items && (providerCallbacks[prefix2] = items.filter((row) => row.id !== id));
  });
}
function updateCallbacks(provider, prefix2) {
  pendingUpdates[provider] === void 0 && (pendingUpdates[provider] = /* @__PURE__ */ Object.create(null));
  let providerPendingUpdates = pendingUpdates[provider];
  providerPendingUpdates[prefix2] || (providerPendingUpdates[prefix2] = !0, setTimeout(() => {
    if (providerPendingUpdates[prefix2] = !1, callbacks[provider] === void 0 || callbacks[provider][prefix2] === void 0)
      return;
    let items = callbacks[provider][prefix2].slice(0);
    if (!items.length)
      return;
    let storage2 = getStorage(provider, prefix2), hasPending = !1;
    items.forEach((item) => {
      let icons = item.icons, oldLength = icons.pending.length;
      icons.pending = icons.pending.filter((icon) => {
        if (icon.prefix !== prefix2)
          return !0;
        let name = icon.name;
        if (storage2.icons[name] !== void 0)
          icons.loaded.push({
            provider,
            prefix: prefix2,
            name
          });
        else if (storage2.missing[name] !== void 0)
          icons.missing.push({
            provider,
            prefix: prefix2,
            name
          });
        else
          return hasPending = !0, !0;
        return !1;
      }), icons.pending.length !== oldLength && (hasPending || removeCallback([
        {
          provider,
          prefix: prefix2
        }
      ], item.id), item.callback(icons.loaded.slice(0), icons.missing.slice(0), icons.pending.slice(0), item.abort));
    });
  }));
}
var idCounter = 0;
function storeCallback(callback, icons, pendingSources) {
  let id = idCounter++, abort = removeCallback.bind(null, pendingSources, id);
  if (!icons.pending.length)
    return abort;
  let item = {
    id,
    icons,
    callback,
    abort
  };
  return pendingSources.forEach((source) => {
    let provider = source.provider, prefix2 = source.prefix;
    callbacks[provider] === void 0 && (callbacks[provider] = /* @__PURE__ */ Object.create(null));
    let providerCallbacks = callbacks[provider];
    providerCallbacks[prefix2] === void 0 && (providerCallbacks[prefix2] = []), providerCallbacks[prefix2].push(item);
  }), abort;
}
function listToIcons(list, validate2 = !0, simpleNames2 = !1) {
  let result = [];
  return list.forEach((item) => {
    let icon = typeof item == "string" ? stringToIcon(item, !1, simpleNames2) : item;
    (!validate2 || validateIcon(icon, simpleNames2)) && result.push({
      provider: icon.provider,
      prefix: icon.prefix,
      name: icon.name
    });
  }), result;
}
var defaultConfig = {
  resources: [],
  index: 0,
  timeout: 2e3,
  rotate: 750,
  random: !1,
  dataAfterTimeout: !1
};
function sendQuery(config2, payload, query, done) {
  let resourcesCount = config2.resources.length, startIndex = config2.random ? Math.floor(Math.random() * resourcesCount) : config2.index, resources;
  if (config2.random) {
    let list = config2.resources.slice(0);
    for (resources = []; list.length > 1; ) {
      let nextIndex = Math.floor(Math.random() * list.length);
      resources.push(list[nextIndex]), list = list.slice(0, nextIndex).concat(list.slice(nextIndex + 1));
    }
    resources = resources.concat(list);
  } else
    resources = config2.resources.slice(startIndex).concat(config2.resources.slice(0, startIndex));
  let startTime = Date.now(), status = "pending", queriesSent = 0, lastError, timer = null, queue = [], doneCallbacks = [];
  typeof done == "function" && doneCallbacks.push(done);
  function resetTimer() {
    timer && (clearTimeout(timer), timer = null);
  }
  function abort() {
    status === "pending" && (status = "aborted"), resetTimer(), queue.forEach((item) => {
      item.status === "pending" && (item.status = "aborted");
    }), queue = [];
  }
  function subscribe(callback, overwrite) {
    overwrite && (doneCallbacks = []), typeof callback == "function" && doneCallbacks.push(callback);
  }
  function getQueryStatus() {
    return {
      startTime,
      payload,
      status,
      queriesSent,
      queriesPending: queue.length,
      subscribe,
      abort
    };
  }
  function failQuery() {
    status = "failed", doneCallbacks.forEach((callback) => {
      callback(void 0, lastError);
    });
  }
  function clearQueue() {
    queue.forEach((item) => {
      item.status === "pending" && (item.status = "aborted");
    }), queue = [];
  }
  function moduleResponse(item, response, data) {
    let isError = response !== "success";
    switch (queue = queue.filter((queued) => queued !== item), status) {
      case "pending":
        break;
      case "failed":
        if (isError || !config2.dataAfterTimeout)
          return;
        break;
      default:
        return;
    }
    if (response === "abort") {
      lastError = data, failQuery();
      return;
    }
    if (isError) {
      lastError = data, queue.length || (resources.length ? execNext() : failQuery());
      return;
    }
    if (resetTimer(), clearQueue(), !config2.random) {
      let index = config2.resources.indexOf(item.resource);
      index !== -1 && index !== config2.index && (config2.index = index);
    }
    status = "completed", doneCallbacks.forEach((callback) => {
      callback(data);
    });
  }
  function execNext() {
    if (status !== "pending")
      return;
    resetTimer();
    let resource = resources.shift();
    if (resource === void 0) {
      if (queue.length) {
        timer = setTimeout(() => {
          resetTimer(), status === "pending" && (clearQueue(), failQuery());
        }, config2.timeout);
        return;
      }
      failQuery();
      return;
    }
    let item = {
      status: "pending",
      resource,
      callback: (status2, data) => {
        moduleResponse(item, status2, data);
      }
    };
    queue.push(item), queriesSent++, timer = setTimeout(execNext, config2.rotate), query(resource, payload, item.callback);
  }
  return setTimeout(execNext), getQueryStatus;
}
function setConfig(config2) {
  if (typeof config2 != "object" || typeof config2.resources != "object" || !(config2.resources instanceof Array) || !config2.resources.length)
    throw new Error("Invalid Reduncancy configuration");
  let newConfig = /* @__PURE__ */ Object.create(null), key;
  for (key in defaultConfig)
    config2[key] !== void 0 ? newConfig[key] = config2[key] : newConfig[key] = defaultConfig[key];
  return newConfig;
}
function initRedundancy(cfg) {
  let config2 = setConfig(cfg), queries = [];
  function cleanup() {
    queries = queries.filter((item) => item().status === "pending");
  }
  function query(payload, queryCallback, doneCallback) {
    let query2 = sendQuery(config2, payload, queryCallback, (data, error) => {
      cleanup(), doneCallback && doneCallback(data, error);
    });
    return queries.push(query2), query2;
  }
  function find(callback) {
    let result = queries.find((value) => callback(value));
    return result !== void 0 ? result : null;
  }
  return {
    query,
    find,
    setIndex: (index) => {
      config2.index = index;
    },
    getIndex: () => config2.index,
    cleanup
  };
}
function emptyCallback$1() {
}
var redundancyCache = /* @__PURE__ */ Object.create(null);
function getRedundancyCache(provider) {
  if (redundancyCache[provider] === void 0) {
    let config2 = getAPIConfig(provider);
    if (!config2)
      return;
    let redundancy = initRedundancy(config2), cachedReundancy = {
      config: config2,
      redundancy
    };
    redundancyCache[provider] = cachedReundancy;
  }
  return redundancyCache[provider];
}
function sendAPIQuery(target, query, callback) {
  let redundancy, send2;
  if (typeof target == "string") {
    let api = getAPIModule(target);
    if (!api)
      return callback(void 0, 424), emptyCallback$1;
    send2 = api.send;
    let cached = getRedundancyCache(target);
    cached && (redundancy = cached.redundancy);
  } else {
    let config2 = createAPIConfig(target);
    if (config2) {
      redundancy = initRedundancy(config2);
      let moduleKey = target.resources ? target.resources[0] : "", api = getAPIModule(moduleKey);
      api && (send2 = api.send);
    }
  }
  return !redundancy || !send2 ? (callback(void 0, 424), emptyCallback$1) : redundancy.query(query, send2, callback)().abort;
}
var cache = {};
function emptyCallback() {
}
var pendingIcons = /* @__PURE__ */ Object.create(null), iconsToLoad = /* @__PURE__ */ Object.create(null), loaderFlags = /* @__PURE__ */ Object.create(null), queueFlags = /* @__PURE__ */ Object.create(null);
function loadedNewIcons(provider, prefix2) {
  loaderFlags[provider] === void 0 && (loaderFlags[provider] = /* @__PURE__ */ Object.create(null));
  let providerLoaderFlags = loaderFlags[provider];
  providerLoaderFlags[prefix2] || (providerLoaderFlags[prefix2] = !0, setTimeout(() => {
    providerLoaderFlags[prefix2] = !1, updateCallbacks(provider, prefix2);
  }));
}
var errorsCache = /* @__PURE__ */ Object.create(null);
function loadNewIcons(provider, prefix2, icons) {
  function err() {
    let key = (provider === "" ? "" : "@" + provider + ":") + prefix2, time = Math.floor(Date.now() / 6e4);
    errorsCache[key] < time && (errorsCache[key] = time, console.error('Unable to retrieve icons for "' + key + '" because API is not configured properly.'));
  }
  iconsToLoad[provider] === void 0 && (iconsToLoad[provider] = /* @__PURE__ */ Object.create(null));
  let providerIconsToLoad = iconsToLoad[provider];
  queueFlags[provider] === void 0 && (queueFlags[provider] = /* @__PURE__ */ Object.create(null));
  let providerQueueFlags = queueFlags[provider];
  pendingIcons[provider] === void 0 && (pendingIcons[provider] = /* @__PURE__ */ Object.create(null));
  let providerPendingIcons = pendingIcons[provider];
  providerIconsToLoad[prefix2] === void 0 ? providerIconsToLoad[prefix2] = icons : providerIconsToLoad[prefix2] = providerIconsToLoad[prefix2].concat(icons).sort(), providerQueueFlags[prefix2] || (providerQueueFlags[prefix2] = !0, setTimeout(() => {
    providerQueueFlags[prefix2] = !1;
    let icons2 = providerIconsToLoad[prefix2];
    delete providerIconsToLoad[prefix2];
    let api = getAPIModule(provider);
    if (!api) {
      err();
      return;
    }
    api.prepare(provider, prefix2, icons2).forEach((item) => {
      sendAPIQuery(provider, item, (data, error) => {
        let storage2 = getStorage(provider, prefix2);
        if (typeof data != "object") {
          if (error !== 404)
            return;
          let t = Date.now();
          item.icons.forEach((name) => {
            storage2.missing[name] = t;
          });
        } else
          try {
            let parsed = addIconSet(storage2, data);
            if (!parsed.length)
              return;
            let pending = providerPendingIcons[prefix2];
            parsed.forEach((name) => {
              delete pending[name];
            }), cache.store && cache.store(provider, data);
          } catch (err2) {
            console.error(err2);
          }
        loadedNewIcons(provider, prefix2);
      });
    });
  }));
}
var loadIcons = (icons, callback) => {
  let cleanedIcons = listToIcons(icons, !0, allowSimpleNames()), sortedIcons = sortIcons(cleanedIcons);
  if (!sortedIcons.pending.length) {
    let callCallback = !0;
    return callback && setTimeout(() => {
      callCallback && callback(sortedIcons.loaded, sortedIcons.missing, sortedIcons.pending, emptyCallback);
    }), () => {
      callCallback = !1;
    };
  }
  let newIcons = /* @__PURE__ */ Object.create(null), sources = [], lastProvider, lastPrefix;
  sortedIcons.pending.forEach((icon) => {
    let provider = icon.provider, prefix2 = icon.prefix;
    if (prefix2 === lastPrefix && provider === lastProvider)
      return;
    lastProvider = provider, lastPrefix = prefix2, sources.push({
      provider,
      prefix: prefix2
    }), pendingIcons[provider] === void 0 && (pendingIcons[provider] = /* @__PURE__ */ Object.create(null));
    let providerPendingIcons = pendingIcons[provider];
    providerPendingIcons[prefix2] === void 0 && (providerPendingIcons[prefix2] = /* @__PURE__ */ Object.create(null)), newIcons[provider] === void 0 && (newIcons[provider] = /* @__PURE__ */ Object.create(null));
    let providerNewIcons = newIcons[provider];
    providerNewIcons[prefix2] === void 0 && (providerNewIcons[prefix2] = []);
  });
  let time = Date.now();
  return sortedIcons.pending.forEach((icon) => {
    let provider = icon.provider, prefix2 = icon.prefix, name = icon.name, pendingQueue = pendingIcons[provider][prefix2];
    pendingQueue[name] === void 0 && (pendingQueue[name] = time, newIcons[provider][prefix2].push(name));
  }), sources.forEach((source) => {
    let provider = source.provider, prefix2 = source.prefix;
    newIcons[provider][prefix2].length && loadNewIcons(provider, prefix2, newIcons[provider][prefix2]);
  }), callback ? storeCallback(callback, sortedIcons, sources) : emptyCallback;
};
var cacheVersion = "iconify2", cachePrefix = "iconify", countKey = cachePrefix + "-count", versionKey = cachePrefix + "-version", hour = 36e5, cacheExpiration = 168, config = {
  local: !0,
  session: !0
}, loaded = !1, count = {
  local: 0,
  session: 0
}, emptyList = {
  local: [],
  session: []
}, _window = typeof window > "u" ? {} : window;
function getGlobal(key) {
  let attr = key + "Storage";
  try {
    if (_window && _window[attr] && typeof _window[attr].length == "number")
      return _window[attr];
  } catch {
  }
  return config[key] = !1, null;
}
function setCount(storage2, key, value) {
  try {
    return storage2.setItem(countKey, value.toString()), count[key] = value, !0;
  } catch {
    return !1;
  }
}
function getCount(storage2) {
  let count2 = storage2.getItem(countKey);
  if (count2) {
    let total = parseInt(count2);
    return total || 0;
  }
  return 0;
}
function initCache(storage2, key) {
  try {
    storage2.setItem(versionKey, cacheVersion);
  } catch {
  }
  setCount(storage2, key, 0);
}
function destroyCache(storage2) {
  try {
    let total = getCount(storage2);
    for (let i = 0; i < total; i++)
      storage2.removeItem(cachePrefix + i.toString());
  } catch {
  }
}
var loadCache = () => {
  if (loaded)
    return;
  loaded = !0;
  let minTime = Math.floor(Date.now() / hour) - cacheExpiration;
  function load(key) {
    let func = getGlobal(key);
    if (!func)
      return;
    let getItem = (index) => {
      let name = cachePrefix + index.toString(), item = func.getItem(name);
      if (typeof item != "string")
        return !1;
      let valid = !0;
      try {
        let data = JSON.parse(item);
        if (typeof data != "object" || typeof data.cached != "number" || data.cached < minTime || typeof data.provider != "string" || typeof data.data != "object" || typeof data.data.prefix != "string")
          valid = !1;
        else {
          let provider = data.provider, prefix2 = data.data.prefix, storage2 = getStorage(provider, prefix2);
          valid = addIconSet(storage2, data.data).length > 0;
        }
      } catch {
        valid = !1;
      }
      return valid || func.removeItem(name), valid;
    };
    try {
      let version2 = func.getItem(versionKey);
      if (version2 !== cacheVersion) {
        version2 && destroyCache(func), initCache(func, key);
        return;
      }
      let total = getCount(func);
      for (let i = total - 1; i >= 0; i--)
        getItem(i) || (i === total - 1 ? total-- : emptyList[key].push(i));
      setCount(func, key, total);
    } catch {
    }
  }
  for (let key in config)
    load(key);
}, storeCache = (provider, data) => {
  loaded || loadCache();
  function store(key) {
    if (!config[key])
      return !1;
    let func = getGlobal(key);
    if (!func)
      return !1;
    let index = emptyList[key].shift();
    if (index === void 0 && (index = count[key], !setCount(func, key, index + 1)))
      return !1;
    try {
      let item = {
        cached: Math.floor(Date.now() / hour),
        provider,
        data
      };
      func.setItem(cachePrefix + index.toString(), JSON.stringify(item));
    } catch {
      return !1;
    }
    return !0;
  }
  !Object.keys(data.icons).length || (data.not_found && (data = Object.assign({}, data), delete data.not_found), store("local") || store("session"));
};
var separator = /[\s,]+/;
function flipFromString(custom2, flip) {
  flip.split(separator).forEach((str) => {
    switch (str.trim()) {
      case "horizontal":
        custom2.hFlip = !0;
        break;
      case "vertical":
        custom2.vFlip = !0;
        break;
    }
  });
}
function alignmentFromString(custom2, align) {
  align.split(separator).forEach((str) => {
    let value = str.trim();
    switch (value) {
      case "left":
      case "center":
      case "right":
        custom2.hAlign = value;
        break;
      case "top":
      case "middle":
      case "bottom":
        custom2.vAlign = value;
        break;
      case "slice":
      case "crop":
        custom2.slice = !0;
        break;
      case "meet":
        custom2.slice = !1;
    }
  });
}
function rotateFromString(value, defaultValue = 0) {
  let units = value.replace(/^-?[0-9.]*/, "");
  function cleanup(value2) {
    for (; value2 < 0; )
      value2 += 4;
    return value2 % 4;
  }
  if (units === "") {
    let num = parseInt(value);
    return isNaN(num) ? 0 : cleanup(num);
  } else if (units !== value) {
    let split = 0;
    switch (units) {
      case "%":
        split = 25;
        break;
      case "deg":
        split = 90;
    }
    if (split) {
      let num = parseFloat(value.slice(0, value.length - units.length));
      return isNaN(num) ? 0 : (num = num / split, num % 1 === 0 ? cleanup(num) : 0);
    }
  }
  return defaultValue;
}
var svgDefaults = {
  xmlns: "http://www.w3.org/2000/svg",
  xmlnsXlink: "http://www.w3.org/1999/xlink",
  "aria-hidden": !0,
  role: "img",
  style: {}
}, inlineDefaults = { ...defaults, inline: !0 }, render = (icon, props, inline, ref) => {
  let defaultProps = inline ? inlineDefaults : defaults, customisations = mergeCustomisations(defaultProps, props), style = typeof props.style == "object" && props.style !== null ? props.style : {}, componentProps = { ...svgDefaults, ref, style };
  for (let key in props) {
    let value = props[key];
    if (value !== void 0)
      switch (key) {
        case "icon":
        case "style":
        case "children":
        case "onLoad":
        case "_ref":
        case "_inline":
          break;
        case "inline":
        case "hFlip":
        case "vFlip":
          customisations[key] = value === !0 || value === "true" || value === 1;
          break;
        case "flip":
          typeof value == "string" && flipFromString(customisations, value);
          break;
        case "align":
          typeof value == "string" && alignmentFromString(customisations, value);
          break;
        case "color":
          style.color = value;
          break;
        case "rotate":
          typeof value == "string" ? customisations[key] = rotateFromString(value) : typeof value == "number" && (customisations[key] = value);
          break;
        case "ariaHidden":
        case "aria-hidden":
          value !== !0 && value !== "true" && delete componentProps["aria-hidden"];
          break;
        default:
          defaultProps[key] === void 0 && (componentProps[key] = value);
      }
  }
  let item = iconToSVG(icon, customisations), localCounter = 0, id = props.id;
  typeof id == "string" && (id = id.replace(/-/g, "_")), componentProps.dangerouslySetInnerHTML = {
    __html: replaceIDs(item.body, id ? () => id + "ID" + localCounter++ : "iconifyReact")
  };
  for (let key in item.attributes)
    componentProps[key] = item.attributes[key];
  return item.inline && style.verticalAlign === void 0 && (style.verticalAlign = "-0.125em"), import_react9.default.createElement("svg", componentProps);
};
allowSimpleNames(!0);
setAPIModule("", fetchAPIModule);
if (typeof document < "u" && typeof window < "u") {
  cache.store = storeCache, loadCache();
  let _window2 = window;
  if (_window2.IconifyPreload !== void 0) {
    let preload = _window2.IconifyPreload, err = "Invalid IconifyPreload syntax.";
    typeof preload == "object" && preload !== null && (preload instanceof Array ? preload : [preload]).forEach((item) => {
      try {
        (typeof item != "object" || item === null || item instanceof Array || typeof item.icons != "object" || typeof item.prefix != "string" || !addCollection(item)) && console.error(err);
      } catch {
        console.error(err);
      }
    });
  }
  if (_window2.IconifyProviders !== void 0) {
    let providers = _window2.IconifyProviders;
    if (typeof providers == "object" && providers !== null)
      for (let key in providers) {
        let err = "IconifyProviders[" + key + "] is invalid.";
        try {
          let value = providers[key];
          if (typeof value != "object" || !value || value.resources === void 0)
            continue;
          addAPIProvider(key, value) || console.error(err);
        } catch {
          console.error(err);
        }
      }
  }
}
var IconComponent = class extends import_react9.default.Component {
  constructor(props) {
    super(props), this.state = {
      icon: null
    };
  }
  _abortLoading() {
    this._loading && (this._loading.abort(), this._loading = null);
  }
  _setData(icon) {
    this.state.icon !== icon && this.setState({
      icon
    });
  }
  _checkIcon(changed) {
    let state = this.state, icon = this.props.icon;
    if (typeof icon == "object" && icon !== null && typeof icon.body == "string") {
      this._icon = "", this._abortLoading(), (changed || state.icon === null) && this._setData({
        data: fullIcon(icon)
      });
      return;
    }
    let iconName;
    if (typeof icon != "string" || (iconName = stringToIcon(icon, !1, !0)) === null) {
      this._abortLoading(), this._setData(null);
      return;
    }
    let data = getIconData(iconName);
    if (data === null) {
      (!this._loading || this._loading.name !== icon) && (this._abortLoading(), this._icon = "", this._setData(null), this._loading = {
        name: icon,
        abort: loadIcons([iconName], this._checkIcon.bind(this, !1))
      });
      return;
    }
    if (this._icon !== icon || state.icon === null) {
      this._abortLoading(), this._icon = icon;
      let classes = ["iconify"];
      iconName.prefix !== "" && classes.push("iconify--" + iconName.prefix), iconName.provider !== "" && classes.push("iconify--" + iconName.provider), this._setData({
        data,
        classes
      }), this.props.onLoad && this.props.onLoad(icon);
    }
  }
  componentDidMount() {
    this._checkIcon(!1);
  }
  componentDidUpdate(oldProps) {
    oldProps.icon !== this.props.icon && this._checkIcon(!0);
  }
  componentWillUnmount() {
    this._abortLoading();
  }
  render() {
    let props = this.props, icon = this.state.icon;
    if (icon === null)
      return props.children ? props.children : import_react9.default.createElement("span", {});
    let newProps = props;
    return icon.classes && (newProps = {
      ...props,
      className: (typeof props.className == "string" ? props.className + " " : "") + icon.classes.join(" ")
    }), render(icon.data, newProps, props._inline, props._ref);
  }
}, Icon = import_react9.default.forwardRef(function(props, ref) {
  let newProps = {
    ...props,
    _ref: ref,
    _inline: !1
  };
  return import_react9.default.createElement(IconComponent, newProps);
}), InlineIcon = import_react9.default.forwardRef(function(props, ref) {
  let newProps = { ...props, _ref: ref, _inline: !0 };
  return import_react9.default.createElement(IconComponent, newProps);
});

// app/@core/components/AppSidebar.tsx
var import_jsx_dev_runtime = __toESM(require_jsx_dev_runtime());
function AppSidebar({ nav, toggle }) {
  let { pathname } = useLocation();
  return /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
    className: "w-80 overflow-y-auto bg-base-100 p-0 text-base-content",
    children: [
      /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
        className: clsx2(
          "sticky top-0 z-20 hidden items-center gap-2 bg-base-200 bg-opacity-90 px-4 py-2 backdrop-blur",
          { "lg:flex": pathname !== "/" }
        ),
        children: /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(Logo, {
          showVersion: !0
        }, void 0, !1, {
          fileName: "app/@core/components/AppSidebar.tsx",
          lineNumber: 23,
          columnNumber: 9
        }, this)
      }, void 0, !1, {
        fileName: "app/@core/components/AppSidebar.tsx",
        lineNumber: 17,
        columnNumber: 7
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
        className: "h-4"
      }, void 0, !1, {
        fileName: "app/@core/components/AppSidebar.tsx",
        lineNumber: 25,
        columnNumber: 7
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(Menu$1, {
        vertical: !0,
        className: "p-0",
        children: nav.map((item) => /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(Menu$1.Item, {
          className: "hover-bordered",
          children: /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(NavLink2, {
            to: item.href,
            className: clsx2({ active: pathname.startsWith(item.href) }),
            onClick: toggle && toggle,
            children: [
              item.icon && /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(Icon, {
                icon: item.icon
              }, void 0, !1, {
                fileName: "app/@core/components/AppSidebar.tsx",
                lineNumber: 34,
                columnNumber: 29
              }, this),
              item.label
            ]
          }, void 0, !0, {
            fileName: "app/@core/components/AppSidebar.tsx",
            lineNumber: 29,
            columnNumber: 13
          }, this)
        }, item.label, !1, {
          fileName: "app/@core/components/AppSidebar.tsx",
          lineNumber: 28,
          columnNumber: 11
        }, this))
      }, void 0, !1, {
        fileName: "app/@core/components/AppSidebar.tsx",
        lineNumber: 26,
        columnNumber: 7
      }, this)
    ]
  }, void 0, !0, {
    fileName: "app/@core/components/AppSidebar.tsx",
    lineNumber: 16,
    columnNumber: 5
  }, this);
}

// app/@core/components/AppNavbar.tsx
var import_bars_3_bottom_left = __toESM(require_bars_3_bottom_left());
var import_jsx_dev_runtime = __toESM(require_jsx_dev_runtime());
function AppNavbar({ toggleMenu, user }) {
  let { pathname } = useLocation();
  return /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(Navbar$1, {
    children: [
      /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
        className: "flex flex-1 md:gap-1 lg:gap-2",
        children: [
          /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(Tooltip, {
            message: "Menu",
            position: "bottom",
            children: /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(Button, {
              color: "ghost",
              tabIndex: 0,
              onClick: toggleMenu,
              className: clsx2({ "lg:hidden": pathname !== "/" }),
              children: /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(Icon, {
                icon: import_bars_3_bottom_left.default,
                width: 20,
                height: 20,
                className: "inline-block h-5 w-5 md:h-6 md:w-6"
              }, void 0, !1, {
                fileName: "app/@core/components/AppNavbar.tsx",
                lineNumber: 22,
                columnNumber: 13
              }, this)
            }, void 0, !1, {
              fileName: "app/@core/components/AppNavbar.tsx",
              lineNumber: 21,
              columnNumber: 11
            }, this)
          }, void 0, !1, {
            fileName: "app/@core/components/AppNavbar.tsx",
            lineNumber: 20,
            columnNumber: 9
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
            className: clsx2("flex items-center gap-2", { "lg:hidden": pathname === "/" }),
            children: /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
              id: "logo",
              className: "ml-2 hidden flex-1",
              children: /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(Logo, {
                href: "/"
              }, void 0, !1, {
                fileName: "app/@core/components/AppNavbar.tsx",
                lineNumber: 27,
                columnNumber: 13
              }, this)
            }, void 0, !1, {
              fileName: "app/@core/components/AppNavbar.tsx",
              lineNumber: 26,
              columnNumber: 11
            }, this)
          }, void 0, !1, {
            fileName: "app/@core/components/AppNavbar.tsx",
            lineNumber: 25,
            columnNumber: 9
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
            className: "hidden w-full max-w-sm lg:flex",
            children: /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(AppSearch, {}, void 0, !1, {
              fileName: "app/@core/components/AppNavbar.tsx",
              lineNumber: 31,
              columnNumber: 11
            }, this)
          }, void 0, !1, {
            fileName: "app/@core/components/AppNavbar.tsx",
            lineNumber: 30,
            columnNumber: 9
          }, this)
        ]
      }, void 0, !0, {
        fileName: "app/@core/components/AppNavbar.tsx",
        lineNumber: 19,
        columnNumber: 7
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
        className: "flex-0",
        children: [
          /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(ThemeChanger, {}, void 0, !1, {
            fileName: "app/@core/components/AppNavbar.tsx",
            lineNumber: 35,
            columnNumber: 9
          }, this),
          user === null ? /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(Button, {
            href: "./auth/login",
            color: "primary",
            animation: !0,
            className: "ml-2",
            children: "Log in"
          }, void 0, !1, {
            fileName: "app/@core/components/AppNavbar.tsx",
            lineNumber: 37,
            columnNumber: 11
          }, this) : /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(Dropdown$1, {
            vertical: "end",
            children: [
              /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(Button, {
                color: "ghost",
                className: "avatar ml-1",
                shape: "circle",
                children: /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(Avatar$1, {
                  shape: "circle",
                  size: "xs",
                  letters: user.displayName.at(0)
                }, void 0, !1, {
                  fileName: "app/@core/components/AppNavbar.tsx",
                  lineNumber: 43,
                  columnNumber: 15
                }, this)
              }, void 0, !1, {
                fileName: "app/@core/components/AppNavbar.tsx",
                lineNumber: 42,
                columnNumber: 13
              }, this),
              /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(Dropdown$1.Menu, {
                className: "menu-compact w-52",
                children: [
                  /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(Dropdown$1.Item, {
                    href: "/profile",
                    children: "Profile"
                  }, void 0, !1, {
                    fileName: "app/@core/components/AppNavbar.tsx",
                    lineNumber: 46,
                    columnNumber: 15
                  }, this),
                  /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
                    className: "mt-2 h-2 border-t"
                  }, void 0, !1, {
                    fileName: "app/@core/components/AppNavbar.tsx",
                    lineNumber: 47,
                    columnNumber: 15
                  }, this),
                  /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(Dropdown$1.Item, {
                    href: "/auth/logout",
                    children: "Sign Out"
                  }, void 0, !1, {
                    fileName: "app/@core/components/AppNavbar.tsx",
                    lineNumber: 48,
                    columnNumber: 15
                  }, this)
                ]
              }, void 0, !0, {
                fileName: "app/@core/components/AppNavbar.tsx",
                lineNumber: 45,
                columnNumber: 13
              }, this)
            ]
          }, void 0, !0, {
            fileName: "app/@core/components/AppNavbar.tsx",
            lineNumber: 41,
            columnNumber: 11
          }, this)
        ]
      }, void 0, !0, {
        fileName: "app/@core/components/AppNavbar.tsx",
        lineNumber: 34,
        columnNumber: 7
      }, this)
    ]
  }, void 0, !0, {
    fileName: "app/@core/components/AppNavbar.tsx",
    lineNumber: 18,
    columnNumber: 5
  }, this);
}

// app/@core/components/Logo.tsx
var import_jsx_dev_runtime = __toESM(require_jsx_dev_runtime());
function Logo({ href = "/", showVersion = !1 }) {
  let { pathname } = useLocation();
  return /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(import_jsx_dev_runtime.Fragment, {
    children: [
      /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(NavLink2, {
        to: href,
        className: "btn btn-ghost px-2",
        children: /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
          className: "inline-flex text-lg text-primary transition-all duration-100 md:text-3xl",
          children: [
            /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("span", {
              className: clsx2("mr-2 lowercase", { "text-primary": pathname !== "/" }),
              children: "helios"
            }, void 0, !1, {
              fileName: "app/@core/components/Logo.tsx",
              lineNumber: 16,
              columnNumber: 11
            }, this),
            /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("span", {
              className: clsx2("border-t-accent-400 border-b-accent-400 rounded-tl-xl rounded-br-xl border-2 uppercase", {
                "text-base-content": pathname !== "/"
              }),
              children: "ui"
            }, void 0, !1, {
              fileName: "app/@core/components/Logo.tsx",
              lineNumber: 17,
              columnNumber: 11
            }, this)
          ]
        }, void 0, !0, {
          fileName: "app/@core/components/Logo.tsx",
          lineNumber: 15,
          columnNumber: 9
        }, this)
      }, void 0, !1, {
        fileName: "app/@core/components/Logo.tsx",
        lineNumber: 14,
        columnNumber: 7
      }, this),
      showVersion && /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(NavLink2, {
        to: "/docs/changlog",
        children: "1.0.0"
      }, void 0, !1, {
        fileName: "app/@core/components/Logo.tsx",
        lineNumber: 26,
        columnNumber: 23
      }, this)
    ]
  }, void 0, !0, {
    fileName: "app/@core/components/Logo.tsx",
    lineNumber: 13,
    columnNumber: 5
  }, this);
}

// app/@core/components/EmptyObject.tsx
var import_plus = __toESM(require_plus()), import_server_stack = __toESM(require_server_stack()), import_building_office_2 = __toESM(require_building_office_2()), import_link = __toESM(require_link());
var import_jsx_dev_runtime = __toESM(require_jsx_dev_runtime());
function EmptyObject({ objectType: objectType2 }) {
  let { dispatch } = useGlobalState(), useObjectType = (() => {
    switch (objectType2) {
      case "node":
        return { icon: import_server_stack.default, dispatchType: "OPEN_NEWNODE_MDL" };
      case "location":
        return { icon: import_building_office_2.default, dispatchType: "OPEN_NEWLOCATION_MDL" };
      case "tunnel":
        return { icon: import_link.default, dispatchType: "OPEN_NEWTUNNEL_MDL" };
      default:
        throw new Error(`Unhandled empty object type: ${objectType2}`);
    }
  })();
  return /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(import_jsx_dev_runtime.Fragment, {
    children: /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
      className: "text-center",
      children: [
        /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(Icon, {
          icon: useObjectType.icon,
          className: "mx-auto h-12 w-12 text-gray-400"
        }, void 0, !1, {
          fileName: "app/@core/components/EmptyObject.tsx",
          lineNumber: 31,
          columnNumber: 9
        }, this),
        /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("h3", {
          className: "mt-2 text-sm font-medium",
          children: `No ${objectType2}s`
        }, void 0, !1, {
          fileName: "app/@core/components/EmptyObject.tsx",
          lineNumber: 32,
          columnNumber: 9
        }, this),
        /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("p", {
          className: "mt-1 text-sm",
          children: `Get started by creating a new ${objectType2}.`
        }, void 0, !1, {
          fileName: "app/@core/components/EmptyObject.tsx",
          lineNumber: 33,
          columnNumber: 9
        }, this),
        /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
          className: "mt-6",
          children: /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(Button, {
            color: "primary",
            variant: "outline",
            animation: !0,
            onClick: () => dispatch({ type: useObjectType.dispatchType }),
            children: [
              /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(Icon, {
                icon: import_plus.default,
                className: "-ml-1 mr-2 h-5 w-5",
                "aria-hidden": "true"
              }, void 0, !1, {
                fileName: "app/@core/components/EmptyObject.tsx",
                lineNumber: 41,
                columnNumber: 13
              }, this),
              `New ${objectType2}`
            ]
          }, void 0, !0, {
            fileName: "app/@core/components/EmptyObject.tsx",
            lineNumber: 35,
            columnNumber: 11
          }, this)
        }, void 0, !1, {
          fileName: "app/@core/components/EmptyObject.tsx",
          lineNumber: 34,
          columnNumber: 9
        }, this)
      ]
    }, void 0, !0, {
      fileName: "app/@core/components/EmptyObject.tsx",
      lineNumber: 30,
      columnNumber: 7
    }, this)
  }, void 0, !1, {
    fileName: "app/@core/components/EmptyObject.tsx",
    lineNumber: 29,
    columnNumber: 5
  }, this);
}

// app/@core/components/NewNodeForm.tsx
var import_remix_validated_form = __toESM(require_remix_validated_form_cjs());

// ../../node_modules/.pnpm/zod@3.19.1/node_modules/zod/lib/index.mjs
var util;
(function(util2) {
  util2.assertEqual = (val) => val;
  function assertIs(_arg) {
  }
  util2.assertIs = assertIs;
  function assertNever(_x) {
    throw new Error();
  }
  util2.assertNever = assertNever, util2.arrayToEnum = (items) => {
    let obj = {};
    for (let item of items)
      obj[item] = item;
    return obj;
  }, util2.getValidEnumValues = (obj) => {
    let validKeys = util2.objectKeys(obj).filter((k) => typeof obj[obj[k]] != "number"), filtered = {};
    for (let k of validKeys)
      filtered[k] = obj[k];
    return util2.objectValues(filtered);
  }, util2.objectValues = (obj) => util2.objectKeys(obj).map(function(e) {
    return obj[e];
  }), util2.objectKeys = typeof Object.keys == "function" ? (obj) => Object.keys(obj) : (object) => {
    let keys = [];
    for (let key in object)
      Object.prototype.hasOwnProperty.call(object, key) && keys.push(key);
    return keys;
  }, util2.find = (arr, checker) => {
    for (let item of arr)
      if (checker(item))
        return item;
  }, util2.isInteger = typeof Number.isInteger == "function" ? (val) => Number.isInteger(val) : (val) => typeof val == "number" && isFinite(val) && Math.floor(val) === val;
  function joinValues(array, separator2 = " | ") {
    return array.map((val) => typeof val == "string" ? `'${val}'` : val).join(separator2);
  }
  util2.joinValues = joinValues, util2.jsonStringifyReplacer = (_, value) => typeof value == "bigint" ? value.toString() : value;
})(util || (util = {}));
var ZodParsedType = util.arrayToEnum([
  "string",
  "nan",
  "number",
  "integer",
  "float",
  "boolean",
  "date",
  "bigint",
  "symbol",
  "function",
  "undefined",
  "null",
  "array",
  "object",
  "unknown",
  "promise",
  "void",
  "never",
  "map",
  "set"
]), getParsedType = (data) => {
  switch (typeof data) {
    case "undefined":
      return ZodParsedType.undefined;
    case "string":
      return ZodParsedType.string;
    case "number":
      return isNaN(data) ? ZodParsedType.nan : ZodParsedType.number;
    case "boolean":
      return ZodParsedType.boolean;
    case "function":
      return ZodParsedType.function;
    case "bigint":
      return ZodParsedType.bigint;
    case "object":
      return Array.isArray(data) ? ZodParsedType.array : data === null ? ZodParsedType.null : data.then && typeof data.then == "function" && data.catch && typeof data.catch == "function" ? ZodParsedType.promise : typeof Map < "u" && data instanceof Map ? ZodParsedType.map : typeof Set < "u" && data instanceof Set ? ZodParsedType.set : typeof Date < "u" && data instanceof Date ? ZodParsedType.date : ZodParsedType.object;
    default:
      return ZodParsedType.unknown;
  }
}, ZodIssueCode = util.arrayToEnum([
  "invalid_type",
  "invalid_literal",
  "custom",
  "invalid_union",
  "invalid_union_discriminator",
  "invalid_enum_value",
  "unrecognized_keys",
  "invalid_arguments",
  "invalid_return_type",
  "invalid_date",
  "invalid_string",
  "too_small",
  "too_big",
  "invalid_intersection_types",
  "not_multiple_of"
]), quotelessJson = (obj) => JSON.stringify(obj, null, 2).replace(/"([^"]+)":/g, "$1:"), ZodError = class extends Error {
  constructor(issues) {
    super(), this.issues = [], this.addIssue = (sub) => {
      this.issues = [...this.issues, sub];
    }, this.addIssues = (subs = []) => {
      this.issues = [...this.issues, ...subs];
    };
    let actualProto = new.target.prototype;
    Object.setPrototypeOf ? Object.setPrototypeOf(this, actualProto) : this.__proto__ = actualProto, this.name = "ZodError", this.issues = issues;
  }
  get errors() {
    return this.issues;
  }
  format(_mapper) {
    let mapper = _mapper || function(issue) {
      return issue.message;
    }, fieldErrors = { _errors: [] }, processError = (error) => {
      for (let issue of error.issues)
        if (issue.code === "invalid_union")
          issue.unionErrors.map(processError);
        else if (issue.code === "invalid_return_type")
          processError(issue.returnTypeError);
        else if (issue.code === "invalid_arguments")
          processError(issue.argumentsError);
        else if (issue.path.length === 0)
          fieldErrors._errors.push(mapper(issue));
        else {
          let curr = fieldErrors, i = 0;
          for (; i < issue.path.length; ) {
            let el = issue.path[i];
            i === issue.path.length - 1 ? (curr[el] = curr[el] || { _errors: [] }, curr[el]._errors.push(mapper(issue))) : curr[el] = curr[el] || { _errors: [] }, curr = curr[el], i++;
          }
        }
    };
    return processError(this), fieldErrors;
  }
  toString() {
    return this.message;
  }
  get message() {
    return JSON.stringify(this.issues, util.jsonStringifyReplacer, 2);
  }
  get isEmpty() {
    return this.issues.length === 0;
  }
  flatten(mapper = (issue) => issue.message) {
    let fieldErrors = {}, formErrors = [];
    for (let sub of this.issues)
      sub.path.length > 0 ? (fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [], fieldErrors[sub.path[0]].push(mapper(sub))) : formErrors.push(mapper(sub));
    return { formErrors, fieldErrors };
  }
  get formErrors() {
    return this.flatten();
  }
};
ZodError.create = (issues) => new ZodError(issues);
var errorMap = (issue, _ctx) => {
  let message;
  switch (issue.code) {
    case ZodIssueCode.invalid_type:
      issue.received === ZodParsedType.undefined ? message = "Required" : message = `Expected ${issue.expected}, received ${issue.received}`;
      break;
    case ZodIssueCode.invalid_literal:
      message = `Invalid literal value, expected ${JSON.stringify(issue.expected, util.jsonStringifyReplacer)}`;
      break;
    case ZodIssueCode.unrecognized_keys:
      message = `Unrecognized key(s) in object: ${util.joinValues(issue.keys, ", ")}`;
      break;
    case ZodIssueCode.invalid_union:
      message = "Invalid input";
      break;
    case ZodIssueCode.invalid_union_discriminator:
      message = `Invalid discriminator value. Expected ${util.joinValues(issue.options)}`;
      break;
    case ZodIssueCode.invalid_enum_value:
      message = `Invalid enum value. Expected ${util.joinValues(issue.options)}, received '${issue.received}'`;
      break;
    case ZodIssueCode.invalid_arguments:
      message = "Invalid function arguments";
      break;
    case ZodIssueCode.invalid_return_type:
      message = "Invalid function return type";
      break;
    case ZodIssueCode.invalid_date:
      message = "Invalid date";
      break;
    case ZodIssueCode.invalid_string:
      typeof issue.validation == "object" ? "startsWith" in issue.validation ? message = `Invalid input: must start with "${issue.validation.startsWith}"` : "endsWith" in issue.validation ? message = `Invalid input: must end with "${issue.validation.endsWith}"` : util.assertNever(issue.validation) : issue.validation !== "regex" ? message = `Invalid ${issue.validation}` : message = "Invalid";
      break;
    case ZodIssueCode.too_small:
      issue.type === "array" ? message = `Array must contain ${issue.inclusive ? "at least" : "more than"} ${issue.minimum} element(s)` : issue.type === "string" ? message = `String must contain ${issue.inclusive ? "at least" : "over"} ${issue.minimum} character(s)` : issue.type === "number" ? message = `Number must be greater than ${issue.inclusive ? "or equal to " : ""}${issue.minimum}` : issue.type === "date" ? message = `Date must be greater than ${issue.inclusive ? "or equal to " : ""}${new Date(issue.minimum)}` : message = "Invalid input";
      break;
    case ZodIssueCode.too_big:
      issue.type === "array" ? message = `Array must contain ${issue.inclusive ? "at most" : "less than"} ${issue.maximum} element(s)` : issue.type === "string" ? message = `String must contain ${issue.inclusive ? "at most" : "under"} ${issue.maximum} character(s)` : issue.type === "number" ? message = `Number must be less than ${issue.inclusive ? "or equal to " : ""}${issue.maximum}` : issue.type === "date" ? message = `Date must be smaller than ${issue.inclusive ? "or equal to " : ""}${new Date(issue.maximum)}` : message = "Invalid input";
      break;
    case ZodIssueCode.custom:
      message = "Invalid input";
      break;
    case ZodIssueCode.invalid_intersection_types:
      message = "Intersection results could not be merged";
      break;
    case ZodIssueCode.not_multiple_of:
      message = `Number must be a multiple of ${issue.multipleOf}`;
      break;
    default:
      message = _ctx.defaultError, util.assertNever(issue);
  }
  return { message };
}, overrideErrorMap = errorMap;
function setErrorMap(map) {
  overrideErrorMap = map;
}
function getErrorMap() {
  return overrideErrorMap;
}
var makeIssue = (params) => {
  let { data, path, errorMaps, issueData } = params, fullPath = [...path, ...issueData.path || []], fullIssue = {
    ...issueData,
    path: fullPath
  }, errorMessage = "", maps = errorMaps.filter((m) => !!m).slice().reverse();
  for (let map of maps)
    errorMessage = map(fullIssue, { data, defaultError: errorMessage }).message;
  return {
    ...issueData,
    path: fullPath,
    message: issueData.message || errorMessage
  };
}, EMPTY_PATH = [];
function addIssueToContext(ctx, issueData) {
  let issue = makeIssue({
    issueData,
    data: ctx.data,
    path: ctx.path,
    errorMaps: [
      ctx.common.contextualErrorMap,
      ctx.schemaErrorMap,
      getErrorMap(),
      errorMap
    ].filter((x) => !!x)
  });
  ctx.common.issues.push(issue);
}
var ParseStatus = class {
  constructor() {
    this.value = "valid";
  }
  dirty() {
    this.value === "valid" && (this.value = "dirty");
  }
  abort() {
    this.value !== "aborted" && (this.value = "aborted");
  }
  static mergeArray(status, results) {
    let arrayValue = [];
    for (let s of results) {
      if (s.status === "aborted")
        return INVALID;
      s.status === "dirty" && status.dirty(), arrayValue.push(s.value);
    }
    return { status: status.value, value: arrayValue };
  }
  static async mergeObjectAsync(status, pairs) {
    let syncPairs = [];
    for (let pair of pairs)
      syncPairs.push({
        key: await pair.key,
        value: await pair.value
      });
    return ParseStatus.mergeObjectSync(status, syncPairs);
  }
  static mergeObjectSync(status, pairs) {
    let finalObject = {};
    for (let pair of pairs) {
      let { key, value } = pair;
      if (key.status === "aborted" || value.status === "aborted")
        return INVALID;
      key.status === "dirty" && status.dirty(), value.status === "dirty" && status.dirty(), (typeof value.value < "u" || pair.alwaysSet) && (finalObject[key.value] = value.value);
    }
    return { status: status.value, value: finalObject };
  }
}, INVALID = Object.freeze({
  status: "aborted"
}), DIRTY = (value) => ({ status: "dirty", value }), OK = (value) => ({ status: "valid", value }), isAborted = (x) => x.status === "aborted", isDirty = (x) => x.status === "dirty", isValid = (x) => x.status === "valid", isAsync = (x) => typeof Promise !== void 0 && x instanceof Promise, errorUtil;
(function(errorUtil2) {
  errorUtil2.errToObj = (message) => typeof message == "string" ? { message } : message || {}, errorUtil2.toString = (message) => typeof message == "string" ? message : message == null ? void 0 : message.message;
})(errorUtil || (errorUtil = {}));
var ParseInputLazyPath = class {
  constructor(parent, value, path, key) {
    this.parent = parent, this.data = value, this._path = path, this._key = key;
  }
  get path() {
    return this._path.concat(this._key);
  }
}, handleResult = (ctx, result) => {
  if (isValid(result))
    return { success: !0, data: result.value };
  {
    if (!ctx.common.issues.length)
      throw new Error("Validation failed but no issues detected.");
    let error = new ZodError(ctx.common.issues);
    return { success: !1, error };
  }
};
function processCreateParams(params) {
  if (!params)
    return {};
  let { errorMap: errorMap2, invalid_type_error, required_error, description } = params;
  if (errorMap2 && (invalid_type_error || required_error))
    throw new Error(`Can't use "invalid_type_error" or "required_error" in conjunction with custom error map.`);
  return errorMap2 ? { errorMap: errorMap2, description } : { errorMap: (iss, ctx) => iss.code !== "invalid_type" ? { message: ctx.defaultError } : typeof ctx.data > "u" ? { message: required_error ?? ctx.defaultError } : { message: invalid_type_error ?? ctx.defaultError }, description };
}
var ZodType = class {
  constructor(def) {
    this.spa = this.safeParseAsync, this.superRefine = this._refinement, this._def = def, this.parse = this.parse.bind(this), this.safeParse = this.safeParse.bind(this), this.parseAsync = this.parseAsync.bind(this), this.safeParseAsync = this.safeParseAsync.bind(this), this.spa = this.spa.bind(this), this.refine = this.refine.bind(this), this.refinement = this.refinement.bind(this), this.superRefine = this.superRefine.bind(this), this.optional = this.optional.bind(this), this.nullable = this.nullable.bind(this), this.nullish = this.nullish.bind(this), this.array = this.array.bind(this), this.promise = this.promise.bind(this), this.or = this.or.bind(this), this.and = this.and.bind(this), this.transform = this.transform.bind(this), this.default = this.default.bind(this), this.describe = this.describe.bind(this), this.isNullable = this.isNullable.bind(this), this.isOptional = this.isOptional.bind(this);
  }
  get description() {
    return this._def.description;
  }
  _getType(input) {
    return getParsedType(input.data);
  }
  _getOrReturnCtx(input, ctx) {
    return ctx || {
      common: input.parent.common,
      data: input.data,
      parsedType: getParsedType(input.data),
      schemaErrorMap: this._def.errorMap,
      path: input.path,
      parent: input.parent
    };
  }
  _processInputParams(input) {
    return {
      status: new ParseStatus(),
      ctx: {
        common: input.parent.common,
        data: input.data,
        parsedType: getParsedType(input.data),
        schemaErrorMap: this._def.errorMap,
        path: input.path,
        parent: input.parent
      }
    };
  }
  _parseSync(input) {
    let result = this._parse(input);
    if (isAsync(result))
      throw new Error("Synchronous parse encountered promise.");
    return result;
  }
  _parseAsync(input) {
    let result = this._parse(input);
    return Promise.resolve(result);
  }
  parse(data, params) {
    let result = this.safeParse(data, params);
    if (result.success)
      return result.data;
    throw result.error;
  }
  safeParse(data, params) {
    var _a;
    let ctx = {
      common: {
        issues: [],
        async: (_a = params == null ? void 0 : params.async) !== null && _a !== void 0 ? _a : !1,
        contextualErrorMap: params == null ? void 0 : params.errorMap
      },
      path: (params == null ? void 0 : params.path) || [],
      schemaErrorMap: this._def.errorMap,
      parent: null,
      data,
      parsedType: getParsedType(data)
    }, result = this._parseSync({ data, path: ctx.path, parent: ctx });
    return handleResult(ctx, result);
  }
  async parseAsync(data, params) {
    let result = await this.safeParseAsync(data, params);
    if (result.success)
      return result.data;
    throw result.error;
  }
  async safeParseAsync(data, params) {
    let ctx = {
      common: {
        issues: [],
        contextualErrorMap: params == null ? void 0 : params.errorMap,
        async: !0
      },
      path: (params == null ? void 0 : params.path) || [],
      schemaErrorMap: this._def.errorMap,
      parent: null,
      data,
      parsedType: getParsedType(data)
    }, maybeAsyncResult = this._parse({ data, path: [], parent: ctx }), result = await (isAsync(maybeAsyncResult) ? maybeAsyncResult : Promise.resolve(maybeAsyncResult));
    return handleResult(ctx, result);
  }
  refine(check, message) {
    let getIssueProperties = (val) => typeof message == "string" || typeof message > "u" ? { message } : typeof message == "function" ? message(val) : message;
    return this._refinement((val, ctx) => {
      let result = check(val), setError = () => ctx.addIssue({
        code: ZodIssueCode.custom,
        ...getIssueProperties(val)
      });
      return typeof Promise < "u" && result instanceof Promise ? result.then((data) => data ? !0 : (setError(), !1)) : result ? !0 : (setError(), !1);
    });
  }
  refinement(check, refinementData) {
    return this._refinement((val, ctx) => check(val) ? !0 : (ctx.addIssue(typeof refinementData == "function" ? refinementData(val, ctx) : refinementData), !1));
  }
  _refinement(refinement) {
    return new ZodEffects({
      schema: this,
      typeName: ZodFirstPartyTypeKind.ZodEffects,
      effect: { type: "refinement", refinement }
    });
  }
  optional() {
    return ZodOptional.create(this);
  }
  nullable() {
    return ZodNullable.create(this);
  }
  nullish() {
    return this.optional().nullable();
  }
  array() {
    return ZodArray.create(this);
  }
  promise() {
    return ZodPromise.create(this);
  }
  or(option) {
    return ZodUnion.create([this, option]);
  }
  and(incoming) {
    return ZodIntersection.create(this, incoming);
  }
  transform(transform) {
    return new ZodEffects({
      schema: this,
      typeName: ZodFirstPartyTypeKind.ZodEffects,
      effect: { type: "transform", transform }
    });
  }
  default(def) {
    let defaultValueFunc = typeof def == "function" ? def : () => def;
    return new ZodDefault({
      innerType: this,
      defaultValue: defaultValueFunc,
      typeName: ZodFirstPartyTypeKind.ZodDefault
    });
  }
  brand() {
    return new ZodBranded({
      typeName: ZodFirstPartyTypeKind.ZodBranded,
      type: this,
      ...processCreateParams(void 0)
    });
  }
  describe(description) {
    let This = this.constructor;
    return new This({
      ...this._def,
      description
    });
  }
  isOptional() {
    return this.safeParse(void 0).success;
  }
  isNullable() {
    return this.safeParse(null).success;
  }
}, cuidRegex = /^c[^\s-]{8,}$/i, uuidRegex = /^([a-f0-9]{8}-[a-f0-9]{4}-[1-5][a-f0-9]{3}-[a-f0-9]{4}-[a-f0-9]{12}|00000000-0000-0000-0000-000000000000)$/i, emailRegex = /^(([^<>()[\]\.,;:\s@\"]+(\.[^<>()[\]\.,;:\s@\"]+)*)|(\".+\"))@(([^<>()[\]\.,;:\s@\"]+\.)+[^<>()[\]\.,;:\s@\"]{2,})$/i, ZodString = class extends ZodType {
  constructor() {
    super(...arguments), this._regex = (regex2, validation, message) => this.refinement((data) => regex2.test(data), {
      validation,
      code: ZodIssueCode.invalid_string,
      ...errorUtil.errToObj(message)
    }), this.nonempty = (message) => this.min(1, errorUtil.errToObj(message)), this.trim = () => new ZodString({
      ...this._def,
      checks: [...this._def.checks, { kind: "trim" }]
    });
  }
  _parse(input) {
    if (this._getType(input) !== ZodParsedType.string) {
      let ctx2 = this._getOrReturnCtx(input);
      return addIssueToContext(
        ctx2,
        {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.string,
          received: ctx2.parsedType
        }
      ), INVALID;
    }
    let status = new ParseStatus(), ctx;
    for (let check of this._def.checks)
      if (check.kind === "min")
        input.data.length < check.value && (ctx = this._getOrReturnCtx(input, ctx), addIssueToContext(ctx, {
          code: ZodIssueCode.too_small,
          minimum: check.value,
          type: "string",
          inclusive: !0,
          message: check.message
        }), status.dirty());
      else if (check.kind === "max")
        input.data.length > check.value && (ctx = this._getOrReturnCtx(input, ctx), addIssueToContext(ctx, {
          code: ZodIssueCode.too_big,
          maximum: check.value,
          type: "string",
          inclusive: !0,
          message: check.message
        }), status.dirty());
      else if (check.kind === "email")
        emailRegex.test(input.data) || (ctx = this._getOrReturnCtx(input, ctx), addIssueToContext(ctx, {
          validation: "email",
          code: ZodIssueCode.invalid_string,
          message: check.message
        }), status.dirty());
      else if (check.kind === "uuid")
        uuidRegex.test(input.data) || (ctx = this._getOrReturnCtx(input, ctx), addIssueToContext(ctx, {
          validation: "uuid",
          code: ZodIssueCode.invalid_string,
          message: check.message
        }), status.dirty());
      else if (check.kind === "cuid")
        cuidRegex.test(input.data) || (ctx = this._getOrReturnCtx(input, ctx), addIssueToContext(ctx, {
          validation: "cuid",
          code: ZodIssueCode.invalid_string,
          message: check.message
        }), status.dirty());
      else if (check.kind === "url")
        try {
          new URL(input.data);
        } catch {
          ctx = this._getOrReturnCtx(input, ctx), addIssueToContext(ctx, {
            validation: "url",
            code: ZodIssueCode.invalid_string,
            message: check.message
          }), status.dirty();
        }
      else
        check.kind === "regex" ? (check.regex.lastIndex = 0, check.regex.test(input.data) || (ctx = this._getOrReturnCtx(input, ctx), addIssueToContext(ctx, {
          validation: "regex",
          code: ZodIssueCode.invalid_string,
          message: check.message
        }), status.dirty())) : check.kind === "trim" ? input.data = input.data.trim() : check.kind === "startsWith" ? input.data.startsWith(check.value) || (ctx = this._getOrReturnCtx(input, ctx), addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_string,
          validation: { startsWith: check.value },
          message: check.message
        }), status.dirty()) : check.kind === "endsWith" ? input.data.endsWith(check.value) || (ctx = this._getOrReturnCtx(input, ctx), addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_string,
          validation: { endsWith: check.value },
          message: check.message
        }), status.dirty()) : util.assertNever(check);
    return { status: status.value, value: input.data };
  }
  _addCheck(check) {
    return new ZodString({
      ...this._def,
      checks: [...this._def.checks, check]
    });
  }
  email(message) {
    return this._addCheck({ kind: "email", ...errorUtil.errToObj(message) });
  }
  url(message) {
    return this._addCheck({ kind: "url", ...errorUtil.errToObj(message) });
  }
  uuid(message) {
    return this._addCheck({ kind: "uuid", ...errorUtil.errToObj(message) });
  }
  cuid(message) {
    return this._addCheck({ kind: "cuid", ...errorUtil.errToObj(message) });
  }
  regex(regex2, message) {
    return this._addCheck({
      kind: "regex",
      regex: regex2,
      ...errorUtil.errToObj(message)
    });
  }
  startsWith(value, message) {
    return this._addCheck({
      kind: "startsWith",
      value,
      ...errorUtil.errToObj(message)
    });
  }
  endsWith(value, message) {
    return this._addCheck({
      kind: "endsWith",
      value,
      ...errorUtil.errToObj(message)
    });
  }
  min(minLength, message) {
    return this._addCheck({
      kind: "min",
      value: minLength,
      ...errorUtil.errToObj(message)
    });
  }
  max(maxLength, message) {
    return this._addCheck({
      kind: "max",
      value: maxLength,
      ...errorUtil.errToObj(message)
    });
  }
  length(len, message) {
    return this.min(len, message).max(len, message);
  }
  get isEmail() {
    return !!this._def.checks.find((ch) => ch.kind === "email");
  }
  get isURL() {
    return !!this._def.checks.find((ch) => ch.kind === "url");
  }
  get isUUID() {
    return !!this._def.checks.find((ch) => ch.kind === "uuid");
  }
  get isCUID() {
    return !!this._def.checks.find((ch) => ch.kind === "cuid");
  }
  get minLength() {
    let min = null;
    for (let ch of this._def.checks)
      ch.kind === "min" && (min === null || ch.value > min) && (min = ch.value);
    return min;
  }
  get maxLength() {
    let max = null;
    for (let ch of this._def.checks)
      ch.kind === "max" && (max === null || ch.value < max) && (max = ch.value);
    return max;
  }
};
ZodString.create = (params) => new ZodString({
  checks: [],
  typeName: ZodFirstPartyTypeKind.ZodString,
  ...processCreateParams(params)
});
function floatSafeRemainder(val, step) {
  let valDecCount = (val.toString().split(".")[1] || "").length, stepDecCount = (step.toString().split(".")[1] || "").length, decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount, valInt = parseInt(val.toFixed(decCount).replace(".", "")), stepInt = parseInt(step.toFixed(decCount).replace(".", ""));
  return valInt % stepInt / Math.pow(10, decCount);
}
var ZodNumber = class extends ZodType {
  constructor() {
    super(...arguments), this.min = this.gte, this.max = this.lte, this.step = this.multipleOf;
  }
  _parse(input) {
    if (this._getType(input) !== ZodParsedType.number) {
      let ctx2 = this._getOrReturnCtx(input);
      return addIssueToContext(ctx2, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.number,
        received: ctx2.parsedType
      }), INVALID;
    }
    let ctx, status = new ParseStatus();
    for (let check of this._def.checks)
      check.kind === "int" ? util.isInteger(input.data) || (ctx = this._getOrReturnCtx(input, ctx), addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: "integer",
        received: "float",
        message: check.message
      }), status.dirty()) : check.kind === "min" ? (check.inclusive ? input.data < check.value : input.data <= check.value) && (ctx = this._getOrReturnCtx(input, ctx), addIssueToContext(ctx, {
        code: ZodIssueCode.too_small,
        minimum: check.value,
        type: "number",
        inclusive: check.inclusive,
        message: check.message
      }), status.dirty()) : check.kind === "max" ? (check.inclusive ? input.data > check.value : input.data >= check.value) && (ctx = this._getOrReturnCtx(input, ctx), addIssueToContext(ctx, {
        code: ZodIssueCode.too_big,
        maximum: check.value,
        type: "number",
        inclusive: check.inclusive,
        message: check.message
      }), status.dirty()) : check.kind === "multipleOf" ? floatSafeRemainder(input.data, check.value) !== 0 && (ctx = this._getOrReturnCtx(input, ctx), addIssueToContext(ctx, {
        code: ZodIssueCode.not_multiple_of,
        multipleOf: check.value,
        message: check.message
      }), status.dirty()) : util.assertNever(check);
    return { status: status.value, value: input.data };
  }
  gte(value, message) {
    return this.setLimit("min", value, !0, errorUtil.toString(message));
  }
  gt(value, message) {
    return this.setLimit("min", value, !1, errorUtil.toString(message));
  }
  lte(value, message) {
    return this.setLimit("max", value, !0, errorUtil.toString(message));
  }
  lt(value, message) {
    return this.setLimit("max", value, !1, errorUtil.toString(message));
  }
  setLimit(kind, value, inclusive, message) {
    return new ZodNumber({
      ...this._def,
      checks: [
        ...this._def.checks,
        {
          kind,
          value,
          inclusive,
          message: errorUtil.toString(message)
        }
      ]
    });
  }
  _addCheck(check) {
    return new ZodNumber({
      ...this._def,
      checks: [...this._def.checks, check]
    });
  }
  int(message) {
    return this._addCheck({
      kind: "int",
      message: errorUtil.toString(message)
    });
  }
  positive(message) {
    return this._addCheck({
      kind: "min",
      value: 0,
      inclusive: !1,
      message: errorUtil.toString(message)
    });
  }
  negative(message) {
    return this._addCheck({
      kind: "max",
      value: 0,
      inclusive: !1,
      message: errorUtil.toString(message)
    });
  }
  nonpositive(message) {
    return this._addCheck({
      kind: "max",
      value: 0,
      inclusive: !0,
      message: errorUtil.toString(message)
    });
  }
  nonnegative(message) {
    return this._addCheck({
      kind: "min",
      value: 0,
      inclusive: !0,
      message: errorUtil.toString(message)
    });
  }
  multipleOf(value, message) {
    return this._addCheck({
      kind: "multipleOf",
      value,
      message: errorUtil.toString(message)
    });
  }
  get minValue() {
    let min = null;
    for (let ch of this._def.checks)
      ch.kind === "min" && (min === null || ch.value > min) && (min = ch.value);
    return min;
  }
  get maxValue() {
    let max = null;
    for (let ch of this._def.checks)
      ch.kind === "max" && (max === null || ch.value < max) && (max = ch.value);
    return max;
  }
  get isInt() {
    return !!this._def.checks.find((ch) => ch.kind === "int");
  }
};
ZodNumber.create = (params) => new ZodNumber({
  checks: [],
  typeName: ZodFirstPartyTypeKind.ZodNumber,
  ...processCreateParams(params)
});
var ZodBigInt = class extends ZodType {
  _parse(input) {
    if (this._getType(input) !== ZodParsedType.bigint) {
      let ctx = this._getOrReturnCtx(input);
      return addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.bigint,
        received: ctx.parsedType
      }), INVALID;
    }
    return OK(input.data);
  }
};
ZodBigInt.create = (params) => new ZodBigInt({
  typeName: ZodFirstPartyTypeKind.ZodBigInt,
  ...processCreateParams(params)
});
var ZodBoolean = class extends ZodType {
  _parse(input) {
    if (this._getType(input) !== ZodParsedType.boolean) {
      let ctx = this._getOrReturnCtx(input);
      return addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.boolean,
        received: ctx.parsedType
      }), INVALID;
    }
    return OK(input.data);
  }
};
ZodBoolean.create = (params) => new ZodBoolean({
  typeName: ZodFirstPartyTypeKind.ZodBoolean,
  ...processCreateParams(params)
});
var ZodDate = class extends ZodType {
  _parse(input) {
    if (this._getType(input) !== ZodParsedType.date) {
      let ctx2 = this._getOrReturnCtx(input);
      return addIssueToContext(ctx2, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.date,
        received: ctx2.parsedType
      }), INVALID;
    }
    if (isNaN(input.data.getTime())) {
      let ctx2 = this._getOrReturnCtx(input);
      return addIssueToContext(ctx2, {
        code: ZodIssueCode.invalid_date
      }), INVALID;
    }
    let status = new ParseStatus(), ctx;
    for (let check of this._def.checks)
      check.kind === "min" ? input.data.getTime() < check.value && (ctx = this._getOrReturnCtx(input, ctx), addIssueToContext(ctx, {
        code: ZodIssueCode.too_small,
        message: check.message,
        inclusive: !0,
        minimum: check.value,
        type: "date"
      }), status.dirty()) : check.kind === "max" ? input.data.getTime() > check.value && (ctx = this._getOrReturnCtx(input, ctx), addIssueToContext(ctx, {
        code: ZodIssueCode.too_big,
        message: check.message,
        inclusive: !0,
        maximum: check.value,
        type: "date"
      }), status.dirty()) : util.assertNever(check);
    return {
      status: status.value,
      value: new Date(input.data.getTime())
    };
  }
  _addCheck(check) {
    return new ZodDate({
      ...this._def,
      checks: [...this._def.checks, check]
    });
  }
  min(minDate, message) {
    return this._addCheck({
      kind: "min",
      value: minDate.getTime(),
      message: errorUtil.toString(message)
    });
  }
  max(maxDate, message) {
    return this._addCheck({
      kind: "max",
      value: maxDate.getTime(),
      message: errorUtil.toString(message)
    });
  }
  get minDate() {
    let min = null;
    for (let ch of this._def.checks)
      ch.kind === "min" && (min === null || ch.value > min) && (min = ch.value);
    return min != null ? new Date(min) : null;
  }
  get maxDate() {
    let max = null;
    for (let ch of this._def.checks)
      ch.kind === "max" && (max === null || ch.value < max) && (max = ch.value);
    return max != null ? new Date(max) : null;
  }
};
ZodDate.create = (params) => new ZodDate({
  checks: [],
  typeName: ZodFirstPartyTypeKind.ZodDate,
  ...processCreateParams(params)
});
var ZodUndefined = class extends ZodType {
  _parse(input) {
    if (this._getType(input) !== ZodParsedType.undefined) {
      let ctx = this._getOrReturnCtx(input);
      return addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.undefined,
        received: ctx.parsedType
      }), INVALID;
    }
    return OK(input.data);
  }
};
ZodUndefined.create = (params) => new ZodUndefined({
  typeName: ZodFirstPartyTypeKind.ZodUndefined,
  ...processCreateParams(params)
});
var ZodNull = class extends ZodType {
  _parse(input) {
    if (this._getType(input) !== ZodParsedType.null) {
      let ctx = this._getOrReturnCtx(input);
      return addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.null,
        received: ctx.parsedType
      }), INVALID;
    }
    return OK(input.data);
  }
};
ZodNull.create = (params) => new ZodNull({
  typeName: ZodFirstPartyTypeKind.ZodNull,
  ...processCreateParams(params)
});
var ZodAny = class extends ZodType {
  constructor() {
    super(...arguments), this._any = !0;
  }
  _parse(input) {
    return OK(input.data);
  }
};
ZodAny.create = (params) => new ZodAny({
  typeName: ZodFirstPartyTypeKind.ZodAny,
  ...processCreateParams(params)
});
var ZodUnknown = class extends ZodType {
  constructor() {
    super(...arguments), this._unknown = !0;
  }
  _parse(input) {
    return OK(input.data);
  }
};
ZodUnknown.create = (params) => new ZodUnknown({
  typeName: ZodFirstPartyTypeKind.ZodUnknown,
  ...processCreateParams(params)
});
var ZodNever = class extends ZodType {
  _parse(input) {
    let ctx = this._getOrReturnCtx(input);
    return addIssueToContext(ctx, {
      code: ZodIssueCode.invalid_type,
      expected: ZodParsedType.never,
      received: ctx.parsedType
    }), INVALID;
  }
};
ZodNever.create = (params) => new ZodNever({
  typeName: ZodFirstPartyTypeKind.ZodNever,
  ...processCreateParams(params)
});
var ZodVoid = class extends ZodType {
  _parse(input) {
    if (this._getType(input) !== ZodParsedType.undefined) {
      let ctx = this._getOrReturnCtx(input);
      return addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.void,
        received: ctx.parsedType
      }), INVALID;
    }
    return OK(input.data);
  }
};
ZodVoid.create = (params) => new ZodVoid({
  typeName: ZodFirstPartyTypeKind.ZodVoid,
  ...processCreateParams(params)
});
var ZodArray = class extends ZodType {
  _parse(input) {
    let { ctx, status } = this._processInputParams(input), def = this._def;
    if (ctx.parsedType !== ZodParsedType.array)
      return addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.array,
        received: ctx.parsedType
      }), INVALID;
    if (def.minLength !== null && ctx.data.length < def.minLength.value && (addIssueToContext(ctx, {
      code: ZodIssueCode.too_small,
      minimum: def.minLength.value,
      type: "array",
      inclusive: !0,
      message: def.minLength.message
    }), status.dirty()), def.maxLength !== null && ctx.data.length > def.maxLength.value && (addIssueToContext(ctx, {
      code: ZodIssueCode.too_big,
      maximum: def.maxLength.value,
      type: "array",
      inclusive: !0,
      message: def.maxLength.message
    }), status.dirty()), ctx.common.async)
      return Promise.all(ctx.data.map((item, i) => def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i)))).then((result2) => ParseStatus.mergeArray(status, result2));
    let result = ctx.data.map((item, i) => def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i)));
    return ParseStatus.mergeArray(status, result);
  }
  get element() {
    return this._def.type;
  }
  min(minLength, message) {
    return new ZodArray({
      ...this._def,
      minLength: { value: minLength, message: errorUtil.toString(message) }
    });
  }
  max(maxLength, message) {
    return new ZodArray({
      ...this._def,
      maxLength: { value: maxLength, message: errorUtil.toString(message) }
    });
  }
  length(len, message) {
    return this.min(len, message).max(len, message);
  }
  nonempty(message) {
    return this.min(1, message);
  }
};
ZodArray.create = (schema2, params) => new ZodArray({
  type: schema2,
  minLength: null,
  maxLength: null,
  typeName: ZodFirstPartyTypeKind.ZodArray,
  ...processCreateParams(params)
});
var objectUtil;
(function(objectUtil2) {
  objectUtil2.mergeShapes = (first, second) => ({
    ...first,
    ...second
  });
})(objectUtil || (objectUtil = {}));
var AugmentFactory = (def) => (augmentation) => new ZodObject({
  ...def,
  shape: () => ({
    ...def.shape(),
    ...augmentation
  })
});
function deepPartialify(schema2) {
  if (schema2 instanceof ZodObject) {
    let newShape = {};
    for (let key in schema2.shape) {
      let fieldSchema = schema2.shape[key];
      newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));
    }
    return new ZodObject({
      ...schema2._def,
      shape: () => newShape
    });
  } else
    return schema2 instanceof ZodArray ? ZodArray.create(deepPartialify(schema2.element)) : schema2 instanceof ZodOptional ? ZodOptional.create(deepPartialify(schema2.unwrap())) : schema2 instanceof ZodNullable ? ZodNullable.create(deepPartialify(schema2.unwrap())) : schema2 instanceof ZodTuple ? ZodTuple.create(schema2.items.map((item) => deepPartialify(item))) : schema2;
}
var ZodObject = class extends ZodType {
  constructor() {
    super(...arguments), this._cached = null, this.nonstrict = this.passthrough, this.augment = AugmentFactory(this._def), this.extend = AugmentFactory(this._def);
  }
  _getCached() {
    if (this._cached !== null)
      return this._cached;
    let shape = this._def.shape(), keys = util.objectKeys(shape);
    return this._cached = { shape, keys };
  }
  _parse(input) {
    if (this._getType(input) !== ZodParsedType.object) {
      let ctx2 = this._getOrReturnCtx(input);
      return addIssueToContext(ctx2, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.object,
        received: ctx2.parsedType
      }), INVALID;
    }
    let { status, ctx } = this._processInputParams(input), { shape, keys: shapeKeys } = this._getCached(), extraKeys = [];
    if (!(this._def.catchall instanceof ZodNever && this._def.unknownKeys === "strip"))
      for (let key in ctx.data)
        shapeKeys.includes(key) || extraKeys.push(key);
    let pairs = [];
    for (let key of shapeKeys) {
      let keyValidator = shape[key], value = ctx.data[key];
      pairs.push({
        key: { status: "valid", value: key },
        value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),
        alwaysSet: key in ctx.data
      });
    }
    if (this._def.catchall instanceof ZodNever) {
      let unknownKeys = this._def.unknownKeys;
      if (unknownKeys === "passthrough")
        for (let key of extraKeys)
          pairs.push({
            key: { status: "valid", value: key },
            value: { status: "valid", value: ctx.data[key] }
          });
      else if (unknownKeys === "strict")
        extraKeys.length > 0 && (addIssueToContext(ctx, {
          code: ZodIssueCode.unrecognized_keys,
          keys: extraKeys
        }), status.dirty());
      else if (unknownKeys !== "strip")
        throw new Error("Internal ZodObject error: invalid unknownKeys value.");
    } else {
      let catchall = this._def.catchall;
      for (let key of extraKeys) {
        let value = ctx.data[key];
        pairs.push({
          key: { status: "valid", value: key },
          value: catchall._parse(
            new ParseInputLazyPath(ctx, value, ctx.path, key)
          ),
          alwaysSet: key in ctx.data
        });
      }
    }
    return ctx.common.async ? Promise.resolve().then(async () => {
      let syncPairs = [];
      for (let pair of pairs) {
        let key = await pair.key;
        syncPairs.push({
          key,
          value: await pair.value,
          alwaysSet: pair.alwaysSet
        });
      }
      return syncPairs;
    }).then((syncPairs) => ParseStatus.mergeObjectSync(status, syncPairs)) : ParseStatus.mergeObjectSync(status, pairs);
  }
  get shape() {
    return this._def.shape();
  }
  strict(message) {
    return errorUtil.errToObj, new ZodObject({
      ...this._def,
      unknownKeys: "strict",
      ...message !== void 0 ? {
        errorMap: (issue, ctx) => {
          var _a, _b, _c, _d;
          let defaultError = (_c = (_b = (_a = this._def).errorMap) === null || _b === void 0 ? void 0 : _b.call(_a, issue, ctx).message) !== null && _c !== void 0 ? _c : ctx.defaultError;
          return issue.code === "unrecognized_keys" ? {
            message: (_d = errorUtil.errToObj(message).message) !== null && _d !== void 0 ? _d : defaultError
          } : {
            message: defaultError
          };
        }
      } : {}
    });
  }
  strip() {
    return new ZodObject({
      ...this._def,
      unknownKeys: "strip"
    });
  }
  passthrough() {
    return new ZodObject({
      ...this._def,
      unknownKeys: "passthrough"
    });
  }
  setKey(key, schema2) {
    return this.augment({ [key]: schema2 });
  }
  merge(merging) {
    return new ZodObject({
      unknownKeys: merging._def.unknownKeys,
      catchall: merging._def.catchall,
      shape: () => objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
      typeName: ZodFirstPartyTypeKind.ZodObject
    });
  }
  catchall(index) {
    return new ZodObject({
      ...this._def,
      catchall: index
    });
  }
  pick(mask) {
    let shape = {};
    return util.objectKeys(mask).map((key) => {
      this.shape[key] && (shape[key] = this.shape[key]);
    }), new ZodObject({
      ...this._def,
      shape: () => shape
    });
  }
  omit(mask) {
    let shape = {};
    return util.objectKeys(this.shape).map((key) => {
      util.objectKeys(mask).indexOf(key) === -1 && (shape[key] = this.shape[key]);
    }), new ZodObject({
      ...this._def,
      shape: () => shape
    });
  }
  deepPartial() {
    return deepPartialify(this);
  }
  partial(mask) {
    let newShape = {};
    if (mask)
      return util.objectKeys(this.shape).map((key) => {
        util.objectKeys(mask).indexOf(key) === -1 ? newShape[key] = this.shape[key] : newShape[key] = this.shape[key].optional();
      }), new ZodObject({
        ...this._def,
        shape: () => newShape
      });
    for (let key in this.shape) {
      let fieldSchema = this.shape[key];
      newShape[key] = fieldSchema.optional();
    }
    return new ZodObject({
      ...this._def,
      shape: () => newShape
    });
  }
  required() {
    let newShape = {};
    for (let key in this.shape) {
      let newField = this.shape[key];
      for (; newField instanceof ZodOptional; )
        newField = newField._def.innerType;
      newShape[key] = newField;
    }
    return new ZodObject({
      ...this._def,
      shape: () => newShape
    });
  }
  keyof() {
    return createZodEnum(util.objectKeys(this.shape));
  }
};
ZodObject.create = (shape, params) => new ZodObject({
  shape: () => shape,
  unknownKeys: "strip",
  catchall: ZodNever.create(),
  typeName: ZodFirstPartyTypeKind.ZodObject,
  ...processCreateParams(params)
});
ZodObject.strictCreate = (shape, params) => new ZodObject({
  shape: () => shape,
  unknownKeys: "strict",
  catchall: ZodNever.create(),
  typeName: ZodFirstPartyTypeKind.ZodObject,
  ...processCreateParams(params)
});
ZodObject.lazycreate = (shape, params) => new ZodObject({
  shape,
  unknownKeys: "strip",
  catchall: ZodNever.create(),
  typeName: ZodFirstPartyTypeKind.ZodObject,
  ...processCreateParams(params)
});
var ZodUnion = class extends ZodType {
  _parse(input) {
    let { ctx } = this._processInputParams(input), options = this._def.options;
    function handleResults(results) {
      for (let result of results)
        if (result.result.status === "valid")
          return result.result;
      for (let result of results)
        if (result.result.status === "dirty")
          return ctx.common.issues.push(...result.ctx.common.issues), result.result;
      let unionErrors = results.map((result) => new ZodError(result.ctx.common.issues));
      return addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_union,
        unionErrors
      }), INVALID;
    }
    if (ctx.common.async)
      return Promise.all(options.map(async (option) => {
        let childCtx = {
          ...ctx,
          common: {
            ...ctx.common,
            issues: []
          },
          parent: null
        };
        return {
          result: await option._parseAsync({
            data: ctx.data,
            path: ctx.path,
            parent: childCtx
          }),
          ctx: childCtx
        };
      })).then(handleResults);
    {
      let dirty, issues = [];
      for (let option of options) {
        let childCtx = {
          ...ctx,
          common: {
            ...ctx.common,
            issues: []
          },
          parent: null
        }, result = option._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: childCtx
        });
        if (result.status === "valid")
          return result;
        result.status === "dirty" && !dirty && (dirty = { result, ctx: childCtx }), childCtx.common.issues.length && issues.push(childCtx.common.issues);
      }
      if (dirty)
        return ctx.common.issues.push(...dirty.ctx.common.issues), dirty.result;
      let unionErrors = issues.map((issues2) => new ZodError(issues2));
      return addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_union,
        unionErrors
      }), INVALID;
    }
  }
  get options() {
    return this._def.options;
  }
};
ZodUnion.create = (types, params) => new ZodUnion({
  options: types,
  typeName: ZodFirstPartyTypeKind.ZodUnion,
  ...processCreateParams(params)
});
var ZodDiscriminatedUnion = class extends ZodType {
  _parse(input) {
    let { ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.object)
      return addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.object,
        received: ctx.parsedType
      }), INVALID;
    let discriminator = this.discriminator, discriminatorValue = ctx.data[discriminator], option = this.options.get(discriminatorValue);
    return option ? ctx.common.async ? option._parseAsync({
      data: ctx.data,
      path: ctx.path,
      parent: ctx
    }) : option._parseSync({
      data: ctx.data,
      path: ctx.path,
      parent: ctx
    }) : (addIssueToContext(ctx, {
      code: ZodIssueCode.invalid_union_discriminator,
      options: this.validDiscriminatorValues,
      path: [discriminator]
    }), INVALID);
  }
  get discriminator() {
    return this._def.discriminator;
  }
  get validDiscriminatorValues() {
    return Array.from(this.options.keys());
  }
  get options() {
    return this._def.options;
  }
  static create(discriminator, types, params) {
    let options = /* @__PURE__ */ new Map();
    try {
      types.forEach((type) => {
        let discriminatorValue = type.shape[discriminator].value;
        options.set(discriminatorValue, type);
      });
    } catch {
      throw new Error("The discriminator value could not be extracted from all the provided schemas");
    }
    if (options.size !== types.length)
      throw new Error("Some of the discriminator values are not unique");
    return new ZodDiscriminatedUnion({
      typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,
      discriminator,
      options,
      ...processCreateParams(params)
    });
  }
};
function mergeValues(a, b) {
  let aType = getParsedType(a), bType = getParsedType(b);
  if (a === b)
    return { valid: !0, data: a };
  if (aType === ZodParsedType.object && bType === ZodParsedType.object) {
    let bKeys = util.objectKeys(b), sharedKeys = util.objectKeys(a).filter((key) => bKeys.indexOf(key) !== -1), newObj = { ...a, ...b };
    for (let key of sharedKeys) {
      let sharedValue = mergeValues(a[key], b[key]);
      if (!sharedValue.valid)
        return { valid: !1 };
      newObj[key] = sharedValue.data;
    }
    return { valid: !0, data: newObj };
  } else if (aType === ZodParsedType.array && bType === ZodParsedType.array) {
    if (a.length !== b.length)
      return { valid: !1 };
    let newArray = [];
    for (let index = 0; index < a.length; index++) {
      let itemA = a[index], itemB = b[index], sharedValue = mergeValues(itemA, itemB);
      if (!sharedValue.valid)
        return { valid: !1 };
      newArray.push(sharedValue.data);
    }
    return { valid: !0, data: newArray };
  } else
    return aType === ZodParsedType.date && bType === ZodParsedType.date && +a == +b ? { valid: !0, data: a } : { valid: !1 };
}
var ZodIntersection = class extends ZodType {
  _parse(input) {
    let { status, ctx } = this._processInputParams(input), handleParsed = (parsedLeft, parsedRight) => {
      if (isAborted(parsedLeft) || isAborted(parsedRight))
        return INVALID;
      let merged = mergeValues(parsedLeft.value, parsedRight.value);
      return merged.valid ? ((isDirty(parsedLeft) || isDirty(parsedRight)) && status.dirty(), { status: status.value, value: merged.data }) : (addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_intersection_types
      }), INVALID);
    };
    return ctx.common.async ? Promise.all([
      this._def.left._parseAsync({
        data: ctx.data,
        path: ctx.path,
        parent: ctx
      }),
      this._def.right._parseAsync({
        data: ctx.data,
        path: ctx.path,
        parent: ctx
      })
    ]).then(([left, right]) => handleParsed(left, right)) : handleParsed(this._def.left._parseSync({
      data: ctx.data,
      path: ctx.path,
      parent: ctx
    }), this._def.right._parseSync({
      data: ctx.data,
      path: ctx.path,
      parent: ctx
    }));
  }
};
ZodIntersection.create = (left, right, params) => new ZodIntersection({
  left,
  right,
  typeName: ZodFirstPartyTypeKind.ZodIntersection,
  ...processCreateParams(params)
});
var ZodTuple = class extends ZodType {
  _parse(input) {
    let { status, ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.array)
      return addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.array,
        received: ctx.parsedType
      }), INVALID;
    if (ctx.data.length < this._def.items.length)
      return addIssueToContext(ctx, {
        code: ZodIssueCode.too_small,
        minimum: this._def.items.length,
        inclusive: !0,
        type: "array"
      }), INVALID;
    !this._def.rest && ctx.data.length > this._def.items.length && (addIssueToContext(ctx, {
      code: ZodIssueCode.too_big,
      maximum: this._def.items.length,
      inclusive: !0,
      type: "array"
    }), status.dirty());
    let items = ctx.data.map((item, itemIndex) => {
      let schema2 = this._def.items[itemIndex] || this._def.rest;
      return schema2 ? schema2._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex)) : null;
    }).filter((x) => !!x);
    return ctx.common.async ? Promise.all(items).then((results) => ParseStatus.mergeArray(status, results)) : ParseStatus.mergeArray(status, items);
  }
  get items() {
    return this._def.items;
  }
  rest(rest) {
    return new ZodTuple({
      ...this._def,
      rest
    });
  }
};
ZodTuple.create = (schemas, params) => {
  if (!Array.isArray(schemas))
    throw new Error("You must pass an array of schemas to z.tuple([ ... ])");
  return new ZodTuple({
    items: schemas,
    typeName: ZodFirstPartyTypeKind.ZodTuple,
    rest: null,
    ...processCreateParams(params)
  });
};
var ZodRecord = class extends ZodType {
  get keySchema() {
    return this._def.keyType;
  }
  get valueSchema() {
    return this._def.valueType;
  }
  _parse(input) {
    let { status, ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.object)
      return addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.object,
        received: ctx.parsedType
      }), INVALID;
    let pairs = [], keyType = this._def.keyType, valueType = this._def.valueType;
    for (let key in ctx.data)
      pairs.push({
        key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, key)),
        value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key))
      });
    return ctx.common.async ? ParseStatus.mergeObjectAsync(status, pairs) : ParseStatus.mergeObjectSync(status, pairs);
  }
  get element() {
    return this._def.valueType;
  }
  static create(first, second, third) {
    return second instanceof ZodType ? new ZodRecord({
      keyType: first,
      valueType: second,
      typeName: ZodFirstPartyTypeKind.ZodRecord,
      ...processCreateParams(third)
    }) : new ZodRecord({
      keyType: ZodString.create(),
      valueType: first,
      typeName: ZodFirstPartyTypeKind.ZodRecord,
      ...processCreateParams(second)
    });
  }
}, ZodMap = class extends ZodType {
  _parse(input) {
    let { status, ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.map)
      return addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.map,
        received: ctx.parsedType
      }), INVALID;
    let keyType = this._def.keyType, valueType = this._def.valueType, pairs = [...ctx.data.entries()].map(([key, value], index) => ({
      key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [index, "key"])),
      value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [index, "value"]))
    }));
    if (ctx.common.async) {
      let finalMap = /* @__PURE__ */ new Map();
      return Promise.resolve().then(async () => {
        for (let pair of pairs) {
          let key = await pair.key, value = await pair.value;
          if (key.status === "aborted" || value.status === "aborted")
            return INVALID;
          (key.status === "dirty" || value.status === "dirty") && status.dirty(), finalMap.set(key.value, value.value);
        }
        return { status: status.value, value: finalMap };
      });
    } else {
      let finalMap = /* @__PURE__ */ new Map();
      for (let pair of pairs) {
        let key = pair.key, value = pair.value;
        if (key.status === "aborted" || value.status === "aborted")
          return INVALID;
        (key.status === "dirty" || value.status === "dirty") && status.dirty(), finalMap.set(key.value, value.value);
      }
      return { status: status.value, value: finalMap };
    }
  }
};
ZodMap.create = (keyType, valueType, params) => new ZodMap({
  valueType,
  keyType,
  typeName: ZodFirstPartyTypeKind.ZodMap,
  ...processCreateParams(params)
});
var ZodSet = class extends ZodType {
  _parse(input) {
    let { status, ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.set)
      return addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.set,
        received: ctx.parsedType
      }), INVALID;
    let def = this._def;
    def.minSize !== null && ctx.data.size < def.minSize.value && (addIssueToContext(ctx, {
      code: ZodIssueCode.too_small,
      minimum: def.minSize.value,
      type: "set",
      inclusive: !0,
      message: def.minSize.message
    }), status.dirty()), def.maxSize !== null && ctx.data.size > def.maxSize.value && (addIssueToContext(ctx, {
      code: ZodIssueCode.too_big,
      maximum: def.maxSize.value,
      type: "set",
      inclusive: !0,
      message: def.maxSize.message
    }), status.dirty());
    let valueType = this._def.valueType;
    function finalizeSet(elements2) {
      let parsedSet = /* @__PURE__ */ new Set();
      for (let element of elements2) {
        if (element.status === "aborted")
          return INVALID;
        element.status === "dirty" && status.dirty(), parsedSet.add(element.value);
      }
      return { status: status.value, value: parsedSet };
    }
    let elements = [...ctx.data.values()].map((item, i) => valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i)));
    return ctx.common.async ? Promise.all(elements).then((elements2) => finalizeSet(elements2)) : finalizeSet(elements);
  }
  min(minSize, message) {
    return new ZodSet({
      ...this._def,
      minSize: { value: minSize, message: errorUtil.toString(message) }
    });
  }
  max(maxSize, message) {
    return new ZodSet({
      ...this._def,
      maxSize: { value: maxSize, message: errorUtil.toString(message) }
    });
  }
  size(size, message) {
    return this.min(size, message).max(size, message);
  }
  nonempty(message) {
    return this.min(1, message);
  }
};
ZodSet.create = (valueType, params) => new ZodSet({
  valueType,
  minSize: null,
  maxSize: null,
  typeName: ZodFirstPartyTypeKind.ZodSet,
  ...processCreateParams(params)
});
var ZodFunction = class extends ZodType {
  constructor() {
    super(...arguments), this.validate = this.implement;
  }
  _parse(input) {
    let { ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.function)
      return addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.function,
        received: ctx.parsedType
      }), INVALID;
    function makeArgsIssue(args, error) {
      return makeIssue({
        data: args,
        path: ctx.path,
        errorMaps: [
          ctx.common.contextualErrorMap,
          ctx.schemaErrorMap,
          getErrorMap(),
          errorMap
        ].filter((x) => !!x),
        issueData: {
          code: ZodIssueCode.invalid_arguments,
          argumentsError: error
        }
      });
    }
    function makeReturnsIssue(returns, error) {
      return makeIssue({
        data: returns,
        path: ctx.path,
        errorMaps: [
          ctx.common.contextualErrorMap,
          ctx.schemaErrorMap,
          getErrorMap(),
          errorMap
        ].filter((x) => !!x),
        issueData: {
          code: ZodIssueCode.invalid_return_type,
          returnTypeError: error
        }
      });
    }
    let params = { errorMap: ctx.common.contextualErrorMap }, fn = ctx.data;
    return this._def.returns instanceof ZodPromise ? OK(async (...args) => {
      let error = new ZodError([]), parsedArgs = await this._def.args.parseAsync(args, params).catch((e) => {
        throw error.addIssue(makeArgsIssue(args, e)), error;
      }), result = await fn(...parsedArgs);
      return await this._def.returns._def.type.parseAsync(result, params).catch((e) => {
        throw error.addIssue(makeReturnsIssue(result, e)), error;
      });
    }) : OK((...args) => {
      let parsedArgs = this._def.args.safeParse(args, params);
      if (!parsedArgs.success)
        throw new ZodError([makeArgsIssue(args, parsedArgs.error)]);
      let result = fn(...parsedArgs.data), parsedReturns = this._def.returns.safeParse(result, params);
      if (!parsedReturns.success)
        throw new ZodError([makeReturnsIssue(result, parsedReturns.error)]);
      return parsedReturns.data;
    });
  }
  parameters() {
    return this._def.args;
  }
  returnType() {
    return this._def.returns;
  }
  args(...items) {
    return new ZodFunction({
      ...this._def,
      args: ZodTuple.create(items).rest(ZodUnknown.create())
    });
  }
  returns(returnType) {
    return new ZodFunction({
      ...this._def,
      returns: returnType
    });
  }
  implement(func) {
    return this.parse(func);
  }
  strictImplement(func) {
    return this.parse(func);
  }
  static create(args, returns, params) {
    return new ZodFunction({
      args: args || ZodTuple.create([]).rest(ZodUnknown.create()),
      returns: returns || ZodUnknown.create(),
      typeName: ZodFirstPartyTypeKind.ZodFunction,
      ...processCreateParams(params)
    });
  }
}, ZodLazy = class extends ZodType {
  get schema() {
    return this._def.getter();
  }
  _parse(input) {
    let { ctx } = this._processInputParams(input);
    return this._def.getter()._parse({ data: ctx.data, path: ctx.path, parent: ctx });
  }
};
ZodLazy.create = (getter, params) => new ZodLazy({
  getter,
  typeName: ZodFirstPartyTypeKind.ZodLazy,
  ...processCreateParams(params)
});
var ZodLiteral = class extends ZodType {
  _parse(input) {
    if (input.data !== this._def.value) {
      let ctx = this._getOrReturnCtx(input);
      return addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_literal,
        expected: this._def.value
      }), INVALID;
    }
    return { status: "valid", value: input.data };
  }
  get value() {
    return this._def.value;
  }
};
ZodLiteral.create = (value, params) => new ZodLiteral({
  value,
  typeName: ZodFirstPartyTypeKind.ZodLiteral,
  ...processCreateParams(params)
});
function createZodEnum(values, params) {
  return new ZodEnum({
    values,
    typeName: ZodFirstPartyTypeKind.ZodEnum,
    ...processCreateParams(params)
  });
}
var ZodEnum = class extends ZodType {
  _parse(input) {
    if (typeof input.data != "string") {
      let ctx = this._getOrReturnCtx(input), expectedValues = this._def.values;
      return addIssueToContext(ctx, {
        expected: util.joinValues(expectedValues),
        received: ctx.parsedType,
        code: ZodIssueCode.invalid_type
      }), INVALID;
    }
    if (this._def.values.indexOf(input.data) === -1) {
      let ctx = this._getOrReturnCtx(input), expectedValues = this._def.values;
      return addIssueToContext(ctx, {
        received: ctx.data,
        code: ZodIssueCode.invalid_enum_value,
        options: expectedValues
      }), INVALID;
    }
    return OK(input.data);
  }
  get options() {
    return this._def.values;
  }
  get enum() {
    let enumValues = {};
    for (let val of this._def.values)
      enumValues[val] = val;
    return enumValues;
  }
  get Values() {
    let enumValues = {};
    for (let val of this._def.values)
      enumValues[val] = val;
    return enumValues;
  }
  get Enum() {
    let enumValues = {};
    for (let val of this._def.values)
      enumValues[val] = val;
    return enumValues;
  }
};
ZodEnum.create = createZodEnum;
var ZodNativeEnum = class extends ZodType {
  _parse(input) {
    let nativeEnumValues = util.getValidEnumValues(this._def.values), ctx = this._getOrReturnCtx(input);
    if (ctx.parsedType !== ZodParsedType.string && ctx.parsedType !== ZodParsedType.number) {
      let expectedValues = util.objectValues(nativeEnumValues);
      return addIssueToContext(ctx, {
        expected: util.joinValues(expectedValues),
        received: ctx.parsedType,
        code: ZodIssueCode.invalid_type
      }), INVALID;
    }
    if (nativeEnumValues.indexOf(input.data) === -1) {
      let expectedValues = util.objectValues(nativeEnumValues);
      return addIssueToContext(ctx, {
        received: ctx.data,
        code: ZodIssueCode.invalid_enum_value,
        options: expectedValues
      }), INVALID;
    }
    return OK(input.data);
  }
  get enum() {
    return this._def.values;
  }
};
ZodNativeEnum.create = (values, params) => new ZodNativeEnum({
  values,
  typeName: ZodFirstPartyTypeKind.ZodNativeEnum,
  ...processCreateParams(params)
});
var ZodPromise = class extends ZodType {
  _parse(input) {
    let { ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.promise && ctx.common.async === !1)
      return addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.promise,
        received: ctx.parsedType
      }), INVALID;
    let promisified = ctx.parsedType === ZodParsedType.promise ? ctx.data : Promise.resolve(ctx.data);
    return OK(promisified.then((data) => this._def.type.parseAsync(data, {
      path: ctx.path,
      errorMap: ctx.common.contextualErrorMap
    })));
  }
};
ZodPromise.create = (schema2, params) => new ZodPromise({
  type: schema2,
  typeName: ZodFirstPartyTypeKind.ZodPromise,
  ...processCreateParams(params)
});
var ZodEffects = class extends ZodType {
  innerType() {
    return this._def.schema;
  }
  _parse(input) {
    let { status, ctx } = this._processInputParams(input), effect = this._def.effect || null;
    if (effect.type === "preprocess") {
      let processed = effect.transform(ctx.data);
      return ctx.common.async ? Promise.resolve(processed).then((processed2) => this._def.schema._parseAsync({
        data: processed2,
        path: ctx.path,
        parent: ctx
      })) : this._def.schema._parseSync({
        data: processed,
        path: ctx.path,
        parent: ctx
      });
    }
    let checkCtx = {
      addIssue: (arg) => {
        addIssueToContext(ctx, arg), arg.fatal ? status.abort() : status.dirty();
      },
      get path() {
        return ctx.path;
      }
    };
    if (checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx), effect.type === "refinement") {
      let executeRefinement = (acc) => {
        let result = effect.refinement(acc, checkCtx);
        if (ctx.common.async)
          return Promise.resolve(result);
        if (result instanceof Promise)
          throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");
        return acc;
      };
      if (ctx.common.async === !1) {
        let inner = this._def.schema._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        });
        return inner.status === "aborted" ? INVALID : (inner.status === "dirty" && status.dirty(), executeRefinement(inner.value), { status: status.value, value: inner.value });
      } else
        return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((inner) => inner.status === "aborted" ? INVALID : (inner.status === "dirty" && status.dirty(), executeRefinement(inner.value).then(() => ({ status: status.value, value: inner.value }))));
    }
    if (effect.type === "transform")
      if (ctx.common.async === !1) {
        let base = this._def.schema._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        });
        if (!isValid(base))
          return base;
        let result = effect.transform(base.value, checkCtx);
        if (result instanceof Promise)
          throw new Error("Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.");
        return { status: status.value, value: result };
      } else
        return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((base) => isValid(base) ? Promise.resolve(effect.transform(base.value, checkCtx)).then((result) => ({ status: status.value, value: result })) : base);
    util.assertNever(effect);
  }
};
ZodEffects.create = (schema2, effect, params) => new ZodEffects({
  schema: schema2,
  typeName: ZodFirstPartyTypeKind.ZodEffects,
  effect,
  ...processCreateParams(params)
});
ZodEffects.createWithPreprocess = (preprocess, schema2, params) => new ZodEffects({
  schema: schema2,
  effect: { type: "preprocess", transform: preprocess },
  typeName: ZodFirstPartyTypeKind.ZodEffects,
  ...processCreateParams(params)
});
var ZodOptional = class extends ZodType {
  _parse(input) {
    return this._getType(input) === ZodParsedType.undefined ? OK(void 0) : this._def.innerType._parse(input);
  }
  unwrap() {
    return this._def.innerType;
  }
};
ZodOptional.create = (type, params) => new ZodOptional({
  innerType: type,
  typeName: ZodFirstPartyTypeKind.ZodOptional,
  ...processCreateParams(params)
});
var ZodNullable = class extends ZodType {
  _parse(input) {
    return this._getType(input) === ZodParsedType.null ? OK(null) : this._def.innerType._parse(input);
  }
  unwrap() {
    return this._def.innerType;
  }
};
ZodNullable.create = (type, params) => new ZodNullable({
  innerType: type,
  typeName: ZodFirstPartyTypeKind.ZodNullable,
  ...processCreateParams(params)
});
var ZodDefault = class extends ZodType {
  _parse(input) {
    let { ctx } = this._processInputParams(input), data = ctx.data;
    return ctx.parsedType === ZodParsedType.undefined && (data = this._def.defaultValue()), this._def.innerType._parse({
      data,
      path: ctx.path,
      parent: ctx
    });
  }
  removeDefault() {
    return this._def.innerType;
  }
};
ZodDefault.create = (type, params) => new ZodOptional({
  innerType: type,
  typeName: ZodFirstPartyTypeKind.ZodOptional,
  ...processCreateParams(params)
});
var ZodNaN = class extends ZodType {
  _parse(input) {
    if (this._getType(input) !== ZodParsedType.nan) {
      let ctx = this._getOrReturnCtx(input);
      return addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.nan,
        received: ctx.parsedType
      }), INVALID;
    }
    return { status: "valid", value: input.data };
  }
};
ZodNaN.create = (params) => new ZodNaN({
  typeName: ZodFirstPartyTypeKind.ZodNaN,
  ...processCreateParams(params)
});
var BRAND = Symbol("zod_brand"), ZodBranded = class extends ZodType {
  _parse(input) {
    let { ctx } = this._processInputParams(input), data = ctx.data;
    return this._def.type._parse({
      data,
      path: ctx.path,
      parent: ctx
    });
  }
  unwrap() {
    return this._def.type;
  }
}, custom = (check, params = {}, fatal) => check ? ZodAny.create().superRefine((data, ctx) => {
  if (!check(data)) {
    let p = typeof params == "function" ? params(data) : params, p2 = typeof p == "string" ? { message: p } : p;
    ctx.addIssue({ code: "custom", ...p2, fatal });
  }
}) : ZodAny.create(), late = {
  object: ZodObject.lazycreate
}, ZodFirstPartyTypeKind;
(function(ZodFirstPartyTypeKind2) {
  ZodFirstPartyTypeKind2.ZodString = "ZodString", ZodFirstPartyTypeKind2.ZodNumber = "ZodNumber", ZodFirstPartyTypeKind2.ZodNaN = "ZodNaN", ZodFirstPartyTypeKind2.ZodBigInt = "ZodBigInt", ZodFirstPartyTypeKind2.ZodBoolean = "ZodBoolean", ZodFirstPartyTypeKind2.ZodDate = "ZodDate", ZodFirstPartyTypeKind2.ZodUndefined = "ZodUndefined", ZodFirstPartyTypeKind2.ZodNull = "ZodNull", ZodFirstPartyTypeKind2.ZodAny = "ZodAny", ZodFirstPartyTypeKind2.ZodUnknown = "ZodUnknown", ZodFirstPartyTypeKind2.ZodNever = "ZodNever", ZodFirstPartyTypeKind2.ZodVoid = "ZodVoid", ZodFirstPartyTypeKind2.ZodArray = "ZodArray", ZodFirstPartyTypeKind2.ZodObject = "ZodObject", ZodFirstPartyTypeKind2.ZodUnion = "ZodUnion", ZodFirstPartyTypeKind2.ZodDiscriminatedUnion = "ZodDiscriminatedUnion", ZodFirstPartyTypeKind2.ZodIntersection = "ZodIntersection", ZodFirstPartyTypeKind2.ZodTuple = "ZodTuple", ZodFirstPartyTypeKind2.ZodRecord = "ZodRecord", ZodFirstPartyTypeKind2.ZodMap = "ZodMap", ZodFirstPartyTypeKind2.ZodSet = "ZodSet", ZodFirstPartyTypeKind2.ZodFunction = "ZodFunction", ZodFirstPartyTypeKind2.ZodLazy = "ZodLazy", ZodFirstPartyTypeKind2.ZodLiteral = "ZodLiteral", ZodFirstPartyTypeKind2.ZodEnum = "ZodEnum", ZodFirstPartyTypeKind2.ZodEffects = "ZodEffects", ZodFirstPartyTypeKind2.ZodNativeEnum = "ZodNativeEnum", ZodFirstPartyTypeKind2.ZodOptional = "ZodOptional", ZodFirstPartyTypeKind2.ZodNullable = "ZodNullable", ZodFirstPartyTypeKind2.ZodDefault = "ZodDefault", ZodFirstPartyTypeKind2.ZodPromise = "ZodPromise", ZodFirstPartyTypeKind2.ZodBranded = "ZodBranded";
})(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));
var instanceOfType = (cls, params = {
  message: `Input not instance of ${cls.name}`
}) => custom((data) => data instanceof cls, params, !0), stringType = ZodString.create, numberType = ZodNumber.create, nanType = ZodNaN.create, bigIntType = ZodBigInt.create, booleanType = ZodBoolean.create, dateType = ZodDate.create, undefinedType = ZodUndefined.create, nullType = ZodNull.create, anyType = ZodAny.create, unknownType = ZodUnknown.create, neverType = ZodNever.create, voidType = ZodVoid.create, arrayType = ZodArray.create, objectType = ZodObject.create, strictObjectType = ZodObject.strictCreate, unionType = ZodUnion.create, discriminatedUnionType = ZodDiscriminatedUnion.create, intersectionType = ZodIntersection.create, tupleType = ZodTuple.create, recordType = ZodRecord.create, mapType = ZodMap.create, setType = ZodSet.create, functionType = ZodFunction.create, lazyType = ZodLazy.create, literalType = ZodLiteral.create, enumType = ZodEnum.create, nativeEnumType = ZodNativeEnum.create, promiseType = ZodPromise.create, effectsType = ZodEffects.create, optionalType = ZodOptional.create, nullableType = ZodNullable.create, preprocessType = ZodEffects.createWithPreprocess, ostring = () => stringType().optional(), onumber = () => numberType().optional(), oboolean = () => booleanType().optional(), NEVER = INVALID, mod = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  getParsedType,
  ZodParsedType,
  defaultErrorMap: errorMap,
  setErrorMap,
  getErrorMap,
  makeIssue,
  EMPTY_PATH,
  addIssueToContext,
  ParseStatus,
  INVALID,
  DIRTY,
  OK,
  isAborted,
  isDirty,
  isValid,
  isAsync,
  ZodType,
  ZodString,
  ZodNumber,
  ZodBigInt,
  ZodBoolean,
  ZodDate,
  ZodUndefined,
  ZodNull,
  ZodAny,
  ZodUnknown,
  ZodNever,
  ZodVoid,
  ZodArray,
  get objectUtil() {
    return objectUtil;
  },
  ZodObject,
  ZodUnion,
  ZodDiscriminatedUnion,
  ZodIntersection,
  ZodTuple,
  ZodRecord,
  ZodMap,
  ZodSet,
  ZodFunction,
  ZodLazy,
  ZodLiteral,
  ZodEnum,
  ZodNativeEnum,
  ZodPromise,
  ZodEffects,
  ZodTransformer: ZodEffects,
  ZodOptional,
  ZodNullable,
  ZodDefault,
  ZodNaN,
  BRAND,
  ZodBranded,
  custom,
  Schema: ZodType,
  ZodSchema: ZodType,
  late,
  get ZodFirstPartyTypeKind() {
    return ZodFirstPartyTypeKind;
  },
  any: anyType,
  array: arrayType,
  bigint: bigIntType,
  boolean: booleanType,
  date: dateType,
  discriminatedUnion: discriminatedUnionType,
  effect: effectsType,
  enum: enumType,
  function: functionType,
  instanceof: instanceOfType,
  intersection: intersectionType,
  lazy: lazyType,
  literal: literalType,
  map: mapType,
  nan: nanType,
  nativeEnum: nativeEnumType,
  never: neverType,
  null: nullType,
  nullable: nullableType,
  number: numberType,
  object: objectType,
  oboolean,
  onumber,
  optional: optionalType,
  ostring,
  preprocess: preprocessType,
  promise: promiseType,
  record: recordType,
  set: setType,
  strictObject: strictObjectType,
  string: stringType,
  transformer: effectsType,
  tuple: tupleType,
  undefined: undefinedType,
  union: unionType,
  unknown: unknownType,
  void: voidType,
  NEVER,
  ZodIssueCode,
  quotelessJson,
  ZodError
});

// app/@core/components/NewNodeForm.tsx
var import_zod_form_data = __toESM(require_zod_form_data_cjs()), import_with_zod = __toESM(require_remix_validated_form_with_zod_cjs()), import_jsx_dev_runtime = __toESM(require_jsx_dev_runtime()), schema = mod.object({
  name: import_zod_form_data.zfd.text(),
  fqdn: import_zod_form_data.zfd.text()
}), clientValidator = (0, import_with_zod.withZod)(schema);
function NewNodeForm({ data }) {
  return /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(import_remix_validated_form.ValidatedForm, {
    action: "/nodes/new",
    method: "post",
    validator: clientValidator,
    className: "flex w-full items-center justify-center gap-2 p-4 font-sans",
    children: /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
      className: "space-y-8 divide-y font-sans",
      children: /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
        className: "pt-8",
        children: /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
          className: "sm:grid-col-6 mt-6 grid grid-cols-1 gap-y-6 gap-x-4",
          children: /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
            className: "sm:col-span-6",
            children: [
              /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("label", {
                htmlFor: "server-name",
                className: "block text-sm font-medium",
                children: "Server name"
              }, void 0, !1, {
                fileName: "app/@core/components/NewNodeForm.tsx",
                lineNumber: 30,
                columnNumber: 15
              }, this),
              /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
                children: /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(Input, {
                  id: "server-name",
                  type: "text",
                  name: "server-name"
                }, void 0, !1, {
                  fileName: "app/@core/components/NewNodeForm.tsx",
                  lineNumber: 34,
                  columnNumber: 17
                }, this)
              }, void 0, !1, {
                fileName: "app/@core/components/NewNodeForm.tsx",
                lineNumber: 33,
                columnNumber: 15
              }, this)
            ]
          }, void 0, !0, {
            fileName: "app/@core/components/NewNodeForm.tsx",
            lineNumber: 29,
            columnNumber: 13
          }, this)
        }, void 0, !1, {
          fileName: "app/@core/components/NewNodeForm.tsx",
          lineNumber: 28,
          columnNumber: 11
        }, this)
      }, void 0, !1, {
        fileName: "app/@core/components/NewNodeForm.tsx",
        lineNumber: 27,
        columnNumber: 9
      }, this)
    }, void 0, !1, {
      fileName: "app/@core/components/NewNodeForm.tsx",
      lineNumber: 26,
      columnNumber: 7
    }, this)
  }, void 0, !1, {
    fileName: "app/@core/components/NewNodeForm.tsx",
    lineNumber: 20,
    columnNumber: 5
  }, this);
}

// app/@core/components/ThemeChanger.tsx
var import_swatch = __toESM(require_swatch()), import_chevron_down = __toESM(require_chevron_down());

// app/@core/constants.ts
var pagesThatDontNeedSidebar = ["/", "/about"], cfApiUrl = "https://api.cloudflare.com/client/v4", themeOptions = [
  {
    name: "\u{1F31D} \u2007light",
    id: "light"
  },
  {
    name: "\u{1F31A} \u2007dark",
    id: "dark"
  },
  {
    name: "\u{1F9C1} \u2007cupcake",
    id: "cupcake"
  },
  {
    name: "\u{1F41D} \u2007bumblebee",
    id: "bumblebee"
  },
  {
    name: "\u2733\uFE0F \u2007Emerald",
    id: "emerald"
  },
  {
    name: "\u{1F3E2} \u2007Corporate",
    id: "corporate"
  },
  {
    name: "\u{1F303} \u2007synthwave",
    id: "synthwave"
  },
  {
    name: "\u{1F474} \u2007retro",
    id: "retro"
  },
  {
    name: "\u{1F916} \u2007cyberpunk",
    id: "cyberpunk"
  },
  {
    name: "\u{1F338} \u2007valentine",
    id: "valentine"
  },
  {
    name: "\u{1F383} \u2007halloween",
    id: "halloween"
  },
  {
    name: "\u{1F337} \u2007garden",
    id: "garden"
  },
  {
    name: "\u{1F332} \u2007forest",
    id: "forest"
  },
  {
    name: "\u{1F41F} \u2007aqua",
    id: "aqua"
  },
  {
    name: "\u{1F453} \u2007lofi",
    id: "lofi"
  },
  {
    name: "\u{1F58D} \u2007pastel",
    id: "pastel"
  },
  {
    name: "\u{1F9DA}\u200D\u2640\uFE0F \u2007fantasy",
    id: "fantasy"
  },
  {
    name: "\u{1F4DD} \u2007Wireframe",
    id: "wireframe"
  },
  {
    name: "\u{1F3F4} \u2007black",
    id: "black"
  },
  {
    name: "\u{1F48E} \u2007luxury",
    id: "luxury"
  },
  {
    name: "\u{1F9DB}\u200D\u2642\uFE0F \u2007dracula",
    id: "dracula"
  },
  {
    name: "\u{1F5A8} \u2007CMYK",
    id: "cmyk"
  },
  {
    name: "\u{1F341} \u2007Autumn",
    id: "autumn"
  },
  {
    name: "\u{1F4BC} \u2007Business",
    id: "business"
  },
  {
    name: "\u{1F48A} \u2007Acid",
    id: "acid"
  },
  {
    name: "\u{1F34B} \u2007Lemonade",
    id: "lemonade"
  },
  {
    name: "\u{1F319} \u2007Night",
    id: "night"
  },
  {
    name: "\u2615\uFE0F \u2007Coffee",
    id: "coffee"
  },
  {
    name: "\u2744\uFE0F \u2007Winter",
    id: "winter"
  }
];

// app/@core/components/ThemeChanger.tsx
var import_react14 = __toESM(require_react()), import_theme_change = __toESM(require_theme_change()), import_jsx_dev_runtime = __toESM(require_jsx_dev_runtime());
function ThemeChanger() {
  return (0, import_react14.useEffect)(() => {
    (0, import_theme_change.themeChange)(!1);
  }), /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(import_jsx_dev_runtime.Fragment, {
    children: /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(Dropdown$1, {
      vertical: "end",
      title: "Change theme",
      children: [
        /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(Dropdown$1.Toggle, {
          tabIndex: 0,
          className: "gap-1 normal-case",
          button: !0,
          size: "md",
          children: [
            /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(Icon, {
              icon: import_swatch.default,
              width: 20,
              height: 20,
              className: "inline-block h-5 w-5 md:h-6 md:w-6"
            }, void 0, !1, {
              fileName: "app/@core/components/ThemeChanger.tsx",
              lineNumber: 18,
              columnNumber: 11
            }, this),
            /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(Icon, {
              icon: import_chevron_down.default,
              className: "ml-1 hidden h-3 w-3 opacity-60 sm:inline-block"
            }, void 0, !1, {
              fileName: "app/@core/components/ThemeChanger.tsx",
              lineNumber: 19,
              columnNumber: 11
            }, this)
          ]
        }, void 0, !0, {
          fileName: "app/@core/components/ThemeChanger.tsx",
          lineNumber: 17,
          columnNumber: 9
        }, this),
        /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
          className: "dropdown-content rounded-t-box rounded-b-box top-px mt-16 max-h-96 w-56 overflow-y-auto bg-base-200 text-base-content shadow-2xl",
          children: /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
            className: "grid grid-cols-1 gap-3 p-3",
            tabIndex: 0,
            children: themeOptions.map((item, idx) => /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
              className: "overflow-hidden rounded-lg outline outline-2 outline-offset-2 outline-base-content",
              "data-set-theme": item.id,
              "data-act-class": "outline",
              children: /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
                "data-theme": item.id,
                className: "w-full cursor-pointer bg-base-100 font-sans text-base-content",
                children: /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
                  className: "grid grid-cols-5 grid-rows-3",
                  children: /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
                    className: "col-span-5 row-span-3 row-start-1 flex gap-1 py-3 px-4",
                    children: [
                      /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
                        className: "flex-grow text-sm font-bold",
                        children: item.name
                      }, void 0, !1, {
                        fileName: "app/@core/components/ThemeChanger.tsx",
                        lineNumber: 33,
                        columnNumber: 23
                      }, this),
                      /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
                        className: "flex flex-shrink-0 flex-wrap gap-1",
                        children: [
                          /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
                            className: "w-2 rounded bg-primary"
                          }, void 0, !1, {
                            fileName: "app/@core/components/ThemeChanger.tsx",
                            lineNumber: 35,
                            columnNumber: 25
                          }, this),
                          /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
                            className: "w-2 rounded bg-secondary"
                          }, void 0, !1, {
                            fileName: "app/@core/components/ThemeChanger.tsx",
                            lineNumber: 36,
                            columnNumber: 25
                          }, this),
                          /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
                            className: "w-2 rounded bg-accent"
                          }, void 0, !1, {
                            fileName: "app/@core/components/ThemeChanger.tsx",
                            lineNumber: 37,
                            columnNumber: 25
                          }, this),
                          /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
                            className: "w-2 rounded bg-neutral"
                          }, void 0, !1, {
                            fileName: "app/@core/components/ThemeChanger.tsx",
                            lineNumber: 38,
                            columnNumber: 25
                          }, this)
                        ]
                      }, void 0, !0, {
                        fileName: "app/@core/components/ThemeChanger.tsx",
                        lineNumber: 34,
                        columnNumber: 23
                      }, this)
                    ]
                  }, void 0, !0, {
                    fileName: "app/@core/components/ThemeChanger.tsx",
                    lineNumber: 32,
                    columnNumber: 21
                  }, this)
                }, void 0, !1, {
                  fileName: "app/@core/components/ThemeChanger.tsx",
                  lineNumber: 31,
                  columnNumber: 19
                }, this)
              }, void 0, !1, {
                fileName: "app/@core/components/ThemeChanger.tsx",
                lineNumber: 30,
                columnNumber: 17
              }, this)
            }, idx, !1, {
              fileName: "app/@core/components/ThemeChanger.tsx",
              lineNumber: 24,
              columnNumber: 15
            }, this))
          }, void 0, !1, {
            fileName: "app/@core/components/ThemeChanger.tsx",
            lineNumber: 22,
            columnNumber: 11
          }, this)
        }, void 0, !1, {
          fileName: "app/@core/components/ThemeChanger.tsx",
          lineNumber: 21,
          columnNumber: 9
        }, this)
      ]
    }, void 0, !0, {
      fileName: "app/@core/components/ThemeChanger.tsx",
      lineNumber: 16,
      columnNumber: 7
    }, this)
  }, void 0, !1, {
    fileName: "app/@core/components/ThemeChanger.tsx",
    lineNumber: 15,
    columnNumber: 5
  }, this);
}

// app/@core/utils/navigation.server.ts
async function getNavItems() {
  return typedjson({
    navMenu: [
      {
        href: "/dashboard",
        label: "Dashboard",
        icon: "heroicons:presentation-chart-bar"
      },
      {
        href: "/locations",
        label: "Locations",
        icon: "heroicons:building-office-2"
      },
      {
        href: "/nodes",
        label: "Nodes",
        icon: "heroicons:server-stack"
      },
      {
        href: "/tunnels",
        label: "Tunnels",
        icon: "heroicons:link"
      },
      {
        href: "/reports",
        label: "Reports",
        icon: "heroicons:document-chart-bar"
      },
      {
        href: "/settings",
        label: "Settings",
        icon: "heroicons:cog"
      }
    ]
  });
}

// app/routes/__layout.tsx
var import_react15 = __toESM(require_react());

// app/@core/utils/auth-config.server.ts
function generateConfigs(context) {
  let authConfig = {
    callbackURL: context.env.AUTH0_CALLBACK_URL,
    clientID: context.env.AUTH0_CLIENT_ID,
    clientSecret: context.env.AUTH0_CLIENT_SECRET,
    domain: context.env.AUTH0_DOMAIN
  }, sessionConfig = {
    tag: context.env.SESSION_TAG,
    secrets: context.env.SESSION_SECRETS.split(","),
    kv: context.env.KV
  }, baseURL = context.env.APP_BASE_URL;
  return {
    authConfig,
    sessionConfig,
    baseURL
  };
}

// app/@core/services/auth/auth.server.ts
var import_remix_auth = __toESM(require_build()), import_remix_auth_auth0 = __toESM(require_build3());

// app/@core/services/auth/session.server.ts
var appSessionStorage = async ({ tag, secrets, kv }) => {
  let sessionStorage2 = (0, import_cloudflare2.createCloudflareKVSessionStorage)({
    cookie: {
      name: tag,
      sameSite: "lax",
      path: "/",
      httpOnly: !0,
      secrets,
      secure: !1
    },
    kv
  }), { getSession, commitSession, destroySession } = sessionStorage2;
  return { sessionStorage: sessionStorage2, getSession, commitSession, destroySession };
};

// app/@core/services/auth/auth.server.ts
var getAuthenticator = async (authConfig, sesssionConfig) => {
  let { sessionStorage: sessionStorage2 } = await appSessionStorage(sesssionConfig), authenticator = new import_remix_auth.Authenticator(sessionStorage2), auth0Strategy = new import_remix_auth_auth0.Auth0Strategy(authConfig, async ({ profile }) => (console.log(profile), {
    id: profile.id,
    displayName: profile._json.name,
    email: profile._json.email,
    email_verified: profile._json.email_verified,
    picture: profile._json.picture,
    nickname: profile._json.nickname
  }));
  return authenticator.use(auth0Strategy), authenticator;
};

// app/routes/__layout.tsx
var import_jsx_dev_runtime = __toESM(require_jsx_dev_runtime()), loader2 = async ({ request, context }) => {
  let { authConfig, sessionConfig } = generateConfigs(context), user = await (await getAuthenticator(authConfig, sessionConfig)).isAuthenticated(request), { pathname } = new URL(request.url);
  if (pathname !== "/" && !user)
    return redirect2("/auth/login");
  let nav = await (await getNavItems()).json();
  return typedjson({ nav, user });
};
function AppLayout() {
  let [pageHeading, setPageHeading] = (0, import_react15.useState)(null), { state, dispatch } = useGlobalState(), { nav, user } = useTypedLoaderData(), { pathname } = useLocation(), sidebarNavigation = nav.navMenu, [showSidebar, setShowSidebar] = (0, import_react15.useState)(!1), [isMobile, setIsMobile] = (0, import_react15.useState)(!1), toggleSidebar = () => {
    setShowSidebar(!showSidebar);
  };
  return (0, import_react15.useEffect)(() => {
    window.matchMedia("(min-width: 768px)").addEventListener("change", (e) => setIsMobile(e.matches));
  }, []), (0, import_react15.useEffect)(
    (p = pathname) => {
      setPageHeading(p === "/" ? "Home" : p === "/profile" ? "Profile" : sidebarNavigation.filter((i) => p.startsWith(i.href))[0].label);
    },
    [pageHeading, sidebarNavigation, pathname]
  ), /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(import_jsx_dev_runtime.Fragment, {
    children: /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
      className: "flex flex-wrap",
      children: [
        /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(Drawer, {
          id: "main-menu",
          open: showSidebar,
          sideClassName: clsx2(
            "hidden items-top gap-2",
            {
              "lg:flex": pathname !== "/"
            },
            "scroll-smooth scroll-pt-20"
          ),
          onClickOverlay: toggleSidebar,
          mobile: !pagesThatDontNeedSidebar.includes(pathname) || isMobile,
          side: /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(AppSidebar, {
            nav: sidebarNavigation,
            toggle: toggleSidebar
          }, void 0, !1, {
            fileName: "app/routes/__layout.tsx",
            lineNumber: 78,
            columnNumber: 17
          }, this),
          children: [
            /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
              className: "sticky top-0 z-30 flex h-16 w-full justify-center bg-opacity-90 backdrop-blur duration-100",
              children: /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(AppNavbar, {
                toggleMenu: toggleSidebar,
                user
              }, void 0, !1, {
                fileName: "app/routes/__layout.tsx",
                lineNumber: 82,
                columnNumber: 13
              }, this)
            }, void 0, !1, {
              fileName: "app/routes/__layout.tsx",
              lineNumber: 81,
              columnNumber: 11
            }, this),
            /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
              className: clsx2("flex flex-1 flex-col overflow-hidden", {
                "p-6 pb-16": pagesThatDontNeedSidebar.includes(pathname)
              }),
              children: /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
                className: "flex flex-1 items-stretch overflow-hidden",
                children: /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("main", {
                  className: "flex-1 overflow-y-auto",
                  children: /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("section", {
                    "aria-labelledby": "primary-heading",
                    className: "flex h-full min-w-0 flex-1 flex-col lg:order-last",
                    children: [
                      /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("h1", {
                        id: "primary-heading",
                        className: "sr-only",
                        children: pageHeading
                      }, void 0, !1, {
                        fileName: "app/routes/__layout.tsx",
                        lineNumber: 99,
                        columnNumber: 19
                      }, this),
                      /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
                        className: "p-2",
                        children: /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(Outlet, {}, void 0, !1, {
                          fileName: "app/routes/__layout.tsx",
                          lineNumber: 103,
                          columnNumber: 21
                        }, this)
                      }, void 0, !1, {
                        fileName: "app/routes/__layout.tsx",
                        lineNumber: 102,
                        columnNumber: 19
                      }, this)
                    ]
                  }, void 0, !0, {
                    fileName: "app/routes/__layout.tsx",
                    lineNumber: 95,
                    columnNumber: 17
                  }, this)
                }, void 0, !1, {
                  fileName: "app/routes/__layout.tsx",
                  lineNumber: 93,
                  columnNumber: 15
                }, this)
              }, void 0, !1, {
                fileName: "app/routes/__layout.tsx",
                lineNumber: 92,
                columnNumber: 13
              }, this)
            }, void 0, !1, {
              fileName: "app/routes/__layout.tsx",
              lineNumber: 86,
              columnNumber: 11
            }, this)
          ]
        }, void 0, !0, {
          fileName: "app/routes/__layout.tsx",
          lineNumber: 66,
          columnNumber: 9
        }, this),
        /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(Modal$1, {
          id: "mdl-new-node",
          open: state.showNewNodeMdl,
          onClickBackdrop: () => dispatch({ type: "CLOSE_NEWNODE_MDL" }),
          className: "w-11/12 max-w-5xl",
          children: [
            /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(Modal$1.Header, {
              children: "New Node"
            }, void 0, !1, {
              fileName: "app/routes/__layout.tsx",
              lineNumber: 117,
              columnNumber: 11
            }, this),
            /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(Modal$1.Body, {
              children: /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(NewNodeForm, {}, void 0, !1, {
                fileName: "app/routes/__layout.tsx",
                lineNumber: 119,
                columnNumber: 13
              }, this)
            }, void 0, !1, {
              fileName: "app/routes/__layout.tsx",
              lineNumber: 118,
              columnNumber: 11
            }, this)
          ]
        }, void 0, !0, {
          fileName: "app/routes/__layout.tsx",
          lineNumber: 111,
          columnNumber: 9
        }, this),
        /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(Modal$1, {
          id: "mdl-new-tunnel",
          open: state.showNewTunnelMdl,
          onClickBackdrop: () => dispatch({ type: "CLOSE_NEWTUNNEL_MDL" }),
          className: "w-11/12 max-w-5xl",
          children: /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(Modal$1.Header, {
            children: "New Tunnel"
          }, void 0, !1, {
            fileName: "app/routes/__layout.tsx",
            lineNumber: 129,
            columnNumber: 11
          }, this)
        }, void 0, !1, {
          fileName: "app/routes/__layout.tsx",
          lineNumber: 123,
          columnNumber: 9
        }, this),
        /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(Modal$1, {
          id: "mdl-new-location",
          open: state.showNewLocationMdl,
          onClickBackdrop: () => dispatch({ type: "CLOSE_NEWLOCATION_MDL" }),
          className: "w-11/12 max-w-5xl",
          children: /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(Modal$1.Header, {
            children: "New Location"
          }, void 0, !1, {
            fileName: "app/routes/__layout.tsx",
            lineNumber: 138,
            columnNumber: 11
          }, this)
        }, void 0, !1, {
          fileName: "app/routes/__layout.tsx",
          lineNumber: 132,
          columnNumber: 9
        }, this)
      ]
    }, void 0, !0, {
      fileName: "app/routes/__layout.tsx",
      lineNumber: 65,
      columnNumber: 7
    }, this)
  }, void 0, !1, {
    fileName: "app/routes/__layout.tsx",
    lineNumber: 64,
    columnNumber: 5
  }, this);
}
function CatchBoundary2() {
  let caught = useCatch(), message;
  switch (caught.status) {
    case 401:
      message = /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("p", {
        children: "Oops! Looks like you tried to visit a page that you do not have access to."
      }, void 0, !1, {
        fileName: "app/routes/__layout.tsx",
        lineNumber: 150,
        columnNumber: 17
      }, this);
      break;
    case 404:
      message = /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("p", {
        children: "Oops! Looks like you tried to visit a page that does not exist."
      }, void 0, !1, {
        fileName: "app/routes/__layout.tsx",
        lineNumber: 153,
        columnNumber: 17
      }, this);
      break;
    default:
      throw new Error(caught.data || caught.statusText);
  }
  return /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
    className: "min-h-full bg-slate-700 px-4 py-16 sm:px-6 sm:py-24 md:grid md:place-items-center lg:px-8",
    children: /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
      className: "mx-auto max-w-max",
      children: /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("main", {
        className: "sm:flex",
        children: [
          /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("p", {
            className: "text-4xl font-bold tracking-tight text-red-600 sm:text-5xl",
            children: caught.status
          }, void 0, !1, {
            fileName: "app/routes/__layout.tsx",
            lineNumber: 164,
            columnNumber: 11
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
            className: "sm:ml-6",
            children: [
              /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
                className: "sm:border-l sm:border-gray-200 sm:pl-6",
                children: [
                  /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("h1", {
                    className: "text-4xl font-bold tracking-tight text-gray-900 sm:text-5xl",
                    children: caught.statusText
                  }, void 0, !1, {
                    fileName: "app/routes/__layout.tsx",
                    lineNumber: 167,
                    columnNumber: 15
                  }, this),
                  /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("p", {
                    className: "mt-1 text-base text-gray-500",
                    children: message
                  }, void 0, !1, {
                    fileName: "app/routes/__layout.tsx",
                    lineNumber: 168,
                    columnNumber: 15
                  }, this)
                ]
              }, void 0, !0, {
                fileName: "app/routes/__layout.tsx",
                lineNumber: 166,
                columnNumber: 13
              }, this),
              /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
                className: "mt-10 flex space-x-3 sm:border-l sm:border-transparent sm:pl-6",
                children: [
                  /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("a", {
                    href: "/",
                    className: "bg-primary-600 hover:bg-primary-700 inline-flex items-center rounded-md border border-transparent px-4 py-2 text-sm font-medium text-white shadow-sm focus:outline-none focus:ring-2 focus:ring-amber-500 focus:ring-offset-2",
                    children: "Go back home"
                  }, void 0, !1, {
                    fileName: "app/routes/__layout.tsx",
                    lineNumber: 171,
                    columnNumber: 15
                  }, this),
                  /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("a", {
                    href: "/support",
                    className: "bg-primary-100 text-primary-700 hover:bg-primary-200 inline-flex items-center rounded-md border border-transparent px-4 py-2 text-sm font-medium focus:outline-none focus:ring-2 focus:ring-amber-500 focus:ring-offset-2",
                    children: "Contact support"
                  }, void 0, !1, {
                    fileName: "app/routes/__layout.tsx",
                    lineNumber: 177,
                    columnNumber: 15
                  }, this)
                ]
              }, void 0, !0, {
                fileName: "app/routes/__layout.tsx",
                lineNumber: 170,
                columnNumber: 13
              }, this)
            ]
          }, void 0, !0, {
            fileName: "app/routes/__layout.tsx",
            lineNumber: 165,
            columnNumber: 11
          }, this)
        ]
      }, void 0, !0, {
        fileName: "app/routes/__layout.tsx",
        lineNumber: 163,
        columnNumber: 9
      }, this)
    }, void 0, !1, {
      fileName: "app/routes/__layout.tsx",
      lineNumber: 162,
      columnNumber: 7
    }, this)
  }, void 0, !1, {
    fileName: "app/routes/__layout.tsx",
    lineNumber: 161,
    columnNumber: 5
  }, this);
}
function ErrorBoundary({ error }) {
  return /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
    children: [
      /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("h1", {
        children: "Error"
      }, void 0, !1, {
        fileName: "app/routes/__layout.tsx",
        lineNumber: 194,
        columnNumber: 7
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("p", {
        children: error.message
      }, void 0, !1, {
        fileName: "app/routes/__layout.tsx",
        lineNumber: 195,
        columnNumber: 7
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("p", {
        children: "The stack trace is:"
      }, void 0, !1, {
        fileName: "app/routes/__layout.tsx",
        lineNumber: 196,
        columnNumber: 7
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("pre", {
        children: error.stack
      }, void 0, !1, {
        fileName: "app/routes/__layout.tsx",
        lineNumber: 197,
        columnNumber: 7
      }, this)
    ]
  }, void 0, !0, {
    fileName: "app/routes/__layout.tsx",
    lineNumber: 193,
    columnNumber: 5
  }, this);
}

// app/routes/__layout/locations/$locationId.tsx
var locationId_exports = {};
__export(locationId_exports, {
  default: () => Location,
  loader: () => loader3
});
var loader3 = async () => {
};
function Location() {
}

// app/routes/__layout/locations/index.tsx
var locations_exports = {};
__export(locations_exports, {
  default: () => Location2,
  loader: () => loader4
});

// ../../node_modules/.pnpm/tiny-invariant@1.3.1/node_modules/tiny-invariant/dist/esm/tiny-invariant.js
var isProduction = !1, prefix = "Invariant failed";
function invariant3(condition, message) {
  if (!condition) {
    if (isProduction)
      throw new Error(prefix);
    var provided = typeof message == "function" ? message() : message, value = provided ? "".concat(prefix, ": ").concat(provided) : prefix;
    throw new Error(value);
  }
}

// app/routes/__layout/locations/index.tsx
var import_jsx_dev_runtime = __toESM(require_jsx_dev_runtime()), loader4 = async ({ request, context }) => {
  let { authConfig, sessionConfig } = generateConfigs(context), user = await (await getAuthenticator(authConfig, sessionConfig)).isAuthenticated(request), { pathname } = new URL(request.url);
  if (pathname !== "/" && !user)
    return redirect2("/auth/login");
  let resp = await fetch(`${context.env.HELIOS_URL}/locations`, {
    headers: {
      "Content-Type": "application/json"
    }
  });
  invariant3(resp, "Error 1000");
  let kvLocs = await resp.json();
  return typedjson(kvLocs);
};
function Location2() {
  return useTypedLoaderData().length !== 0 ? /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(import_jsx_dev_runtime.Fragment, {
    children: /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("h1", {
      children: "Locations"
    }, void 0, !1, {
      fileName: "app/routes/__layout/locations/index.tsx",
      lineNumber: 41,
      columnNumber: 9
    }, this)
  }, void 0, !1, {
    fileName: "app/routes/__layout/locations/index.tsx",
    lineNumber: 40,
    columnNumber: 7
  }, this) : /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(import_jsx_dev_runtime.Fragment, {
    children: /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(EmptyObject, {
      objectType: "location"
    }, void 0, !1, {
      fileName: "app/routes/__layout/locations/index.tsx",
      lineNumber: 47,
      columnNumber: 7
    }, this)
  }, void 0, !1, {
    fileName: "app/routes/__layout/locations/index.tsx",
    lineNumber: 46,
    columnNumber: 5
  }, this);
}

// app/routes/__layout/locations/new.tsx
var new_exports = {};
__export(new_exports, {
  default: () => LocationCreate
});
function LocationCreate() {
}

// app/routes/__layout/tunnels/index.tsx
var tunnels_exports = {};
__export(tunnels_exports, {
  default: () => TunnelsView,
  loader: () => loader5
});
var import_react_table2 = __toESM(require_index_production());

// app/@core/components/DataGrid.tsx
var import_react_table = __toESM(require_index_production());
var import_jsx_dev_runtime = __toESM(require_jsx_dev_runtime());
function DataGrid({ columns, data }) {
  let table = (0, import_react_table.useReactTable)({
    data,
    columns,
    getCoreRowModel: (0, import_react_table.getCoreRowModel)(),
    getPaginationRowModel: (0, import_react_table.getPaginationRowModel)()
  });
  return /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(import_jsx_dev_runtime.Fragment, {
    children: [
      /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("table", {
        children: [
          /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("thead", {
            children: table.getHeaderGroups().map((headerGroup) => /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("tr", {
              children: headerGroup.headers.map((header) => /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("th", {
                className: "p-2",
                children: header.isPlaceholder ? null : (0, import_react_table.flexRender)(header.column.columnDef.header, header.getContext())
              }, header.id, !1, {
                fileName: "app/@core/components/DataGrid.tsx",
                lineNumber: 22,
                columnNumber: 17
              }, this))
            }, headerGroup.id, !1, {
              fileName: "app/@core/components/DataGrid.tsx",
              lineNumber: 20,
              columnNumber: 13
            }, this))
          }, void 0, !1, {
            fileName: "app/@core/components/DataGrid.tsx",
            lineNumber: 18,
            columnNumber: 9
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("tbody", {
            children: table.getRowModel().rows.map((row) => /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("tr", {
              children: row.getVisibleCells().map((cell) => /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("td", {
                className: "items-center p-2 text-center",
                children: (0, import_react_table.flexRender)(cell.column.columnDef.cell, cell.getContext())
              }, cell.id, !1, {
                fileName: "app/@core/components/DataGrid.tsx",
                lineNumber: 33,
                columnNumber: 17
              }, this))
            }, row.id, !1, {
              fileName: "app/@core/components/DataGrid.tsx",
              lineNumber: 31,
              columnNumber: 13
            }, this))
          }, void 0, !1, {
            fileName: "app/@core/components/DataGrid.tsx",
            lineNumber: 29,
            columnNumber: 9
          }, this)
        ]
      }, void 0, !0, {
        fileName: "app/@core/components/DataGrid.tsx",
        lineNumber: 17,
        columnNumber: 7
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
        className: "h-2"
      }, void 0, !1, {
        fileName: "app/@core/components/DataGrid.tsx",
        lineNumber: 41,
        columnNumber: 7
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
        className: "flex items-center justify-end gap-2",
        children: [
          /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(Pagination, {
            children: [
              /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(Button, {
                onClick: () => table.setPageIndex(0),
                disabled: !table.getCanPreviousPage(),
                children: "<<"
              }, void 0, !1, {
                fileName: "app/@core/components/DataGrid.tsx",
                lineNumber: 44,
                columnNumber: 11
              }, this),
              /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(Button, {
                onClick: () => table.previousPage(),
                disabled: !table.getCanPreviousPage(),
                children: "<"
              }, void 0, !1, {
                fileName: "app/@core/components/DataGrid.tsx",
                lineNumber: 47,
                columnNumber: 11
              }, this),
              /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(Button, {
                onClick: () => table.nextPage(),
                disabled: !table.getCanNextPage(),
                children: ">"
              }, void 0, !1, {
                fileName: "app/@core/components/DataGrid.tsx",
                lineNumber: 50,
                columnNumber: 11
              }, this),
              /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(Button, {
                onClick: () => table.setPageIndex(table.getPageCount() - 1),
                disabled: !table.getCanNextPage(),
                children: ">>"
              }, void 0, !1, {
                fileName: "app/@core/components/DataGrid.tsx",
                lineNumber: 53,
                columnNumber: 11
              }, this)
            ]
          }, void 0, !0, {
            fileName: "app/@core/components/DataGrid.tsx",
            lineNumber: 43,
            columnNumber: 9
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("span", {
            className: "ml-2 flex items-center gap-1",
            children: [
              /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
                children: "Page"
              }, void 0, !1, {
                fileName: "app/@core/components/DataGrid.tsx",
                lineNumber: 58,
                columnNumber: 11
              }, this),
              /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("strong", {
                children: [
                  table.getState().pagination.pageIndex + 1,
                  " of ",
                  table.getPageCount()
                ]
              }, void 0, !0, {
                fileName: "app/@core/components/DataGrid.tsx",
                lineNumber: 59,
                columnNumber: 11
              }, this)
            ]
          }, void 0, !0, {
            fileName: "app/@core/components/DataGrid.tsx",
            lineNumber: 57,
            columnNumber: 9
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("span", {
            className: "flex items-center gap-1",
            children: [
              "| Go to page:",
              /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(Input, {
                type: "number",
                defaultValue: table.getState().pagination.pageIndex + 1,
                onChange: (e) => {
                  let page = e.target.value ? Number(e.target.value) - 1 : 0;
                  table.setPageIndex(page);
                },
                className: "w-16 rounded border p-1"
              }, void 0, !1, {
                fileName: "app/@core/components/DataGrid.tsx",
                lineNumber: 65,
                columnNumber: 11
              }, this)
            ]
          }, void 0, !0, {
            fileName: "app/@core/components/DataGrid.tsx",
            lineNumber: 63,
            columnNumber: 9
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(Select$1, {
            value: table.getState().pagination.pageSize,
            onChange: (e) => {
              table.setPageSize(Number(e));
            },
            children: [10, 20, 30, 40, 50].map((pageSize) => /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("option", {
              value: pageSize,
              children: [
                "Show ",
                pageSize
              ]
            }, pageSize, !0, {
              fileName: "app/@core/components/DataGrid.tsx",
              lineNumber: 82,
              columnNumber: 13
            }, this))
          }, void 0, !1, {
            fileName: "app/@core/components/DataGrid.tsx",
            lineNumber: 75,
            columnNumber: 9
          }, this)
        ]
      }, void 0, !0, {
        fileName: "app/@core/components/DataGrid.tsx",
        lineNumber: 42,
        columnNumber: 7
      }, this)
    ]
  }, void 0, !0, {
    fileName: "app/@core/components/DataGrid.tsx",
    lineNumber: 16,
    columnNumber: 5
  }, this);
}

// app/routes/__layout/tunnels/index.tsx
var import_intent_request_active = __toESM(require_intent_request_active()), import_intent_request_inactive = __toESM(require_intent_request_inactive()), import_jsx_dev_runtime = __toESM(require_jsx_dev_runtime()), loader5 = async ({ request, context }) => {
  let { authConfig, sessionConfig } = generateConfigs(context), user = await (await getAuthenticator(authConfig, sessionConfig)).isAuthenticated(request), { pathname } = new URL(request.url);
  if (pathname !== "/" && !user)
    return redirect2("/auth/login");
  let resp = await fetch(`${cfApiUrl}/accounts/${context.env.CLOUDFLARE_ACCOUNT_ID}/cfd_tunnel`, {
    headers: {
      "content-type": "application/json",
      Authorization: `Bearer ${context.env.CLOUDFLARE_API_TOKEN}`
    }
  });
  if (!resp)
    throw typedjson(resp, { status: 500 });
  let tunnels = await resp.json();
  return typedjson(tunnels.result);
};
function TunnelsView() {
  let tunnels = useTypedLoaderData(), columnHelper = (0, import_react_table2.createColumnHelper)();
  if (tunnels) {
    let columns = [
      columnHelper.accessor("name", { cell: (info) => info.getValue(), header: "Name" }),
      columnHelper.accessor("created_at", { cell: (info) => info.getValue(), header: "Created At" }),
      columnHelper.accessor("deleted_at", { cell: (info) => info.getValue(), header: "Deleted At" }),
      columnHelper.accessor("status", {
        cell: (info) => info.getValue() === "active" ? /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(Icon, {
          icon: import_intent_request_active.default
        }, void 0, !1, {
          fileName: "app/routes/__layout/tunnels/index.tsx",
          lineNumber: 51,
          columnNumber: 42
        }, this) : /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(Icon, {
          icon: import_intent_request_inactive.default
        }, void 0, !1, {
          fileName: "app/routes/__layout/tunnels/index.tsx",
          lineNumber: 51,
          columnNumber: 80
        }, this),
        header: "Status"
      }),
      columnHelper.accessor("remote_config", { cell: (info) => info.getValue().toString(), header: "Remote Config" })
    ];
    return console.log(columns), /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
      className: "p-6",
      children: /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
        className: "overflow-x-auto",
        children: /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(DataGrid, {
          columns,
          data: tunnels
        }, void 0, !1, {
          fileName: "app/routes/__layout/tunnels/index.tsx",
          lineNumber: 61,
          columnNumber: 11
        }, this)
      }, void 0, !1, {
        fileName: "app/routes/__layout/tunnels/index.tsx",
        lineNumber: 60,
        columnNumber: 9
      }, this)
    }, void 0, !1, {
      fileName: "app/routes/__layout/tunnels/index.tsx",
      lineNumber: 58,
      columnNumber: 7
    }, this);
  }
  return /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(import_jsx_dev_runtime.Fragment, {
    children: /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(EmptyObject, {
      objectType: "tunnel"
    }, void 0, !1, {
      fileName: "app/routes/__layout/tunnels/index.tsx",
      lineNumber: 68,
      columnNumber: 7
    }, this)
  }, void 0, !1, {
    fileName: "app/routes/__layout/tunnels/index.tsx",
    lineNumber: 67,
    columnNumber: 5
  }, this);
}

// app/routes/__layout/nodes/index.tsx
var nodes_exports = {};
__export(nodes_exports, {
  default: () => Nodes,
  loader: () => loader6
});
var import_jsx_dev_runtime = __toESM(require_jsx_dev_runtime()), loader6 = async ({ request, context }) => {
  let { authConfig, sessionConfig } = generateConfigs(context), user = await (await getAuthenticator(authConfig, sessionConfig)).isAuthenticated(request), { pathname } = new URL(request.url);
  if (pathname !== "/" && !user)
    return redirect2("/auth/login");
  let resp = await fetch(`${context.env.HELIOS_URL}/nodes`);
  invariant3(resp, "Error 1000");
  let respNodes = await resp.json();
  return console.log(respNodes), typedjson(respNodes);
};
function Nodes() {
  return useTypedLoaderData().length !== 0 ? /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(import_jsx_dev_runtime.Fragment, {
    children: /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("h1", {
      children: "Nodes"
    }, void 0, !1, {
      fileName: "app/routes/__layout/nodes/index.tsx",
      lineNumber: 38,
      columnNumber: 9
    }, this)
  }, void 0, !1, {
    fileName: "app/routes/__layout/nodes/index.tsx",
    lineNumber: 37,
    columnNumber: 7
  }, this) : /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(import_jsx_dev_runtime.Fragment, {
    children: /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(EmptyObject, {
      objectType: "node"
    }, void 0, !1, {
      fileName: "app/routes/__layout/nodes/index.tsx",
      lineNumber: 44,
      columnNumber: 7
    }, this)
  }, void 0, !1, {
    fileName: "app/routes/__layout/nodes/index.tsx",
    lineNumber: 43,
    columnNumber: 5
  }, this);
}

// app/routes/__layout/dashboard.tsx
var dashboard_exports = {};
__export(dashboard_exports, {
  default: () => Dashboard,
  loader: () => loader7
});
var import_jsx_dev_runtime = __toESM(require_jsx_dev_runtime()), loader7 = async ({ request, context }) => {
  let { authConfig, sessionConfig } = generateConfigs(context), user = await (await getAuthenticator(authConfig, sessionConfig)).isAuthenticated(request), { pathname } = new URL(request.url);
  return pathname !== "/" && !user ? redirect2("/auth/login") : null;
};
function Dashboard() {
  return /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
    className: "grid grid-cols-1 gap-4 md:grid-cols-2 md:gap-6 lg:grid-cols-4",
    children: [
      /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
        className: "mx-auto w-full max-w-sm rounded-md border border-gray-700 p-4 shadow dark:border-blue-300",
        children: /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
          className: "flex animate-pulse space-x-4",
          children: [
            /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
              className: "h-10 w-10 rounded-full bg-slate-700 dark:bg-gray-100"
            }, void 0, !1, {
              fileName: "app/routes/__layout/dashboard.tsx",
              lineNumber: 25,
              columnNumber: 11
            }, this),
            /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
              className: "flex-1 space-y-6 py-1",
              children: [
                /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
                  className: "h-2 rounded bg-slate-700 dark:bg-gray-100"
                }, void 0, !1, {
                  fileName: "app/routes/__layout/dashboard.tsx",
                  lineNumber: 27,
                  columnNumber: 13
                }, this),
                /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
                  className: "space-y-3",
                  children: [
                    /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
                      className: "grid grid-cols-3 gap-4",
                      children: [
                        /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
                          className: "col-span-2 h-2 rounded bg-gray-700 dark:bg-gray-100"
                        }, void 0, !1, {
                          fileName: "app/routes/__layout/dashboard.tsx",
                          lineNumber: 30,
                          columnNumber: 17
                        }, this),
                        /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
                          className: "col-span-1 h-2 rounded bg-gray-700 dark:bg-gray-100"
                        }, void 0, !1, {
                          fileName: "app/routes/__layout/dashboard.tsx",
                          lineNumber: 31,
                          columnNumber: 17
                        }, this)
                      ]
                    }, void 0, !0, {
                      fileName: "app/routes/__layout/dashboard.tsx",
                      lineNumber: 29,
                      columnNumber: 15
                    }, this),
                    /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
                      className: "h-2 rounded bg-gray-700 dark:bg-gray-100"
                    }, void 0, !1, {
                      fileName: "app/routes/__layout/dashboard.tsx",
                      lineNumber: 33,
                      columnNumber: 15
                    }, this)
                  ]
                }, void 0, !0, {
                  fileName: "app/routes/__layout/dashboard.tsx",
                  lineNumber: 28,
                  columnNumber: 13
                }, this)
              ]
            }, void 0, !0, {
              fileName: "app/routes/__layout/dashboard.tsx",
              lineNumber: 26,
              columnNumber: 11
            }, this)
          ]
        }, void 0, !0, {
          fileName: "app/routes/__layout/dashboard.tsx",
          lineNumber: 24,
          columnNumber: 9
        }, this)
      }, void 0, !1, {
        fileName: "app/routes/__layout/dashboard.tsx",
        lineNumber: 23,
        columnNumber: 7
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
        className: "mx-auto w-full max-w-sm rounded-md border border-gray-700 p-4 shadow dark:border-blue-300",
        children: /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
          className: "flex animate-pulse space-x-4",
          children: [
            /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
              className: "h-10 w-10 rounded-full bg-slate-700 dark:bg-gray-100"
            }, void 0, !1, {
              fileName: "app/routes/__layout/dashboard.tsx",
              lineNumber: 40,
              columnNumber: 11
            }, this),
            /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
              className: "flex-1 space-y-6 py-1",
              children: [
                /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
                  className: "h-2 rounded bg-slate-700 dark:bg-gray-100"
                }, void 0, !1, {
                  fileName: "app/routes/__layout/dashboard.tsx",
                  lineNumber: 42,
                  columnNumber: 13
                }, this),
                /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
                  className: "space-y-3",
                  children: [
                    /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
                      className: "grid grid-cols-3 gap-4",
                      children: [
                        /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
                          className: "col-span-2 h-2 rounded bg-gray-700 dark:bg-gray-100"
                        }, void 0, !1, {
                          fileName: "app/routes/__layout/dashboard.tsx",
                          lineNumber: 45,
                          columnNumber: 17
                        }, this),
                        /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
                          className: "col-span-1 h-2 rounded bg-gray-700 dark:bg-gray-100"
                        }, void 0, !1, {
                          fileName: "app/routes/__layout/dashboard.tsx",
                          lineNumber: 46,
                          columnNumber: 17
                        }, this)
                      ]
                    }, void 0, !0, {
                      fileName: "app/routes/__layout/dashboard.tsx",
                      lineNumber: 44,
                      columnNumber: 15
                    }, this),
                    /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
                      className: "h-2 rounded bg-gray-700 dark:bg-gray-100"
                    }, void 0, !1, {
                      fileName: "app/routes/__layout/dashboard.tsx",
                      lineNumber: 48,
                      columnNumber: 15
                    }, this)
                  ]
                }, void 0, !0, {
                  fileName: "app/routes/__layout/dashboard.tsx",
                  lineNumber: 43,
                  columnNumber: 13
                }, this)
              ]
            }, void 0, !0, {
              fileName: "app/routes/__layout/dashboard.tsx",
              lineNumber: 41,
              columnNumber: 11
            }, this)
          ]
        }, void 0, !0, {
          fileName: "app/routes/__layout/dashboard.tsx",
          lineNumber: 39,
          columnNumber: 9
        }, this)
      }, void 0, !1, {
        fileName: "app/routes/__layout/dashboard.tsx",
        lineNumber: 38,
        columnNumber: 7
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
        className: "mx-auto w-full max-w-sm rounded-md border border-gray-700 p-4 shadow dark:border-blue-300",
        children: /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
          className: "flex animate-pulse space-x-4",
          children: [
            /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
              className: "h-10 w-10 rounded-full bg-slate-700 dark:bg-gray-100"
            }, void 0, !1, {
              fileName: "app/routes/__layout/dashboard.tsx",
              lineNumber: 55,
              columnNumber: 11
            }, this),
            /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
              className: "flex-1 space-y-6 py-1",
              children: [
                /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
                  className: "h-2 rounded bg-slate-700 dark:bg-gray-100"
                }, void 0, !1, {
                  fileName: "app/routes/__layout/dashboard.tsx",
                  lineNumber: 57,
                  columnNumber: 13
                }, this),
                /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
                  className: "space-y-3",
                  children: [
                    /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
                      className: "grid grid-cols-3 gap-4",
                      children: [
                        /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
                          className: "col-span-2 h-2 rounded bg-gray-700 dark:bg-gray-100"
                        }, void 0, !1, {
                          fileName: "app/routes/__layout/dashboard.tsx",
                          lineNumber: 60,
                          columnNumber: 17
                        }, this),
                        /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
                          className: "col-span-1 h-2 rounded bg-gray-700 dark:bg-gray-100"
                        }, void 0, !1, {
                          fileName: "app/routes/__layout/dashboard.tsx",
                          lineNumber: 61,
                          columnNumber: 17
                        }, this)
                      ]
                    }, void 0, !0, {
                      fileName: "app/routes/__layout/dashboard.tsx",
                      lineNumber: 59,
                      columnNumber: 15
                    }, this),
                    /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
                      className: "h-2 rounded bg-gray-700 dark:bg-gray-100"
                    }, void 0, !1, {
                      fileName: "app/routes/__layout/dashboard.tsx",
                      lineNumber: 63,
                      columnNumber: 15
                    }, this)
                  ]
                }, void 0, !0, {
                  fileName: "app/routes/__layout/dashboard.tsx",
                  lineNumber: 58,
                  columnNumber: 13
                }, this)
              ]
            }, void 0, !0, {
              fileName: "app/routes/__layout/dashboard.tsx",
              lineNumber: 56,
              columnNumber: 11
            }, this)
          ]
        }, void 0, !0, {
          fileName: "app/routes/__layout/dashboard.tsx",
          lineNumber: 54,
          columnNumber: 9
        }, this)
      }, void 0, !1, {
        fileName: "app/routes/__layout/dashboard.tsx",
        lineNumber: 53,
        columnNumber: 7
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
        className: "mx-auto w-full max-w-sm rounded-md border border-gray-700 p-4 shadow dark:border-blue-300",
        children: /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
          className: "flex animate-pulse space-x-4",
          children: [
            /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
              className: "h-10 w-10 rounded-full bg-slate-700 dark:bg-gray-100"
            }, void 0, !1, {
              fileName: "app/routes/__layout/dashboard.tsx",
              lineNumber: 70,
              columnNumber: 11
            }, this),
            /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
              className: "flex-1 space-y-6 py-1",
              children: [
                /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
                  className: "h-2 rounded bg-slate-700 dark:bg-gray-100"
                }, void 0, !1, {
                  fileName: "app/routes/__layout/dashboard.tsx",
                  lineNumber: 72,
                  columnNumber: 13
                }, this),
                /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
                  className: "space-y-3",
                  children: [
                    /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
                      className: "grid grid-cols-3 gap-4",
                      children: [
                        /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
                          className: "col-span-2 h-2 rounded bg-gray-700 dark:bg-gray-100"
                        }, void 0, !1, {
                          fileName: "app/routes/__layout/dashboard.tsx",
                          lineNumber: 75,
                          columnNumber: 17
                        }, this),
                        /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
                          className: "col-span-1 h-2 rounded bg-gray-700 dark:bg-gray-100"
                        }, void 0, !1, {
                          fileName: "app/routes/__layout/dashboard.tsx",
                          lineNumber: 76,
                          columnNumber: 17
                        }, this)
                      ]
                    }, void 0, !0, {
                      fileName: "app/routes/__layout/dashboard.tsx",
                      lineNumber: 74,
                      columnNumber: 15
                    }, this),
                    /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
                      className: "h-2 rounded bg-gray-700 dark:bg-gray-100"
                    }, void 0, !1, {
                      fileName: "app/routes/__layout/dashboard.tsx",
                      lineNumber: 78,
                      columnNumber: 15
                    }, this)
                  ]
                }, void 0, !0, {
                  fileName: "app/routes/__layout/dashboard.tsx",
                  lineNumber: 73,
                  columnNumber: 13
                }, this)
              ]
            }, void 0, !0, {
              fileName: "app/routes/__layout/dashboard.tsx",
              lineNumber: 71,
              columnNumber: 11
            }, this)
          ]
        }, void 0, !0, {
          fileName: "app/routes/__layout/dashboard.tsx",
          lineNumber: 69,
          columnNumber: 9
        }, this)
      }, void 0, !1, {
        fileName: "app/routes/__layout/dashboard.tsx",
        lineNumber: 68,
        columnNumber: 7
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
        className: "mx-auto w-full max-w-sm rounded-md border border-gray-700 p-4 shadow dark:border-blue-300",
        children: /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
          className: "flex animate-pulse space-x-4",
          children: [
            /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
              className: "h-10 w-10 rounded-full bg-slate-700 dark:bg-gray-100"
            }, void 0, !1, {
              fileName: "app/routes/__layout/dashboard.tsx",
              lineNumber: 85,
              columnNumber: 11
            }, this),
            /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
              className: "flex-1 space-y-6 py-1",
              children: [
                /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
                  className: "h-2 rounded bg-slate-700 dark:bg-gray-100"
                }, void 0, !1, {
                  fileName: "app/routes/__layout/dashboard.tsx",
                  lineNumber: 87,
                  columnNumber: 13
                }, this),
                /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
                  className: "space-y-3",
                  children: [
                    /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
                      className: "grid grid-cols-3 gap-4",
                      children: [
                        /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
                          className: "col-span-2 h-2 rounded bg-gray-700 dark:bg-gray-100"
                        }, void 0, !1, {
                          fileName: "app/routes/__layout/dashboard.tsx",
                          lineNumber: 90,
                          columnNumber: 17
                        }, this),
                        /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
                          className: "col-span-1 h-2 rounded bg-gray-700 dark:bg-gray-100"
                        }, void 0, !1, {
                          fileName: "app/routes/__layout/dashboard.tsx",
                          lineNumber: 91,
                          columnNumber: 17
                        }, this)
                      ]
                    }, void 0, !0, {
                      fileName: "app/routes/__layout/dashboard.tsx",
                      lineNumber: 89,
                      columnNumber: 15
                    }, this),
                    /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
                      className: "h-2 rounded bg-gray-700 dark:bg-gray-100"
                    }, void 0, !1, {
                      fileName: "app/routes/__layout/dashboard.tsx",
                      lineNumber: 93,
                      columnNumber: 15
                    }, this)
                  ]
                }, void 0, !0, {
                  fileName: "app/routes/__layout/dashboard.tsx",
                  lineNumber: 88,
                  columnNumber: 13
                }, this)
              ]
            }, void 0, !0, {
              fileName: "app/routes/__layout/dashboard.tsx",
              lineNumber: 86,
              columnNumber: 11
            }, this)
          ]
        }, void 0, !0, {
          fileName: "app/routes/__layout/dashboard.tsx",
          lineNumber: 84,
          columnNumber: 9
        }, this)
      }, void 0, !1, {
        fileName: "app/routes/__layout/dashboard.tsx",
        lineNumber: 83,
        columnNumber: 7
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
        className: "mx-auto w-full max-w-sm rounded-md border border-gray-700 p-4 shadow dark:border-blue-300",
        children: /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
          className: "flex animate-pulse space-x-4",
          children: [
            /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
              className: "h-10 w-10 rounded-full bg-slate-700 dark:bg-gray-100"
            }, void 0, !1, {
              fileName: "app/routes/__layout/dashboard.tsx",
              lineNumber: 100,
              columnNumber: 11
            }, this),
            /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
              className: "flex-1 space-y-6 py-1",
              children: [
                /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
                  className: "h-2 rounded bg-slate-700 dark:bg-gray-100"
                }, void 0, !1, {
                  fileName: "app/routes/__layout/dashboard.tsx",
                  lineNumber: 102,
                  columnNumber: 13
                }, this),
                /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
                  className: "space-y-3",
                  children: [
                    /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
                      className: "grid grid-cols-3 gap-4",
                      children: [
                        /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
                          className: "col-span-2 h-2 rounded bg-gray-700 dark:bg-gray-100"
                        }, void 0, !1, {
                          fileName: "app/routes/__layout/dashboard.tsx",
                          lineNumber: 105,
                          columnNumber: 17
                        }, this),
                        /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
                          className: "col-span-1 h-2 rounded bg-gray-700 dark:bg-gray-100"
                        }, void 0, !1, {
                          fileName: "app/routes/__layout/dashboard.tsx",
                          lineNumber: 106,
                          columnNumber: 17
                        }, this)
                      ]
                    }, void 0, !0, {
                      fileName: "app/routes/__layout/dashboard.tsx",
                      lineNumber: 104,
                      columnNumber: 15
                    }, this),
                    /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
                      className: "h-2 rounded bg-gray-700 dark:bg-gray-100"
                    }, void 0, !1, {
                      fileName: "app/routes/__layout/dashboard.tsx",
                      lineNumber: 108,
                      columnNumber: 15
                    }, this)
                  ]
                }, void 0, !0, {
                  fileName: "app/routes/__layout/dashboard.tsx",
                  lineNumber: 103,
                  columnNumber: 13
                }, this)
              ]
            }, void 0, !0, {
              fileName: "app/routes/__layout/dashboard.tsx",
              lineNumber: 101,
              columnNumber: 11
            }, this)
          ]
        }, void 0, !0, {
          fileName: "app/routes/__layout/dashboard.tsx",
          lineNumber: 99,
          columnNumber: 9
        }, this)
      }, void 0, !1, {
        fileName: "app/routes/__layout/dashboard.tsx",
        lineNumber: 98,
        columnNumber: 7
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
        className: "mx-auto w-full max-w-sm rounded-md border border-gray-700 p-4 shadow dark:border-blue-300",
        children: /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
          className: "flex animate-pulse space-x-4",
          children: [
            /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
              className: "h-10 w-10 rounded-full bg-slate-700 dark:bg-gray-100"
            }, void 0, !1, {
              fileName: "app/routes/__layout/dashboard.tsx",
              lineNumber: 115,
              columnNumber: 11
            }, this),
            /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
              className: "flex-1 space-y-6 py-1",
              children: [
                /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
                  className: "h-2 rounded bg-slate-700 dark:bg-gray-100"
                }, void 0, !1, {
                  fileName: "app/routes/__layout/dashboard.tsx",
                  lineNumber: 117,
                  columnNumber: 13
                }, this),
                /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
                  className: "space-y-3",
                  children: [
                    /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
                      className: "grid grid-cols-3 gap-4",
                      children: [
                        /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
                          className: "col-span-2 h-2 rounded bg-gray-700 dark:bg-gray-100"
                        }, void 0, !1, {
                          fileName: "app/routes/__layout/dashboard.tsx",
                          lineNumber: 120,
                          columnNumber: 17
                        }, this),
                        /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
                          className: "col-span-1 h-2 rounded bg-gray-700 dark:bg-gray-100"
                        }, void 0, !1, {
                          fileName: "app/routes/__layout/dashboard.tsx",
                          lineNumber: 121,
                          columnNumber: 17
                        }, this)
                      ]
                    }, void 0, !0, {
                      fileName: "app/routes/__layout/dashboard.tsx",
                      lineNumber: 119,
                      columnNumber: 15
                    }, this),
                    /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
                      className: "h-2 rounded bg-gray-700 dark:bg-gray-100"
                    }, void 0, !1, {
                      fileName: "app/routes/__layout/dashboard.tsx",
                      lineNumber: 123,
                      columnNumber: 15
                    }, this)
                  ]
                }, void 0, !0, {
                  fileName: "app/routes/__layout/dashboard.tsx",
                  lineNumber: 118,
                  columnNumber: 13
                }, this)
              ]
            }, void 0, !0, {
              fileName: "app/routes/__layout/dashboard.tsx",
              lineNumber: 116,
              columnNumber: 11
            }, this)
          ]
        }, void 0, !0, {
          fileName: "app/routes/__layout/dashboard.tsx",
          lineNumber: 114,
          columnNumber: 9
        }, this)
      }, void 0, !1, {
        fileName: "app/routes/__layout/dashboard.tsx",
        lineNumber: 113,
        columnNumber: 7
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
        className: "mx-auto w-full max-w-sm rounded-md border border-gray-700 p-4 shadow dark:border-blue-300",
        children: /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
          className: "flex animate-pulse space-x-4",
          children: [
            /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
              className: "h-10 w-10 rounded-full bg-slate-700 dark:bg-gray-100"
            }, void 0, !1, {
              fileName: "app/routes/__layout/dashboard.tsx",
              lineNumber: 130,
              columnNumber: 11
            }, this),
            /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
              className: "flex-1 space-y-6 py-1",
              children: [
                /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
                  className: "h-2 rounded bg-slate-700 dark:bg-gray-100"
                }, void 0, !1, {
                  fileName: "app/routes/__layout/dashboard.tsx",
                  lineNumber: 132,
                  columnNumber: 13
                }, this),
                /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
                  className: "space-y-3",
                  children: [
                    /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
                      className: "grid grid-cols-3 gap-4",
                      children: [
                        /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
                          className: "col-span-2 h-2 rounded bg-gray-700 dark:bg-gray-100"
                        }, void 0, !1, {
                          fileName: "app/routes/__layout/dashboard.tsx",
                          lineNumber: 135,
                          columnNumber: 17
                        }, this),
                        /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
                          className: "col-span-1 h-2 rounded bg-gray-700 dark:bg-gray-100"
                        }, void 0, !1, {
                          fileName: "app/routes/__layout/dashboard.tsx",
                          lineNumber: 136,
                          columnNumber: 17
                        }, this)
                      ]
                    }, void 0, !0, {
                      fileName: "app/routes/__layout/dashboard.tsx",
                      lineNumber: 134,
                      columnNumber: 15
                    }, this),
                    /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
                      className: "h-2 rounded bg-gray-700 dark:bg-gray-100"
                    }, void 0, !1, {
                      fileName: "app/routes/__layout/dashboard.tsx",
                      lineNumber: 138,
                      columnNumber: 15
                    }, this)
                  ]
                }, void 0, !0, {
                  fileName: "app/routes/__layout/dashboard.tsx",
                  lineNumber: 133,
                  columnNumber: 13
                }, this)
              ]
            }, void 0, !0, {
              fileName: "app/routes/__layout/dashboard.tsx",
              lineNumber: 131,
              columnNumber: 11
            }, this)
          ]
        }, void 0, !0, {
          fileName: "app/routes/__layout/dashboard.tsx",
          lineNumber: 129,
          columnNumber: 9
        }, this)
      }, void 0, !1, {
        fileName: "app/routes/__layout/dashboard.tsx",
        lineNumber: 128,
        columnNumber: 7
      }, this)
    ]
  }, void 0, !0, {
    fileName: "app/routes/__layout/dashboard.tsx",
    lineNumber: 22,
    columnNumber: 5
  }, this);
}

// app/routes/__layout/nodes/new.tsx
var new_exports2 = {};
__export(new_exports2, {
  action: () => action,
  default: () => NewNode
});
var import_jsx_dev_runtime = __toESM(require_jsx_dev_runtime()), action = async ({ request }) => {
  let data = Object.fromEntries(await request.formData());
  console.log(data);
};
function NewNode() {
  let data = useTypedActionData();
  return /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(NewNodeForm, {
    data
  }, void 0, !1, {
    fileName: "app/routes/__layout/nodes/new.tsx",
    lineNumber: 12,
    columnNumber: 10
  }, this);
}

// app/routes/__layout/settings.tsx
var settings_exports = {};
__export(settings_exports, {
  default: () => Settings,
  loader: () => loader8
});
var import_jsx_dev_runtime = __toESM(require_jsx_dev_runtime()), loader8 = async ({ request, context }) => {
  let { authConfig, sessionConfig } = generateConfigs(context), user = await (await getAuthenticator(authConfig, sessionConfig)).isAuthenticated(request), { pathname } = new URL(request.url);
  return pathname !== "/" && !user ? redirect2("/auth/login") : null;
};
function Settings() {
  let subNavigation = [
    {
      label: "Account",
      description: "Ullamcorper id at suspendisse nec id volutpat vestibulum enim. Interdum blandit.",
      href: "/settings/accounts",
      icon: "heroicons:cog"
    },
    {
      label: "Notifications",
      description: "Enim, nullam mi vel et libero urna lectus enim. Et sed in maecenas tellus.",
      href: "#",
      icon: "heroicons:bell"
    },
    {
      label: "Security",
      description: "Semper accumsan massa vel volutpat massa. Non turpis ut nulla aliquet turpis.",
      href: "#",
      icon: "heroicons:key"
    },
    {
      label: "Appearance",
      description: "Magna nulla id sed ornare ipsum eget. Massa eget porttitor suscipit consequat.",
      href: "#",
      icon: "heroicons:photo"
    },
    {
      label: "Integrations",
      description: "Nisi, elit volutpat odio urna quis arcu faucibus dui. Mauris adipiscing pellentesque.",
      href: "#",
      icon: "heroicons:squares-plus"
    }
  ], { pathname } = useLocation();
  return /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
    className: "relative flex flex-1 xl:overflow-hidden",
    children: [
      /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("nav", {
        "aria-label": "Sections",
        className: "border-blue-gray-200 hidden w-96 flex-shrink-0 border-r bg-white dark:bg-slate-700 xl:flex xl:flex-col",
        children: [
          /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
            className: "border-blue-gray-200 flex h-16 flex-shrink-0 items-center border-b px-6",
            children: /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("p", {
              className: "text-blue-gray-900 text-lg font-medium",
              children: "Settings"
            }, void 0, !1, {
              fileName: "app/routes/__layout/settings.tsx",
              lineNumber: 68,
              columnNumber: 11
            }, this)
          }, void 0, !1, {
            fileName: "app/routes/__layout/settings.tsx",
            lineNumber: 67,
            columnNumber: 9
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
            className: "min-h-0 flex-1 overflow-y-auto",
            children: subNavigation.map((item) => /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("a", {
              href: item.href,
              className: clsx2(
                item.href === pathname ? "bg-blue-50 bg-opacity-50" : "hover:bg-blue-50 hover:bg-opacity-50",
                "border-blue-gray-200 flex border-b p-6"
              ),
              "aria-current": item.href === pathname ? "page" : void 0,
              children: [
                item.icon && /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(Icon, {
                  icon: item.icon,
                  className: "text-blue-gray-400 -mt-0.5 h-6 w-6 flex-shrink-0",
                  "aria-hidden": "true"
                }, void 0, !1, {
                  fileName: "app/routes/__layout/settings.tsx",
                  lineNumber: 82,
                  columnNumber: 17
                }, this),
                /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
                  className: "ml-3 text-sm",
                  children: [
                    /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("p", {
                      className: "text-blue-gray-900 font-medium",
                      children: item.label
                    }, void 0, !1, {
                      fileName: "app/routes/__layout/settings.tsx",
                      lineNumber: 89,
                      columnNumber: 17
                    }, this),
                    /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("p", {
                      className: "text-blue-gray-500 mt-1",
                      children: item.description
                    }, void 0, !1, {
                      fileName: "app/routes/__layout/settings.tsx",
                      lineNumber: 90,
                      columnNumber: 17
                    }, this)
                  ]
                }, void 0, !0, {
                  fileName: "app/routes/__layout/settings.tsx",
                  lineNumber: 88,
                  columnNumber: 15
                }, this)
              ]
            }, item.label, !0, {
              fileName: "app/routes/__layout/settings.tsx",
              lineNumber: 72,
              columnNumber: 13
            }, this))
          }, void 0, !1, {
            fileName: "app/routes/__layout/settings.tsx",
            lineNumber: 70,
            columnNumber: 9
          }, this)
        ]
      }, void 0, !0, {
        fileName: "app/routes/__layout/settings.tsx",
        lineNumber: 63,
        columnNumber: 7
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(Outlet, {}, void 0, !1, {
        fileName: "app/routes/__layout/settings.tsx",
        lineNumber: 98,
        columnNumber: 7
      }, this)
    ]
  }, void 0, !0, {
    fileName: "app/routes/__layout/settings.tsx",
    lineNumber: 61,
    columnNumber: 5
  }, this);
}

// app/routes/__layout/settings/variables.tsx
var variables_exports = {};
__export(variables_exports, {
  default: () => Variables
});
function Variables() {
}

// app/routes/__layout/settings/accounts.tsx
var accounts_exports = {};
__export(accounts_exports, {
  default: () => SettingsAccounts
});
var import_jsx_dev_runtime = __toESM(require_jsx_dev_runtime());
function SettingsAccounts() {
  return /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
    className: "flex-1 xl:overflow-y-auto",
    children: /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
      className: "mx-auto max-w-3xl py-10 px-4 sm:px-6 lg:py-12 lg:px-8",
      children: [
        /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("h1", {
          className: "text-blue-gray-900 text-3xl font-bold tracking-tight",
          children: "Account"
        }, void 0, !1, {
          fileName: "app/routes/__layout/settings/accounts.tsx",
          lineNumber: 5,
          columnNumber: 9
        }, this),
        /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("form", {
          className: "divide-y-blue-gray-200 mt-6 space-y-8 divide-y",
          children: [
            /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
              className: "grid grid-cols-1 gap-y-6 sm:grid-cols-6 sm:gap-x-6",
              children: [
                /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
                  className: "sm:col-span-6",
                  children: [
                    /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("h2", {
                      className: "text-blue-gray-900 text-xl font-medium",
                      children: "Profile"
                    }, void 0, !1, {
                      fileName: "app/routes/__layout/settings/accounts.tsx",
                      lineNumber: 10,
                      columnNumber: 15
                    }, this),
                    /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("p", {
                      className: "text-blue-gray-500 mt-1 text-sm",
                      children: "This information will be displayed publicly so be careful what you share."
                    }, void 0, !1, {
                      fileName: "app/routes/__layout/settings/accounts.tsx",
                      lineNumber: 11,
                      columnNumber: 15
                    }, this)
                  ]
                }, void 0, !0, {
                  fileName: "app/routes/__layout/settings/accounts.tsx",
                  lineNumber: 9,
                  columnNumber: 13
                }, this),
                /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
                  className: "sm:col-span-3",
                  children: [
                    /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("label", {
                      htmlFor: "first-name",
                      className: "text-blue-gray-900 block text-sm font-medium",
                      children: "First name"
                    }, void 0, !1, {
                      fileName: "app/routes/__layout/settings/accounts.tsx",
                      lineNumber: 17,
                      columnNumber: 15
                    }, this),
                    /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("input", {
                      type: "text",
                      name: "first-name",
                      id: "first-name",
                      autoComplete: "given-name",
                      className: "border-blue-gray-300 text-blue-gray-900 mt-1 block w-full rounded-md shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
                    }, void 0, !1, {
                      fileName: "app/routes/__layout/settings/accounts.tsx",
                      lineNumber: 20,
                      columnNumber: 15
                    }, this)
                  ]
                }, void 0, !0, {
                  fileName: "app/routes/__layout/settings/accounts.tsx",
                  lineNumber: 16,
                  columnNumber: 13
                }, this),
                /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
                  className: "sm:col-span-3",
                  children: [
                    /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("label", {
                      htmlFor: "last-name",
                      className: "text-blue-gray-900 block text-sm font-medium",
                      children: "Last name"
                    }, void 0, !1, {
                      fileName: "app/routes/__layout/settings/accounts.tsx",
                      lineNumber: 30,
                      columnNumber: 15
                    }, this),
                    /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("input", {
                      type: "text",
                      name: "last-name",
                      id: "last-name",
                      autoComplete: "family-name",
                      className: "border-blue-gray-300 text-blue-gray-900 mt-1 block w-full rounded-md shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
                    }, void 0, !1, {
                      fileName: "app/routes/__layout/settings/accounts.tsx",
                      lineNumber: 33,
                      columnNumber: 15
                    }, this)
                  ]
                }, void 0, !0, {
                  fileName: "app/routes/__layout/settings/accounts.tsx",
                  lineNumber: 29,
                  columnNumber: 13
                }, this),
                /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
                  className: "sm:col-span-6",
                  children: [
                    /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("label", {
                      htmlFor: "username",
                      className: "text-blue-gray-900 block text-sm font-medium",
                      children: "Username"
                    }, void 0, !1, {
                      fileName: "app/routes/__layout/settings/accounts.tsx",
                      lineNumber: 43,
                      columnNumber: 15
                    }, this),
                    /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
                      className: "mt-1 flex rounded-md shadow-sm",
                      children: [
                        /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("span", {
                          className: "border-blue-gray-300 bg-blue-gray-50 text-blue-gray-500 inline-flex items-center rounded-l-md border border-r-0 px-3 sm:text-sm",
                          children: "workcation.com/"
                        }, void 0, !1, {
                          fileName: "app/routes/__layout/settings/accounts.tsx",
                          lineNumber: 47,
                          columnNumber: 17
                        }, this),
                        /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("input", {
                          type: "text",
                          name: "username",
                          id: "username",
                          autoComplete: "username",
                          defaultValue: "lisamarie",
                          className: "border-blue-gray-300 text-blue-gray-900 block w-full min-w-0 flex-1 rounded-none rounded-r-md focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
                        }, void 0, !1, {
                          fileName: "app/routes/__layout/settings/accounts.tsx",
                          lineNumber: 50,
                          columnNumber: 17
                        }, this)
                      ]
                    }, void 0, !0, {
                      fileName: "app/routes/__layout/settings/accounts.tsx",
                      lineNumber: 46,
                      columnNumber: 15
                    }, this)
                  ]
                }, void 0, !0, {
                  fileName: "app/routes/__layout/settings/accounts.tsx",
                  lineNumber: 42,
                  columnNumber: 13
                }, this),
                /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
                  className: "sm:col-span-6",
                  children: [
                    /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("label", {
                      htmlFor: "photo",
                      className: "text-blue-gray-900 block text-sm font-medium",
                      children: "Photo"
                    }, void 0, !1, {
                      fileName: "app/routes/__layout/settings/accounts.tsx",
                      lineNumber: 62,
                      columnNumber: 15
                    }, this),
                    /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
                      className: "mt-1 flex items-center",
                      children: [
                        /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("img", {
                          className: "inline-block h-12 w-12 rounded-full",
                          src: "https://images.unsplash.com/photo-1550525811-e5869dd03032?ixlib=rb-1.2.1&auto=format&fit=facearea&facepad=2.5&w=256&h=256&q=80",
                          alt: ""
                        }, void 0, !1, {
                          fileName: "app/routes/__layout/settings/accounts.tsx",
                          lineNumber: 66,
                          columnNumber: 17
                        }, this),
                        /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
                          className: "ml-4 flex",
                          children: [
                            /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
                              className: "border-blue-gray-300 focus-within:ring-offset-blue-gray-50 hover:bg-blue-gray-50 relative flex cursor-pointer items-center rounded-md border bg-white py-2 px-3 shadow-sm focus-within:outline-none focus-within:ring-2 focus-within:ring-blue-500 focus-within:ring-offset-2",
                              children: [
                                /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("label", {
                                  htmlFor: "user-photo",
                                  className: "text-blue-gray-900 pointer-events-none relative text-sm font-medium",
                                  children: [
                                    /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("span", {
                                      children: "Change"
                                    }, void 0, !1, {
                                      fileName: "app/routes/__layout/settings/accounts.tsx",
                                      lineNumber: 77,
                                      columnNumber: 23
                                    }, this),
                                    /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("span", {
                                      className: "sr-only",
                                      children: " user photo"
                                    }, void 0, !1, {
                                      fileName: "app/routes/__layout/settings/accounts.tsx",
                                      lineNumber: 78,
                                      columnNumber: 23
                                    }, this)
                                  ]
                                }, void 0, !0, {
                                  fileName: "app/routes/__layout/settings/accounts.tsx",
                                  lineNumber: 73,
                                  columnNumber: 21
                                }, this),
                                /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("input", {
                                  id: "user-photo",
                                  name: "user-photo",
                                  type: "file",
                                  className: "absolute inset-0 h-full w-full cursor-pointer rounded-md border-gray-300 opacity-0"
                                }, void 0, !1, {
                                  fileName: "app/routes/__layout/settings/accounts.tsx",
                                  lineNumber: 80,
                                  columnNumber: 21
                                }, this)
                              ]
                            }, void 0, !0, {
                              fileName: "app/routes/__layout/settings/accounts.tsx",
                              lineNumber: 72,
                              columnNumber: 19
                            }, this),
                            /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("button", {
                              type: "button",
                              className: "text-blue-gray-900 hover:text-blue-gray-700 focus:border-blue-gray-300 focus:ring-offset-blue-gray-50 ml-3 rounded-md border border-transparent bg-transparent py-2 px-3 text-sm font-medium focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2",
                              children: "Remove"
                            }, void 0, !1, {
                              fileName: "app/routes/__layout/settings/accounts.tsx",
                              lineNumber: 87,
                              columnNumber: 19
                            }, this)
                          ]
                        }, void 0, !0, {
                          fileName: "app/routes/__layout/settings/accounts.tsx",
                          lineNumber: 71,
                          columnNumber: 17
                        }, this)
                      ]
                    }, void 0, !0, {
                      fileName: "app/routes/__layout/settings/accounts.tsx",
                      lineNumber: 65,
                      columnNumber: 15
                    }, this)
                  ]
                }, void 0, !0, {
                  fileName: "app/routes/__layout/settings/accounts.tsx",
                  lineNumber: 61,
                  columnNumber: 13
                }, this),
                /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
                  className: "sm:col-span-6",
                  children: [
                    /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("label", {
                      htmlFor: "description",
                      className: "text-blue-gray-900 block text-sm font-medium",
                      children: "Description"
                    }, void 0, !1, {
                      fileName: "app/routes/__layout/settings/accounts.tsx",
                      lineNumber: 98,
                      columnNumber: 15
                    }, this),
                    /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
                      className: "mt-1",
                      children: /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("textarea", {
                        id: "description",
                        name: "description",
                        rows: 4,
                        className: "border-blue-gray-300 block w-full rounded-md shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm",
                        defaultValue: ""
                      }, void 0, !1, {
                        fileName: "app/routes/__layout/settings/accounts.tsx",
                        lineNumber: 102,
                        columnNumber: 17
                      }, this)
                    }, void 0, !1, {
                      fileName: "app/routes/__layout/settings/accounts.tsx",
                      lineNumber: 101,
                      columnNumber: 15
                    }, this),
                    /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("p", {
                      className: "text-blue-gray-500 mt-3 text-sm",
                      children: "Brief description for your profile. URLs are hyperlinked."
                    }, void 0, !1, {
                      fileName: "app/routes/__layout/settings/accounts.tsx",
                      lineNumber: 110,
                      columnNumber: 15
                    }, this)
                  ]
                }, void 0, !0, {
                  fileName: "app/routes/__layout/settings/accounts.tsx",
                  lineNumber: 97,
                  columnNumber: 13
                }, this),
                /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
                  className: "sm:col-span-6",
                  children: [
                    /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("label", {
                      htmlFor: "url",
                      className: "text-blue-gray-900 block text-sm font-medium",
                      children: "URL"
                    }, void 0, !1, {
                      fileName: "app/routes/__layout/settings/accounts.tsx",
                      lineNumber: 116,
                      columnNumber: 15
                    }, this),
                    /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("input", {
                      type: "text",
                      name: "url",
                      id: "url",
                      className: "border-blue-gray-300 text-blue-gray-900 mt-1 block w-full rounded-md shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
                    }, void 0, !1, {
                      fileName: "app/routes/__layout/settings/accounts.tsx",
                      lineNumber: 119,
                      columnNumber: 15
                    }, this)
                  ]
                }, void 0, !0, {
                  fileName: "app/routes/__layout/settings/accounts.tsx",
                  lineNumber: 115,
                  columnNumber: 13
                }, this)
              ]
            }, void 0, !0, {
              fileName: "app/routes/__layout/settings/accounts.tsx",
              lineNumber: 8,
              columnNumber: 11
            }, this),
            /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
              className: "grid grid-cols-1 gap-y-6 pt-8 sm:grid-cols-6 sm:gap-x-6",
              children: [
                /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
                  className: "sm:col-span-6",
                  children: [
                    /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("h2", {
                      className: "text-blue-gray-900 text-xl font-medium",
                      children: "Personal Information"
                    }, void 0, !1, {
                      fileName: "app/routes/__layout/settings/accounts.tsx",
                      lineNumber: 130,
                      columnNumber: 15
                    }, this),
                    /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("p", {
                      className: "text-blue-gray-500 mt-1 text-sm",
                      children: "This information will be displayed publicly so be careful what you share."
                    }, void 0, !1, {
                      fileName: "app/routes/__layout/settings/accounts.tsx",
                      lineNumber: 131,
                      columnNumber: 15
                    }, this)
                  ]
                }, void 0, !0, {
                  fileName: "app/routes/__layout/settings/accounts.tsx",
                  lineNumber: 129,
                  columnNumber: 13
                }, this),
                /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
                  className: "sm:col-span-3",
                  children: [
                    /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("label", {
                      htmlFor: "email-address",
                      className: "text-blue-gray-900 block text-sm font-medium",
                      children: "Email address"
                    }, void 0, !1, {
                      fileName: "app/routes/__layout/settings/accounts.tsx",
                      lineNumber: 137,
                      columnNumber: 15
                    }, this),
                    /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("input", {
                      type: "text",
                      name: "email-address",
                      id: "email-address",
                      autoComplete: "email",
                      className: "border-blue-gray-300 text-blue-gray-900 mt-1 block w-full rounded-md shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
                    }, void 0, !1, {
                      fileName: "app/routes/__layout/settings/accounts.tsx",
                      lineNumber: 140,
                      columnNumber: 15
                    }, this)
                  ]
                }, void 0, !0, {
                  fileName: "app/routes/__layout/settings/accounts.tsx",
                  lineNumber: 136,
                  columnNumber: 13
                }, this),
                /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
                  className: "sm:col-span-3",
                  children: [
                    /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("label", {
                      htmlFor: "phone-number",
                      className: "text-blue-gray-900 block text-sm font-medium",
                      children: "Phone number"
                    }, void 0, !1, {
                      fileName: "app/routes/__layout/settings/accounts.tsx",
                      lineNumber: 150,
                      columnNumber: 15
                    }, this),
                    /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("input", {
                      type: "text",
                      name: "phone-number",
                      id: "phone-number",
                      autoComplete: "tel",
                      className: "border-blue-gray-300 text-blue-gray-900 mt-1 block w-full rounded-md shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
                    }, void 0, !1, {
                      fileName: "app/routes/__layout/settings/accounts.tsx",
                      lineNumber: 153,
                      columnNumber: 15
                    }, this)
                  ]
                }, void 0, !0, {
                  fileName: "app/routes/__layout/settings/accounts.tsx",
                  lineNumber: 149,
                  columnNumber: 13
                }, this),
                /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
                  className: "sm:col-span-3",
                  children: [
                    /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("label", {
                      htmlFor: "country",
                      className: "text-blue-gray-900 block text-sm font-medium",
                      children: "Country"
                    }, void 0, !1, {
                      fileName: "app/routes/__layout/settings/accounts.tsx",
                      lineNumber: 163,
                      columnNumber: 15
                    }, this),
                    /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("select", {
                      id: "country",
                      name: "country",
                      autoComplete: "country-name",
                      className: "border-blue-gray-300 text-blue-gray-900 mt-1 block w-full rounded-md shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm",
                      children: [
                        /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("option", {}, void 0, !1, {
                          fileName: "app/routes/__layout/settings/accounts.tsx",
                          lineNumber: 172,
                          columnNumber: 17
                        }, this),
                        /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("option", {
                          children: "United States"
                        }, void 0, !1, {
                          fileName: "app/routes/__layout/settings/accounts.tsx",
                          lineNumber: 173,
                          columnNumber: 17
                        }, this),
                        /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("option", {
                          children: "Canada"
                        }, void 0, !1, {
                          fileName: "app/routes/__layout/settings/accounts.tsx",
                          lineNumber: 174,
                          columnNumber: 17
                        }, this),
                        /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("option", {
                          children: "Mexico"
                        }, void 0, !1, {
                          fileName: "app/routes/__layout/settings/accounts.tsx",
                          lineNumber: 175,
                          columnNumber: 17
                        }, this)
                      ]
                    }, void 0, !0, {
                      fileName: "app/routes/__layout/settings/accounts.tsx",
                      lineNumber: 166,
                      columnNumber: 15
                    }, this)
                  ]
                }, void 0, !0, {
                  fileName: "app/routes/__layout/settings/accounts.tsx",
                  lineNumber: 162,
                  columnNumber: 13
                }, this),
                /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
                  className: "sm:col-span-3",
                  children: [
                    /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("label", {
                      htmlFor: "language",
                      className: "text-blue-gray-900 block text-sm font-medium",
                      children: "Language"
                    }, void 0, !1, {
                      fileName: "app/routes/__layout/settings/accounts.tsx",
                      lineNumber: 180,
                      columnNumber: 15
                    }, this),
                    /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("input", {
                      type: "text",
                      name: "language",
                      id: "language",
                      className: "border-blue-gray-300 text-blue-gray-900 mt-1 block w-full rounded-md shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
                    }, void 0, !1, {
                      fileName: "app/routes/__layout/settings/accounts.tsx",
                      lineNumber: 183,
                      columnNumber: 15
                    }, this)
                  ]
                }, void 0, !0, {
                  fileName: "app/routes/__layout/settings/accounts.tsx",
                  lineNumber: 179,
                  columnNumber: 13
                }, this),
                /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("p", {
                  className: "text-blue-gray-500 text-sm sm:col-span-6",
                  children: [
                    "This account was created on ",
                    /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("time", {
                      dateTime: "2017-01-05T20:35:40",
                      children: "January 5, 2017, 8:35:40 PM"
                    }, void 0, !1, {
                      fileName: "app/routes/__layout/settings/accounts.tsx",
                      lineNumber: 192,
                      columnNumber: 43
                    }, this),
                    "."
                  ]
                }, void 0, !0, {
                  fileName: "app/routes/__layout/settings/accounts.tsx",
                  lineNumber: 191,
                  columnNumber: 13
                }, this)
              ]
            }, void 0, !0, {
              fileName: "app/routes/__layout/settings/accounts.tsx",
              lineNumber: 128,
              columnNumber: 11
            }, this),
            /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
              className: "flex justify-end pt-8",
              children: [
                /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("button", {
                  type: "button",
                  className: "text-blue-gray-900 hover:bg-blue-gray-50 rounded-md border border-gray-300 bg-white py-2 px-4 text-sm font-medium shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2",
                  children: "Cancel"
                }, void 0, !1, {
                  fileName: "app/routes/__layout/settings/accounts.tsx",
                  lineNumber: 197,
                  columnNumber: 13
                }, this),
                /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("button", {
                  type: "submit",
                  className: "ml-3 inline-flex justify-center rounded-md border border-transparent bg-blue-600 py-2 px-4 text-sm font-medium text-white shadow-sm hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2",
                  children: "Save"
                }, void 0, !1, {
                  fileName: "app/routes/__layout/settings/accounts.tsx",
                  lineNumber: 203,
                  columnNumber: 13
                }, this)
              ]
            }, void 0, !0, {
              fileName: "app/routes/__layout/settings/accounts.tsx",
              lineNumber: 196,
              columnNumber: 11
            }, this)
          ]
        }, void 0, !0, {
          fileName: "app/routes/__layout/settings/accounts.tsx",
          lineNumber: 7,
          columnNumber: 9
        }, this)
      ]
    }, void 0, !0, {
      fileName: "app/routes/__layout/settings/accounts.tsx",
      lineNumber: 4,
      columnNumber: 7
    }, this)
  }, void 0, !1, {
    fileName: "app/routes/__layout/settings/accounts.tsx",
    lineNumber: 3,
    columnNumber: 5
  }, this);
}

// app/routes/__layout/profile.tsx
var profile_exports = {};
__export(profile_exports, {
  default: () => ProfileView,
  loader: () => loader9
});
var import_jsx_dev_runtime = __toESM(require_jsx_dev_runtime()), loader9 = async ({ request, context }) => {
  let { authConfig, sessionConfig } = generateConfigs(context);
  return await (await getAuthenticator(authConfig, sessionConfig)).isAuthenticated(request, {
    failureRedirect: "/auth/login"
  }), null;
};
function ProfileView() {
  return /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(import_jsx_dev_runtime.Fragment, {
    children: /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("h1", {
      children: "Profile"
    }, void 0, !1, {
      fileName: "app/routes/__layout/profile.tsx",
      lineNumber: 18,
      columnNumber: 7
    }, this)
  }, void 0, !1, {
    fileName: "app/routes/__layout/profile.tsx",
    lineNumber: 17,
    columnNumber: 5
  }, this);
}

// app/routes/__layout/reports.tsx
var reports_exports = {};
__export(reports_exports, {
  default: () => Reports,
  loader: () => loader10
});
var import_jsx_dev_runtime = __toESM(require_jsx_dev_runtime()), loader10 = async ({ request, context }) => {
  let { authConfig, sessionConfig } = generateConfigs(context), user = await (await getAuthenticator(authConfig, sessionConfig)).isAuthenticated(request), { pathname } = new URL(request.url);
  return pathname !== "/" && !user ? redirect2("/auth/login") : null;
};
function Reports() {
  return /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
    children: [
      /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("h1", {
        children: "Welcome to Remix"
      }, void 0, !1, {
        fileName: "app/routes/__layout/reports.tsx",
        lineNumber: 23,
        columnNumber: 7
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("ul", {
        children: [
          /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("li", {
            children: /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("a", {
              target: "_blank",
              href: "https://remix.run/tutorials/blog",
              rel: "noreferrer",
              children: "15m Quickstart Blog Tutorial"
            }, void 0, !1, {
              fileName: "app/routes/__layout/reports.tsx",
              lineNumber: 26,
              columnNumber: 11
            }, this)
          }, void 0, !1, {
            fileName: "app/routes/__layout/reports.tsx",
            lineNumber: 25,
            columnNumber: 9
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("li", {
            children: /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("a", {
              target: "_blank",
              href: "https://remix.run/tutorials/jokes",
              rel: "noreferrer",
              children: "Deep Dive Jokes App Tutorial"
            }, void 0, !1, {
              fileName: "app/routes/__layout/reports.tsx",
              lineNumber: 31,
              columnNumber: 11
            }, this)
          }, void 0, !1, {
            fileName: "app/routes/__layout/reports.tsx",
            lineNumber: 30,
            columnNumber: 9
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("li", {
            children: /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("a", {
              target: "_blank",
              href: "https://remix.run/docs",
              rel: "noreferrer",
              children: "Remix Docs"
            }, void 0, !1, {
              fileName: "app/routes/__layout/reports.tsx",
              lineNumber: 36,
              columnNumber: 11
            }, this)
          }, void 0, !1, {
            fileName: "app/routes/__layout/reports.tsx",
            lineNumber: 35,
            columnNumber: 9
          }, this)
        ]
      }, void 0, !0, {
        fileName: "app/routes/__layout/reports.tsx",
        lineNumber: 24,
        columnNumber: 7
      }, this)
    ]
  }, void 0, !0, {
    fileName: "app/routes/__layout/reports.tsx",
    lineNumber: 22,
    columnNumber: 5
  }, this);
}

// app/routes/__layout/index.tsx
var layout_exports2 = {};
__export(layout_exports2, {
  default: () => Index
});
var import_jsx_dev_runtime = __toESM(require_jsx_dev_runtime());
function Index() {
  return /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
    children: [
      /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(Hero$1, {
        style: {
          backgroundImage: "url(https://api.lorem.space/image/drink?w=1000&h=800)"
        },
        children: [
          /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(Hero$1.Overlay, {}, void 0, !1, {
            fileName: "app/routes/__layout/index.tsx",
            lineNumber: 11,
            columnNumber: 9
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(Hero$1.Content, {
            className: "text-center",
            children: /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
              className: "max-w-md",
              children: /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("p", {
                className: "py-6",
                children: "Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Vestibulum tortor quam, feugiat vitae, ultricies eget, tempor sit amet, ante. Donec eu libero sit amet quam egestas semper. Aenean ultricies mi vitae est. Mauris placerat eleifend leo."
              }, void 0, !1, {
                fileName: "app/routes/__layout/index.tsx",
                lineNumber: 14,
                columnNumber: 13
              }, this)
            }, void 0, !1, {
              fileName: "app/routes/__layout/index.tsx",
              lineNumber: 13,
              columnNumber: 11
            }, this)
          }, void 0, !1, {
            fileName: "app/routes/__layout/index.tsx",
            lineNumber: 12,
            columnNumber: 9
          }, this)
        ]
      }, void 0, !0, {
        fileName: "app/routes/__layout/index.tsx",
        lineNumber: 6,
        columnNumber: 7
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(Divider, {}, void 0, !1, {
        fileName: "app/routes/__layout/index.tsx",
        lineNumber: 22,
        columnNumber: 7
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("p", {
        children: "Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Vestibulum tortor quam, feugiat vitae, ultricies eget, tempor sit amet, ante. Donec eu libero sit amet quam egestas semper. Aenean ultricies mi vitae est. Mauris placerat eleifend leo. Quisque sit amet est et sapien ullamcorper pharetra. Vestibulum erat wisi, condimentum sed, commodo vitae, ornare sit amet, wisi. Aenean fermentum, elit eget tincidunt condimentum, eros ipsum rutrum orci, sagittis tempus lacus enim ac dui. Donec non enim in turpis pulvinar facilisis. Ut felis. Praesent dapibus, neque id cursus faucibus, tortor neque egestas augue, eu vulputate magna eros eu erat. Aliquam erat volutpat. Nam dui mi, tincidunt quis, accumsan porttitor, facilisis luctus, metus"
      }, void 0, !1, {
        fileName: "app/routes/__layout/index.tsx",
        lineNumber: 23,
        columnNumber: 7
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(Divider, {}, void 0, !1, {
        fileName: "app/routes/__layout/index.tsx",
        lineNumber: 33,
        columnNumber: 7
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("dl", {
        children: [
          /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("dt", {
            children: "Definition list"
          }, void 0, !1, {
            fileName: "app/routes/__layout/index.tsx",
            lineNumber: 35,
            columnNumber: 9
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("dd", {
            children: "Consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat."
          }, void 0, !1, {
            fileName: "app/routes/__layout/index.tsx",
            lineNumber: 36,
            columnNumber: 9
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("dt", {
            children: "Lorem ipsum dolor sit amet"
          }, void 0, !1, {
            fileName: "app/routes/__layout/index.tsx",
            lineNumber: 40,
            columnNumber: 9
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("dd", {
            children: "Consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat."
          }, void 0, !1, {
            fileName: "app/routes/__layout/index.tsx",
            lineNumber: 41,
            columnNumber: 9
          }, this)
        ]
      }, void 0, !0, {
        fileName: "app/routes/__layout/index.tsx",
        lineNumber: 34,
        columnNumber: 7
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(Divider, {}, void 0, !1, {
        fileName: "app/routes/__layout/index.tsx",
        lineNumber: 46,
        columnNumber: 7
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
        children: [
          /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("h1", {
            children: "HTML Ipsum Presents"
          }, void 0, !1, {
            fileName: "app/routes/__layout/index.tsx",
            lineNumber: 48,
            columnNumber: 9
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("p", {
            children: [
              /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("strong", {
                children: "Pellentesque habitant morbi tristique"
              }, void 0, !1, {
                fileName: "app/routes/__layout/index.tsx",
                lineNumber: 51,
                columnNumber: 11
              }, this),
              " senectus et netus et malesuada fames ac turpis egestas. Vestibulum tortor quam, feugiat vitae, ultricies eget, tempor sit amet, ante. Donec eu libero sit amet quam egestas semper. ",
              /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("em", {
                children: "Aenean ultricies mi vitae est."
              }, void 0, !1, {
                fileName: "app/routes/__layout/index.tsx",
                lineNumber: 53,
                columnNumber: 27
              }, this),
              " Mauris placerat eleifend leo. Quisque sit amet est et sapien ullamcorper pharetra. Vestibulum erat wisi, condimentum sed, ",
              /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("code", {
                children: "commodo vitae"
              }, void 0, !1, {
                fileName: "app/routes/__layout/index.tsx",
                lineNumber: 54,
                columnNumber: 79
              }, this),
              ", ornare sit amet, wisi. Aenean fermentum, elit eget tincidunt condimentum, eros ipsum rutrum orci, sagittis tempus lacus enim ac dui. ",
              /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("a", {
                href: "~/routes/index#",
                children: "Donec non enim"
              }, void 0, !1, {
                fileName: "app/routes/__layout/index.tsx",
                lineNumber: 56,
                columnNumber: 24
              }, this),
              " in turpis pulvinar facilisis. Ut felis."
            ]
          }, void 0, !0, {
            fileName: "app/routes/__layout/index.tsx",
            lineNumber: 50,
            columnNumber: 9
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("h2", {
            children: "Header Level 2"
          }, void 0, !1, {
            fileName: "app/routes/__layout/index.tsx",
            lineNumber: 59,
            columnNumber: 9
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("ol", {
            children: [
              /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("li", {
                children: "Lorem ipsum dolor sit amet, consectetuer adipiscing elit."
              }, void 0, !1, {
                fileName: "app/routes/__layout/index.tsx",
                lineNumber: 62,
                columnNumber: 11
              }, this),
              /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("li", {
                children: "Aliquam tincidunt mauris eu risus."
              }, void 0, !1, {
                fileName: "app/routes/__layout/index.tsx",
                lineNumber: 63,
                columnNumber: 11
              }, this)
            ]
          }, void 0, !0, {
            fileName: "app/routes/__layout/index.tsx",
            lineNumber: 61,
            columnNumber: 9
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("blockquote", {
            children: /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("p", {
              children: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus magna. Cras in mi at felis aliquet congue. Ut a est eget ligula molestie gravida. Curabitur massa. Donec eleifend, libero at sagittis mollis, tellus est malesuada tellus, at luctus turpis elit sit amet quam. Vivamus pretium ornare est."
            }, void 0, !1, {
              fileName: "app/routes/__layout/index.tsx",
              lineNumber: 67,
              columnNumber: 11
            }, this)
          }, void 0, !1, {
            fileName: "app/routes/__layout/index.tsx",
            lineNumber: 66,
            columnNumber: 9
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("h3", {
            children: "Header Level 3"
          }, void 0, !1, {
            fileName: "app/routes/__layout/index.tsx",
            lineNumber: 74,
            columnNumber: 9
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("ul", {
            children: [
              /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("li", {
                children: "Lorem ipsum dolor sit amet, consectetuer adipiscing elit."
              }, void 0, !1, {
                fileName: "app/routes/__layout/index.tsx",
                lineNumber: 77,
                columnNumber: 11
              }, this),
              /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("li", {
                children: "Aliquam tincidunt mauris eu risus."
              }, void 0, !1, {
                fileName: "app/routes/__layout/index.tsx",
                lineNumber: 78,
                columnNumber: 11
              }, this)
            ]
          }, void 0, !0, {
            fileName: "app/routes/__layout/index.tsx",
            lineNumber: 76,
            columnNumber: 9
          }, this)
        ]
      }, void 0, !0, {
        fileName: "app/routes/__layout/index.tsx",
        lineNumber: 47,
        columnNumber: 7
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("p", {
        children: "Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Vestibulum tortor quam, feugiat vitae, ultricies eget, tempor sit amet, ante. Donec eu libero sit amet quam egestas semper. Aenean ultricies mi vitae est. Mauris placerat eleifend leo. Quisque sit amet est et sapien ullamcorper pharetra. Vestibulum erat wisi, condimentum sed, commodo vitae, ornare sit amet, wisi. Aenean fermentum, elit eget tincidunt condimentum, eros ipsum rutrum orci, sagittis tempus lacus enim ac dui. Donec non enim in turpis pulvinar facilisis. Ut felis. Praesent dapibus, neque id cursus faucibus, tortor neque egestas augue, eu vulputate magna eros eu erat. Aliquam erat volutpat. Nam dui mi, tincidunt quis, accumsan porttitor, facilisis luctus, metus"
      }, void 0, !1, {
        fileName: "app/routes/__layout/index.tsx",
        lineNumber: 81,
        columnNumber: 7
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(Divider, {}, void 0, !1, {
        fileName: "app/routes/__layout/index.tsx",
        lineNumber: 91,
        columnNumber: 7
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("dl", {
        children: [
          /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("dt", {
            children: "Definition list"
          }, void 0, !1, {
            fileName: "app/routes/__layout/index.tsx",
            lineNumber: 93,
            columnNumber: 9
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("dd", {
            children: "Consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat."
          }, void 0, !1, {
            fileName: "app/routes/__layout/index.tsx",
            lineNumber: 94,
            columnNumber: 9
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("dt", {
            children: "Lorem ipsum dolor sit amet"
          }, void 0, !1, {
            fileName: "app/routes/__layout/index.tsx",
            lineNumber: 98,
            columnNumber: 9
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("dd", {
            children: "Consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat."
          }, void 0, !1, {
            fileName: "app/routes/__layout/index.tsx",
            lineNumber: 99,
            columnNumber: 9
          }, this)
        ]
      }, void 0, !0, {
        fileName: "app/routes/__layout/index.tsx",
        lineNumber: 92,
        columnNumber: 7
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(Divider, {}, void 0, !1, {
        fileName: "app/routes/__layout/index.tsx",
        lineNumber: 104,
        columnNumber: 7
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
        children: [
          /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("h1", {
            children: "HTML Ipsum Presents"
          }, void 0, !1, {
            fileName: "app/routes/__layout/index.tsx",
            lineNumber: 106,
            columnNumber: 9
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("p", {
            children: [
              /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("strong", {
                children: "Pellentesque habitant morbi tristique"
              }, void 0, !1, {
                fileName: "app/routes/__layout/index.tsx",
                lineNumber: 109,
                columnNumber: 11
              }, this),
              " senectus et netus et malesuada fames ac turpis egestas. Vestibulum tortor quam, feugiat vitae, ultricies eget, tempor sit amet, ante. Donec eu libero sit amet quam egestas semper. ",
              /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("em", {
                children: "Aenean ultricies mi vitae est."
              }, void 0, !1, {
                fileName: "app/routes/__layout/index.tsx",
                lineNumber: 111,
                columnNumber: 27
              }, this),
              " Mauris placerat eleifend leo. Quisque sit amet est et sapien ullamcorper pharetra. Vestibulum erat wisi, condimentum sed, ",
              /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("code", {
                children: "commodo vitae"
              }, void 0, !1, {
                fileName: "app/routes/__layout/index.tsx",
                lineNumber: 112,
                columnNumber: 79
              }, this),
              ", ornare sit amet, wisi. Aenean fermentum, elit eget tincidunt condimentum, eros ipsum rutrum orci, sagittis tempus lacus enim ac dui. ",
              /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("a", {
                href: "~/routes/index#",
                children: "Donec non enim"
              }, void 0, !1, {
                fileName: "app/routes/__layout/index.tsx",
                lineNumber: 114,
                columnNumber: 24
              }, this),
              " in turpis pulvinar facilisis. Ut felis."
            ]
          }, void 0, !0, {
            fileName: "app/routes/__layout/index.tsx",
            lineNumber: 108,
            columnNumber: 9
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("h2", {
            children: "Header Level 2"
          }, void 0, !1, {
            fileName: "app/routes/__layout/index.tsx",
            lineNumber: 117,
            columnNumber: 9
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("ol", {
            children: [
              /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("li", {
                children: "Lorem ipsum dolor sit amet, consectetuer adipiscing elit."
              }, void 0, !1, {
                fileName: "app/routes/__layout/index.tsx",
                lineNumber: 120,
                columnNumber: 11
              }, this),
              /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("li", {
                children: "Aliquam tincidunt mauris eu risus."
              }, void 0, !1, {
                fileName: "app/routes/__layout/index.tsx",
                lineNumber: 121,
                columnNumber: 11
              }, this)
            ]
          }, void 0, !0, {
            fileName: "app/routes/__layout/index.tsx",
            lineNumber: 119,
            columnNumber: 9
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("blockquote", {
            children: /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("p", {
              children: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus magna. Cras in mi at felis aliquet congue. Ut a est eget ligula molestie gravida. Curabitur massa. Donec eleifend, libero at sagittis mollis, tellus est malesuada tellus, at luctus turpis elit sit amet quam. Vivamus pretium ornare est."
            }, void 0, !1, {
              fileName: "app/routes/__layout/index.tsx",
              lineNumber: 125,
              columnNumber: 11
            }, this)
          }, void 0, !1, {
            fileName: "app/routes/__layout/index.tsx",
            lineNumber: 124,
            columnNumber: 9
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("h3", {
            children: "Header Level 3"
          }, void 0, !1, {
            fileName: "app/routes/__layout/index.tsx",
            lineNumber: 132,
            columnNumber: 9
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("ul", {
            children: [
              /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("li", {
                children: "Lorem ipsum dolor sit amet, consectetuer adipiscing elit."
              }, void 0, !1, {
                fileName: "app/routes/__layout/index.tsx",
                lineNumber: 135,
                columnNumber: 11
              }, this),
              /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("li", {
                children: "Aliquam tincidunt mauris eu risus."
              }, void 0, !1, {
                fileName: "app/routes/__layout/index.tsx",
                lineNumber: 136,
                columnNumber: 11
              }, this)
            ]
          }, void 0, !0, {
            fileName: "app/routes/__layout/index.tsx",
            lineNumber: 134,
            columnNumber: 9
          }, this)
        ]
      }, void 0, !0, {
        fileName: "app/routes/__layout/index.tsx",
        lineNumber: 105,
        columnNumber: 7
      }, this)
    ]
  }, void 0, !0, {
    fileName: "app/routes/__layout/index.tsx",
    lineNumber: 5,
    columnNumber: 5
  }, this);
}

// app/routes/auth.tsx
var auth_exports = {};
__export(auth_exports, {
  action: () => action2,
  default: () => AuthLayout
});
var import_jsx_dev_runtime = __toESM(require_jsx_dev_runtime()), action2 = async ({ request, context }) => {
  let { authConfig, sessionConfig } = generateConfigs(context);
  return (await getAuthenticator(authConfig, sessionConfig)).authenticate("auth0", request);
};
function AuthLayout() {
  return /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(import_jsx_dev_runtime.Fragment, {
    children: /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
      className: "flex min-h-full flex-col justify-center py-12 sm:px-6 lg:px-8",
      children: /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(Outlet, {}, void 0, !1, {
        fileName: "app/routes/auth.tsx",
        lineNumber: 17,
        columnNumber: 9
      }, this)
    }, void 0, !1, {
      fileName: "app/routes/auth.tsx",
      lineNumber: 16,
      columnNumber: 7
    }, this)
  }, void 0, !1, {
    fileName: "app/routes/auth.tsx",
    lineNumber: 15,
    columnNumber: 5
  }, this);
}

// app/routes/auth/callback.tsx
var callback_exports = {};
__export(callback_exports, {
  loader: () => loader11
});
var loader11 = async ({ request, context }) => {
  let { authConfig, sessionConfig } = generateConfigs(context);
  return (await getAuthenticator(authConfig, sessionConfig)).authenticate("auth0", request, {
    successRedirect: "/dashboard",
    failureRedirect: "/auth/login"
  });
};

// app/routes/auth/logout.tsx
var logout_exports = {};
__export(logout_exports, {
  loader: () => loader12
});
var loader12 = async ({ request, context }) => {
  let { authConfig, sessionConfig, baseURL } = generateConfigs(context);
  return (await getAuthenticator(authConfig, sessionConfig)).logout(request, {
    redirectTo: `https://${authConfig.domain}/logout?client_id=${authConfig.clientID}&returnTo=${baseURL}`
  });
};

// app/routes/auth/login.tsx
var login_exports = {};
__export(login_exports, {
  default: () => Login,
  loader: () => loader13
});
var import_jsx_dev_runtime = __toESM(require_jsx_dev_runtime()), loader13 = async ({ request, context }) => {
  let { authConfig, sessionConfig } = generateConfigs(context);
  return await (await getAuthenticator(authConfig, sessionConfig)).isAuthenticated(request, {
    successRedirect: "/dashboard"
  }), null;
};
function Login() {
  return /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(import_jsx_dev_runtime.Fragment, {
    children: [
      /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
        className: "justify-center place-items-center sm:mx-auto sm:w-full sm:max-w-md",
        children: [
          /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
            className: "flex justify-center",
            children: /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(Logo, {}, void 0, !1, {
              fileName: "app/routes/auth/login.tsx",
              lineNumber: 23,
              columnNumber: 11
            }, this)
          }, void 0, !1, {
            fileName: "app/routes/auth/login.tsx",
            lineNumber: 22,
            columnNumber: 9
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(Divider, {}, void 0, !1, {
            fileName: "app/routes/auth/login.tsx",
            lineNumber: 25,
            columnNumber: 9
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("h2", {
            className: "mt-6 text-center text-3xl font-bold tracking-tight",
            children: "Sign in to your account"
          }, void 0, !1, {
            fileName: "app/routes/auth/login.tsx",
            lineNumber: 26,
            columnNumber: 9
          }, this)
        ]
      }, void 0, !0, {
        fileName: "app/routes/auth/login.tsx",
        lineNumber: 21,
        columnNumber: 7
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
        className: "mt-8 sm:mx-auto sm:w-full sm:max-w-md",
        children: /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)("div", {
          className: "py-8 px-4 shadow sm:rounded-lg sm:px-10",
          children: /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(Form, {
            className: "space-y-6",
            action: "/auth",
            method: "post",
            children: /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(Button, {
              type: "submit",
              variant: "outline",
              color: "primary",
              fullWidth: !0,
              children: "Sign in"
            }, void 0, !1, {
              fileName: "app/routes/auth/login.tsx",
              lineNumber: 32,
              columnNumber: 13
            }, this)
          }, void 0, !1, {
            fileName: "app/routes/auth/login.tsx",
            lineNumber: 31,
            columnNumber: 11
          }, this)
        }, void 0, !1, {
          fileName: "app/routes/auth/login.tsx",
          lineNumber: 30,
          columnNumber: 9
        }, this)
      }, void 0, !1, {
        fileName: "app/routes/auth/login.tsx",
        lineNumber: 29,
        columnNumber: 7
      }, this)
    ]
  }, void 0, !0, {
    fileName: "app/routes/auth/login.tsx",
    lineNumber: 20,
    columnNumber: 5
  }, this);
}

// server-assets-manifest:@remix-run/dev/assets-manifest
var assets_manifest_default = { version: "844379ed", entry: { module: "/build/entry.client-ZJFU5ZGK.js", imports: ["/build/_shared/chunk-AZJXGLHA.js", "/build/_shared/chunk-JPDQG4UB.js", "/build/_shared/chunk-WL6OOE6Y.js", "/build/_shared/chunk-4IYZMDEG.js"] }, routes: { root: { id: "root", parentId: void 0, path: "", index: void 0, caseSensitive: void 0, module: "/build/root-GRR2LAYB.js", imports: ["/build/_shared/chunk-QSMFV4O5.js", "/build/_shared/chunk-E424YZWU.js"], hasAction: !1, hasLoader: !0, hasCatchBoundary: !0, hasErrorBoundary: !1 }, "routes/__layout": { id: "routes/__layout", parentId: "root", path: void 0, index: void 0, caseSensitive: void 0, module: "/build/routes/__layout-DGXJFAOH.js", imports: ["/build/_shared/chunk-UXMBXAI2.js", "/build/_shared/chunk-2GQYPODQ.js", "/build/_shared/chunk-KDU52ULV.js", "/build/_shared/chunk-6JVAVAYG.js"], hasAction: !1, hasLoader: !0, hasCatchBoundary: !0, hasErrorBoundary: !0 }, "routes/__layout/dashboard": { id: "routes/__layout/dashboard", parentId: "routes/__layout", path: "dashboard", index: void 0, caseSensitive: void 0, module: "/build/routes/__layout/dashboard-GWT5ZE2F.js", imports: ["/build/_shared/chunk-QVFN3AUQ.js", "/build/_shared/chunk-QSMFV4O5.js"], hasAction: !1, hasLoader: !0, hasCatchBoundary: !1, hasErrorBoundary: !1 }, "routes/__layout/index": { id: "routes/__layout/index", parentId: "routes/__layout", path: void 0, index: !0, caseSensitive: void 0, module: "/build/routes/__layout/index-OATCH7JL.js", imports: ["/build/_shared/chunk-E424YZWU.js"], hasAction: !1, hasLoader: !1, hasCatchBoundary: !1, hasErrorBoundary: !1 }, "routes/__layout/locations/$locationId": { id: "routes/__layout/locations/$locationId", parentId: "routes/__layout", path: "locations/:locationId", index: void 0, caseSensitive: void 0, module: "/build/routes/__layout/locations/$locationId-O27S3GCR.js", imports: void 0, hasAction: !1, hasLoader: !0, hasCatchBoundary: !1, hasErrorBoundary: !1 }, "routes/__layout/locations/index": { id: "routes/__layout/locations/index", parentId: "routes/__layout", path: "locations", index: !0, caseSensitive: void 0, module: "/build/routes/__layout/locations/index-M5T5MB22.js", imports: ["/build/_shared/chunk-AUYLHJJM.js", "/build/_shared/chunk-QVFN3AUQ.js", "/build/_shared/chunk-QSMFV4O5.js", "/build/_shared/chunk-E424YZWU.js"], hasAction: !1, hasLoader: !0, hasCatchBoundary: !1, hasErrorBoundary: !1 }, "routes/__layout/locations/new": { id: "routes/__layout/locations/new", parentId: "routes/__layout", path: "locations/new", index: void 0, caseSensitive: void 0, module: "/build/routes/__layout/locations/new-P5MVQHPC.js", imports: void 0, hasAction: !1, hasLoader: !1, hasCatchBoundary: !1, hasErrorBoundary: !1 }, "routes/__layout/nodes/index": { id: "routes/__layout/nodes/index", parentId: "routes/__layout", path: "nodes", index: !0, caseSensitive: void 0, module: "/build/routes/__layout/nodes/index-3TQWK27D.js", imports: ["/build/_shared/chunk-AUYLHJJM.js", "/build/_shared/chunk-QVFN3AUQ.js", "/build/_shared/chunk-QSMFV4O5.js", "/build/_shared/chunk-E424YZWU.js"], hasAction: !1, hasLoader: !0, hasCatchBoundary: !1, hasErrorBoundary: !1 }, "routes/__layout/nodes/new": { id: "routes/__layout/nodes/new", parentId: "routes/__layout", path: "nodes/new", index: void 0, caseSensitive: void 0, module: "/build/routes/__layout/nodes/new-VMDRGLME.js", imports: ["/build/_shared/chunk-QSMFV4O5.js", "/build/_shared/chunk-E424YZWU.js"], hasAction: !0, hasLoader: !1, hasCatchBoundary: !1, hasErrorBoundary: !1 }, "routes/__layout/profile": { id: "routes/__layout/profile", parentId: "routes/__layout", path: "profile", index: void 0, caseSensitive: void 0, module: "/build/routes/__layout/profile-G2OYLXPG.js", imports: void 0, hasAction: !1, hasLoader: !0, hasCatchBoundary: !1, hasErrorBoundary: !1 }, "routes/__layout/reports": { id: "routes/__layout/reports", parentId: "routes/__layout", path: "reports", index: void 0, caseSensitive: void 0, module: "/build/routes/__layout/reports-XIKXLGFO.js", imports: ["/build/_shared/chunk-QVFN3AUQ.js", "/build/_shared/chunk-QSMFV4O5.js"], hasAction: !1, hasLoader: !0, hasCatchBoundary: !1, hasErrorBoundary: !1 }, "routes/__layout/settings": { id: "routes/__layout/settings", parentId: "routes/__layout", path: "settings", index: void 0, caseSensitive: void 0, module: "/build/routes/__layout/settings-FAULQVNE.js", imports: ["/build/_shared/chunk-QVFN3AUQ.js", "/build/_shared/chunk-QSMFV4O5.js"], hasAction: !1, hasLoader: !0, hasCatchBoundary: !1, hasErrorBoundary: !1 }, "routes/__layout/settings/accounts": { id: "routes/__layout/settings/accounts", parentId: "routes/__layout/settings", path: "accounts", index: void 0, caseSensitive: void 0, module: "/build/routes/__layout/settings/accounts-WU6QX7HE.js", imports: void 0, hasAction: !1, hasLoader: !1, hasCatchBoundary: !1, hasErrorBoundary: !1 }, "routes/__layout/settings/variables": { id: "routes/__layout/settings/variables", parentId: "routes/__layout/settings", path: "variables", index: void 0, caseSensitive: void 0, module: "/build/routes/__layout/settings/variables-GAHTS6OU.js", imports: void 0, hasAction: !1, hasLoader: !1, hasCatchBoundary: !1, hasErrorBoundary: !1 }, "routes/__layout/tunnels/index": { id: "routes/__layout/tunnels/index", parentId: "routes/__layout", path: "tunnels", index: !0, caseSensitive: void 0, module: "/build/routes/__layout/tunnels/index-QY2X2TY6.js", imports: ["/build/_shared/chunk-QVFN3AUQ.js", "/build/_shared/chunk-QSMFV4O5.js", "/build/_shared/chunk-E424YZWU.js"], hasAction: !1, hasLoader: !0, hasCatchBoundary: !1, hasErrorBoundary: !1 }, "routes/auth": { id: "routes/auth", parentId: "root", path: "auth", index: void 0, caseSensitive: void 0, module: "/build/routes/auth-4SBI2QCD.js", imports: ["/build/_shared/chunk-QVFN3AUQ.js", "/build/_shared/chunk-6JVAVAYG.js"], hasAction: !0, hasLoader: !1, hasCatchBoundary: !1, hasErrorBoundary: !1 }, "routes/auth/callback": { id: "routes/auth/callback", parentId: "routes/auth", path: "callback", index: void 0, caseSensitive: void 0, module: "/build/routes/auth/callback-EHPJPPMI.js", imports: void 0, hasAction: !1, hasLoader: !0, hasCatchBoundary: !1, hasErrorBoundary: !1 }, "routes/auth/login": { id: "routes/auth/login", parentId: "routes/auth", path: "login", index: void 0, caseSensitive: void 0, module: "/build/routes/auth/login-YMNSGIFD.js", imports: ["/build/_shared/chunk-2GQYPODQ.js", "/build/_shared/chunk-KDU52ULV.js", "/build/_shared/chunk-QSMFV4O5.js", "/build/_shared/chunk-E424YZWU.js"], hasAction: !1, hasLoader: !0, hasCatchBoundary: !1, hasErrorBoundary: !1 }, "routes/auth/logout": { id: "routes/auth/logout", parentId: "routes/auth", path: "logout", index: void 0, caseSensitive: void 0, module: "/build/routes/auth/logout-BKJDXNGK.js", imports: void 0, hasAction: !1, hasLoader: !0, hasCatchBoundary: !1, hasErrorBoundary: !1 } }, url: "/build/manifest-844379ED.js" };

// server-entry-module:@remix-run/dev/server-build
var assetsBuildDirectory = "public/build", publicPath = "/build/", entry = { module: entry_server_exports }, routes = {
  root: {
    id: "root",
    parentId: void 0,
    path: "",
    index: void 0,
    caseSensitive: void 0,
    module: root_exports
  },
  "routes/__layout": {
    id: "routes/__layout",
    parentId: "root",
    path: void 0,
    index: void 0,
    caseSensitive: void 0,
    module: layout_exports
  },
  "routes/__layout/locations/$locationId": {
    id: "routes/__layout/locations/$locationId",
    parentId: "routes/__layout",
    path: "locations/:locationId",
    index: void 0,
    caseSensitive: void 0,
    module: locationId_exports
  },
  "routes/__layout/locations/index": {
    id: "routes/__layout/locations/index",
    parentId: "routes/__layout",
    path: "locations",
    index: !0,
    caseSensitive: void 0,
    module: locations_exports
  },
  "routes/__layout/locations/new": {
    id: "routes/__layout/locations/new",
    parentId: "routes/__layout",
    path: "locations/new",
    index: void 0,
    caseSensitive: void 0,
    module: new_exports
  },
  "routes/__layout/tunnels/index": {
    id: "routes/__layout/tunnels/index",
    parentId: "routes/__layout",
    path: "tunnels",
    index: !0,
    caseSensitive: void 0,
    module: tunnels_exports
  },
  "routes/__layout/nodes/index": {
    id: "routes/__layout/nodes/index",
    parentId: "routes/__layout",
    path: "nodes",
    index: !0,
    caseSensitive: void 0,
    module: nodes_exports
  },
  "routes/__layout/dashboard": {
    id: "routes/__layout/dashboard",
    parentId: "routes/__layout",
    path: "dashboard",
    index: void 0,
    caseSensitive: void 0,
    module: dashboard_exports
  },
  "routes/__layout/nodes/new": {
    id: "routes/__layout/nodes/new",
    parentId: "routes/__layout",
    path: "nodes/new",
    index: void 0,
    caseSensitive: void 0,
    module: new_exports2
  },
  "routes/__layout/settings": {
    id: "routes/__layout/settings",
    parentId: "routes/__layout",
    path: "settings",
    index: void 0,
    caseSensitive: void 0,
    module: settings_exports
  },
  "routes/__layout/settings/variables": {
    id: "routes/__layout/settings/variables",
    parentId: "routes/__layout/settings",
    path: "variables",
    index: void 0,
    caseSensitive: void 0,
    module: variables_exports
  },
  "routes/__layout/settings/accounts": {
    id: "routes/__layout/settings/accounts",
    parentId: "routes/__layout/settings",
    path: "accounts",
    index: void 0,
    caseSensitive: void 0,
    module: accounts_exports
  },
  "routes/__layout/profile": {
    id: "routes/__layout/profile",
    parentId: "routes/__layout",
    path: "profile",
    index: void 0,
    caseSensitive: void 0,
    module: profile_exports
  },
  "routes/__layout/reports": {
    id: "routes/__layout/reports",
    parentId: "routes/__layout",
    path: "reports",
    index: void 0,
    caseSensitive: void 0,
    module: reports_exports
  },
  "routes/__layout/index": {
    id: "routes/__layout/index",
    parentId: "routes/__layout",
    path: void 0,
    index: !0,
    caseSensitive: void 0,
    module: layout_exports2
  },
  "routes/auth": {
    id: "routes/auth",
    parentId: "root",
    path: "auth",
    index: void 0,
    caseSensitive: void 0,
    module: auth_exports
  },
  "routes/auth/callback": {
    id: "routes/auth/callback",
    parentId: "routes/auth",
    path: "callback",
    index: void 0,
    caseSensitive: void 0,
    module: callback_exports
  },
  "routes/auth/logout": {
    id: "routes/auth/logout",
    parentId: "routes/auth",
    path: "logout",
    index: void 0,
    caseSensitive: void 0,
    module: logout_exports
  },
  "routes/auth/login": {
    id: "routes/auth/login",
    parentId: "routes/auth",
    path: "login",
    index: void 0,
    caseSensitive: void 0,
    module: login_exports
  }
};

// server.js
var handleRequest2 = createPagesFunctionHandler({
  build: server_build_exports,
  mode: "development",
  getLoadContext: (context) => context
});
function onRequest(context) {
  return handleRequest2(context);
}
export {
  onRequest
};
/*!
 * cookie
 * Copyright(c) 2012-2014 Roman Shtylman
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */
/**
   * table-core
   *
   * Copyright (c) TanStack
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   */
/**
 * @license React
 * react-dom-server-legacy.browser.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * @license React
 * react-dom-server.browser.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * @license React
 * react-jsx-dev-runtime.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * @license React
 * react-jsx-runtime.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * @license React
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * @remix-run/cloudflare v1.7.4
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
/**
 * @remix-run/cloudflare-pages v1.7.4
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
/**
 * @remix-run/react v1.7.4
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
/**
 * @remix-run/server-runtime v1.7.4
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
/**
 * React Router DOM v6.3.0
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
/**
 * React Router v6.3.0
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
/**
 * react-table
 *
 * Copyright (c) TanStack
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
/**
* @license React
* use-sync-external-store-shim.production.min.js
*
* Copyright (c) Facebook, Inc. and its affiliates.
*
* This source code is licensed under the MIT license found in the
* LICENSE file in the root directory of this source tree.
*/
/**
* @license React
* use-sync-external-store-shim/with-selector.production.min.js
*
* Copyright (c) Facebook, Inc. and its affiliates.
*
* This source code is licensed under the MIT license found in the
* LICENSE file in the root directory of this source tree.
*/
/**
* @remix-run/server-runtime v1.6.5
*
* Copyright (c) Remix Software Inc.
*
* This source code is licensed under the MIT license found in the
* LICENSE.md file in the root directory of this source tree.
*
* @license MIT
*/
//# sourceMappingURL=/build/[[path]].js.map
